game.import("extension", function (lib, game, ui, get, ai, _status) {
    return {
        name: "崩崩崩", editable: false,
        content: function (config, pack) {
            //let loadCSS = false;

            /*
            势力代码
            */
            //天命：bhtianming
            var style3 = document.createElement('style');
            style3.innerHTML = ".player .identity[data-color='bhtianming'],";
            style3.innerHTML += "div[data-nature='bhtianming'],";
            style3.innerHTML += "span[data-nature='bhtianming'] {text-shadow: black 0 0 1px,rgba(0, 205, 0,1) 0 0 2px,rgba(0, 205, 0,1) 0 0 5px,rgba(0, 205, 0,1) 0 0 10px,rgba(0, 205, 0,1) 0 0 10px}";
            style3.innerHTML += "div[data-nature='bhtianmingm'],";
            style3.innerHTML += "span[data-nature='bhtianmingm'] {text-shadow: black 0 0 1px,rgba(0, 205, 0,1) 0 0 2px,rgba(0, 205, 0,1) 0 0 5px,rgba(0, 205, 0,1) 0 0 5px,rgba(0, 205, 0,1) 0 0 5px,black 0 0 1px;}";
            style3.innerHTML += "div[data-nature='bhtianmingmm'],";
            style3.innerHTML += "span[data-nature='bhtianmingmm'] {text-shadow: black 0 0 1px,rgba(0, 205, 0,1) 0 0 2px,rgba(0, 205, 0,1) 0 0 2px,rgba(0, 205, 0,1) 0 0 2px,rgba(0, 205, 0,1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style3);

            lib.group.add('bhtianming');
            lib.translate.bhtianming = '天命';
            lib.translate.bhtianming2 = '天命';
            lib.groupnature.bhtianming = 'bhtianming';

            //世界蛇:bhshijieshe
            var style4 = document.createElement('style');
            style4.innerHTML = ".player .identity[data-color='bhshijieshe'],";
            style4.innerHTML += "div[data-nature='bhshijieshe'],";
            style4.innerHTML += "span[data-nature='bhshijieshe'] {text-shadow: black 0 0 1px,rgba(79, 79, 79,1) 0 0 2px,rgba(79, 79, 79,1) 0 0 5px,rgba(79, 79, 79,1) 0 0 10px,rgba(79, 79, 79,1) 0 0 10px}";
            style4.innerHTML += "div[data-nature='bhshijieshem'],";
            style4.innerHTML += "span[data-nature='bhshijieshem'] {text-shadow: black 0 0 1px,rgba(79, 79, 79,1) 0 0 2px,rgba(79, 79, 79,1) 0 0 5px,rgba(79, 79, 79,1) 0 0 5px,rgba(79, 79, 79,1) 0 0 5px,black 0 0 1px;}";
            style4.innerHTML += "div[data-nature='bhshijieshemm'],";
            style4.innerHTML += "span[data-nature='bhshijieshemm'] {text-shadow: black 0 0 1px,rgba(79, 79, 79,1) 0 0 2px,rgba(79, 79, 79,1) 0 0 2px,rgba(79, 79, 79,1) 0 0 2px,rgba(79, 79, 79,1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style4);

            lib.group.add('bhshijieshe');
            lib.translate.bhshijieshe = '蛇';
            lib.translate.bhshijieshe2 = '蛇';
            lib.groupnature.bhshijieshe = 'bhshijieshe';

            //休伯利安:bhxiubolian
            var style5 = document.createElement('style');
            style5.innerHTML = ".player .identity[data-color='bhxiubolian'],";
            style5.innerHTML += "div[data-nature='bhxiubolian'],";
            style5.innerHTML += "span[data-nature='bhxiubolian'] {text-shadow: black 0 0 1px,rgba(255, 215, 0,1) 0 0 2px,rgba(255, 215, 0,1) 0 0 5px,rgba(255, 215, 0,1) 0 0 10px,rgba(255, 215, 0,1) 0 0 10px}";
            style5.innerHTML += "div[data-nature='bhxiubolianm'],";
            style5.innerHTML += "span[data-nature='bhxiubolianm'] {text-shadow: black 0 0 1px,rgba(255, 215, 0,1) 0 0 2px,rgba(255, 215, 0,1) 0 0 5px,rgba(255, 215, 0,1) 0 0 5px,rgba(255, 215, 0,1) 0 0 5px,black 0 0 1px;}";
            style5.innerHTML += "div[data-nature='bhxiubolianmm'],";
            style5.innerHTML += "span[data-nature='bhxiubolianmm'] {text-shadow: black 0 0 1px,rgba(255, 215, 0,1) 0 0 2px,rgba(255, 215, 0,1) 0 0 2px,rgba(255, 215, 0,1) 0 0 2px,rgba(255, 215, 0,1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style5);

            lib.group.add('bhxiubolian');
            lib.translate.bhxiubolian = '休伯利安';
            lib.translate.bhxiubolian2 = '休伯利安';
            lib.groupnature.bhxiubolian = 'bhxiubolian';


            //逆熵:bhnishang
            var style6 = document.createElement('style');
            style6.innerHTML = ".player .identity[data-color='bhnishang'],";
            style6.innerHTML += "div[data-nature='bhnishang'],";
            style6.innerHTML += "span[data-nature='bhnishang'] {text-shadow: black 0 0 1px,rgba(30, 144, 255,1) 0 0 2px,rgba(30, 144, 255,1) 0 0 5px,rgba(30, 144, 255,1) 0 0 10px,rgba(30, 144, 255,1) 0 0 10px}";
            style6.innerHTML += "div[data-nature='bhnishangm'],";
            style6.innerHTML += "span[data-nature='bhnishangm'] {text-shadow: black 0 0 1px,rgba(30, 144, 255,1) 0 0 2px,rgba(30, 144, 255,1) 0 0 5px,rgba(30, 144, 255,1) 0 0 5px,rgba(30, 144, 255,1) 0 0 5px,black 0 0 1px;}";
            style6.innerHTML += "div[data-nature='bhnishangmm'],";
            style6.innerHTML += "span[data-nature='bhnishangmm'] {text-shadow: black 0 0 1px,rgba(30, 144, 255,1) 0 0 2px,rgba(30, 144, 255,1) 0 0 2px,rgba(30, 144, 255,1) 0 0 2px,rgba(30, 144, 255,1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style6);

            lib.group.add('bhnishang');
            lib.translate.bhnishang = '逆熵';
            lib.translate.bhnishang2 = '逆熵';
            lib.groupnature.bhnishang = 'bhnishang';

            //崩坏:bhbenghuai
            var style7 = document.createElement('style');
            style7.innerHTML = ".player .identity[data-color='bhbenghuai'],";
            style7.innerHTML += "div[data-nature='bhbenghuai'],";
            style7.innerHTML += "span[data-nature='bhbenghuai'] {text-shadow: black 0 0 1px,rgba(255, 0, 255,1) 0 0 2px,rgba(255, 0, 255,1) 0 0 5px,rgba(255, 0, 255,1) 0 0 10px,rgba(255, 0, 255,1) 0 0 10px}";
            style7.innerHTML += "div[data-nature='bhbenghuaim'],";
            style7.innerHTML += "span[data-nature='bhbenghuaim'] {text-shadow: black 0 0 1px,rgba(255, 0, 255,1) 0 0 2px,rgba(255, 0, 255,1) 0 0 5px,rgba(255, 0, 255,1) 0 0 5px,rgba(255, 0, 255,1) 0 0 5px,black 0 0 1px;}";
            style7.innerHTML += "div[data-nature='bhbenghuaimm'],";
            style7.innerHTML += "span[data-nature='bhbenghuaimm'] {text-shadow: black 0 0 1px,rgba(255, 0, 255,1) 0 0 2px,rgba(255, 0, 255,1) 0 0 2px,rgba(255, 0, 255,1) 0 0 2px,rgba(255, 0, 255,1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style7);

            lib.group.add('bhbenghuai');
            lib.translate.bhbenghuai = '崩坏';
            lib.translate.bhbenghuai2 = '崩坏';
            lib.groupnature.bhbenghuai = 'bhbenghuai';

            //众英杰:bhzhongyingjie
            var style8 = document.createElement('style');
            style8.innerHTML = ".player .identity[data-color='bhzhongyingjie'],";
            style8.innerHTML += "div[data-nature='bhzhongyingjie'],";
            style8.innerHTML += "span[data-nature='bhzhongyingjie'] {text-shadow: black 0 0 1px,rgba(105, 156, 156,1) 0 0 2px,rgba(105, 156, 156,1) 0 0 5px,rgba(105, 156, 156,1) 0 0 10px,rgba(105, 156, 156,1) 0 0 10px}";
            style8.innerHTML += "div[data-nature='bhzhongyingjiem'],";
            style8.innerHTML += "span[data-nature='bhzhongyingjiem'] {text-shadow: black 0 0 1px,rgba(105, 156, 156,1) 0 0 2px,rgba(105, 156, 156,1) 0 0 5px,rgba(105, 156, 156,1) 0 0 5px,rgba(105, 156, 156,1) 0 0 5px,black 0 0 1px;}";
            style8.innerHTML += "div[data-nature='bhzhongyingjiemm'],";
            style8.innerHTML += "span[data-nature='bhzhongyingjiemm'] {text-shadow: black 0 0 1px,rgba(105, 156, 156,1) 0 0 2px,rgba(105, 156, 156,1) 0 0 2px,rgba(105, 156, 156,1) 0 0 2px,rgba(105, 156, 156,1) 0 0 2px,black 0 0 1px;}";
            document.head.appendChild(style8);

            lib.group.add('bhzhongyingjie');
            lib.translate.bhzhongyingjie = '众英杰';
            lib.translate.bhzhongyingjie2 = '众英杰';
            lib.groupnature.bhzhongyingjie = 'bhzhongyingjie';
            //699c9c 105, 156, 156 青色

            /////十周年UI势力
            var tenUi = document.createElement('style');
            ////tenUi.innerHTML = ".player>.camp-zone[data-camp='meng']>.camp-back {background: linear-gradient(to bottom, rgb(218, 165, 32), rgb(218, 165, 32));}";
            tenUi.innerHTML = ".player>.camp-zone[data-camp='bhxiubolian']>.camp-back {background: linear-gradient(to bottom, rgb(255, 215, 0), rgb(255, 215, 0));}";
            tenUi.innerHTML += ".player>.camp-zone[data-camp='bhshijieshe']>.camp-back {background: linear-gradient(to bottom, rgb(79,79,79), rgb(79,79,79));}";
            tenUi.innerHTML += ".player>.camp-zone[data-camp='bhtianming']>.camp-back {background: linear-gradient(to bottom, rgb(0,100,0), rgb(0,100,0));}";
            tenUi.innerHTML += ".player>.camp-zone[data-camp='bhnishang']>.camp-back {background: linear-gradient(to bottom, rgb(0,191,255), rgb(0,191,255));}";
            tenUi.innerHTML += ".player>.camp-zone[data-camp='bhbenghuai']>.camp-back {background: linear-gradient(to bottom, rgb(200, 10, 200), rgb(200, 10, 200));}";
            tenUi.innerHTML += ".player>.camp-zone[data-camp='bhzhongyingjie']>.camp-back {background: linear-gradient(to bottom, rgb(70, 130, 130), rgb(70, 130, 130));}";

            tenUi.innerHTML += ".player>.camp-zone[data-camp='bhxiubolian']>.camp-name {text-shadow: 0 0 5px rgb(255,140,0), 0 0 10px rgb(255,140,0), 0 0 15px rgb(255,140,0);}";
            tenUi.innerHTML += ".player>.camp-zone[data-camp='bhshijieshe']>.camp-name {text-shadow: 0 0 5px rgb(79,79,79), 0 0 10px rgb(79,79,79), 0 0 15px rgb(79,79,79);}";
            tenUi.innerHTML += ".player>.camp-zone[data-camp='bhtianming']>.camp-name {text-shadow: 0 0 5px rgb(0, 205, 0), 0 0 10px rgb(0, 205, 0), 0 0 15px rgb(0, 205, 0);}";
            tenUi.innerHTML += ".player>.camp-zone[data-camp='bhnishang']>.camp-name {text-shadow: 0 0 5px rgb(30, 144, 255), 0 0 10px rgb(30, 144, 255), 0 0 15px rgb(30, 144, 255);}";
            tenUi.innerHTML += ".player>.camp-zone[data-camp='bhbenghuai']>.camp-name {text-shadow: 0 0 5px rgb(255, 0, 255), 0 0 10px rgb(255, 0, 255), 0 0 15px rgb(255, 0, 255);}";
            tenUi.innerHTML += ".player>.camp-zone[data-camp='bhzhongyingjie']>.camp-name {text-shadow: 0 0 5px rgb(105, 156, 156), 0 0 10px rgb(105, 156, 156), 0 0 15px rgb(105, 156, 156);}";

            document.head.appendChild(tenUi);

            lib.init.css(lib.assetURL + 'extension/崩崩崩', 'extension');
            /*
            库技能
            */
            //爆发状态
            lib.element.player.Burst = function (end) {
                var player = this;
                var next = game.createEvent('Burst');
                next.player = this;
                next.end = end;
                for (var i = 0; i < arguments.length; i++) {
                    if (typeof arguments[i] == 'string') {
                        if (arguments[i] == 'Infinity') {
                            next.Infinity = true;
                        }
                    }
                }
                next.setContent('Burst');
                return next;
            }
            lib.element.content.Burst = function () {
                'step 0'
                if (event.Infinity == true) {
                    player.addSkill('Burst')
                    player.markSkill('Burst')
                    game.log(player, '进入了永久<font color=\'red\'>爆发状态</font>')
                    event.trigger('burst');
                    event.finish()
                }
                'step 1'
                if (event.end) player.addTempSkill('Burst', event.end)
                else player.addTempSkill('Burst')
                player.markSkill('Burst')
                event.trigger('burst');
                game.log(player, '进入了<font color=\'red\'>爆发状态</font>')
            }
            lib.element.player.isBurst = function () {
                return this.hasSkill('Burst');
            }
            lib.element.player.unBurst = function () {
                var player = this;
                var next = game.createEvent('unBurst');
                next.player = this;
                next.setContent('unBurst');
                return next;
            }
            lib.element.content.unBurst = function () {
                player.removeSkill('Burst');
                event.trigger('unBurst');
                // game.log(player, '退出了<font color=\'red\'>爆发状态</font>');
            }
            //SP
            lib.element.player.gainSP=function(num,source){
                var player = this;
                var next = game.createEvent('gainSP');
                //player
                next.player = this;
                //num
                if(typeof num=='number'){
                    if(num<=0) next.num=0;
                    next.num = num;
                } else next.num=1;
                //source
                if(typeof source=='string'){
                    if(source!='nosource') next.source=player;
                    else next.source=undefined;
                } else {
                    if(source!=undefined) next.source=source;
                    else next.source=player;
                }
                //content
                next.setContent('gainSP');
                return next;
            }
            lib.element.content.gainSP = function () {
                'step 0'
                if(!player.storage.bhsp) player.storage.bhsp=0;
                'step 1'
                if(event.num<=0) return;
                player.storage.bhsp+=event.num;
                player.markSkill('bhsp');
                event.trigger('gainSP');
                game.log(player, '获得了',event.num,'点<font color=\'orange\'>SP</font>');
                player.syncStorage('bhsp');
            }
            lib.element.player.loseSP=function(num,source){
                var player = this;
                var next = game.createEvent('loseSP');
                //player
                next.player = this;
                //num
                if(typeof num=='number'){
                    if(num<=0) next.num=0;
                    else next.num=num;
                } else next.num=1;
                //source
                if(typeof source=='string'){
                    if(source!='nosource') next.source=player;
                    else next.source=undefined;
                } else {
                    if(source!=undefined) next.source=source;
                    else next.source=player;
                }
                //content
                next.setContent('loseSP');
                return next;
            }
            lib.element.content.loseSP = function () {
                'step 0'
                if(!player.storage.bhsp) event.finish();
                'step 1'
                if(event.num<=0) return;
                if(event.num>player.storage.bhsp) event.num=player.storage.bhsp;
                player.storage.bhsp-=event.num;
                if(player.storage.bhsp==0) player.unmarkSkill('bhsp');
                event.trigger('loseSP');
                game.log(player, '失去了',event.num,'点<font color=\'orange\'>SP</font>');
                player.syncStorage('bhsp');
            }
            lib.element.player.countSP = function () {
                if(!this.storage.bhsp) return 0;
                return this.storage.bhsp;
            }
            //护盾
            lib.element.player.gainHudun=function(cards,source){
                var player=this;
                var next=game.createEvent('gainHudun');
                //player
                next.player=player;
                //cards
                next.cards=cards;
                //source
                if(typeof source=='string'){
                    if(source!='nosource') next.source=player;
                    else next.source=undefined;
                } else {
                    if(source!=undefined) next.source=source;
                    else next.source=player;
                }
                //content
                next.setContent('gainHudun');
                return next;
            }
            lib.element.content.gainHudun=function(){
                'step 0'
                if(!event.cards) return;
                event.num=event.cards.length;
                if(event.source==undefined) player.addToExpansion(event.cards,'gain2').gaintag.add('bhhudun');
                else player.addToExpansion(event.cards,event.source,'give').gaintag.add('bhhudun');
                event.trigger('gainHudun');
                game.log(player, '获得了',get.cnNumber(event.cards.length),'张<font color=\'gray\'>盾</font>');
            }
            lib.element.player.loseHudun=function(num,source,type){
                var player=this;
                var next=game.createEvent('loseHudun');
                //player
                next.player=player;
                //num
                if(typeof num=='number'){
                    if(num<=0) next.num=0;
                    else next.num=num;
                } else next.num=1;
                //source
                if(typeof source=='string'){
                    if(source!='nosource') next.source=player;
                    else next.source=undefined;
                } else {
                    if(source!=undefined) next.source=source;
                    else next.source=player;
                }
                //type
                if(typeof type=='string'){
                    if(['reduce','damage'].contains(type)) next.type=type;
                    else next.type='reduce';
                } else {
                    next.type='reduce';
                }
                //content
                next.setContent('loseHudun');
                return next;
            }
            lib.element.content.loseHudun=function(){
                'step 0'
                if(player.getExpansions('bhhudun').length==0) event.finish();
                'step 1'
                if(event.num<=0) return;

                var cards=player.getExpansions('bhhudun');
                var cards2=[],card,type;

                if(event.type=='damage') type='受到伤害';
                else type='衰减';
                //if(event.type=='damage') player.storage.bhhudun_overflow=true;

                if(event.num>cards.length) event.num=cards.length;
                for(var i=0;i<event.num;i++){
                    card=cards.randomGet();
                    cards2.push(card);
                    cards.remove(card);
                }
                event.cards=cards2;

                if(event.type=='reduce') game.playAudio('..','extension','崩崩崩/audio/jizhi','bhhudun_reduce1');

                player.loseToDiscardpile(cards2);

                event.trigger('loseHudun');

                game.log(player, '因'+type,'失去了'+get.cnNumber(event.num)+'张<font color=\'gray\'>盾</font>');
            }
            lib.element.player.giveHudun=function(num,target){
                var player=this;
                var next=game.createEvent('giveHudun');
                //player
                next.player=player;
                //num
                if(typeof num=='number'){
                    if(num<=0) next.num=0;
                    else next.num=num;
                } else next.num=1;
                //target
                if(target==undefined) next.target=player;
                else next.target=target;
                //content
                next.setContent('giveHudun');
                return next;
            }
            lib.element.content.giveHudun=function(){
                'step 0'
                if(player.getExpansions('bhhudun').length==0) event.finish();
                'step 1'
                if(event.num<=0) return;
                if(event.target==player) return;
                var cards=player.getExpansions('bhhudun');
                var cards2=[],card;
                if(event.num>cards.length) event.num=cards.length;
                for(var i=0;i<event.num;i++){
                    card=cards.randomGet();
                    cards2.push(card);
                    cards.remove(card);
                }
                //player.$give(cards2,event.target);
                event.target.gainHudun(cards2,player);
                player.syncStorage('bhhudun');
                if(player.getExpansions('bhhudun').length==0) player.unmarkSkill('bhhudun');
                event.trigger('giveHudun');
                game.log(player,'转移了'+get.cnNumber(event.num)+'张<font color=\'gray\'>盾</font>','给',event.target);
            }
            lib.skill._bhhudun_damage={
                trigger:{
                    player:'damageBegin1',
                },
                forced:true,
                charlotte:true,
                unique:true,
                filter:function(event,player){
                    return player.getExpansions('bhhudun').length>0;
                },
                content:function(){
                    'step 0'
                    event.baseNum=2;
                    if(trigger.bhhudun_weak) event.baseNum=1;
                    var num=player.getExpansions('bhhudun').length;
                    event.num=trigger.num*event.baseNum>num?num:trigger.num*event.baseNum;

                    if(!trigger.source) event.source='nosource';
                    else event.source=trigger.source;

                    if(event.num==num) game.playAudio('..','extension','崩崩崩/audio/jizhi','bhhudun_damage3');
                    else if(trigger.num>1) game.playAudio('..','extension','崩崩崩/audio/jizhi','bhhudun_damage2');
                    else game.playAudio('..','extension','崩崩崩/audio/jizhi','bhhudun_damage1');

                    player.loseHudun(event.num,event.source,'damage');
                    'step 1'
                    trigger.num-=parseInt(event.num/event.baseNum);
                    if(trigger.num>0) trigger.bhhudun_overflow=true;
                },
            }
            lib.skill._bhhudun_reduce={
                trigger:{
                    player:'phaseBegin',
                },
                forced:true,
                charlotte:true,
                unique:true,
                filter:function(event,player){
                    return player.getExpansions('bhhudun').length>0;
                },
                content:function(){
                    'step 0'
                    event.num = Math.max(parseInt(player.getExpansions('bhhudun').length/2), 1);
                    player.loseHudun(event.num,'nosource','reduce');
                },
            }
            
            /*
            全局技能
            */
            lib.skill.Burst = {
                marktext: "爆发",
                forced:true,
                charlotte:true,
                unique:true,
                intro: {
                    name: '爆发',
                    content: function (player, skill) {
                        return '已进入<font color=\'red\'>爆发状态</font>';
                    },
                },
                onremove:function(player){
                    game.log(player, '退出了<font color=\'red\'>爆发状态</font>');
                },
            };
            lib.skill.bhsp={
                marktext: "SP",
                forced:true,
                unique:true,
                charlotte:true,
                intro: {
                    name: "SP",
                    content: function (storage,player) {
                        return '共有'+player.storage.bhsp+'点<font color=\'orange\'>SP</font>';
                    },
                    markcount:function(storage,player){
                        return player.storage.bhsp;
                    },
                },
            };
            lib.skill.bhhudun={
                marktext:"盾",
                forced:true,
                charlotte:true,
                unique:true,
                intro:{
                    name:"盾",
                    content:"expansion",
                    markcount:"expansion",
                },
            };
            //阵亡语音
            lib.skill._bbb_zhenwangAudio={
                trigger:{player:'dieBegin',},
                //direct:true,
                priority:2,
                forced:true,
                unique:true,
                popup:false,
                content:function(){
                    game.playAudio('..','extension','崩崩崩/audio/zhenwang',trigger.player.name);					          					        
                },
            };

            // 24年春节活动
            // lib.skill._bhgongmingSkill={
            //     enable:'phaseUse',
            //     forced:true,
            //     unique:true,
            //     usable:1,
            //     content:function(){
            //         'step 0'
            //         event.list = [
            //             'bh_kiana',
            //             'bh_mei',
            //             'bh_bronya',
            //             'bh_himeko',
            //             'bh_theresa',
            //             'bh_sakura',
            //             'bh_kallen',
            //             'bh_hua',
            //             'bh_rita',
            //             'bh_vodka',
            //             'bh_seele',
            //             'bh_durandal',
            //             'bh_linkage',
            //             'bh_xiubolian',
            //             'bh_stigmata_tianming',
            //             'bh_stigmata_yuanchuang',
            //             'bh_stigmata_shenzhou',
            //             'bh_stigmata_zhanguo',
            //             'bh_stigmata_oulu',
            //             'bh_stigmata_kexue',
            //             'bh_stigmata_ziyi',
            //             'bh_stigmata_tangcai',
            //             'bh_stigmata_buyi',
            //             'bh_stigmata_xuxu',
            //             'bh_stigmata_zhejian',
            //             'bh_ex_zhuhuo',
            //             'bh_ex_qizongzui',
            //             'bh_ex_shishen',
            //             'bh_ex_houbeng',
            //             'bh_dai'
            //         ];
            //         event.namelist=[];
            //         if(['bhtianming','bhnishang','bhxiubolian','bhshijieshe','bhbenghuai','bhzhongyingjie'].contains(player.group)){
            //             for(let i of event.list){
            //                 if(lib.characterSort.bbb[i].contains(player.name)) event.nameGroup=i;
            //             }

            //             event.namelist.addArray(lib.characterSort.bbb[event.nameGroup]);
            //         } else {
            //             event.nameGroup = player.group;

            //             if(_status.characterlist){
            //                 for(var i=0;i<_status.characterlist.length;i++){
            //                     var name=_status.characterlist[i];
            //                     if(lib.character[name][1]== event.nameGroup ) event.namelist.push(name);
            //                 }
            //             }
            //             else if(_status.connectMode){
            //                 event.namelist=get.charactersOL(function(i){
            //                     return lib.character[i][1]!= event.nameGroup;
            //                 });
            //             }
            //             else{
            //                 event.namelist=get.gainableCharacters(function(info){
            //                     return info[1]== event.nameGroup;
            //                 });
            //             }
            //         }

            //         // game.log(player.name,event.namelist);
            //         if(!event.namelist) {
            //             player.say("没人...吗？");
            //             player.draw();
            //             game.log(player , "向英灵之座呼喊，竟无一人回应...");
            //             event.finish();
            //         }
            //         else event.namelist.remove(player.name);
            //         'step 1'
            //         var list=[];
            //         i = event.namelist.randomGet();
            //         var name='bhqianjieyicheng_in_skill1_'+i;
            //         if (!lib.card[name]) {
            //             var info = {
            //                 fullimage: true,
            //                 type: "同源角色",
            //                 image: 'ext:崩崩崩/image/' + i + '.jpg',
            //                 suit:null,
            //                 number:null,
            //             }
            //             lib.card[name] = info;
            //             lib.translate[name] = get.translation(i);
            //             lib.translate[name + '_info'] = '同源角色：'+get.translation(i);
            //         }
            //         list.push(game.createCard(name,' ',0));
            //         player.chooseButton(['你向英灵之座呼喊，回应你的是...',list],true).set('ai',function(button){
            //             return [1,0,2].randomGet();
            //         });
            //         'step 2'
            //         event.cname=result.links[0].name.slice(27);
            //         event.skillList=lib.character[event.cname][3];
            //         //game.log(event.skillList);
            //         if(!event.skillList.length) event.finish();
            //         else {
            //             var gp = game.filterPlayer(function(current){
            //                 return current.name == event.cname;
            //             });
            //             if(gp.length){
            //                 for(var i of gp){
            //                     i.draw();
            //                 }
            //             }
            //         }
            //         'step 3'
            //         player.chooseButton(['请选择一个技能获得之',[event.skillList,'vcard']],true).set('ai',function(button){
            //             return [1,0,2].randomGet();
            //         });
            //         'step 4'
            //         event.skillname=result.links[0];
            //         //game.log(event.skillname[2]);
            //         if(player.hasSkill(event.skillname[2])) player.draw(2);
            //         else {
            //             player.addSkill(event.skillname[2]);
            //             game.log(player,'获得了来自同源角色','<font color=pink>',event.cname,'</font>','的技能','#g【'+get.translation(event.skillname[2])+'】');

            //             if(!player.storage._bhgongmingSkill) player.storage._bhgongmingSkill = 0;
            //             player.storage._bhgongmingSkill ++;
            //             game.log(player.storage._bhgongmingSkill);
            //             if(player.storage._bhgongmingSkill > player.hp-1 && player.storage._bhgongmingSkill < player.maxHp && [-1,-1,player.hp-2].randomGet()<0){
            //                 player.chooseToDiscard('这份共鸣的力量似乎已经濒临你的极限，还是弃掉一些牌明哲保身吧...','he',Math.min(player.countCards('he'),player.storage._bhgongmingSkill-player.hp),true).set('ai',function(card){
            //                     return 8-get.value(card);
            //                 });
            //             } else if(player.storage._bhgongmingSkill > player.maxHp && [-1,-1,player.maxHp-3].randomGet()<0){
            //                 player.chooseControl('接受').set('prompt','共鸣的力量已经溢出了你的躯体，这不是你所能承受的。');
            //                 player.loseMaxHp();
            //             }
            //         }
            //     },
            //     ai:{
            //         order:10,
            //         result:{
            //             player:2,
            //         },
            //     },
            // };
            // lib.translate._bhgongmingSkill = '共鸣';
            // lib.translate._bhgongmingSkill_info = "每个出牌阶段，你可以向英灵之座呼喊，以寻求与同源的自己共鸣。<br>若有人回应，定能给予你一些帮助...也许？<br>为表呼唤之虔诚，每个出牌阶段仅限一次。";

            /*补给系统*/
            // 纯净版，暂无补给系统
            


            /*
                武将分级
            */
            //平凡武将
            lib.rank.rarity.junk.addArray([
                "bhbailian", "bhyouxia", "bhfeihong", "bhshanchui", "bhzhanchangjifeng",
                "bhxialuote", "bhshalianna", "bhkaipule", "bhliewenhuke", "bhfulankensitan"
            ]);
            //精品武将
            lib.rank.rarity.rare.addArray([
                "bhshengnvqidao", "bhyueguang", "bhguikai", "bhqiangxi", "bhyingwuchongji",
                "bhciyuan", "bhhuixingqudong", "bhzhanche", "bhmichenghaitu", "bhyinlangdeliming", "bhjidizhanren", "bhkaixuan",
                "bhshenhong", "bhshenensongge", "bhyuexiachuyong", "bhyinghuolunwu", "bhnishenwunv", "bhdiliuyexiangqu",
                "bhxunyu", "bhyuelun", "bhanqiangwei", "bhlanmeitegong", "bhyingtaozhadan", "bhrongguang", "bhweiduoliya",
                "bhaotuoweila", "bhlinaerduo", "bhbanbenlongma", "bhaidisheng", "bhaiyinsitan", "bhnuobeier", "bhdanding", "bhtailesi",
                "bhqizongzui_baonu", "bhqizongzui_landuo", "bhqizongzui_baoshi"
            ]);
            //史诗武将
            lib.rank.rarity.epic.addArray([
                "bhkongzhilvzhe", "bhtianqiongyouxia", "bhpoxiaoqiangxi", "bhxuedijuji",
                "bhyiduheiheqinshi", "bhyueshi", "bhshiyue", "bhyeyinchongxia", "bhjinyang", "bhchiling", "bhyingtie",
                "bhkuangrelandiao", "bhyanyexingyuan", "bhyuepo", "bhduanzuihuangnv", "bhkalian", "bhyang", "bhdanzhu",
                "bhjinshengtan", "bhzhangheng", "bhzuoluo", "bhafujiadeluo", "bhdilake", "bhjialilue", "bhtesila", "bhmikailangjiluo", "bhhua",
                "Argon", "bhwumianliming", "bhshichuan", "bhyilishabai", "bhlier", "bhduanzuiyingwu"
            ]);
            //传说武将
            lib.rank.rarity.legend.addArray([
                "bhxinyanzhilvzhe", "bhxuesemeigui", "bhyuehuang", "bhzhenyanxinghun",
                "bhyuanzuilieren", "bhyunmodanxin", "bhshizhilvzhe", "baixi", "heixi", "bhaotuo", "bhxilin", "bhmenjieliefu", "bhkaiwen",
                "bhsu", "bhyidian", "bhqianjie", "bhmeibiwusi", "Ezie", "bhxi", "bhhuanhaimengdie", "bhmalixuelai", "bhweierwei"
            ]);

        }, precontent: function () {
            game.import('card', function () {
                var bbb = {
                    name: 'bbb',
                    connect: true,
                    card: {
                        bhqianjieyicheng:{
                            image: 'ext:崩崩崩/card/bhqianjieyicheng.jpg',
                            type:'equip',
                            subtype:'equip5',
                            skills:['bhqianjieyicheng_in_skill1'],
                            fullimage:true,
                            ai:{
                                basic:{
                                    equipValue:8.6,
                                }
                            },
                        },
                        bhjiasujuan:{
                            image: 'ext:崩崩崩/card/bhjiasujuan.jpg',
                            fullimage:true,
                            type:"trick",
                            enable:function(card,player){
                                return true;
                            },
                            selectTarget:1,
                            filterTarget:function(card,player,target){
                                return target.getExpansions('bhhudun').length>0;
                            },
                            modTarget:function(card,player,target){
                                return player.isPhaseUsing();
                            },
                            content:function(){
                                'step 0'
                                event.target=target;
                                event.target.addTempSkill('bhjiasujuan_use','bhjiasujuan_end');
                                event.num=Math.max(1, parseInt(event.target.getExpansions('bhhudun').length/2));
                                event.target.loseHudun(event.num,'nosource','reduce');
                                'step 1'
                                event.trigger('bhjiasujuan_end');
                            },
                            ai:{
                                basic:{
                                    order:function(card,player){
                                        var targets=game.filterPlayer(function(target){
                                            var cards=target.getExpansions('bhhudun');
                                            var val=0;
                                            if(!cards.length) return false;
                                            for(let i of cards){
                                                val+=target.getUseValue(i);
                                            }
                                            val/=cards.length;
                                            if(val>6) return true;
                                            return false;
                                        });
                                        for(let i of targets){
                                            var att=get.attitude(player,i);
                                            if(att>3||(player==i||player.isPhaseUsing())) return 2;
                                        }
                                        return 5.7;
                                    },
                                    useful:[5.7,4,3,2],
                                    value:[6.1,4,3,2],
                                },
                                result:{
                                    target:function(player,target){
                                        var cards=target.getExpansions('bhhudun');
                                        var val=0;
                                        if(cards.length<=1) return 0;
                                        for(let i of cards){
                                            val+=target.getUseValue(i);
                                        }
                                        val/=cards.length;
                                        var att=get.attitude(player,target);
                                        if(att>0&&target.hp>1) return att+val;
                                        else if(att<0&&target.hp<2) return val-7*parseInt(cards.length/2);
                                        else return val-5*parseInt(cards.length/2);
                                    },
                                },
                                tag:{
                                    bhhudun:-2,
                                },
                            },
                        },
                        bhpingzhang:{
                            image: 'ext:崩崩崩/card/bhpingzhang.jpg',
                            fullimage:true,
                            type:"basic",
                            enable:function(card,player){
                                return true;
                            },
                            selectTarget:1,
                            filterTarget:function(card,player,target){
                                return target==player||player.inRange(target);
                            },
                            modTarget:function(card,player,target){
                                return player.isPhaseUsing();
                            },
                            content:function(){
                                'step 0'
                                event.target=target;
                                event.target.gainHudun(get.cards(2),player);
                            },
                            ai:{
                                basic:{
                                    order:function(card,player){
                                        return 3.5;
                                    },
                                    useful:[5.9,4,3,2],
                                    value:[5.9,4,3,2],
                                },
                                result:{
                                    target:function(player,target){
                                        if(target.hasSkillTag('maixue')||target.hasSkillTag('maixue_hp')){
                                            if(target.hp>1) return -1;
                                            return 3;
                                        }
                                        if(target.hp>=2) return 2;
                                        return 2;
                                    },
                                },
                                tag:{
                                    bhhudun:2,
                                },
                            },
                        },
                        bhbujibao:{
                            image: 'ext:崩崩崩/card/bhbujibao.jpg',
                            fullimage:true,
                            type:"basic",
                            toself:true,
                            popname:"补给包",
                            enable:function(card,player){
                                return true;
                            },
                            selectTarget:-1,
                            filterTarget:function(card,player,target){
                                return target==player;
                            },
                            modTarget:function(card,player,target){
                                return target.isPhaseUsing();
                            },
                            content:function(){
                                'step 0'
                                if(target.countSP()>=3){
                                    target.chooseBool('是否将获得1点SP改为回复1点体力？').set('ai',function(){
                                        if(target.hasSkill('bhxinsheng')) return true;
                                        if(target.maxHp>target.hp) return true;
                                        return false;
                                    });
                                } else event.goto(2);
                                'step 1'
                                if(result.bool){
                                    target.recover();
                                    event.finish();
                                }
                                'step 2'
                                target.gainSP();
                            },
                            ai:{
                                basic:{
                                    order:function(card,player){
                                        return 9.1;
                                    },
                                    useful:[5.2,4,3,2],
                                    value:[5.4,4,3,2],
                                },
                                result:{
                                    target:1.3,
                                },
                                tag:{
                                    bhsp:1,
                                },
                            },
                        },
                        "bhjiuwayousi": {
                            image: 'ext:崩崩崩/card/bhjiuwayousi.jpg',
                            type: "equip",
                            subtype: "equip1",
                            skills: ["bhjiuwayousi_skill"],
                            fullimage: true,
                            distance: {
                                attackFrom: -1,
                            },
                            ai: {
                                basic: {
                                    equipValue:5.6,
                                },
                            },
                        },
                        "bhyoulandaier": {
                            image: 'ext:崩崩崩/card/bhyoulandaier.jpg',
                            type: "equip",
                            subtype: "equip1",
                            skills: ["bhyoulandaier_skill1","bhyoulandaier_skill2"],
                            fullimage: true,
                            distance: {
                                attackFrom: -1,
                            },
                            ai: {
                                basic: {
                                    equipValue:6.1,
                                },
                            },
                        },
                        "bhkatina": {
                            image: 'ext:崩崩崩/card/bhkatina.jpg',
                            type: "equip",
                            subtype: "equip1",
                            skills: ["bhkatina_skill1","bhkatina_skill2"],
                            distance: {
                                attackFrom: -1,
                            },
                            fullimage: true,
                            ai: {
                                basic: {
                                    equipValue:6.3,
                                },
                            },
                        },
                        "bhxinyao_fake1":{
                            image: 'ext:崩崩崩/card/bhxinyao_1.jpg',
                            fullimage:true,
                            type:"basic",
                            derivation:"bhaotuo",
                            toself:true,
                            popname:"假药",
                            enable:function(card,player){
                                return true;
                            },
                            selectTarget:-1,
                            filterTarget:function(card,player,target){
                                return target==player;
                            },
                            modTarget:function(card,player,target){
                                return target.isPhaseUsing();
                            },
                            content:function(){
                                if(!target.storage.bhxinyao_fake){
                                    target.loseHp();
                                    target.addSkill('bhjiandian');
                                    target.storage.bhxinyao_fake=true;
                                }
                            },
                            ai:{
                                basic:{
                                    order:function(card,player){
                                        return 10;
                                    },
                                    useful:[6.6,4,3,2],
                                    value:[6.6,4,3,2],
                                },
                                result:{
                                    target:2,
                                },
                            },
                        },
                        "bhxinyao_fake2":{
                            image: 'ext:崩崩崩/card/bhxinyao_2.jpg',
                            fullimage:true,
                            type:"basic",
                            enable:true,
                            updateUsable:"phaseUse",
                            derivation:"bhaotuo",
                            popname:"假药",
                            range:function(card,player,target){
                                return player.inRange(target);
                            },
                            selectTarget:1,
                            filterTarget:function(card,player,target){return player!=target},
                            content:function(){
                                if(!target.storage.bhxinyao_fake){
                                    target.loseHp();
                                    target.addSkill('bhjiandian');
                                    target.storage.bhxinyao_fake=true;
                                }
                            },
                            ai:{
                                basic:{
                                    useful:[5.1,3,1],
                                    value:[5.1,3,1],
                                },
                                order:function(item,player){
                                    if(player.hasSkillTag('presha',true,null,true)) return 10;
                                    if(lib.linked.contains(get.nature(item))){
                                        if(game.hasPlayer(function(current){
                                            return current!=player&&current.isLinked()&&player.canUse(item,current,null,true)&&get.effect(current,item,player,player)>0&&lib.card.sha.ai.canLink(player,current,item);
                                        })&&game.countPlayer(function(current){
                                            return current.isLinked()&&get.damageEffect(current,player,player,get.nature(item))>0;
                                        })>1) return 3.01;
                                        return 2.9;
                                    }
                                    return 3;
                                },
                                result:{
                                    target:function(player,target,card,isLink){
                                        var eff=function(){
                                            if(!isLink&&player.hasSkill('jiu')){
                                                if(!target.hasSkillTag('filterDamage',null,{
                                                    player:player,
                                                    card:card,
                                                    jiu:true,
                                                })){
                                                    if(get.attitude(player,target)>0){
                                                        return -7;
                                                    }
                                                    else{
                                                        return -4;
                                                    }
                                                }
                                                return -0.5;
                                            }
                                            return -1.5;
                                        }();
                                        if(!isLink&&target.mayHaveShan()&&!player.hasSkillTag('directHit_ai',true,{
                                            target:target,
                                            card:card,
                                        },true)) return eff/1.2;
                                        return eff;
                                    },
                                },
                                tag:{
                                    respond:1,
                                    respondShan:1,
                                },
                            },
                        },
                        "bhxinyao_fake3":{
                            image: 'ext:崩崩崩/card/bhxinyao_3.jpg',
                            fullimage:true,
                            type:"basic",
                            toself:true,
                            popname:"假药",
                            derivation:"bhaotuo",
                            enable:function(card,player){
                                return true;
                            },
                            selectTarget:-1,
                            filterTarget:function(card,player,target){
                                return target==player;
                            },
                            modTarget:function(card,player,target){
                                return target.isPhaseUsing();
                            },
                            content:function(){
                                if(!target.storage.bhxinyao_fake){
                                    target.loseHp();
                                    target.addSkill('bhjiandian');
                                    target.storage.bhxinyao_fake=true;
                                }
                            },
                            ai:{
                                basic:{
                                    order:function(card,player){
                                        if(player.hp<player.maxHp) return 2;
                                        return 7.1;
                                    },
                                    useful:[6.7,4,3,2],
                                    value:[6.7,4,3,2],
                                },
                                result:{
                                    target:2,
                                    "target_use":function(player,target){
                                        // if(player==target&&player.hp<=0) return 2;
                                        if(player.hasSkillTag('nokeep',true,null,true)) return 2;
                                        var nd=player.needsToDiscard();
                                        var keep=false;
                                        if(nd<=0){
                                            keep=true;
                                        }
                                        else if(nd==1&&target.hp>=2&&target.countCards('h','tao')<=1){
                                            keep=true;
                                        }
                                        var mode=get.mode();
                                        if(target.hp>=2&&keep&&target.hasFriend()){
                                            if(target.hp>2||nd==0) return 0;
                                            if(target.hp==2){
                                                if(game.hasPlayer(function(current){
                                                    if(target!=current&&get.attitude(target,current)>=3){
                                                        if(current.hp<=1) return true;
                                                        if((mode=='identity'||mode=='versus'||mode=='chess')&&current.identity=='zhu'&&current.hp<=2) return true;
                                                    }
                                                })){
                                                    return 0;
                                                }
                                            }
                                        }
                                        if(target.hp<0&&target!=player&&target.identity!='zhu') return 0;
                                        var att=get.attitude(player,target);
                                        if(att<3&&att>=0&&player!=target) return 0;
                                        var tri=_status.event.getTrigger();
                                        if(mode=='identity'&&player.identity=='fan'&&target.identity=='fan'){
                                            if(tri&&tri.name=='dying'&&tri.source&&tri.source.identity=='fan'&&tri.source!=target){
                                                var num=game.countPlayer(function(current){
                                                    if(current.identity=='fan'){
                                                        return current.countCards('h','tao');
                                                    }
                                                });
                                                if(num>1&&player==target) return 2;
                                                return 0;
                                            }
                                        }
                                        if(mode=='identity'&&player.identity=='zhu'&&target.identity=='nei'){
                                            if(tri&&tri.name=='dying'&&tri.source&&tri.source.identity=='zhong'){
                                                return 0;
                                            }
                                        }
                                        if(mode=='stone'&&target.isMin()&&
                                        player!=target&&tri&&tri.name=='dying'&&player.side==target.side&&
                                        tri.source!=target.getEnemy()){
                                            return 0;
                                        }
                                        return 2;
                                    },
                                },
                                tag:{
                                    recover:1,
                                    save:1,
                                    draw:2,
                                },
                            },
                        },
                        "bhxinyao_fake4":{
                            image: 'ext:崩崩崩/card/bhxinyao_4.jpg',
                            fullimage:true,
                            type:"basic",
                            toself:true,
                            popname:"假药",
                            derivation:"bhaotuo",
                            enable:function(card,player){
                                return true;
                            },
                            selectTarget:-1,
                            filterTarget:function(card,player,target){
                                return target==player;
                            },
                            modTarget:function(card,player,target){
                                return target.isPhaseUsing();
                            },
                            content:function(){
                                if(!target.storage.bhxinyao_fake){
                                    target.loseHp();
                                    target.addSkill('bhjiandian');
                                    target.storage.bhxinyao_fake=true;
                                }
                            },
                            ai:{
                                basic:{
                                    useful:function(card,i){
                                        if(i==0) return 7.3;
                                        return 4;
                                    },
                                    value:function(card,player,i){
                                        if(i==0) return 7.3;
                                        return 5;
                                    },
                                },
                                order:function(){
                                    return get.order({name:'sha'})+0.4;
                                },
                                result:{
                                    target:function(player,target){
                                        if(target&&target.hasSkill('bhxinyao_spade_sha')) return 0;
                                        if(target&&!target.isPhaseUsing()) return 0;
                                        if(lib.config.mode=='stone'&&!player.isMin()){
                                            if(player.getActCount()+1>=player.actcount) return 0;
                                        }
                                        var shas=player.getCards('h','sha');
                                        if(shas.length>1&&(player.getCardUsable('sha')>1||player.countCards('h','zhuge'))){
                                            return 0;
                                        }
                                        shas.sort(function(a,b){
                                            return get.order(b)-get.order(a);
                                        })
                                        var card;
                                        if(shas.length){
                                            for(var i=0;i<shas.length;i++){
                                                if(lib.filter.filterCard(shas[i],target)){
                                                    card=shas[i];break;
                                                }
                                            }
                                        }
                                        else if(player.hasSha()&&player.needsToDiscard()){
                                            if(player.countCards('h','hufu')!=1){
                                                card={name:'sha'};
                                            }
                                        }
                                        if(card){
                                            if(game.hasPlayer(function(current){
                                                return (get.attitude(target,current)<0&&
                                                    target.canUse(card,current,true,true)&&
                                                    !current.hasSkillTag('filterDamage',null,{
                                                        player:player,
                                                        card:card,
                                                        jiu:true,
                                                    })&&
                                                    get.effect(current,card,target)>0);
                                            })){
                                                return 1;
                                            }
                                        }
                                        return 0;
                                    },
                                },
                            },
                        },
                        "bhxinyao_diamond":{
                            image: 'ext:崩崩崩/card/bhxinyao_1.jpg',
                            derivation:"bhaotuo",
                            // skills:"bhxinyao_destory",
                            fullimage:true,
                            type:"basic",
                            cardcolor:"red",
                            toself:true,
                            enable:function(card,player){
                                return true;
                            },
                            selectTarget:-1,
                            filterTarget:function(card,player,target){
                                return target==player;
                            },
                            modTarget:function(card,player,target){
                                return target.isPhaseUsing();
                            },
                            content:function(){
                                'step 0'
                                target.judge(function (card) {
                                    if (get.color(card) == 'red') return 2;
                                    return -1;
                                }).judge2 = function (result) {
                                    return result.bool;
                                };
                                'step 1'
                                if(result.color=='red') target.gainMaxHp();
                            },
                            ai:{
                                basic:{
                                    order:function(card,player){
                                        return 10;
                                    },
                                    useful:[6.6,4,3,2],
                                    value:[6.6,4,3,2],
                                },
                                result:{
                                    target:2,
                                },
                            },
                        },
                        "bhxinyao_club":{
                            image: 'ext:崩崩崩/card/bhxinyao_2.jpg',
                            derivation:"bhaotuo",
                            // skills:"bhxinyao_destory",
                            fullimage:true,
                            type:"basic",
                            enable:true,
                            //usable:1,
                            updateUsable:"phaseUse",
                            range:function(card,player,target){
                                return player.inRange(target);
                            },
                            selectTarget:1,
                            filterTarget:function(card,player,target){return player!=target},
                            content:function(){
                                "step 0"
                                if(typeof event.shanRequired!='number'||!event.shanRequired||event.shanRequired<0){
                                    event.shanRequired=1;
                                }
                                if(typeof event.baseDamage!='number') event.baseDamage=1;
                                if(typeof event.extraDamage!='number') event.extraDamage=0;
                                "step 1"
                                if(event.directHit||event.directHit2||(!_status.connectMode&&lib.config.skip_shan&&!target.hasShan())){
                                    event._result={bool:false};
                                }
                                else if(event.skipShan){
                                    event._result={bool:true,result:'shaned'};
                                }
                                else{
                                    var next=target.chooseToUse('请使用一张闪响应杀');
                                    next.set('type','respondShan');
                                    next.set('filterCard',function(card,player){
                                        if(get.name(card)!='shan') return false;
                                        return lib.filter.cardEnabled(card,player,'forceEnable');
                                    });
                                    if(event.shanRequired>1){
                                        next.set('prompt2','（共需使用'+event.shanRequired+'张闪）');
                                    }
                                    next.set('ai1',function(card){
                                        var target=_status.event.player;
                                        var evt=_status.event.getParent();
                                        var bool=true;
                                        if(_status.event.shanRequired>1&&!get.is.object(card)&&target.countCards('h','shan')<_status.event.shanRequired){
                                            bool=false;
                                        }
                                        else if(target.hasSkillTag('useShan')){
                                            bool=true;
                                        }
                                        else if(target.hasSkillTag('noShan')){
                                            bool=false;
                                        }
                                        else if(get.damageEffect(target,evt.player,target,evt.card.nature)>=0) bool=false;
                                        if(bool){
                                            return get.order(card);
                                        }
                                        return 0;
                                    }).set('shanRequired',event.shanRequired);
                                    next.set('respondTo',[player,card]);
                                    //next.autochoose=lib.filter.autoRespondShan;
                                }
                                "step 2"
                                if(!result||!result.bool||!result.result||result.result!='shaned'){
                                    //event.trigger('shaHit');
                                }
                                else{
                                    event.shanRequired--;
                                    if(event.shanRequired>0){
                                        event.goto(1);
                                    }
                                    else{
                                        //event.trigger('shaMiss');
                                        event.responded=result;
                                    }
                                }
                                "step 3"
                                if((!result||!result.bool||!result.result||result.result!='shaned')&&!event.unhurt){
                                    target.loseHp(event.baseDamage+event.extraDamage);
                                    event.result={bool:true}
                                    //event.trigger('shaDamage');
                                }
                                else{
                                    event.result={bool:false}
                                    //event.trigger('shaUnhirt');
                                }
                                event.finish();
                                // "step 4"
                                // "step 5"
                                // if((!result||!result.bool)&&!event.unhurt){
                                //     target.damage(get.nature(event.card),event.baseDamage+event.extraDamage);
                                //     event.result={bool:true}
                                //     event.trigger('shaDamage');
                                //     event.finish();
                                // }
                                // else{
                                //     event.trigger('shaMiss');
                                // }
                                // "step 6"
                                // if((!result||!result.bool)&&!event.unhurt){
                                //     target.damage(get.nature(event.card),event.baseDamage+event.extraDamage);
                                //     event.result={bool:true}
                                //     event.trigger('shaDamage');
                                //     event.finish();
                                // }
                                // else{
                                //     event.result={bool:false}
                                //     event.trigger('shaUnhirt');
                                // }
                            },
                            ai:{
                                basic:{
                                    useful:[5.1,3,1],
                                    value:[5.1,3,1],
                                },
                                order:function(item,player){
                                    if(player.hasSkillTag('presha',true,null,true)) return 10;
                                    if(lib.linked.contains(get.nature(item))){
                                        if(game.hasPlayer(function(current){
                                            return current!=player&&current.isLinked()&&player.canUse(item,current,null,true)&&get.effect(current,item,player,player)>0&&lib.card.sha.ai.canLink(player,current,item);
                                        })&&game.countPlayer(function(current){
                                            return current.isLinked()&&get.damageEffect(current,player,player,get.nature(item))>0;
                                        })>1) return 3.01;
                                        return 2.9;
                                    }
                                    return 3;
                                },
                                result:{
                                    target:function(player,target,card,isLink){
                                        var eff=function(){
                                            if(!isLink&&player.hasSkill('jiu')){
                                                if(!target.hasSkillTag('filterDamage',null,{
                                                    player:player,
                                                    card:card,
                                                    jiu:true,
                                                })){
                                                    if(get.attitude(player,target)>0){
                                                        return -7;
                                                    }
                                                    else{
                                                        return -4;
                                                    }
                                                }
                                                return -0.5;
                                            }
                                            return -1.5;
                                        }();
                                        if(!isLink&&target.mayHaveShan()&&!player.hasSkillTag('directHit_ai',true,{
                                            target:target,
                                            card:card,
                                        },true)) return eff/1.2;
                                        return eff;
                                    },
                                },
                                tag:{
                                    respond:1,
                                    respondShan:1,
                                },
                            },
                        },
                        "bhxinyao_heart":{
                            image: 'ext:崩崩崩/card/bhxinyao_3.jpg',
                            derivation:"bhaotuo",
                            // skills:"bhxinyao_destory",
                            fullimage:true,
                            type:"basic",
                            cardcolor:"red",
                            toself:true,
                            enable:function(card,player){
                                return player.isPhaseUsing();
                            },
                            selectTarget:-1,
                            filterTarget:function(card,player,target){
                                return target==player;
                            },
                            modTarget:function(card,player,target){
                                return target.isPhaseUsing();
                            },
                            content:function(){
                                if(target.hp<target.maxHp) target.recover(event.baseDamage||1);
                                else target.draw(2);
                            },
                            ai:{
                                basic:{
                                    order:function(card,player){
                                        if(player.hp<player.maxHp) return 2;
                                        return 7.1;
                                    },
                                    useful:[6.7,4,3,2],
                                    value:[6.7,4,3,2],
                                },
                                result:{
                                    target:2,
                                    "target_use":function(player,target){
                                        // if(player==target&&player.hp<=0) return 2;
                                        if(player.hasSkillTag('nokeep',true,null,true)) return 2;
                                        var nd=player.needsToDiscard();
                                        var keep=false;
                                        if(nd<=0){
                                            keep=true;
                                        }
                                        else if(nd==1&&target.hp>=2&&target.countCards('h','tao')<=1){
                                            keep=true;
                                        }
                                        var mode=get.mode();
                                        if(target.hp>=2&&keep&&target.hasFriend()){
                                            if(target.hp>2||nd==0) return 0;
                                            if(target.hp==2){
                                                if(game.hasPlayer(function(current){
                                                    if(target!=current&&get.attitude(target,current)>=3){
                                                        if(current.hp<=1) return true;
                                                        if((mode=='identity'||mode=='versus'||mode=='chess')&&current.identity=='zhu'&&current.hp<=2) return true;
                                                    }
                                                })){
                                                    return 0;
                                                }
                                            }
                                        }
                                        if(target.hp<0&&target!=player&&target.identity!='zhu') return 0;
                                        var att=get.attitude(player,target);
                                        if(att<3&&att>=0&&player!=target) return 0;
                                        var tri=_status.event.getTrigger();
                                        if(mode=='identity'&&player.identity=='fan'&&target.identity=='fan'){
                                            if(tri&&tri.name=='dying'&&tri.source&&tri.source.identity=='fan'&&tri.source!=target){
                                                var num=game.countPlayer(function(current){
                                                    if(current.identity=='fan'){
                                                        return current.countCards('h','tao');
                                                    }
                                                });
                                                if(num>1&&player==target) return 2;
                                                return 0;
                                            }
                                        }
                                        if(mode=='identity'&&player.identity=='zhu'&&target.identity=='nei'){
                                            if(tri&&tri.name=='dying'&&tri.source&&tri.source.identity=='zhong'){
                                                return 0;
                                            }
                                        }
                                        if(mode=='stone'&&target.isMin()&&
                                        player!=target&&tri&&tri.name=='dying'&&player.side==target.side&&
                                        tri.source!=target.getEnemy()){
                                            return 0;
                                        }
                                        return 2;
                                    },
                                },
                                tag:{
                                    recover:1,
                                    save:1,
                                    draw:2,
                                },
                            },
                        },
                        "bhxinyao_spade":{
                            image: 'ext:崩崩崩/card/bhxinyao_4.jpg',
                            derivation:"bhaotuo",
                            // skills:"bhxinyao_destory",
                            fullimage:true,
                            type:"basic",
                            cardcolor:"black",
                            toself:true,
                            enable:function(event,player){
                                return true;
                            },
                            selectTarget:-1,
                            modTarget:true,
                            filterTarget:function(card,player,target){
                                return target==player;
                            },
                            content:function(){
                                target.addSkill('bhxinyao_spade_sha');
                            },
                            ai:{
                                basic:{
                                    useful:function(card,i){
                                        if(i==0) return 7.3;
                                        return 4;
                                    },
                                    value:function(card,player,i){
                                        if(i==0) return 7.3;
                                        return 5;
                                    },
                                },
                                order:function(){
                                    return get.order({name:'sha'})+0.4;
                                },
                                result:{
                                    target:function(player,target){
                                        if(target&&target.hasSkill('bhxinyao_spade_sha')) return 0;
                                        if(target&&!target.isPhaseUsing()) return 0;
                                        if(lib.config.mode=='stone'&&!player.isMin()){
                                            if(player.getActCount()+1>=player.actcount) return 0;
                                        }
                                        var shas=player.getCards('h','sha');
                                        if(shas.length>1&&(player.getCardUsable('sha')>1||player.countCards('h','zhuge'))){
                                            return 0;
                                        }
                                        shas.sort(function(a,b){
                                            return get.order(b)-get.order(a);
                                        })
                                        var card;
                                        if(shas.length){
                                            for(var i=0;i<shas.length;i++){
                                                if(lib.filter.filterCard(shas[i],target)){
                                                    card=shas[i];break;
                                                }
                                            }
                                        }
                                        else if(player.hasSha()&&player.needsToDiscard()){
                                            if(player.countCards('h','hufu')!=1){
                                                card={name:'sha'};
                                            }
                                        }
                                        if(card){
                                            if(game.hasPlayer(function(current){
                                                return (get.attitude(target,current)<0&&
                                                    target.canUse(card,current,true,true)&&
                                                    !current.hasSkillTag('filterDamage',null,{
                                                        player:player,
                                                        card:card,
                                                        jiu:true,
                                                    })&&
                                                    get.effect(current,card,target)>0);
                                            })){
                                                return 1;
                                            }
                                        }
                                        return 0;
                                    },
                                },
                            },
                        },
                        "bhkelixina_in": {
                            image: 'ext:崩崩崩/card/bhkelixina_in.jpg',
                            derivation: "bhtianyuanqiying",
                            type: "equip",
                            subtype: "equip2",
                            skills: ["bhkelixina_in_skill","bhkelixina_in_chonggou"],
                            destory: true,
                            onLose: function () {
                                lib.inpile.remove('bhkelixina_in');
                                card.remove();
                                card.destroyed = true;
                                game.log(card, '被销毁了');
                            },
                            fullimage: true,
                            ai: {
                                basic: {
                                    equipValue: 8,
                                },
                            },
                        },
                        "bhkelixina_ma": {
                            image: 'ext:崩崩崩/card/bhkelixina_ma.jpg',
                            derivation: "bhtianyuanqiying",
                            type: "equip",
                            subtype: "equip4",
                            skills: ["bhkelixina_ma_skill","bhkelixina_ma_chonggou"],
                            destory: true,
                            onLose: function () {
                                lib.inpile.remove('bhkelixina_ma');
                                card.remove();
                                card.destroyed = true;
                                game.log(card, '被销毁了');
                            },
                            fullimage: true,
                            ai: {
                                basic: {
                                    equipValue: 6.1,
                                },
                            },
                        },
                        "bhyidianzhixing_zhixing": {
                            image: 'ext:崩崩崩/card/bhyidianzhixing_zhixing.jpg',
                            type: "equip",
                            subtype: "equip1",
                            distance: {
                                attackFrom: -8,
                            },
                            ai: {
                                basic: {
                                    equipValue: 5,
                                },
                            },
                            skills: ["bhyidianzhixing_zhixing_skill"],
                            fullimage: true,
                        },
                        "bhyidianzhixing_in": {
                            image: 'ext:崩崩崩/card/bhyidianzhixing_in.jpg',
                            type: "equip",
                            subtype: "equip1",
                            distance: {
                                attackFrom: -4,
                            },
                            ai: {
                                basic: {
                                    equipValue: 4.7,
                                },
                                result: {
                                    target: function (player, target, card) {
                                        return get.equipResult(player, target, card.name);
                                    },
                                },
                            },
                            skills: ["bhyidianzhixing_in_skill", 'bhyidianzhixing_in_chonggou'],
                            fullimage: true,
                        },
                        "bhdizuiqilei_in": {
                            image: 'ext:崩崩崩/card/bhdizuiqilei_in.jpg',
                            type: "equip",
                            subtype: "equip1",
                            distance: {
                                attackFrom: -1,
                            },
                            ai: {
                                basic: {
                                    equipValue: 7.2,
                                },
                            },
                            skills: ["bhdizuiqilei_in_skill"],
                            fullimage: true,
                        },
                        bhxukongwanzang: {
                            image: 'ext:崩崩崩/card/bhxukongwanzang.jpg',
                            fullimage: true,
                            type: "equip",
                            subtype: "equip5",
                            ai: {
                                basic: {
                                    equipValue: 8.5,
                                },
                            },
                            skills: ["bhxukongwanzang_skill"],
                            //fullimage: true,
                        },
                        bhtianehu: {
                            image: 'ext:崩崩崩/card/bhtianehu.jpg',
                            derivation: "bhkuangrelandiao",
                            type: "equip",
                            subtype: "equip7",
                            distance: {
                                attackFrom: -1,
                            },
                            skills: ["bhtianehu_skill"],
                            destory: true,
                            onLose: function () {
                                lib.inpile.remove('bhtianehu');
                                card.remove();
                                card.destroyed = true;
                                game.log(card, '被销毁了');
                            },
                            fullimage: true,
                            ai: {
                                basic: {
                                    equipValue: 2,
                                },
                            },
                        },
                        bhbenghuaibaofa: {
                            image: 'ext:崩崩崩/card/bhbenghuaibaofa.jpg',
                            fullskin: true,
                            type: "trick",
                            enable: true,
                            selectTarget: -1,
                            "yingbian_prompt": "当你使用此牌选择目标后，你可为此牌减少一个目标",
                            "yingbian_tags": ["remove"],
                            yingbian: function (event) {
                                event.yingbian_removeTarget = true;
                            },
                            filterTarget: function (card, player, target) {
                                return target != player;
                            },
                            reverseOrder: true,
                            content: function () {
                                "step 0"
                                //if (typeof event.baseDamage != 'number') event.baseDamage = 1;
                                target.judge(function (card) {
                                    if (get.suit(card) == 'diamond') return -2;
                                    return 2;
                                }).judge2 = function (result) {
                                    return result.bool;
                                };
                                "step 1"
                                if (result.judge != -2 ) {
                                    event._result = { bool: false };
                                } else {
                                    event._result = { bool: true };
                                }
                                "step 2"
                                if (result.bool == false) {
                                    target.loseHp();
                                }
                            },
                            ai: {
                                wuxie: function (target, card, player, viewer) {
                                    if (get.attitude(viewer, target) > 0) {
                                        if (target.hp == 1 || Math.random() < 0.7) return 0;
                                    }
                                },
                                basic: {
                                    order: 9,
                                    useful: [5, 1],
                                    value: 6,
                                },
                                result: {
                                    "target_use": function (player, target) {
                                        if (player.hasUnknown(2) && get.mode() != 'guozhan') return 0;
                                        if(target==undefined) return 0;
                                        var nh = target.countCards('h');
                                        if (get.mode() == 'identity') {
                                            if (target.isZhu && nh <= 2 && target.hp <= 1) return -100;
                                        }
                                        if (target.hasSkill('bhshengxue')) return 0;
                                        if (target.hasSkill('bhlvzhe')) return 2;
                                        if (nh == 0) return -2;
                                        return -1.5;
                                    },
                                    target: function (player, target) {
                                        var nh = target.countCards('h');
                                        if (get.mode() == 'identity') {
                                            if (target.isZhu && nh <= 2 && target.hp <= 1) return -100;
                                        }
                                        if (target.hasSkill('bhshengxue')) return 0;
                                        if (target.hasSkill('bhlvzhe')) return 2;
                                        if (nh == 0) return -2;
                                        return -1.7;
                                    },
                                },
                                tag: {
                                    //damage: 1,
                                    multitarget: 1,
                                    multineg: 1,
                                },
                            },
                        },
                        "bhheiyuanbaihua_in": {
                            image: 'ext:崩崩崩/card/bhheiyuanbaihua_in.jpg',
                            type: "equip",
                            subtype: "equip1",
                            distance: {
                                attackFrom: -2,
                            },
                            ai: {
                                basic: {
                                    equipValue: 7.5,
                                },
                            },
                            skills: ["bhheiyuanbaihua_in_skill1", "bhheiyuanbaihua_in_skill2", "bhheiyuanbaihua_in_chonggou"],
                            fullimage: true,
                        },
                        "bhheiyuanbaihua_heiyuan": {
                            image: 'ext:崩崩崩/card/bhheiyuanbaihua_heiyuan.jpg',
                            type: "equip",
                            subtype: "equip1",
                            distance: {
                                attackFrom: -2,
                            },
                            ai: {
                                basic: {
                                    equipValue: 3,
                                },
                            },
                            skills: ["bhheiyuanbaihua_heiyuan_skill", "bhheiyuanbaihua_heiyuan_chonggou"],
                            fullimage: true,
                        },
                        "bhheiyuanbaihua_baihua": {
                            image: 'ext:崩崩崩/card/bhheiyuanbaihua_baihua.jpg',
                            type: "equip",
                            subtype: "equip1",
                            distance: {
                                attackFrom: -1,
                            },
                            ai: {
                                basic: {
                                    equipValue: 5,
                                },
                            },
                            skills: ["bhheiyuanbaihua_baihua_skill", "bhheiyuanbaihua_heiyuan_chonggou"],
                            fullimage: true,
                        },
                        bhxiaodaoxiaoxi: {
                            //fullimage:true,
                            image: 'ext:崩崩崩/card/bhxiaodaoxiaoxi.jpg',
                            fullskin: true,
                            audio: true,
                            type: "trick",
                            enable: true,
                            selectTarget: -1,
                            toself: true,
                            filterTarget: function (card, player, target) {
                                return target == player;
                            },
                            modTarget: true,
                            content: function () {
                                'step 0'
                                event.target = target;
                                event.parentT = target;
                                event.startP = target;
                                target.draw();
                                'step 1'
                                if (target.countCards('he')) target.chooseCard('将一张牌交给你的下家', 'he', true).set('ai', function (card) {
                                    var att = get.attitude(target, target.next);
                                    return att - get.value(card);
                                });
                                else event.goto(3);
                                'step 2'
                                event.card = result.cards[0];
                                'step 3'
                                event.parentT = event.target;
                                event.target = event.target.next;
                                event.parentT.line(event.target);
                                if (event.card) {
                                    event.target.gain(event.card, event.parentT, 'give2');
                                    if(!event.target.storage.bhxiaodaoxiaoxi) event.target.storage.bhxiaodaoxiaoxi=0;
                                    event.target.storage.bhxiaodaoxiaoxi++;
                                    event.trigger('bhxiaodaoxiaoxi');
                                    if(event.target.storage.bhxiaodaoxiaoxi==0) delete event.target.storage.bhxiaodaoxiaoxi;
                                }
                                'step 4'
                                game.delayx();
                                if (event.target.countCards('he')) event.target.chooseCard('将一张牌交给你的下家', 'he', true).set('ai', function (card) {
                                    var att = get.attitude(event.target, event.target.next);
                                    if (att < 0) return att - get.value(card);
                                    else return 20-get.value(card);
                                });
                                else {
                                    event.card = null;
                                    event.goto(6);
                                }
                                'step 5'
                                event.card = result.cards[0];
                                'step 6'
                                if (event.target.next != event.startP) event.goto(3);
                                else {
                                    event.parentT = event.target;
                                    event.target = event.target.next;
                                    event.parentT.line(event.target);
                                    if (event.card) {
                                        event.target.gain(event.card, event.parentT, 'give2');
                                        if(!event.target.storage.bhxiaodaoxiaoxi) event.target.storage.bhxiaodaoxiaoxi=0;
                                        event.target.storage.bhxiaodaoxiaoxi++;
                                        event.trigger('bhxiaodaoxiaoxi');
                                        if(event.target.storage.bhxiaodaoxiaoxi==0) delete event.target.storage.bhxiaodaoxiaoxi;
                                    }
                                }
                                'step 7'
                                var targets=game.filterPlayer(function(target){
                                    return target.storage.bhxiaodaoxiaoxi;
                                });
                                for(let i of targets){
                                    delete i.storage.bhxiaodaoxiaoxi;
                                }
                            },
                            ai: {
                                basic: {
                                    order: 8.6,
                                    useful: 4.5,
                                    value: 5.2,
                                },
                                result: {
                                    target: 2,
                                },
                                tag: {
                                    draw: 1,
                                },
                            },
                        },
                        bhbenghuaijiejing: {
                            image: 'ext:崩崩崩/card/bhbenghuaijiejing.jpg',
                            fullskin: true,
                            type: "basic",
                            toself: true,
                            enable: function (event, player) {
                                //return !player.hasSkill('bhbenghuaijiejing');
                                return true;
                            },
                            lianheng: true,
                            logv: false,
                            savable: true,
                            usable: 1,
                            selectTarget: -1,
                            modTarget: true,
                            filterTarget: function (card, player, target) {
                                return target == player;
                            },
                            content: function () {
                                if (typeof event.baseDamage != 'number') event.baseDamage = 1;
                                if (target.isDying() || event.getParent(2).type == 'dying') {
                                    if (target.group != 'bhbenghuai') target.group = 'bhbenghuai';
                                    else event.baseDamage++;
                                    target.recover(event.baseDamage);
                                }
                                else {
                                    if (!target.storage.bhbenghuaijiejing) target.storage.bhbenghuaijiejing = 0;
                                    target.storage.bhbenghuaijiejing += event.baseDamage;
                                    if (target.group != 'bhbenghuai') target.loseHp();
                                    target.addTempSkill('bhbenghuaijiejing');
                                }
                            },
                            ai: {
                                basic: {
                                    useful: function (card, i) {
                                        if (_status.event.player.hp > 1) {
                                            if (i == 0) return 5;
                                            return 2;
                                        }
                                        if (i == 0) return 8.3;
                                        return 4;
                                    },
                                    value: function (card, player, i) {
                                        if (player.hp > 1) {
                                            if (i == 0) return 5.6;
                                            return 1;
                                        }
                                        if (i == 0) return 7.3;
                                        return 3.1;
                                    },
                                },
                                order: function () {
                                    return get.order({ name: 'sha' }) + 0.3;
                                },
                                result: {
                                    target: function (player, target) {
                                        if (target && target.isDying()) return 2;
                                        if (target && !target.isPhaseUsing()) return 0;
                                        if (lib.config.mode == 'stone' && !player.isMin()) {
                                            if (player.getActCount() + 1 >= player.actcount) return 0;
                                        }
                                        if (player.hp == 1 && player.group != 'bhbenghuai') return -2;
                                        var shas = player.getCards('h', 'sha');
                                        if (shas.length > 1 && (player.getCardUsable('sha') > 1 || player.countCards('h', 'zhuge'))) {
                                            return 0;
                                        }
                                        shas.sort(function (a, b) {
                                            return get.order(b) - get.order(a);
                                        })
                                        var card;
                                        if (shas.length) {
                                            for (var i = 0; i < shas.length; i++) {
                                                if (lib.filter.filterCard(shas[i], target)) {
                                                    card = shas[i]; break;
                                                }
                                            }
                                        }
                                        else if (player.hasSha() && player.needsToDiscard()) {
                                            if (player.countCards('h', 'hufu') != 1) {
                                                card = { name: 'sha' };
                                            }
                                        }
                                        if (card) {
                                            if (game.hasPlayer(function (current) {
                                                return (get.attitude(target, current) < 0 &&
                                                    target.canUse(card, current, true, true) &&
                                                    !current.hasSkillTag('filterDamage', null, {
                                                        player: player,
                                                        card: card,
                                                        //jiu:true,
                                                    }) &&
                                                    get.effect(current, card, target) > 0);
                                            })) {
                                                return 2;
                                            }
                                        }
                                        if (player.group != 'bhbenghuai') return -1;
                                        else return 0;
                                    },
                                },
                                tag: {
                                    save: 1
                                }
                            }
                        },
                        "bhdizangyuhun_in": {
                            image: 'ext:崩崩崩/card/bhdizangyuhun_in.jpg',
                            fullimage: true,
                            type: 'equip',
                            subtype: 'equip5',
                            skills: ['bhdizangyuhun_in_skill1'],
                            global: ['bhdizangyuhun_in_skill1', 'bhdizangyuhun_in_skill2', 'bhdizangyuhun_in_chonggou'],
                            ai: {
                                basic: {
                                    equipValue: function (card, player) {
                                        if (player.name == 'bhkaiwen') return 7;
                                        else return -2;
                                    },
                                }
                            }
                        },
                        "bhdizangyuhun_dizang": {
                            image: 'ext:崩崩崩/card/bhdizangyuhun_dizang.jpg',
                            //fullskin: true,
                            fullimage: true,
                            type: 'equip',
                            subtype: 'equip1',
                            distance: {
                                attackFrom: -1,
                            },
                            ai: {
                                basic: {
                                    equipValue: 7.3,
                                },
                            },
                            skills: ['bhdizangyuhun_dizang_skill'],
                        },
                        "bhtianhuoshengcai_in": {
                            image: 'ext:崩崩崩/card/bhtianhuoshengcai_in.jpg',
                            fullimage: true,
                            type: 'equip',
                            subtype: 'equip1',
                            //cardnature:'fire',
                            distance: { attackFrom: -4 },
                            ai: {
                                basic: {
                                    equipValue: function (card, player) {
                                        if (player.name == 'bhkaiwen') return 8;
                                        else return 3.2;
                                    },
                                }
                            },
                            skills: ['bhtianhuoshengcai_in_skill', 'bhtianhuoshengcai_in_chonggou'],
                        },
                        "bhtianhuoshengcai_dajian": {
                            image: 'ext:崩崩崩/card/bhtianhuoshengcai_dajian.jpg',
                            fullimage: true,
                            type: 'equip',
                            subtype: 'equip1',
                            //cardnature:'fire',
                            distance: { attackFrom: -1 },
                            ai: {
                                basic: {
                                    equipValue: function (card, player) {
                                        if (player.name == 'bhkaiwen') return 8;
                                        else return 5.2;
                                    },
                                }
                            },
                            skills: ['bhtianhuoshengcai_dajian_skill', 'bhtianhuoshengcai_dajian_chonggou'],
                        },
                        "bhtianhuoshengcai_jiemie": {
                            image: 'ext:崩崩崩/card/bhtianhuoshengcai_jiemie.jpg',
                            fullimage: true,
                            type: 'equip',
                            derivation: "bhkaiwen",
                            subtype: 'equip1',
                            //cardnature:'fire',
                            distance: { attackFrom: -2 },
                            ai: {
                                basic: {
                                    equipValue: function (card, player) {
                                        if (player.name == 'bhkaiwen') return 8;
                                        else return 6.3;
                                    },
                                },
                            },
                            skills: ['bhtianhuoshengcai_jiemie_skill'],
                        },
                    },
                    skill: {
                        bhqianjieyicheng_in_skill1:{
                            equipSkill:true,
                            enable:'phaseUse',
                            content:function(){
                                'step 0'
                                event.list = [
                                    'bh_kiana',
                                    'bh_mei',
                                    'bh_bronya',
                                    'bh_himeko',
                                    'bh_theresa',
                                    'bh_sakura',
                                    'bh_kallen',
                                    'bh_hua',
                                    'bh_rita',
                                    'bh_vodka',
                                    'bh_seele',
                                    'bh_durandal',
                                    'bh_linkage',
                                    'bh_xiubolian',
                                    'bh_stigmata_tianming',
                                    'bh_stigmata_yuanchuang',
                                    'bh_stigmata_shenzhou',
                                    'bh_stigmata_zhanguo',
                                    'bh_stigmata_oulu',
                                    'bh_stigmata_kexue',
                                    'bh_stigmata_ziyi',
                                    'bh_stigmata_tangcai',
                                    'bh_stigmata_buyi',
                                    'bh_stigmata_xuxu',
                                    'bh_stigmata_zhejian',
                                    'bh_ex_zhuhuo',
                                    'bh_ex_qizongzui',
                                    'bh_ex_shishen',
                                    'bh_ex_houbeng',
                                    'bh_dai'
                                ];
                                for(let i of event.list){
                                    //game.log(lib.characterSort.bbb[i]);
                                    if(lib.characterSort.bbb[i].contains(player.name)) event.nameGroup=i;
                                }
                                event.namelist=[];
                                event.namelist.addArray(lib.characterSort.bbb[event.nameGroup]);
                                //game.log(player.name,event.namelist);
                                if(!event.namelist) event.finish();
                                else event.namelist.remove(player.name);
                                'step 1'
                                var list=[];
                                for(let i of event.namelist){
                                    var name='bhqianjieyicheng_in_skill1_'+i;
                                    if (!lib.card[name]) {
                                        var info = {
                                            fullimage: true,
                                            type: "同源角色",
                                            image: 'ext:崩崩崩/image/' + i + '.jpg',
                                            suit:null,
                                            number:null,
                                        }
                                        lib.card[name] = info;
                                        lib.translate[name] = get.translation(i);
                                        lib.translate[name + '_info'] = '同源角色：'+get.translation(i);
                                    }
                                    list.push(game.createCard(name,' ',0));
                                }
                                player.chooseButton(['请选择一名同源角色',list],true).set('ai',function(button){
                                    return [1,0,2].randomGet();
                                });
                                'step 2'
                                event.cname=result.links[0].name.slice(27);
                                event.skillList=lib.character[event.cname][3];
                                //game.log(event.skillList);
                                if(!event.skillList.length) event.finish();
                                'step 3'
                                player.chooseButton(['请选择一个技能获得之',[event.skillList,'vcard']],true).set('ai',function(button){
                                    return [1,0,2].randomGet();
                                });
                                'step 4'
                                event.skillname=result.links[0];
                                //game.log(event.skillname[2]);
                                player.addSkill(event.skillname[2]);
                                game.log(player,'获得了来自同源角色','<font color=pink>',event.cname,'</font>','的技能','#g【'+get.translation(event.skillname[2])+'】');
                            },
                        },
                        "bhjiasujuan_use":{
                            cardSkill:true,
                            trigger:{
                                player:'loseHudunAfter',
                            },
                            filter:function(event,player){
                                if(!event.cards||!event.cards.length) return false;
                                for(let i of event.cards){
                                    if(game.hasPlayer(function(target){
                                        return player.canUse(i,target);
                                    })) return true;
                                }
                                return false;
                            },
                            forced:true,
                            charlotte:true,
                            silent:true,
                            content:function(){
                                'step 0'
                                event.cards=trigger.cards;
                                player.chooseButton(['你可以使用其中至多两张牌',event.cards],[1,2],function(button){
                                    return player.getUseValue(button.link);
                                }).set('filterButton',function(button){
                                    return game.hasPlayer(function(target){
                                        return player.canUse(button.link,target);
                                    });
                                });
                                'step 1'
                                if(result.bool&&result.links){
                                    for(let i of result.links){
                                        player.chooseUseTarget(i,true,false);
                                    }
                                }
                            },
                        },
                        "bhjiuwayousi_skill":{
                            equipSkill:true,
                            trigger:{
                                player:"useCard",
                            },
                            forced:true,
                            filter:function(event,player){
                                if(event.card.name!='sha') return false;
                                return player.countCards('h')>player.hp||player.storage.jiu;
                            },
                            content:function(){
                                trigger.directHit.addArray(game.filterPlayer());
                            },
                        },
                        "bhyoulandaier_skill1":{
                            equipSkill:true,
                            trigger:{
                                player:'loseHpAfter',
                            },
                            filter:function(event,player){
                                return player.countSP();
                            },
                            content:function(){
                                'step 0'
                                player.loseSP();
                                var str1='摸两张牌';
                                var str2='回复1点体力，然后对自己造成1点伤害';
                                player.chooseControlList([str1,str2],true).set('ai',function(){
                                    if(player.hasSkillTag('maixue')) return 1;
                                    return 0;
                                });
                                'step 1'
                                if(result.index==0){
                                    player.draw(2);
                                } else {
                                    player.recover();
                                    player.damage();
                                }
                            },
                        },
                        "bhyoulandaier_skill2":{
                            equipSkill:true,
                            trigger:{
                                player:'useCard',
                            },
                            check:function(event,player){
                                if(player.hasSkill('bhxinsheng')) return false;
                                return true;
                            },
                            filter:function(event,player){
                                return event.card.name=='sha';
                            },
                            content:function(){
                                player.gainSP();
                            },
                        },
                        "bhkatina_skill1":{
                            equipSkill:true,
                            trigger:{
                                source:"damageBegin",
                            },
                            check:function(event,player){
                                var att=get.attitude(player,event.player);
                                if(att>0) return true;
                                else {
                                    if(event.player.hp<3) return false;
                                    if(event.player.countCards('he',function(card){
                                        return get.value(card)>7;
                                    })) return true;
                                    if(event.player.hasSkillTag('maixue')) return true;
                                    return false;
                                }
                            },
                            filter:function(event,player){
                                if(event.player==player) return false;
                                return event.card&&event.card.name=='sha';
                            },
                            content:function(){
                                'step 0'
                                trigger.num--;
                                if(!player.storage.bhkatina_use) player.storage.bhkatina_use=0;
                                player.storage.bhkatina_use++;
                                'step 1'
                                player.gainPlayerCard(trigger.player,'hej',true);
                            },
                        },
                        "bhkatina_skill2":{
                            equipSkill:true,
                            trigger:{
                                player:'damageBegin',
                            },
                            check:function(event,player){
                                var att=get.attitude(player,event.source);
                                if(att>0) return true;
                                else {
                                    if(player.hp<3) return true;
                                    if(player.countCards('he',function(card){
                                        return get.value(card)<6;
                                    })) return true;
                                    return false;
                                }
                            },
                            filter:function(event,player){
                                if(!player.storage.bhkatina_use||player.storage.bhkatina_use<1) return false;
                                if(!event.source||event.source==player) return false;
                                return event.card.name=='sha'&&player.countCards('hej');
                            },
                            content:function(){
                                'step 0'
                                player.storage.bhkatina_use--;
                                event.target=trigger.source;
                                player.chooseCard('将区域内的一张牌交给'+get.translation(event.target),'hej',true).set('ai',function(card){
                                    if(player.getCards('j').contains(card)) return 20;
                                    return 8-get.value(card);
                                });
                                'step 1'
                                event.card=result.cards[0];
                                event.target.gain(event.card,player,'give');
                                trigger.num--;
                            },
                        },
                        "bhxinyao_destory":{
                            nopop:true,
                            unique:true,
                            forced:true,
                            charlotte:true,
                            silent:true,
                            trigger:{
                                global:'useCard',
                            },
                            filter:function(event,player){
                                return event.card.name.search('bhxinyao')!=-1&&event.cards.length==1&&event.cards[0].name==event.card.name;
                            },
                            content:function(){
                                event.card=trigger.cards[0];
                                event.card.remove();
                                event.card.destroyed = true;
                                game.log(event.card,'被销毁了');
                                //lib.inpile.remove('bhkelixina_in');
                            },
                        },
                        "bhxinyao_spade_sha":{
                            nopop:true,
                            unique:true,
                            forced:true,
                            charlotte:true,
                            silent:true,
                            trigger:{
                                player:"useCardToPlayered",
                            },
                            filter:function(event,player){
                                return event.card.name=='sha'&&!event.getParent().directHit.contains(event.target);
                            },
                            content:function(){
                                var id=trigger.target.playerid;
                                var map=trigger.getParent().customArgs;
                                if(!map[id]) map[id]={};
                                if(typeof map[id].shanRequired=='number'){
                                    map[id].shanRequired++;
                                }
                                else{
                                    map[id].shanRequired=2;
                                }
                            },
                            ai:{
                                "directHit_ai":true,
                                skillTagFilter:function(player,tag,arg){
                                    if(arg.card.name!='sha'||arg.target.countCards('h','shan')>1) return false;
                                },
                            },
                        },
                        "bhkelixina_ma_skill":{
                            equipSkill: true,
                            forced:true,
                            charlotte:true,
                            trigger:{
                                source:'damageBegin1',
                            },
                            filter:function(event,player){
                                if(!event.card||event.card.name!='sha') return false;
                                return get.distance(event.player,player)>=2;
                            },
                            content:function(){
                                trigger.num++;
                            },
                            mod:{
                                globalFrom:function(from,to,distance){
                                    var num=0;
                                    for(var i=1;i<=5;i++){
                                        if(from.isEmpty(i)) num++;
                                    }
                                    num=Math.max(num,1);
                                    return distance-num;
                                },
                            },
                        },
                        "bhkelixina_ma_chonggou":{
                            enable:'phaseUse',
                            usable:1,
                            equipSkill:true,
                            content:function(){
                                'step 0'
                                event.card = player.getCards('hes', function (card) {
                                    return card.name == 'bhkelixina_ma'||card.name.search('bhkelixina')!=-1;
                                });
                                'step 1'
                                lib.inpile.remove(event.card.name);
                                event.card[0].remove();
                                event.card[0].destroyed = true;
                                'step 2'
                                var card;
                                card = game.createCard2('bhkelixina_in', 'spade', 13);
                                lib.inpile.push('bhkelixina_in');
                                player.equip(card);
                            },
                            ai:{
                                result:{
                                    order:5.4,
                                    player:function(player,target){
                                        if((player.hp<3&&!player.countCards('hs',{name:'sha'}))||player.countCards('e')>3) return 2;
                                        else return 0;
                                    },
                                },
                            },
                        },
                        "bhkelixina_in_chonggou":{
                            enable:'phaseUse',
                            usable:1,
                            equipSkill:true,
                            content:function(){
                                'step 0'
                                event.card = player.getCards('hes', function (card) {
                                    return card.name == 'bhkelixina_in'||card.name.search('bhkelixina')!=-1;
                                });
                                'step 1'
                                lib.inpile.remove(event.card.name);
                                event.card[0].remove();
                                event.card[0].destroyed = true;
                                'step 2'
                                var card;
                                card = game.createCard2('bhkelixina_ma', 'spade', 13);
                                lib.inpile.push('bhkelixina_ma');
                                player.equip(card);
                            },
                            ai:{
                                result:{
                                    order:5.4,
                                    player:function(player,target){
                                        if(player.hp>2&&player.countCards('hs',{name:'sha'})&&player.countCards('e')<2) return 2;
                                        else return 0;
                                    },
                                },
                            },
                        },
                        "bhkelixina_in_skill":{
                            equipSkill: true,
                            trigger:{
                                player:"damageBegin4",
                            },
                            forced:true,
                            charlotte:true,
                            filter:function(event,player){
                                if(!event.card||!event.cards||!event.cards.length) return false;
                                if(!event.card.suit) return false;
                                var cards=player.getCards('e'),suit=event.card.suit;
                                for(let i of cards){
                                    if(get.suit(i)==suit) return true;
                                }
                                return false;
                            },
                            content:function(){
                                var cards=player.getCards('e'),suit=trigger.card.suit,num=0;
                                for(let i of cards){
                                    if(get.suit(i)==suit) num++;
                                }
                                if(num>0) event.num=parseInt((num+1)/2);
                                trigger.num-=event.num;
                            },
                        },
                        "bhyidianzhixing_zhixing_skill": {
                            equipSkill: true,
                            enable: 'phaseUse',
                            usable: 1,
                            selectCard: 1,
                            filter: function (event, player) {
                                return player.countCards('he', { color: 'black' });
                            },
                            filterCard: function (card) {
                                return get.color(card) == 'black';
                            },
                            filterTarget: function (card, player, target) {
                                return target != player;
                            },
                            prompt: '是否发动【伊甸之星】？',
                            content: function () {
                                'step 0'
                                player.loseHp();
                                event.target = targets[0];
                                event.target.damage();
                                'step 1'
                                event.target2 = event.target.previous;
                                event.target3 = event.target.next;
                                player.discardPlayerCard('he', event.target, true);
                                if (event.target2 != event.target) player.discardPlayerCard('he', event.target2, true);
                                if (event.target3 != event.target2 && event.target3 != event.target) player.discardPlayerCard('he', event.target3, true);
                            },
                            ai: {
                                order: 6.1,
                                result: {
                                    player: function (player, target) {
                                        if (player.hp < 3) return -2;
                                        else {
                                            var eff = 1;
                                            if (get.attitude(player, target.previous) > 0) eff--;
                                            else eff++;
                                            if (target.previous == target.next) return eff;
                                            if (get.attitude(player, target.next) > 0) eff--;
                                            else eff++;
                                            return eff;
                                        }
                                    },
                                    target: -2,
                                },
                            },
                        },
                        "bhyidianzhixing_in_chonggou": {
                            equipSkill: true,
                            trigger: {
                                player: 'damage',
                            },
                            forced: true,
                            charlotte: true,
                            filter: function (event, player) {
                                return event.num >= 2 && player.countCards('e', function (card) {
                                    return card.name == 'bhyidianzhixing_in';
                                });
                            },
                            content: function () {
                                'step 0'
                                event.card = player.getCards('hes', function (card) {
                                    return card.name == 'bhyidianzhixing_in';
                                });
                                'step 1'
                                lib.inpile.remove('bhyidianzhixing_in');
                                event.card[0].remove();
                                event.card[0].destroyed = true;
                                'step 2'
                                var card;
                                card = game.createCard2('bhyidianzhixing_zhixing', 'club', 12);
                                lib.inpile.push('bhyidianzhixing_zhixing');
                                player.equip(card);
                                //player.gain(card, 'gain2');
                            },
                        },
                        "bhyidianzhixing_in_skill": {
                            equipSkill: true,
                            trigger: {
                                player: 'useCard',
                            },
                            filter: function (event, player) {
                                if (event.card.name != 'sha') return false;
                                if (!event.targets || !event.targets.length || event.targets.length > 1) return false;
                                return player.hasCard(function (card) {
                                    if (!get.number(event.card)) return true;
                                    else return get.number(card) != get.number(event.card);
                                });
                            },
                            prompt: "是否发动【伊甸双星】？",
                            check: function (event, player) {
                                var att = get.attitude(player, event.targets[0]);
                                return att < 0 && ((player.hasCard(function (card) {
                                    return get.value(card) < 6;
                                }) && event.targets[0].countCards('he') > 1) || event.targets[0].countCards('e', { subtype: 'equip2' }));
                            },
                            content: function () {
                                'step 0'
                                event.card = trigger.card;
                                event.target = trigger.targets[0];
                                event.num = -1;
                                if (get.number(event.card)) event.num = get.number(event.card);
                                var str;
                                if (event.num != -1) str = '请弃置一张点数不为' + event.num + '的手牌';
                                else str = '请弃置一张手牌';
                                player.chooseToDiscard(str, 'h', function (card, player, target) {
                                    return get.number(card) != event.num;
                                }).set('ai', function (card) {
                                    if (event.target.countCards('e', { subtype: 'equip2' })) return 9 - get.value(card);
                                    return 6 - get.value(card);
                                });
                                'step 1'
                                if (result.bool) {
                                    player.discardPlayerCard('he', event.target, true);
                                    event.target.addTempSkill('qinggang2');
                                    //event.target.storage.qinggang2.add(trigger.card);
                                }
                            },
                            ai: {
                                "unequip_ai": true,
                                skillTagFilter: function (player, tag, arg) {
                                    if (arg && arg.name == 'sha') return true;
                                    return false;
                                },
                            },
                        },
                        "bhdizuiqilei_in_skill": {
                            equipSkill: true,
                            trigger: {
                                player: 'useCard',
                            },
                            usable: 1,
                            filter: function (event, player) {
                                if (event.card.name != 'sha') return false;
                                if (!event.targets || !event.targets.length || event.targets.length > 1) return false;
                                return true;
                            },
                            prompt: '是否发动【涤罪七雷·鸣】？',
                            content: function () {
                                'step 0'
                                event.card = trigger.card;
                                event.target = trigger.targets[0];
                                if (!event.target.countCards('hej')) {
                                    result.control = '摸两张牌';
                                    event.goto(1);
                                } else {
                                    var str = '弃置' + get.translation(event.target) + '两张牌';
                                    player.chooseControl('摸两张牌', str).set('ai', function () {
                                        var bool1 = (get.color(event.card) == 'black');
                                        var bool2 = (event.target.countCards('he') == 1 && event.target.countCards('j'));
                                        var att = get.attitude(player, event.target);
                                        if (att > 0) return '摸两张牌';
                                        else {
                                            if (bool1 && !bool2) return str;
                                            else if (!bool1 && bool2) return '摸两张牌';
                                            else return (2 * player.hp + 8 - player.countCards('he') + (bool1 ? 0 : 2) - event.target.countCards('he')) > 0 ? '摸两张牌' : str;
                                        }
                                    }).set('prompt', '请选择一项');
                                }
                                'step 1'
                                if (result.control == '摸两张牌') {
                                    player.draw(2);
                                    if (get.color(event.card) == 'black') player.storage.bhdizuiqilei_in_skill_discard = true;
                                    player.addTempSkill('bhdizuiqilei_in_skill_discard');
                                    event.finish();
                                } else {
                                    event.goto(2);
                                }
                                'step 2'
                                player.discardPlayerCard(event.target, 'hej', 2, true);
                                'step 3'
                                for (i of result.cards) {
                                    if (get.type(i) == 'equip') event.target.storage.bhdizuiqilei_in_skill_draw = true;
                                }
                                event.target.addTempSkill('bhdizuiqilei_in_skill_draw');
                            },
                            subSkill: {
                                discard: {
                                    trigger: {
                                        player: 'shaAfter',
                                    },
                                    forced: true,
                                    silent: true,
                                    content: function () {
                                        if (player.storage.bhdizuiqilei_in_skill_discard) event.num = 2;
                                        else event.num = 1;
                                        player.chooseToDiscard('he', event.num, true);
                                        player.removeSkill('bhdizuiqilei_in_skill_discard');
                                    },
                                    sub: true,
                                },
                                draw: {
                                    sub: true,
                                    forced: true,
                                    silent: true,
                                    trigger: {
                                        global: 'shaAfter',
                                    },
                                    content: function () {
                                        if (player.storage.bhdizuiqilei_in_skill_draw) event.num = 2;
                                        else event.num = 1;
                                        player.draw(event.num);
                                        player.removeSkill('bhdizuiqilei_in_skill_draw');
                                    },
                                },
                            },
                        },
                        "bhxukongwanzang_skill": {
                            enable: "phaseUse",
                            usable: 3,
                            position: "he",
                            lose: false,
                            selectCard: 1,
                            prompt: "出牌阶段限三次，你可以使用【虚空万藏】拟态一件游戏中存在的装备。",
                            filterCard: function (card) {
                                return card.name == 'bhxukongwanzang' || card.source == 'bhxukongwanzang' || card.name.search('bhxukongwanzang') != -1;
                            },
                            content: function () {
                                'step 0'
                                var list = [['equip5', '', 'bhxukongwanzang']]
                                for (var i of lib.inpile) {
                                    if (get.type(i) == 'equip') list.push([get.subtype(i), '', i]);
                                }
                                player.chooseButton(['拟态：请选择一张装备牌', [list, 'vcard']], true).set('filterButton', function (button) {
                                    // var cards=player.getCards('e');
                                    // var list=[];
                                    // if(cards.length){
                                    //     for(var i=0;i<cards.length;i++){
                                    //         if(!list.contains(get.subtype(cards[i]))) list.push(get.subtype(cards[i]));
                                    //     }
                                    // }
                                    // if(list.contains(button.link[0])) return false;
                                    return button.link[2] != cards[0].name && (cards[0].name.search(button.link[2]) == -1 || button.link[2] == 'bhxukongwanzang');
                                }).set('ai', function (button) {
                                    if (player.countCards('hs', { name: 'sha' }) > 1 && game.hasPlayer(function (target) {
                                        return player.inRange(target) && get.attitude(player, target) < 0;
                                    })) return button.link[2] == 'zhuge' ? 100 : 0;
                                    //if(player.hp<2) return button.link[2]=='baiyin'?100:0;
                                    var value;
                                    for (var i of lib.inpile) {
                                        if (i == button.link[2]) {
                                            var card;
                                            if (i.ai != undefined && i.ai.basic != undefined && i.ai.basic.equipValue == undefined && i.ai.equipValue == undefined) card = get.cardPile(function (card) {
                                                return card.name == i;
                                            });
                                            else if (i.ai != undefined && i.ai.basic != undefined && i.ai.basic.equipValue != undefined) value = i.ai.basic.equipValue;
                                            else if (i.ai != undefined && i.ai.equipValue != undefined) value = i.ai.equipValue;
                                            if (card) {
                                                if (card.ai != undefined && card.ai.basic != undefined && card.ai.basic.equipValue == undefined && card.ai.equipValue == undefined) continue;
                                                else if (card.ai != undefined && card.ai.basic != undefined && card.ai.basic.equipValue != undefined) value = card.ai.basic.equipValue;
                                                else if (card.ai != undefined && card.ai.equipValue != undefined) value = card.ai.equipValue;
                                            }
                                        }
                                    }
                                    value = [1, 2, 3].randomGet();
                                    if (button.link[0] == 'equip1' && player.isEmpty(1)) value += 2;
                                    if (button.link[0] == 'equip2' && player.isEmpty(2)) value += 2;
                                    if (button.link[0] == 'equip3' && player.isEmpty(3)) value += 2;
                                    if (button.link[0] == 'equip4' && player.isEmpty(4)) value += 2;
                                    if (button.link[0] == 'equip5' && player.isEmpty(5)) value += 2;
                                    if (player.countCards('hs', { name: 'sha' }) == 0 && button.link[0] == 'equip1' && button.link[2] != 'bhheiyuanbaihua_in') value -= 2;
                                    return value;
                                });
                                'step 1'
                                var card = result.links[0][2], name2 = result.links[0][2] != 'bhxukongwanzang' ? 'bhxukongwanzang_' + card : 'bhxukongwanzang', skills1 = ['bhxukongwanzang_skill'], skills2 = lib.card[card].skills || [];
                                //game.log(cards[0].truename,'/',result.links[0][2]);
                                if (skills2) {
                                    for (var i = 0; i < skills2.length; i++)
                                        if (skills2[i].search('chonggou') == -1) skills1.push(skills2[i]);
                                }
                                if (!lib.card[name2]) {
                                    var info = {
                                        enable: true,
                                        type: 'equip',
                                        subtype: lib.card[card].subtype,
                                        cardimage: card,
                                        filterTarget: function (card, player, target) {
                                            return target == player;
                                        },
                                        //destroy: 'bhxukongwanzang_skill',
                                        allowMultiple: false,
                                        toself: true,
                                        selectTarget: -1,
                                        modTarget: true,
                                        content: lib.element.content.equipCard,
                                        legend: true,
                                        onEquip: lib.card[card].onEquip,
                                        onLose: lib.card[card].onLose,
                                        skills: skills1,
                                        distance: lib.card[card].distance,
                                        ai: {
                                            //order: 8.9,
                                            basic: {
                                                equipValue: 10,
                                            },
                                            //equipValue: 10,
                                            useful: 2.5,
                                            // value: function (card, player) {
                                            //     var value = 0;
                                            //     var info = get.info(card);
                                            //     var current = player.getEquip(info.subtype);
                                            //     if (current && card != current) {
                                            //         value = get.value(current, player);
                                            //     }
                                            //     var equipValue = info.ai.equipValue || info.ai.basic.equipValue;
                                            //     if (typeof equipValue == 'function') return equipValue(card, player) - value;
                                            //     return equipValue - value;
                                            // },
                                            // result: {
                                            //     target: function (player, target) {
                                            //         return get.equipResult(player, target, name);
                                            //     }
                                            // }
                                        }
                                    }
                                    lib.card[name2] = info;
                                    lib.translate[name2] = card == 'bhxukongwanzang' ? '虚空万藏' : '拟态•' + get.translation(card, 'skill');
                                    lib.translate[name2 + '_info'] = lib.translate[card + '_info'];
                                }
                                lib.inpile.remove(cards[0].name);
                                cards[0].remove();
                                cards[0].destroyed = true;
                                //cards[0].init(game.createCard({ name: name2, suit: lib.suit.randomGet(), number: 1 }));
                                event.card = game.createCard({ name: name2, suit: lib.suit.randomGet(), number: 1 });
                                player.equip(event.card);
                                cards[0].source = 'bhxukongwanzang';
                                cards[0].truename = result.links[0][2];
                            },
                            ai: {
                                order: function (card, player, target) {
                                    if (player.countCards('hs', { name: 'sha' }) == 0) return 1;
                                    return [7.8, 5, 1].randomGet();
                                },
                                result: {
                                    player: 1,
                                },
                            },
                        },
                        "bhtianehu_skill": {
                            trigger: {
                                player: "useCard",
                            },
                            filter: function (event, player) {
                                return event.card.name == 'sha' && player != _status.currentPhase;
                            },
                            equipSkill: true,
                            forced: true,
                            content: function () {
                                player.draw();
                            },
                        },
                        "bhheiyuanbaihua_in_skill1": {
                            trigger: {
                                source: "damageBegin2",
                            },
                            direct: true,
                            equipSkill: true,
                            subSkill: {
                                im: {
                                    sub: true,
                                },
                            },
                            filter: function (event, player) {
                                return player.countCards('he', function (card) {
                                    return card != player.getEquip('bhheiyuanbaihua_in');
                                }) >= 1 && event.player.isAlive() && !player.hasSkill('bhheiyuanbaihua_in_skill1_im') && event.player != player;
                            },
                            content: function () {
                                "step 0"
                                event.num = trigger.num;
                                event.target = trigger.player;
                                var next = player.chooseToDiscard('是否发动黑渊白花·黑渊', 'he', function (card) {
                                    return _status.event.player.getEquip('bhheiyuanbaihua_in') != card;
                                });
                                //next.logSkill = 'bhheiyuanbaihua_in_skill1';
                                next.set('ai', function (card) {
                                    var evt = _status.event.getTrigger();
                                    if (get.attitude(evt.player, evt.target) < 0) {
                                        if (evt.baseDamage + evt.extraDamage >= Math.min(2, evt.target.hp)) {
                                            return 8 - get.value(card)
                                        }
                                        if (evt.target.hasSkillTag('maixie')) {
                                            return 10 - get.value(card)
                                        }
                                        return 5 - get.value(card)
                                    }
                                    return -1;
                                });
                                "step 1"
                                if (result.bool) {
                                    player.logSkill('bhheiyuanbaihua_in_skill1',event.target);
                                    trigger.cancel();
                                    player.addTempSkill('bhheiyuanbaihua_in_skill1_im');
                                    trigger.player.chooseControl('体力', '体力上限').set('prompt', '请选择一项失去').set('ai', function () {
                                        if (event.num >= event.target.hp && !event.target.countCards('hs', { name: ['tao', 'jiu'] })) return '体力上限';
                                        else return '体力';
                                    });
                                } else event.finish();
                                "step 2"
                                if (result.control == '体力') {
                                    event.target.loseHp(event.num);
                                } else {
                                    if (!event.target.storage.bhheiyuanbaihua_heiyuan) event.target.storage.bhheiyuanbaihua_heiyuan = 0;
                                    event.target.storage.bhheiyuanbaihua_heiyuan += event.num;
                                    event.target.loseMaxHp(event.num);
                                }
                            },
                        },
                        "bhheiyuanbaihua_in_skill2": {
                            equipSkill: true,
                            trigger: {
                                global: ["dying"],
                            },
                            priority: 4,
                            subSkill: {
                                im: {
                                    sub: true,
                                },
                            },
                            direct: true,
                            filter: function (event, player) {
                                return player.countCards('he', function (card) {
                                    return card != player.getEquip('bhheiyuanbaihua_in');
                                }) >= 1 && !player.hasSkill('bhheiyuanbaihua_in_skill2_im');
                            },
                            content: function () {
                                "step 0"
                                event.target = trigger.player;
                                var next = player.chooseToDiscard('是否发动黑渊白花·白花', 'he', function (card) {
                                    return _status.event.player.getEquip('bhheiyuanbaihua_in') != card;
                                });
                                //next.logSkill = 'bhheiyuanbaihua_in_skill2';
                                next.set('ai', function (card) {
                                    if (player.identity == 'zhong' && event.target.identity == 'zhu' && player.hp > 1 && !player.countCards('hs', { name: ['tao', 'bhbenghuaijiejing'] })) return 20 - get.value(card);
                                    if (get.attitude(player, event.target) > 0 && (player.hp > 1 || event.target == player)) {
                                        return 10 - get.value(card) + (['tao', 'bhbenghuaijiejing'].contains(card.name) ? -8 : 0);
                                    }
                                    return -1;
                                });
                                "step 1"
                                if (result.bool) {
                                    player.loseHp();
                                    player.addTempSkill('bhheiyuanbaihua_in_skill2_im');
                                    player.logSkill('bhheiyuanbaihua_in_skill2',event.target);
                                } else event.finish();
                                "step 2"
                                player.line(event.target);
                                event.target.recover(1 - event.target.hp, player);
                                "step 3"
                                if (event.target.storage.bhheiyuanbaihua_heiyuan && event.target.storage.bhheiyuanbaihua_heiyuan > 0) {
                                    event.num = event.target.storage.bhheiyuanbaihua_heiyuan;
                                    event.target.storage.bhheiyuanbaihua_heiyuan = 0;
                                    event.target.gainMaxHp(event.num);
                                }
                            },
                        },
                        "bhheiyuanbaihua_in_chonggou": {
                            enable: "phaseUse",
                            usable: 1,
                            filter: function (event, player) {
                                return player.countCards('hs', function (card) {
                                    return card.name != 'bhheiyuanbaihua_in';
                                }) >= 1;
                            },
                            content: function () {
                                'step 0'
                                event.card = player.getCards('hes', function (card) {
                                    return card.name == 'bhheiyuanbaihua_in';
                                });
                                player.chooseToDiscard('h', function (card) {
                                    return card.name != 'bhheiyuanbaihua_in';
                                }, true);
                                'step 1'
                                lib.inpile.remove('bhheiyuanbaihua_in');
                                event.card[0].remove();
                                event.card[0].destroyed = true;
                                //game.log(event.card[0], '被销毁了');
                                'step 2'
                                var card1, card2;
                                card1 = game.createCard2('bhheiyuanbaihua_heiyuan', 'spade', 6);
                                card2 = game.createCard2('bhheiyuanbaihua_baihua', 'heart', 6);
                                lib.inpile.push('bhheiyuanbaihua_heiyuan');
                                lib.inpile.push('bhheiyuanbaihua_baihua');
                                player.gain(card1, 'gain2');
                                player.gain(card2, 'gain2');
                            },
                        },
                        "bhheiyuanbaihua_heiyuan_skill": {
                            trigger: {
                                source: "damageBegin2",
                            },
                            priority: 2,
                            direct: true,
                            equipSkill: true,
                            subSkill: {
                                im: {
                                    sub: true,
                                },
                            },
                            filter: function (event, player) {
                                if(!event.card||event.card.name!='sha') return false;
                                return event.num >= 1 && player.countCards('he', function (card) {
                                    return card != player.getEquip('bhheiyuanbaihua_heiyuan');
                                }) >= 1 && event.player.isAlive() && !player.hasSkill('bhheiyuanbaihua_heiyuan_skill_im') && event.player != player;
                            },
                            content: function () {
                                "step 0"
                                event.num = trigger.num;
                                event.target = trigger.player;
                                var next = player.chooseToDiscard(get.prompt('bhheiyuanbaihua_heiyuan'), 'he', function (card) {
                                    return _status.event.player.getEquip('bhheiyuanbaihua_heiyuan') != card;
                                });
                                //next.logSkill = 'bhheiyuanbaihua_heiyuan_skill';
                                next.set('ai', function (card) {
                                    //var evt = _status.event.getTrigger();
                                    if (get.attitude(player, event.target) < 0&&event.num<event.target.hp&&player.hp>2) {
                                        if (event.target.hasSkillTag('maixie')) {
                                            return 10 - get.value(card)
                                        }
                                        else return 6 - get.value(card);
                                    }
                                    return -2;
                                });
                                "step 1"
                                if (result.bool) {
                                    trigger.cancel();
                                    player.logSkill('bhheiyuanbaihua_heiyuan_skill',event.target);
                                    player.loseHp();
                                    player.addTempSkill('bhheiyuanbaihua_heiyuan_skill_im');
                                } else event.finish();
                                "step 2"
                                if (!event.target.storage.bhheiyuanbaihua_heiyuan) event.target.storage.bhheiyuanbaihua_heiyuan = 0;
                                event.target.storage.bhheiyuanbaihua_heiyuan += event.num;
                                event.target.loseMaxHp(event.num);
                            },
                        },
                        "bhheiyuanbaihua_baihua_skill": {
                            priority: 2,
                            equipSkill: true,
                            trigger: {
                                global: ["dying"],
                            },
                            subSkill: {
                                im: {
                                    sub: true,
                                    charlotte: true,
                                },
                            },
                            direct: true,
                            filter: function (event, player) {
                                if (event.player == player) return player.countCards('he', function (card) {
                                    return card != player.getEquip('bhheiyuanbaihua_baihua') && !player.hasSkill('bhheiyuanbaihua_baihua_skill_im');
                                }) >= 1;
                                else return !player.hasSkill('bhheiyuanbaihua_baihua_skill_im');
                            },
                            check: function (event, player) {
                                if (event.player == player) return true;
                                if (event.player.identity == 'zhu' && player.identity != 'fan') return true;
                                return get.attitude(player, event.player) > 0 && player.hp > 2;
                            },
                            content: function () {
                                "step 0"
                                event.target = trigger.player;
                                var next;
                                if (event.target == player) {
                                    next = player.chooseToDiscard(get.prompt('bhheiyuanbaihua_baihua'), 'he', function (card) {
                                        return _status.event.player.getEquip('bhheiyuanbaihua_baihua') != card;
                                    });
                                    next.set('ai', function (card) {
                                        return 12 - get.value(card) + (['tao', 'jiu', 'bhbenghuaijiejing'].contains(card.name) ? -4 : 0);
                                    });
                                } else {
                                    next = player.chooseBool('你可以失去1点体力，令' + get.translation(event.target) + '回复1点体力');
                                    next.set('ai', function () {
                                        if (get.attitude(player, event.target) > 0 && player.hp > 1) {
                                            return true;
                                        } else return false;
                                    })
                                }
                                //next.logSkill = 'bhheiyuanbaihua_baihua_skill';
                                "step 1"
                                if (result.bool) {
                                    if (event.target != player) {
                                        player.loseHp();
                                    }
                                    player.logSkill('bhheiyuanbaihua_baihua_skill',event.target);
                                    player.addTempSkill('bhheiyuanbaihua_baihua_skill_im');
                                } else event.finish();
                                "step 2"
                                player.line(event.target);
                                event.target.recover(player);
                            },
                        },
                        "bhheiyuanbaihua_heiyuan_chonggou": {
                            enable: "phaseUse",
                            usable: 1,
                            filter: function (event, player) {
                                var cards = player.getCards('hes', function (card) {
                                    return card.name == 'bhheiyuanbaihua_heiyuan' || card.name == 'bhheiyuanbaihua_baihua';
                                });
                                if (cards.length < 2) return false;
                                return true;
                            },
                            content: function () {
                                'step 0'
                                event.card = player.getCards('hes', function (card) {
                                    return card.name == 'bhheiyuanbaihua_heiyuan' || card.name == 'bhheiyuanbaihua_baihua';
                                });
                                'step 1'
                                lib.inpile.remove('bhheiyuanbaihua_heiyuan');
                                lib.inpile.remove('bhheiyuanbaihua_baihua');
                                event.card[0].remove();
                                event.card[0].destroyed = true;
                                event.card[1].remove();
                                event.card[1].destroyed = true;
                                //game.log(event.card[0], '被销毁了');
                                'step 2'
                                var card;
                                card = game.createCard2('bhheiyuanbaihua_in', 'spade', 12);
                                lib.inpile.push('bhheiyuanbaihua_in');
                                player.equip(card);
                            },
                            ai:{
                                order:8.5,
                                result:{
                                    player:1,
                                },
                            },
                        },
                        bhbenghuaijiejing: {
                            trigger: {
                                source: 'damageBegin',
                            },
                            filter: function (event, player) {
                                return player.storage.bhbenghuaijiejing > 0;
                            },
                            silent: true,
                            forced: true,
                            charlotte: true,
                            firstDo: true,
                            popup: false,
                            nopop: true,
                            onremove: function (player) {
                                delete player.storage.bhbenghuaijiejing;
                            },
                            content: function () {
                                trigger.num += player.storage.bhbenghuaijiejing;
                                player.removeSkill('bhbenghuaijiejing');
                            },
                            ai: {
                                damageBonus: true
                            },
                        },
                        "bhdizangyuhun_in_skill1": {
                            equipSkill: true,
                            forced: true,
                            charlotte: true,
                            trigger: {
                                player: ['loseAfter', 'compare', 'phaseZhunbei'],
                                global: ['equipAfter', 'addJudgeAfter', 'gainAfter', 'loseAsyncAfter'],
                                target: 'compare',
                            },
                            priority: 4,
                            filter: function (event, player, name) {
                                if (event.player && (event.player.hasSkill('bhshengxue') || event.player.hasSkill('bhlvzhe'))) return false;
                                if (name == 'phaseZhunbei') return event.player.countCards('e', { name: 'bhdizangyuhun_in' });
                                if (name == 'compare') {
                                    if (player == event.player) {
                                        if (event.iwhile > 0) return false;
                                        return event.card1.name == 'bhdizangyuhun_in';
                                    }
                                    return event.card2.name == 'bhdizangyuhun_in';
                                }
                                if (event.name != 'equip' && event.name != 'addJudge' && !event.visible) return false;
                                var evt = event.getl(player);
                                if (!evt || !evt.hs || !evt.hs.filter(function (i) {
                                    return get.name(i, player) == 'bhdizangyuhun_in';
                                }).length) return false;
                                return true;
                            },
                            popup: false,
                            content: function () {
                                'step 0'
                                if (trigger.delay === false) game.delayx();
                                'step 1'
                                game.log(player, '触发了', '#g【匣中恶魔】', '的效果');
                                var num = 1;
                                if (typeof trigger.getl == 'function') {
                                    num = trigger.getl(player).hs.filter(function (i) {
                                        return get.name(i, player) == 'bhdizangyuhun_in';
                                    }).length;
                                }
                                player.loseHp(num);
                                player.judge();
                                'step 2'
                                if (result.color == 'red') player.draw(2);
                                else player.draw();
                            },
                        },
                        "bhdizangyuhun_in_skill2": {
                            cardSkill: true,
                            charlotte: true,
                            forced: true,
                            trigger: {
                                player: 'phaseJieshu',
                            },
                            filter: function (event, player) {
                                return player.countCards('hs', { name: 'bhdizangyuhun_in' }) > 0;
                            },
                            content: function () {
                                var card = player.getCards('hs', function (card) {
                                    return card.name == 'bhdizangyuhun_in';
                                });
                                //game.log(card);
                                player.useCard(card[0], player);
                            },
                        },
                        "bhdizangyuhun_in_chonggou": {
                            equipSkill: true,
                            charlotte: true,
                            forced: true,
                            trigger: {
                                global: 'dying',
                            },
                            filter: function (event, player) {
                                var card = get.cardPile(function (card) {
                                    return card.name == 'bhdizangyuhun_dizang';
                                }, 'field');
                                if (card != null) return false;
                                var targets = game.filterPlayer();
                                for (var i = 0; i < targets.length; i++) {
                                    if (targets[i].countCards('hes', { name: 'bhdizangyuhun_dizang' })) return false;
                                }
                                var evt = event.getParent(2);
                                return evt && evt.name == 'bhdizangyuhun_in_skill1';
                            },
                            content: function () {
                                'step 0'
                                event.target = trigger.player;
                                event.targets = game.filterPlayer();
                                event.card = get.cardPile(function (card) {
                                    return card.name == 'bhdizangyuhun_in';
                                }, 'field');
                                if (event.card == null) {
                                    var finded = false;
                                    while (event.targets.length && !finded) {
                                        event.target = event.targets.shift();
                                        event.cards = event.target.getCards('hs');
                                        for (var i = 0; i < event.cards.length; i++) {
                                            if (event.cards[i].name == 'bhdizangyuhun_in') {
                                                event.card = event.cards[i];
                                                finded = true;
                                            }
                                        }
                                    }
                                    if (!finded) event.target = trigger.player;
                                }
                                if (event.card == null) {
                                    player.addTempSkill('bhdizangyuhun_in_chonggou_equip');
                                    event.goto(1);
                                } else {
                                    lib.inpile.remove('bhdizangyuhun_in');
                                    event.card.remove();
                                    event.card.destroyed = true;
                                    //game.log(event.card, '被销毁了');
                                }
                                'step 1'
                                var card;
                                card = game.createCard2('bhdizangyuhun_dizang', 'spade', 12);
                                lib.inpile.push('bhdizangyuhun_dizang');
                                event.target.gain(card, 'gain2');
                            },
                            subSkill: {
                                equip: {
                                    charlotte: true,
                                    forced: true,
                                    silent: true,
                                    trigger: {
                                        player: ['dieBegin', 'equipAfter'],
                                    },
                                    filter: function (event, player) {
                                        // var card=get.cardPile(function (card) {
                                        //     return card.name == 'bhdizangyuhun_in';
                                        // },'field');
                                        // return card;
                                        return true;
                                    },
                                    content: function () {
                                        event.card = get.cardPile(function (card) {
                                            return card.name == 'bhdizangyuhun_in';
                                        }, 'field');
                                        if (event.card == null) {
                                            var cards = Array.from(ui.ordering.childNodes);
                                            event.card = cards[0];
                                        }
                                        //game.log(event.card);
                                        if (event.card) {
                                            lib.inpile.remove('bhdizangyuhun_in');
                                            event.card.remove();
                                            event.card.destroyed = true;
                                        }
                                        //player.removeSkill('bhdizangyuhun_in_chonggou_equip')
                                    },

                                },
                            },
                        },
                        "bhdizangyuhun_dizang_skill": {
                            trigger: {
                                source: 'damageEnd',
                            },
                            filter: function (event, player) {
                                return event.player.isAlive() && event.player != player && !player.hasSkill('bhdizangyuhun_dizang_skill_im') && player.isPhaseUsing();
                            },
                            check: function (event, player) {
                                return player.hp > 1 && get.attitude(player, event.player) < 0;
                            },
                            prompt: "是否发动【地藏御魂】？",
                            content: function () {
                                "step 0"
                                event.target = trigger.player;
                                if (!player.isTurnedOver()) player.turnOver();
                                var evt = _status.event;
                                for (var i = 0; i < 10; i++) {
                                    if (evt && evt.getParent) evt = evt.getParent();
                                    if (evt.name == 'phaseUse') {
                                        evt.skipped = true;
                                        break;
                                    }
                                }
                                "step 1"
                                player.addTempSkill('bhdizangyuhun_dizang_skill_im', 'roundStart');
                                event.target.addSkill("bhdizangyuhun_dizang_skill_target");
                            },
                            group: 'bhdizangyuhun_dizang_skill_control',
                            subSkill: {
                                im: {},
                                target: {
                                    charlotte: true,
                                    forceDie: true,
                                    mark: true,
                                    marktext: "御",
                                    intro: {
                                        name: "地藏御魂",
                                        content: function (storage, player) {
                                            return "已被地藏御魂侵蚀，失去下回合控制权";
                                        },
                                    },
                                    popup: false,
                                    forced: true,
                                    trigger: {
                                        player: ["phaseEnd", "dieAfter"]
                                    },
                                    content: function () {
                                        player.removeSkill("bhdizangyuhun_dizang_skill_target");
                                    },
                                },
                                control: {
                                    forced: true,
                                    trigger: { global: 'phaseBeginStart' },
                                    filter: function (event, player) {
                                        return player != event.player && !event.player._trueMe && event.player.hasSkill("bhdizangyuhun_dizang_skill_target");
                                    },
                                    content: function () {
                                        trigger.player._trueMe = player;
                                        game.addGlobalSkill('autoswap');
                                        if (trigger.player == game.me) {
                                            game.notMe = true;
                                            if (!_status.auto) ui.click.auto();
                                        }
                                        trigger.player.addSkill('huoxin2');
                                    }
                                },
                            },
                        },
                        "bhtianhuoshengcai_in_skill": {
                            equipSkill: true,
                            trigger: {
                                source: 'damageBegin',
                            },
                            forced: true,
                            filter: function (event, player) {
                                return event.card && ['sha', 'juedou'].contains(event.card.name) && event.nature != 'fire';
                            },
                            content: function () {
                                trigger.nature = 'fire';
                            },
                            mod: {
                                cardnature: function (card, player) {
                                    if (card.name == 'sha') return 'fire';
                                },
                            },
                            ai: {
                                fireAttack: true,
                                effect: {
                                    player: function (card, player, target, current, isLink) {
                                        if (card.name == 'sha' || card.name == 'juedou') {
                                            if (target.hasSkill('tengjia2')) return 4;
                                        }
                                    }
                                },
                            }
                        },
                        "bhtianhuoshengcai_in_chonggou": {
                            equipSkill: true,
                            enable: 'phaseUse',
                            usable: 1,
                            prompt: "你可以弃一张牌，然后将【天火圣裁】重构为【天火大剑】",
                            filter: function (event, player) {
                                return player.countCards('hes', function (card) {
                                    return card.name != 'bhtianhuoshengcai_in';
                                }) > 0;
                            },
                            content: function () {
                                'step 0'
                                event.card = player.getCards('hes', function (card) {
                                    return card.name == 'bhtianhuoshengcai_in';
                                });
                                player.chooseToDiscard('hes', function (card) {
                                    return card.name != 'bhtianhuoshengcai_in';
                                }, true);
                                'step 1'
                                //event.card[0].init({name:'bhtianhuoshengcai_dajian',suit:'heart',number:'2'});
                                lib.inpile.remove('bhtianhuoshengcai_in');
                                event.card[0].remove();
                                event.card[0].destroyed = true;
                                'step 2'
                                var card;
                                if (player.name != 'bhkaiwen') {
                                    card = game.createCard2('bhtianhuoshengcai_dajian', 'heart', 2);
                                    lib.inpile.push('bhtianhuoshengcai_dajian');
                                } else {
                                    card = game.createCard2('bhtianhuoshengcai_jiemie', 'heart', 2);
                                    lib.inpile.push('bhtianhuoshengcai_jiemie');
                                }
                                player.equip(card);
                                //player.gain(card, 'gain2');
                            },
                            ai: {
                                order: 6,
                                result: {
                                    player: function (player) {
                                        if (player.name == 'bhkaiwen') return 3;
                                        if (player.countCards('hs', { name: ['sha', 'juedou'] }) && player.hp > 2) return player.countCards('hes') - 2;
                                        else return -0.5;
                                    },
                                },
                            },
                        },
                        "bhtianhuoshengcai_dajian_skill": {
                            equipSkill: true,
                            trigger: {
                                source: 'damageBegin1',
                            },
                            priority: 4,
                            forced: true,
                            filter: function (event, player) {
                                return event.nature != 'fire';
                            },
                            content: function () {
                                trigger.nature = 'fire';
                            },
                            group: ['bhtianhuoshengcai_dajian_skill_damage', 'bhtianhuoshengcai_dajian_skill_lose'],
                            subSkill: {
                                damage: {
                                    forced: true,
                                    silent: true,
                                    trigger: {
                                        source: 'damageBegin1',
                                    },
                                    priority: 3,
                                    filter: function (event, player) {
                                        return event.nature == 'fire';
                                    },
                                    content: function () {
                                        trigger.num++;
                                    },
                                },
                                lose: {
                                    forced: true,
                                    silent: true,
                                    trigger: {
                                        source: 'damageBegin1',
                                    },
                                    filter: function (event, player) {
                                        return event.nature == 'fire';
                                    },
                                    priority: 2,
                                    content: function () {
                                        'step 0'
                                        event.num = parseInt(trigger.num / 2);
                                        if (event.num == 0) event.finish();
                                        'step 1'
                                        player.loseHp(event.num);
                                    },
                                },
                            },
                            ai: {
                                fireAttack: true,
                            },
                        },
                        "bhtianhuoshengcai_dajian_chonggou": {
                            equipSkill: true,
                            enable: 'phaseUse',
                            usable: 1,
                            prompt: "你可以将【天火大剑】重构为【天火圣裁】",
                            filter: function (event, player) {
                                return player.countCards('e', function (card) {
                                    return card.name == 'bhtianhuoshengcai_dajian';
                                });
                            },
                            content: function () {
                                'step 0'
                                event.card = player.getCards('hes', function (card) {
                                    return card.name == 'bhtianhuoshengcai_dajian';
                                });
                                'step 1'
                                lib.inpile.remove('bhtianhuoshengcai_dajian');
                                event.card[0].remove();
                                event.card[0].destroyed = true;
                                'step 2'
                                var card;
                                if (player.name != 'bhkaiwen') {
                                    card = game.createCard2('bhtianhuoshengcai_in', 'heart', 2);
                                    lib.inpile.push('bhtianhuoshengcai_in');
                                } else {
                                    card = game.createCard2('bhtianhuoshengcai_jiemie', 'heart', 2);
                                    lib.inpile.push('bhtianhuoshengcai_jiemie');
                                }
                                player.equip(card);
                                //player.gain(card, 'gain2');
                            },
                            ai: {
                                order: 6,
                                result: {
                                    player: function (player) {
                                        if (player.name == 'bhkaiwen') return 3;
                                        if (player.countCards('hs', { name: ['sha', 'juedou'] }) == 0 || player.hp <= 2) return 4;
                                        else return -1;
                                    },
                                },
                            }
                        },
                        "bhtianhuoshengcai_jiemie_skill": {
                            equipSkill: true,
                            trigger: {
                                source: 'damageBegin1',
                            },
                            forced: true,
                            filter: function (event, player) {
                                return event.nature != 'fire';
                            },
                            content: function () {
                                trigger.nature = 'fire';
                            },
                            group: ['bhtianhuoshengcai_jiemie_skill_damage', 'bhtianhuoshengcai_jiemie_skill_lose'],
                            subSkill: {
                                damage: {
                                    forced: true,
                                    silent: true,
                                    trigger: {
                                        source: 'damageBegin2',
                                    },
                                    filter: function (event, player) {
                                        return event.nature == 'fire';
                                    },
                                    content: function () {
                                        trigger.num++;
                                    },
                                },
                                lose: {
                                    forced: true,
                                    trigger: {
                                        source: 'damageBegin3',
                                    },
                                    filter: function (event, player) {
                                        return event.nature == 'fire';
                                    },
                                    content: function () {
                                        'step 0'
                                        event.num = parseInt(trigger.num / 2);
                                        if (event.num == 0) event.finish();
                                        'step 1'
                                        player.loseHp(event.num);
                                        'step 2'
                                        player.draw(event.num);
                                    },
                                },
                            },
                            ai: {
                                fireAttack: true,
                            },
                        },
                    },
                    translate: {
                        ////////////卡牌翻译
                        bhjiasujuan:"加速券",
                        "bhjiasujuan_info":"出牌阶段，对一名有“盾”的角色使用。目标角色执行一次护盾自然衰减，然后可以使用至多两张因此失去的“盾”。",
                        bhpingzhang:"屏障",
                        "bhpingzhang_info":"出牌阶段，对自己或攻击范围内的一名角色使用。目标角色从牌堆顶获得两张“盾”。",
                        bhbujibao:"补给包",
                        "bhbujibao_info":"出牌阶段，对自己使用。目标角色获得1点SP，若目标角色已有SP不小于3，其可以选择改为回复1点体力。",
                        "bhjiuwayousi":"咎瓦尤斯",
                        "bhjiuwayousi_skill":"咎瓦尤斯",
                        "bhjiuwayousi_info":"锁定技，当你受【酒】效果影响或手牌数大于体力值时，你使用的【杀】不可被响应。",
                        "bhjiuwayousi_skill_info":"锁定技，当你受【酒】效果影响或手牌数大于体力值时，你使用的【杀】不可被响应。",
                        "bhyoulandaier":"幽兰戴尔",
                        "bhyoulandaier_skill1":"幽兰戴尔",
                        "bhyoulandaier_skill2":"幽兰戴尔",
                        "bhyoulandaier_info":"①你失去体力后，可以消耗1点SP并选择一项：摸两张牌；或回复1点体力，然后对自己造成1点伤害。<br>②当你使用【杀】时，你可以获得1点SP。",
                        "bhyoulandaier_skill1_info":"当你失去体力后，可以消耗1点SP并选择一项：摸两张牌；或回复1点体力，然后对自己造成1点伤害。",
                        "bhyoulandaier_skill2_info":"当你使用【杀】时，你可以获得1点SP。",
                        "bhkatina":"卡提那",
                        "bhkatina_skill1":"卡提那",
                        "bhkatina_skill2":"卡提那",
                        "bhkatina_info":"①当你使用【杀】对其他角色造成伤害前，你可以令此伤害-1。若如此做，你获得该角色区域内的一张牌。<br>②此项的发动次数不得超过①，当其他角色使用【杀】对你造成伤害前，你可以将你区域内的一张牌交给该角色。若如此做，此伤害-1。",
                        "bhkatina_skill1_info":"当你使用【杀】对其他角色造成伤害前，你可以令此伤害-1。若如此做，你获得该角色区域内的一张牌。",
                        "bhkatina_skill2_info":"此项的发动次数不得超过①，当其他角色使用【杀】对你造成伤害前，你可以将你区域内的一张牌交给该角色。若如此做，此伤害-1。",
                        "bhxinyao_fake1":"新药",
                        "bhxinyao_fake2":"新药",
                        "bhxinyao_fake3":"新药",
                        "bhxinyao_fake4":"新药",
                        "bhxinyao_fake1_info":"出牌阶段，对自己使用。你进行一次判定：若为结果红色，增加1点体力上限。",
                        "bhxinyao_fake2_info":"出牌阶段，对攻击范围内的一名角色使用。目标角色需要使用一张【闪】来响应，否则失去1点体力。",
                        "bhxinyao_fake3_info":"出牌阶段，对自己使用。若你已受伤，回复1点体力，否则你摸两张牌。",
                        "bhxinyao_fake4_info":"出牌阶段，对自己使用。令自己使用的下一张【杀】需要连续地额外使用一张【闪】才可以响应。",
                        "bhxinyao_diamond":"新药",
                        "bhxinyao_spade":"新药",
                        "bhxinyao_heart":"新药",
                        "bhxinyao_club":"新药",
                        "bhxinyao_diamond_info":"出牌阶段，对自己使用。你进行一次判定：若为结果红色，增加1点体力上限。",
                        "bhxinyao_spade_info":"出牌阶段，对自己使用。令自己使用的下一张【杀】需要连续地额外使用一张【闪】才可以响应。",
                        "bhxinyao_heart_info":"出牌阶段，对自己使用。若你已受伤，回复1点体力，否则你摸两张牌。",
                        "bhxinyao_club_info":"出牌阶段，对攻击范围内的一名角色使用。目标角色需要使用一张【闪】来响应，否则失去1点体力。",
                        "bhxinyao_spade_sha":"新药",
                        "bhxinyao_spade_sha_info":"",
                        "bhxinyao_destory":"新药",
                        "bhxinyao_destory_info":"",
                        "bhkelixina_in":"卫士",
                        "bhkelixina_in_info":"<li>锁定技，你受到来自牌的伤害时，该伤害-x（x为你装备区内与该牌花色相同的牌的数量的一半，向上取整）。<br><li>重构：出牌阶段限一次，你可以将【卫士】重构为【克利希娜】。",
                        "bhkelixina_in_skill":"卫士",
                        "bhkelixina_in_skill_info":"锁定技，你受到来自牌的伤害时，该伤害-x（x为你装备区内与该牌花色相同的牌的数量的一半，向上取整）。",
                        "bhkelixina_in_chonggou":"重构",
                        "bhkelixina_in_chonggou_info":"出牌阶段限一次，你可以将【卫士】重构为【克利希娜】。",
                        "bhkelixina_ma":"克利希娜",
                        "bhkelixina_ma_info":"<li>锁定技，你计算到其他角色的距离-x，当你使用【杀】对一名其他角色造成伤害时，若其到你的距离不小于2，此伤害+1（x为你装备区内空置的装备栏数量且至少为1）。<br><li>重构：出牌阶段限一次，你可以将【克利希娜】重构为【卫士】。",
                        "bhkelixina_ma_skill":"克利希娜",
                        "bhkelixina_ma_skill_info":"锁定技，你计算到其他角色的距离-x，当你使用【杀】对一名其他角色造成伤害时，若其到你的距离不小于2，此伤害+1（x为你装备区内空置的装备栏数量且至少为1）。",
                        "bhkelixina_ma_chonggou":"重构",
                        "bhkelixina_ma_chonggou_info":"出牌阶段限一次，你可以将【克利希娜】重构为【卫士】。",
                        "bhyidianzhixing_zhixing": "伊甸之星",
                        "bhyidianzhixing_zhixing_info": "出牌阶段限一次，你可以弃置一张黑色牌并失去1点体力，若如此做，你选择一名其他角色，你对其造成一点伤害，然后弃置该角色及其相邻座次角色各一张牌（同一角色仅结算一次）。",
                        "bhyidianzhixing_zhixing_skill": "伊甸之星",
                        "bhyidianzhixing_zhixing_skill_info": "",
                        "bhyidianzhixing_in": "伊甸双星",
                        "bhyidianzhixing_in_info": "<li>当你使用【杀】指定唯一其他角色为目标时，你可以弃置一张点数与此【杀】不同的手牌，若如此做，你弃置目标角色一张牌并令其防具失效直到回合结束。<br><li>重构：当你一次性受到至少2点伤害后，你将【伊甸双星】重构为【伊甸之星】。",
                        "bhyidianzhixing_in_skill": "伊甸双星",
                        "bhyidianzhixing_in_skill_info": "当你使用【杀】指定唯一其他角色为目标时，你可以弃置一张点数与此【杀】不同的手牌，若如此做，你弃置目标角色一张牌并令其防具失效直到回合结束。",
                        "bhyidianzhixing_in_chonggou": "重构",
                        "bhyidianzhixing_in_chonggou_info": "",
                        "bhdizuiqilei_in": "涤罪七雷·鸣",
                        "bhdizuiqilei_in_info": "每回合限一次，当你使用【杀】指定唯一目标时，可以选择一项执行：<br>1.摸两张牌。若如此做，此【杀】结算完毕时，你弃一张牌，且若此【杀】为黑色，则你额外弃一张牌；<br>2.弃置目标区域内的两张牌。若如此做，此【杀】结算完毕时，该角色摸一张牌，且若你弃置了至少一张装备牌，则该角色额外摸一张牌。",
                        "bhdizuiqilei_in_skill": "涤罪七雷",
                        "bhdizuiqilei_in_skill_info": "每回合限一次，当你使用【杀】指定唯一目标时，可以选择一项执行：<br>1.摸两张牌。若如此做，此【杀】结算完毕时，你弃一张牌，且若此【杀】为黑色，则你额外弃一张牌；<br>2.弃置目标区域内的两张牌。若如此做，此【杀】结算完毕时，该角色摸一张牌，且若你弃置了至少一张装备牌，则该角色额外摸一张牌。",
                        bhxukongwanzang: "虚空万藏",
                        "bhxukongwanzang_info": "出牌阶段限三次，你可以使用【虚空万藏】拟态一件游戏中存在的装备。",
                        "bhxukongwanzang_skill": "拟态",
                        "bhxukongwanzang_skill_info": "出牌阶段限三次，你可以使用【虚空万藏】拟态一件游戏中存在的装备。",
                        bhtianehu: "寂静天鹅湖",
                        "bhtianehu_info": "锁定技，当你在回合外使用【杀】时，你摸一张牌。",
                        bhbenghuaibaofa: "崩坏爆发",
                        "bhbenghuaibaofa_info": "出牌阶段，对所有其他角色使用。成为目标的角色须依次进行判定：若结果不为方块，则失去1点体力。",
                        "bhheiyuanbaihua_in": "黑渊白花",
                        "bhheiyuanbaihua_in_info": "<li>每回合限一次，当你对一名其他角色造成伤害时，你可以弃一张牌并防止此伤害，然后令其选择一项：失去x点体力；或失去x点体力上限（x为本次伤害值）。<br><li>每回合限一次，当一名角色进入濒死状态时，你可以弃一张牌并失去1点体力，然后令该角色回复体力至1点。若该角色存在因【黑渊】或【黑渊白花】而失去的体力上限，你令其恢复这些体力上限。<br><li>重构：出牌阶段限一次，若你的装备区有【黑渊白花】，你可以弃置一张手牌（不能是【黑渊白花】），将其拆分为【黑渊】和【白花】进入你手牌区。",
                        "bhheiyuanbaihua_heiyuan": "黑渊",
                        "bhheiyuanbaihua_heiyuan_info": "<li>每回合限一次，当你使用【杀】对一名角色造成伤害时，你可以失去1点体力并弃置一张手牌。若如此做，你防止此伤害，改为令其失去等量的体力上限。<br><li>重构：出牌阶段限一次，若你的装备区与手牌区同时有【黑渊】和【白花】，你可以将其重构为【黑渊白花】。",
                        "bhheiyuanbaihua_baihua": "白花",
                        "bhheiyuanbaihua_baihua_info": "每回合限一次，当一名角色进入濒死状态时，若该角色：为你，你可以弃置一张手牌；不为你，你可以失去一点体力，然后令该角色回复1点体力。",
                        "bhheiyuanbaihua_in_skill1": "黑渊",
                        "bhheiyuanbaihua_in_skill1_info": "每回合限一次，当你对一名其他角色造成伤害时，你可以弃一张牌并防止此伤害，然后令其选择一项：失去x点体力；或失去x点体力上限（x为本次伤害值）。",
                        "bhheiyuanbaihua_in_skill2": "白花",
                        "bhheiyuanbaihua_in_skill2_info": "每回合限一次，当一名角色进入濒死状态时，你可以弃一张牌并失去1点体力，然后令该角色回复体力至1点。若该角色存在因【黑渊】或【黑渊白花】而失去的体力上限，你令其恢复这些体力上限。",
                        "bhheiyuanbaihua_in_chonggou": "重构",
                        "bhheiyuanbaihua_in_chonggou_info": "出牌阶段限一次，若你的装备区有【黑渊白花】，你可以弃置一张手牌（不能是【黑渊白花】），将其拆分为【黑渊】和【白花】进入你手牌区。",
                        "bhheiyuanbaihua_heiyuan_skill": "黑渊",
                        "bhheiyuanbaihua_heiyuan_skill_info": "每回合限一次，当你使用【杀】对一名角色造成伤害时，你可以失去1点体力并弃置一张手牌。若如此做，你防止此伤害，改为令其失去等量的体力上限。",
                        "bhheiyuanbaihua_baihua_skill": "白花",
                        "bhheiyuanbaihua_baihua_skill_info": "每回合限一次，当一名角色进入濒死状态时，若该角色：为你，你可以弃置两张手牌；不为你，你可以失去一点体力，然后令该角色回复1点体力。",
                        "bhheiyuanbaihua_heiyuan_chonggou": "重构",
                        "bhheiyuanbaihua_heiyuan_chonggou_info": "重构：出牌阶段限一次，若你的装备区与手牌区同时有【黑渊】和【白花】，你可以将其重构为【黑渊白花】。",
                        bhxiaodaoxiaoxi: "小道消息",
                        "bhxiaodaoxiaoxi_info": "出牌阶段，对你自己使用。你摸一张牌，然后将一张牌交给你的下家。你的下家收到这张牌后，需要将一张牌交给其下家，重复此流程，直到你的上家将一张牌交给你。",
                        bhbenghuaijiejing: "崩坏结晶",
                        "bhbenghuaijiejing_info": "出牌阶段，对自己使用，令自己本回合内下一次造成的伤害+1，若你不为“崩坏”势力角色，则你失去1点体力（每回合限用一次）；一名角色的濒死阶段，对该角色使用，该角色回复1点体力，若其势力为“崩坏”，其额外回复1点体力；若其势力不为“崩坏”，其将势力变更为“崩坏”。",
                        "bhdizangyuhun_in": "匣中恶魔",
                        "bhdizangyuhun_in_info": "<li>锁定技，准备阶段或这张牌正面朝上离开你的非装备区时，若你没有“律者”或“圣血”技能，你失去1点体力并进行一次判定：若为红色，你摸两张牌；若为黑色，你摸一张牌。<br><li>结束阶段，若此牌位于一名角色的手牌区，该角色使用之。<br><li>重构：当此牌的效果令一名角色进入濒死结算时，立即将此牌重构为【地藏御魂】。",
                        "bhdizangyuhun_in_skill1": "匣中恶魔",
                        "bhdizangyuhun_in_skill2": "匣中恶魔",
                        "bhdizangyuhun_in_chonggou": "重构",
                        "bhdizangyuhun_in_skill1_info": "锁定技，准备阶段或这张牌正面朝上离开你的非装备区时，若你没有“律者”或“圣血”技能，你失去1点体力并进行一次判定：若为红色，你摸两张牌；若为黑色，你摸一张牌。",
                        "bhdizangyuhun_in_skill2_info": "结束阶段，若此牌位于一名角色的手牌区，该角色使用之。",
                        "bhdizangyuhun_in_chonggou_info": "",
                        "bhdizangyuhun_dizang": "地藏御魂",
                        "bhdizangyuhun_dizang_skill": "地藏御魂",
                        "bhdizangyuhun_dizang_skill_info": "每轮限一次，当你在出牌阶段对一名其他角色造成伤害时，你可以将自己的角色卡翻至背面并立即结束出牌阶段。若如此做，该角色的下一个回合改为由你操控。",
                        "bhdizangyuhun_dizang_info": "每轮限一次，当你在出牌阶段对一名其他角色造成伤害时，你可以将自己的角色卡翻至背面并立即结束出牌阶段。若如此做，该角色的下一个回合改为由你操控。",
                        "bhdizangyuhun_dizang_skill_target": "地藏御魂",
                        "bhtianhuoshengcai_in": "天火圣裁",
                        "bhtianhuoshengcai_in_info": "<li>锁定技，当你使用【杀】或【决斗】造成伤害时，将其改为火焰伤害；你的【杀】均视为火【杀】。<br><li>重构：出牌阶段限一次，若你的装备区有【天火圣裁】，你可以弃一张牌并将其重构为【天火大剑】。",
                        "bhtianhuoshengcai_in_skill": "天火圣裁",
                        "bhtianhuoshengcai_in_skill_info": "锁定技，当你使用【杀】或【决斗】造成伤害时，将其改为火焰伤害；你的【杀】均视为火【杀】。",
                        "bhtianhuoshengcai_in_chonggou": "重构",
                        "bhtianhuoshengcai_in_chonggou_info": "",
                        "bhtianhuoshengcai_dajian": "天火大剑",
                        "bhtianhuoshengcai_dajian_info": "<li>锁定技，你即将造成的伤害改为火焰伤害，你造成的火焰伤害+1。当你造成火焰伤害时，你失去x点体力（x为你本次造成伤害的一半，向下取整）。<br><li>重构：出牌阶段限一次，若你的装备区有【天火大剑】，你可以将其重构为【天火圣裁】。",
                        "bhtianhuoshengcai_dajian_skill": "天火大剑",
                        "bhtianhuoshengcai_dajian_skill_info": "锁定技，你即将造成的伤害改为火焰伤害，你造成的火焰伤害+1。当你造成火焰伤害时，你失去x点体力（x为你本次造成伤害的一半，向下取整）。",
                        "bhtianhuoshengcai_dajian_chonggou": "重构",
                        "bhtianhuoshengcai_dajian_chonggou_info": "",
                        "bhtianhuoshengcai_jiemie": "劫灭",
                        "bhtianhuoshengcai_jiemie_info": "锁定技，你即将造成的伤害改为火焰伤害，你造成的火焰伤害+1。当你造成火焰伤害后，你失去x点体力（x为你本次造成伤害的一半，向下取整），然后摸x张牌。",
                        "bhtianhuoshengcai_jiemie_skill": "劫灭",
                        "bhtianhuoshengcai_jiemie_skill_info": "锁定技，你即将造成的伤害改为火焰伤害，你造成的火焰伤害+1。当你造成火焰伤害后，你失去x点体力（x为你本次造成伤害的一半，向下取整），然后摸x张牌。",
                    },
                    list: [
                        //加速劵
                        ['club','8','bhjiasujuan'],['club','9','bhjiasujuan'],['club','10','bhjiasujuan'],['club','11','bhjiasujuan'],
                        //屏障
                        ['diamond','7','bhpingzhang'],['diamond','8','bhpingzhang'],['diamond','9','bhpingzhang'],
                        ['club','2','bhpingzhang'],['club','3','bhpingzhang'],['club','4','bhpingzhang'],
                        ['spade','2','bhpingzhang'],['spade','3','bhpingzhang'],['spade','4','bhpingzhang'],
                        ['heart','7','bhpingzhang'],['heart','8','bhpingzhang'],['heart','9','bhpingzhang'],
                        //补给包
                        ['diamond','2','bhbujibao'],['diamond','5','bhbujibao'],['diamond','6','bhbujibao'],
                        ['heart','3','bhbujibao'],['heart','4','bhbujibao'],['heart','5','bhbujibao'],['heart','11','bhbujibao'],['heart','12','bhbujibao'],
                        //伊甸之星
                        ['club', "12", "bhyidianzhixing_in"],
                        //涤罪七雷
                        ['spade', "7", "bhdizuiqilei_in"],
                        //虚空万藏
                        ["heart", "1", "bhxukongwanzang"],
                        //天火圣裁
                        ["heart", "2", "bhtianhuoshengcai_in"],
                        //地藏御魂
                        ["spade", "12", "bhdizangyuhun_in"],
                        //崩坏结晶
                        ["spade", "5", "bhbenghuaijiejing"], ["heart", "10", "bhbenghuaijiejing"],
                        //小道消息
                        ["club", "6", "bhxiaodaoxiaoxi"],
                        //崩坏爆发
                        ["club", "13", "bhbenghuaibaofa"], ["heart", "13", "bhbenghuaibaofa"], ["spade", "13", "bhbenghuaibaofa"], 
                        //黑渊白花
                        ["spade", "6", "bhheiyuanbaihua_heiyuan"],["heart", "6", "bhheiyuanbaihua_baihua"],
                        //三圣剑
                        //['spade','11','bhkatina'],['diamond','11','bhyoulandaier'],['heart','13','bhjiuwayousi']
                    ],
                };
                return bbb;
            });
            lib.translate['bbb_card_config'] = '<span style=\"color: blue\">崩</span><span style=\"color: yellow\">崩</span><span style=\"color: pink\">崩</span>';
            lib.config.all.cards.push('bbb');
            if (!lib.config.cards.contains('bbb')) lib.config.cards.push('bbb');//包名翻译
            game.import('character', function () {
                var bbb = {
                    name: 'bbb',
                    connect: true,
                    characterSort: {
                        bbb: {
                            bh_kiana: ['bhbailian', 'bhyouxia', 'bhshengnvqidao', 'bhyueguang', 'bhkongzhilvzhe', 'bhtianqiongyouxia', 'bhxinyanzhilvzhe','bhzhongyanzhilvzhe'],
                            bh_mei: ['bhduanzuiyingwu', 'bhfeihong', 'bhqiangxi', 'bhyingwuchongji', 'bhguikai', 'bhpoxiaoqiangxi', 'bhleizhilvzhe'],
                            bh_bronya: ['bhzhenlizhilvzhe','bhcishengyinyi', 'bhzhanche', 'bhshanchui', 'bhxuedijuji', 'bhciyuan', 'bhhuixingqudong', 'bhyinlangdeliming', 'bhyiduheiheqinshi', 'bhmichenghaitu', 'bhlizhilvzhe'],
                            bh_himeko: ['bhzhanchangjifeng', 'bhkaixuan', 'bhshenhong', 'bhjidizhanren', 'bhxuesemeigui', 'bhyueshi'],
                            bh_theresa: ['bhshuoyeguanxing','bhshiyue', 'bhyinghuolunwu', 'bhyuexiachuyong', 'bhshenensongge', 'bhyuehuang','bhziyuan'],
                            bh_sakura: ['bhnishenwunv', 'bhzhenyanxinghun', 'bhyeyinchongxia'],
                            bh_kallen: ['bhjinyang', 'bhyuanzuilieren', 'bhdiliuyexiangqu'],
                            bh_hua: ['bhbaiyezhishi', 'bhyuelun', 'bhcxunyu', 'bhchiling', 'bhyunmodanxin', 'bhshizhilvzhe'],
                            bh_rita: ['bhliaoluanxingji','bhyuehun', 'bhanqiangwei', 'bhyingtie','bhshiluomidie'],
                            bh_vodka: ['bhlanmeitegong', 'bhyingtaozhadan', 'bhkuangrelandiao'],
                            bh_seele: ['bhhuanhaimengdie', 'baixi', 'heixi', 'bhyanyexingyuan'],
                            bh_durandal: ['bhbumiexingmao','bhtianyuanqiying','bhrongguang', 'bhyuepo'],
                            bh_linkage: ['bhduanzuihuangnv'],
                            bh_xiubolian:['bhresha','bhaiyi'],
                            bh_stigmata_tianming: ['bhluolan','bhweioula','bhluxiya', 'bhyuanfeihua', 'bhshalianna', 'bhxialuote', 'bhaotuoweila', 'bhweiduoliya', 'bhlinaerduo', 'bhkalian'],
                            bh_stigmata_yuanchuang: ['bhsushana','bhkekeliya','bhlagena','bhchangguang','bhanna','bhqigefei', 'bhsaixiliya', 'bhaotuo', 'bhxilin', 'bhyang'],
                            bh_stigmata_shenzhou: ['bhwangzhaojun','bhwangzhenyi','bhjingwei', 'bhlier', 'bhzhangheng', 'bhjinshengtan', 'bhdanzhu'],
                            bh_stigmata_zhanguo: ['bhnongji', 'bhshichuan', 'bhbanbenlongma', 'bhzhijiangjianxu', 'bhzhentianxingcun'],
                            bh_stigmata_oulu: ['bhyekajielinna','bhdegula','bhyilishabai', 'bhatila', 'bhzuoluo', 'bhchaliman', 'bhaojier'],
                            bh_stigmata_kexue: ['bhhabo','bhlinnai','bhdaerwen', 'bhtesila', 'bhaiyinsitan', 'bhaidisheng', 'bhkaipule', 'bhjialilue', 'bhnuobeier', 'bhmenjieliefu', 'bhdilake', 'bhliewenhuke', 'bhafujiadeluo'],
                            bh_stigmata_ziyi: ['bhjiechuanlongzhijie','bhtugeniefu', 'bhdigengsi', 'bhmalixuelai', 'bhfulankensitan', 'bhdanding', 'bhshashibiya'],
                            bh_stigmata_tangcai: ['bhbeiduofen','bhgusitafu','bhpagenini', 'bhmikailangjiluo','bhchaikefusiji'],
                            bh_stigmata_buyi: ['bhsikete', 'bhpili', 'bhtailesi', 'bhzhinuo'],
                            bh_stigmata_xuxu: ['bhalading','bhbasite'],
                            bh_stigmata_zhejian: ['bhyuehen'],
                            bh_ex_qizongzui: ['bhqizongzui_baonu', 'bhqizongzui_landuo', 'bhqizongzui_baoshi'],
                            bh_ex_zhuhuo: ['bhpaduo', 'bhailixiya', 'bhkesimo', 'bhying', 'bhaboniya', 'bhgeleixiu', 'bhweierwei', 'bhkaiwen', 'bhyidian', 'bhqianjie', 'bhsu', 'bhmeibiwusi', 'bhhua'],
                            bh_ex_shishen:['bhhulang','bhchentianwu'],
                            bh_ex_houbeng:['bhkaluoer','bhlaier','bhyadang','bhtimiduo','bhhoubengyayi'],
                            bh_dai: ['bhcs','bhxi', 'Ezie', 'bhwumianliming', 'Argon'],
                        },
                    },
                    character: {
                        baixi: ["female", "bhnishang", 3, ["shuangsheng", "lianli", "laoyin"], ["des:彼岸双生·白（希儿·芙乐艾）<br><br>技能设计：汐带将军<br>玩法介绍：通过转化技、每回合在表里人格之间切换，表人格能够增加【杀】的目标数，里人格则能够增加【杀】的使用次数。使用【杀】时可给目标挂标记，提升自己下一次对其造成的伤害。持续压制能力强。<br>关键卡牌：杀、无中生有<br>擅长身份：忠臣、反贼、地主<br><br>背景故事：希儿表里一体“白”的“表人格”面，多数时候是主要的“人格”，就像印象中的希儿一样温柔、乖巧却不失坚定的信念。与另一半共同组成“彼岸双生”。<br>&ensp;<hr><br>▶可惜现在实现方式改了，这只怎么换都是白希其实（）<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        heixi: ["female", "bhnishang", 3, ["shuangsheng", "ruyi", "laoyin"], ["des:彼岸双生·黑（希儿·芙乐艾）<br>技能设计：汐带将军<br>玩法介绍：通过转化技、每回合在表里人格之间切换，表人格能够增加【杀】的目标数，里人格则能够增加【杀】的使用次数。使用【杀】时可给目标挂标记，提升自己下一次对其造成的伤害。持续压制能力强。<br>关键卡牌：杀<br>擅长身份：忠臣、反贼、地主<br><br>背景故事：希儿表里一体“黑”的“里人格”面，平时不会轻易现身。与印象中的希儿完全相反，狂躁且令人畏惧。与另一半共同组成“彼岸双生”。<br>&ensp;<hr><br>▶可惜现在实现方式改了，这只怎么换都是黑希其实（）<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶虽然现在玩家群体里面说“黑希”基本都默认指“彼岸双生”这个装甲了。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶毕竟这个称呼出来的时候只有两只希儿装甲。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhjidizhanren: ["female", "bhtianming", 4, ["bhchongfeng"], ["des:极地战刃（无量塔姬子）<br>技能设计：E带将军<br>玩法介绍：以姬子“冲锋队”时期为蓝本进行设计的角色。擅长用血量换取牌量、在一个回合内秒杀关键人物。<br>关键卡牌：诸葛连弩、虚空万藏、桃、酒、崩坏结晶<br>擅长身份：反贼、地主、农民<br>背景故事：“冲锋队”系天命下属特种部队，原队长为拉格纳，某次行动中包括队长在内的所有成员几乎全部战死。姬子在那次行动中被拉格纳所救因而侥幸生还，之后冲锋队解散，姬子便在德丽莎·阿波卡利斯的邀请下前往新兴的圣芙蕾雅学园担任教官。<br>&ensp;<hr><br>▶年轻的姬子阿姐。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶传说武将：无量塔 盖子。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhdiliuyexiangqu: ["female", "bhzhongyingjie", 4, ["bhguaidao", "bhyouye"], ["des:第六夜想曲（卡莲·卡斯兰娜）<br>技能设计：汐带将军<br>玩法介绍：夺走对方手牌、迅速拉大牌差以取得优势，擅长对付需要积攒高质量手牌的爆发型角色。<br>关键卡牌：乐不思蜀、闪电、匣中恶魔<br>擅长身份：全能<br><br>背景故事：所谓“怪盗”，即为“奇怪的侠盗”。此处“奇怪”指的是形式上与一般侠盗有所区别：通常而言，“侠盗”低调地劫富济贫，而“怪盗”总是大张旗鼓——例如进行活动前一定要发送预告信，然后再在众目睽睽之下华丽地将目标盗走。由此，“怪盗”一般也比普通“侠盗”更加厉害——至少在玩弄人心的层面上是如此。<br>&ensp;<hr><br>▶一起买菜？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶百骑劫魏营，功震天下英！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhzhenyanxinghun: ["female", "bhbenghuai", 3, ["bhxueying", "bhshasheng"], ["des:真炎幸魂（八重樱）<br>技能设计：汐带将军<br>玩法介绍：爆发型角色，通过使用【杀】与伤害性锦囊提升伤害技能的威力，再通过一口气使用四种花色的牌启动之。<br>关键卡牌：杀、伤害性锦囊<br>擅长身份：忠臣、反贼<br><br>背景故事：崩坏那足以让仇敌俯首称臣的绝对支配力量，是通过侵蚀人的心智达成的。在一些特殊的圣痕空间中，就留存有一些被崩坏侵蚀心智之人的样貌。<br>&ensp;<hr><br>▶初代平民战神，盐巴爷的盐巴！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶狱焰丁真，鉴定为：年迈的<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhshizhilvzhe: ["female", "bhbenghuai", "3/99", ["nicai", "niuzhuan", "wanshi", "qianwu", "bhlvzhe"], ["des:识之律者（符华）<br>技能设计：E带将军<br>玩法介绍：全能型的发育角色，开局生存能力较差，中局和残局时威胁逐渐上升，是敌方需要快速处理、友方需要着重保护的对象。<br>关键卡牌：闪、崩坏结晶、崩坏爆发<br>擅长身份：忠臣、反贼、内奸<br><br>背景故事：前文明纪元的识之律者被击败后，其律者核心被制成神之键-意识之键“羽渡尘”，并在五万年后的本纪元随着持有者符华的活跃而大放异彩。符华与天命之战一役后觉醒的识之律者，不可谓没有缘分。<br>&ensp;<hr><br>▶太虚剑派现任CEO。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶识之律者女士万岁！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhrongguang: ["female", "bhtianming", 4, ["bhhuihong", "bhzhongzhi"], ["zhu", "des:女武神·荣光（比安卡·幽兰戴尔·阿塔吉娜）<br><br>技能设计：E带将军<br>玩法介绍：造成伤害或受到伤害后都可全场发牌，稍有不慎就会令刚有转变倾向的局势变得无可挽回。擅长辅助极度缺乏手牌的角色，不擅长对抗爆发型的角色。主公技可以切实地消除人数劣势时造成的敌我牌差加大。<br>关键卡牌：黑渊白花、桃、酒、崩坏结晶<br>擅长身份：主公、反贼<br><br>背景故事：天命之战后，身为天命主教的奥托·阿波卡利斯犹如石沉大海、杳无音讯；讨伐“星之律者”后不久，奥托·阿波卡利斯出现在天命的发源地柯洛斯滕，宣布卸任天命主教一职并将衣钵交予孙女德丽莎·阿波卡利斯。在奥托失踪的这段时间内，经由奥托授权，天命内部的大小事务均由幽兰戴尔暂时接管。即在这段时间内，天命内部掌握最高权力者，实为比安卡·幽兰戴尔·阿塔吉娜。<br>&ensp;<hr><br>▶有一说一，作为鹅黑这只鹅爷其实挺喜欢的。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶十七张牌，你能秒我？你能秒杀我？你今天十七张牌在这里把我秒了，我当场、就把这个电脑屏幕吃掉！<br>（无双，万军取首！）<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhsu: ["male", "bhshijieshe", 3, ["xumi", "tianhui", "hengsha"], ["des:觉者（苏）<br><br>技能设计：E带将军<br>玩法介绍：依赖承受伤害获取即时收益并进行发育的角色，随着受伤次数增加每次受伤获得的收益也会不断增加，但是需要权衡发育速度和即时收益。擅长配合能回复体力的角色、对抗输出能力不强的防御型角色，不擅长对抗能强制造成大量伤害的角色。开局时不动白，需要队友帮助。<br>关键卡牌：桃、酒、崩坏结晶、桃园结义<br>擅长身份：内奸<br><br>背景故事：前文明“逐火之蛾”十三英桀位列第七，背负“天慧”之铭的融合战士。为人平和友善，言行颇有禅意。成为融合战士以前是凯文的同学和好友，梅博士死后接下“恒沙计划”的大旗，在世界泡中不断观测恒河沙数的其他世界，一直持续到今天。<br>&ensp;<hr><br>▶撅者不才，一轮...<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhzhanche: ["female", "bhxiubolian", 4, ["bhyinneng", "bhzshijie"], ["des:女武神·战车（布洛妮娅·扎伊切克）<br><br>技能设计：E带将军、汐带将军<br>玩法介绍：能够通过“连环状态”模拟“聚怪”、倍增队友元素伤害的角色，自身对连环状态角色使用牌也有增益。非常擅长辅助能够造成高额元素伤害的角色，对抗敌方的【铁索连环】或相同能力角色时格外容易引火烧身。<br>关键卡牌：白银狮子、补给包<br>擅长身份：忠臣、反贼<br><br>背景故事：布洛妮娅的女武神制服。“战车”大约源自塔罗牌，或许取其“勇往直前、不可阻拦”之意。<br>&ensp;<hr><br>▶我一直都搞不懂为什么御三家是白练、飞鸿和战车。明明与“领域装·白练”和“脉冲装·绯红”同个系列的装甲是“驱动装·山吹”才对，而不是“女武神·战车”。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶不懂了吧，爷也不懂了，开服的角色按道理说都是成组设计好的，然而开服就这样了爷有啥办法。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhaotuoweila: ["female", "bhtianming", 5, ["bhjiaojian", "bhchuiai"], ["des:天命骑士（奥托薇拉）<br><br>技能设计：E带将军<br>玩法介绍：依靠承受伤害获取SP再进一步转化为收益的坦克型角色。能力较为全面，可以给队友摸牌也能够让对手弃牌，但是需要累计受到2点伤害才能够转化一次收益。身份为反贼时不动白。<br>关键卡牌：桃、酒、崩坏结晶、桃园结义<br>擅长身份：忠臣、内奸<br><br>背景故事：黑死病-天命之战时期被奥托所制药物拯救生命的少女，最后决定追随天命新晋主教奥托·阿波卡利斯，成为主教最硬的盾和最尖的枪。主教也从未薄待这位忠诚的骑士，甚至在这位骑士寿终正寝、含笑离去时，允许她在墓碑上的本名“薇拉”前冠以自己的名字“奥托”。<br>&ensp;<hr><br>▶1.9版本的受害者之一。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶汉娜同理捏。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhmenjieliefu: ["female", "bhnishang", 3, ["huali", "zhoulv"], ["des:元素的使徒（门捷列夫）<br><br>技能设计：汐带将军<br>玩法介绍：通过弃牌（自己或其他角色的牌）获取效果的多功能角色。血量低时效果更强，但意味着冒险。具体效果的种类不同依赖展示的牌的花色，特定场景对特定花色牌的需求较为苛刻。<br>关键卡牌：藤甲<br>擅长身份：反贼、内奸<br><br>背景故事：门捷列夫是俄国著名的化学家，现代人耳熟能详、倒背如流的元素周期表，其最早版本就出自门捷列夫之手。<br>&ensp;<hr><br>▶大元素使居然是物理学家。果然物理伤害也是一种元素伤害。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhtianqiongyouxia: ["female", "bhxiubolian", 3, ["yemu", "k_xingluo", "sanyi"], ["des:天穹游侠（琪亚娜·卡斯兰娜/K-423）<br><br>技能设计：汐带将军<br>玩法介绍：依靠手牌管理，可以在一回合内将非基本牌转化为【杀】的爆发型角色，除此以外在手牌充足时压制力也十分可观。非常依赖手牌数量和质量且没有自保能力，劣势时较难破局。<br>关键卡牌：锦囊、装备<br>擅长身份：忠臣、反贼<br><br>背景故事：以天穹市时期的琪亚娜K423为蓝本设计的角色。在奥托所植律者核心和姬子“最后一课”的双重冲击下，琪亚娜度过了一段迷茫而痛苦的时光。班长符华尽管只剩“羽渡尘”的几根羽毛，却仍不惜牺牲自己也要保护琪亚娜免受律者力量的反噬。种种努力和付出最终让琪亚娜的感情沉淀、心念化蛹，这份决意最终在“天穹流星”事件爆发、成蝶，犹如冲天的火凤，以晦暗的天空为画板，在其上狠泼一桶亮得刺眼的希望之光。<br>&ensp;<hr><br>▶starfall!<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhfeihong: ["female", "bhxiubolian", 3, ["bhtianzhao"], ["des:脉冲装·绯红（雷电芽衣）<br><br>技能设计：汐带将军、拾壹<br>玩法介绍：出【杀】有几率再白嫖一张【杀】，过牌能力优秀，也能够夺取他人SP或手牌。擅长压制、消耗与收割虚弱角色，不擅长对抗防御力很强的角色，一旦断杀就将毫无作为，但杀过量又会导致技能失去收益，生存能力也弱。<br>关键卡牌：杀<br>擅长身份：忠臣、反贼<br><br>背景故事：雷电芽衣的作战服和训练服。为了防止被其他人认错，在醒目的地方写着大大的“雷”字。<br>&ensp;<hr><br>▶遥想当年内测时期的无黑丝绯红，堪称崩坏世界里最靓丽的一道风景线啊。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhbailian: ["female", "bhxiubolian", 3, ["bhqiangdou"], ["des:领域装·白练（琪亚娜·卡斯兰娜/K-423）<br><br>技能设计：汐带将军<br>玩法介绍：杀闪回SP，SP又可以当杀闪用，被敌针对时还能冲手牌，堪比小学云般难缠的存在。生存能力强，非常擅长反制依靠连弩起爆的角色，但若被放养则基本无作为。<br>关键卡牌：诸葛连弩、补给包<br>擅长身份：内奸<br><br>背景故事：领域装·白练是琪亚娜的作战服和训练服，这套服装贯穿从2016年9月（崩坏3游戏开始的时间）到2017年10月（柯洛斯滕时期）的大部分时间节点，堪称琪亚娜的代表服装。天命之战结束后开始，琪亚娜习惯在这套装甲外再披一件橙色外套。<br>&ensp;<hr><br>▶练了也白练~<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhyang: ["male", "bhnishang", 4, ["bhjiexi", "bhgouzao", "bhmengzhu"], ["zhu", "des:逆熵盟主（瓦尔特·杨）<br><br>技能设计：汐带将军<br>玩法介绍：发育型的印卡角色。擅长在一个回合内爆发式清场，不擅长对抗扒牌型角色或持续消耗型角色。不能印卡就不是理之律者了。<br>关键卡牌：无中生有、万箭齐发、南蛮入侵、崩坏爆发<br>擅长身份：主公、内奸<br><br>背景故事：瓦尔特·杨作为逆熵的第二任盟主（也是本纪元第二任理之律者），与爱因斯坦、特斯拉、爱迪生、普朗克、薛定谔等人带领逆熵走过了最艰难的时期（尤其是建立之初和第二次崩坏）。他为人类而战的信念无愧于瓦尔特之名，只可惜屡次被歹人所害，身体一日不如一日，因而不得不开始着手将布洛妮娅培养为下一个接班人。<br>&ensp;<hr><br>▶道理我都懂，但老杨同志用小板鸭的语音各种唱，属实有点……<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶爷只是懒得整语音这块的问题了...再睡会去...<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhyueshi: ["female", "bhxiubolian", 5, ["bhjinmie", "bhshenyun", "bhzhongmu"], ["des:真红骑士·月蚀（无量塔姬子）<br><br>技能设计：汐带将军<br>玩法介绍：觉醒前后差距较大。觉醒前为持续压制型角色，将红色牌转化为火【杀】；觉醒后变为辅助型角色，依靠承受伤害换取收益。使用时应注意场上局势，合理利用觉醒时的体力回复效果。<br>关键卡牌：红色牌、回复体力的牌<br>擅长身份：忠臣、反贼<br><br>背景故事：无量塔姬子平凡而伟大的一生在此落幕。不再有人介绍她，因为不曾有人遗忘她。这份功勋和意志，化作永恒燃烧的薪炎，传承给挚爱的人，传承给重要的人，传承给所有的人。<br>&ensp;<hr><br>▶姬子阿姐呜呜呜<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        "bhqizongzui_baonu": ["female", "bhxiubolian", 5, ["bhnilin"], ["des:七宗罪·暴怒（雷电芽衣）<br><br>技能设计：汐带将军<br>玩法介绍：通过承受伤害提升自身伤害，以血换血，以牙还牙。擅长在身陷重围时打破劣势局面，不擅长攻击远处的敌人。<br>关键卡牌：进攻马<br>擅长身份：忠臣、反贼、内奸<br>&ensp;<hr><br>▶牙医我啊，真的生气了！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        "bhqizongzui_landuo": ["female", "bhxiubolian", 3, ["bhdaiduo"], ["des:七宗罪·怠惰（布洛妮娅·扎伊切克）<br><br>技能设计：汐带将军<br>玩法介绍：懒！<br>关键卡牌：懒<br>擅长身份：懒<br>&ensp;<hr><br>▶你长大了，怎么更懒了？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶爷懒得写了。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        "bhqizongzui_baoshi": ["female", "bhxiubolian", 4, ["bhtangguo"], ["des:七宗罪·暴食（德丽莎·阿波卡利斯）<br><br>技能设计：汐带将军<br>玩法介绍：重复利用特定的牌，抗压能力强。不适于对抗扒牌角色。<br>关键卡牌：桃、酒、崩坏结晶<br>擅长身份：忠臣、反贼、内奸<br>&ensp;<hr><br>▶吃，都可以吃，但爷的糖再也回不来了...<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhhuixingqudong: ["female", "bhxiubolian", 3, ["bhtiemu", "bhsuixing"], ["des:彗星驱动（布洛妮娅·扎伊切克）<br><br>技能设计：汐带将军<br>玩法介绍：以牌换盾，具备强大的减伤能力。擅长持续限制敌方核心角色的输出，个人能力强。需要发育，不擅长对抗多核心的庞大队伍或以快速爆发见长的组合。可以理解为SP版本的“驱动装·山吹”。<br>关键卡牌：杀、决斗<br>擅长身份：全能<br><br>背景故事：“彗星驱动”是海渊城-千人律者时期布洛妮娅的服装，与芽衣的“破晓强袭”一样出自特斯拉博士之手。相较于原“山吹”，这套装甲微调了一部分辅助性的机能，使之更加适合辅助进行物理攻击的队友。<br>&ensp;<hr><br>▶遥想当年增幅山吹，也是物理队的绝对中坚完美平民辅助，可惜现在观星都得吃土咯。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhxinyanzhilvzhe: ["female", "bhxiubolian", 3, ["bhyiyu", "bhshenju", "bhxinhuo", "bhlvzhe"], ["des:薪炎之律者（琪亚娜·卡斯兰娜/K-423）<br><br>技能设计：汐带将军<br>玩法介绍：发育型大核，存活时间越长、队友数量越多则威胁越大。擅长在有队友保护的条件下发育并存活到残局、与敌方头目（甚至集团）作战，不擅长在前中期为队友吸收伤害或在开局时控制局势走向。<br>关键卡牌：藤甲、天火圣裁<br>擅长身份：主公、反贼<br><br>背景故事：那个人、那些人的力量化为薪柴，少女萌生的信念则仿佛火种。燃烧的火焰将铭记其所承载的一切微笑、鲜血和意志并以此荣耀，为世界上一切美好而战。<br>&ensp;<hr><br>▶苟住就赢的...不好意思来错片场了。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhkalian: ["female", "bhtianming", 5, ["bhjiaojian", "bhtianyu","bhshengtu"], ["zhu", "des:东征的圣骑士（卡莲·卡斯兰娜）<br><br>技能设计：E带将军<br>玩法介绍：通过承受伤害换取收益，能扒牌能发牌，能力较为全面。虽不动白但血量较多，生存能力很强。擅长为队友吸收伤害或对抗造成大范围伤害的角色，不擅长配合生存能力较弱的角色。作主公时可令天命角色廉价获取额外的技能。<br>关键卡牌：回复体力的牌<br>擅长身份：主公<br><br>背景故事：以天命东征时期的卡莲为蓝本设计的角色。天命的东征是当时天命高层充满野心的愚昧之举，并且因使用了崩坏能而埋下巨大的祸根。这场战争同时也启发了卡莲，令其找到根除天命崩坏滥用问题的最优解。卡莲在东征后与奥托共同活动了一段时间即前往远东寻找仙人，但异常不幸地，神州的仙人赤鸢彼时身陷太虚山事变而正处于死亡之中，于是音讯全无。卡莲随后为躲避天命追捕漂泊东渡，最终抵达海对岸的信浓。在那里，卡莲邂逅了她人生中另一个最重要的人，并目睹那个人被崩坏侵蚀后的惨状、不得不亲手将其杀死，自己也身受重伤，随后被天命人马捉回柯洛斯滕处刑。在临刑时，奥托与其姊丽莎·沙尼亚特达成协议，释放囚禁的崩坏兽扰乱局势、奥托则试图带走卡莲私奔，但不料卡莲为保护平民而被崩坏兽所杀。卡莲死后，柯洛斯滕很快爆发内乱，天命分为数派互相杀伐不休，最终奥托·阿波卡利斯击败包括其姊丽莎·沙尼亚特在内的所有派系取得主教之位，天命形成以奥托·阿波卡利斯为唯一绝对核心的组织体系。休伯利安已经证明，五百多年前卡莲的死是促成奥托与“虚空万藏”协议的最大原因，也是奥托计划抹杀历史、改写过去的唯一契机。<br>&ensp;<hr><br>▶正在绝赞白给中。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶本来还想增加一个跟老八和老仙的互动的。但是想了想，这一版主要体现卡莲作为“天命军东征”的“王牌”，所以最后还是没有加。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhxilin: ["female", "bhbenghuai", "1/5", ["bhzaiyao", "bhyakong","bhlvzhe"], ["des:第二律者（西琳）<br><br>技能设计：汐带将军、E带将军<br>玩法介绍：通过承受伤害不断解锁新能力。具有改变距离和破防的能力，可以引导局势走向；完全体能力较全面，可作为队伍核心。不擅长对抗能够瞬间造成大量爆发伤害的角色。<br>关键卡牌：无中生有、崩坏结晶、桃、酒<br>擅长身份：内奸<br><br>背景故事：第二律者诞生于天命位于西伯利亚的人体实验基地“巴比伦实验室”。2000年的第二次崩坏就由第二律者引发，造成不计其数的死亡，其中最著名而令人惋惜的死者莫过于塞西莉亚·沙尼亚特，也即琪亚娜·卡斯兰娜的亲生母亲。若非奥托出手阻拦，当时在场的理之律者瓦尔特·杨和前文明融合战士符华等人即有足够的机会分别单杀西琳。<br>&ensp;&ensp;空之律者造成的灾害远不止第二次崩坏，其律者核心成为了琪亚娜·卡斯兰娜（K-423）长久的噩梦，最终引发了通称“天命之战”的入侵事件，此事件中奥托的阴谋致使第二律者再次觉醒。<br>&ensp;<hr><br>▶性感河豚，在线膨胀<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶按理说第二次崩坏的时候别说结婚，连琪亚娜都会说话了，岳母应该称作塞西莉亚·卡斯兰娜才对。不知官方是否意在强调其家系才如此做，总之有些违和。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhyuanzuilieren: ["female", "bhzhongyingjie", 4, ["bhyuanzui", "bhanyi", "bhzhuilie"], ["des:原罪猎人（卡莲·卡斯兰娜）<br><br>技能设计：E带将军<br>玩法介绍：一人亮相，全场坐牢。擅长对抗能够造成大量范围伤害的角色，不擅长对抗主要通过体力流失等特殊手段“造成伤害”的角色。<br>关键卡牌：杀<br>擅长身份：反贼<br><br>背景故事：在其他世界线（“仲夏幻夜”）因A-872而复活的卡莲。虽说复活，实际上据其本人而言“已经完全不是卡莲了”。曾经是保护A-872的可靠姐姐，但形势变易，现在她被迫选择痛苦地握紧手中的枪，不断彷徨追杀危害着普通人类的A-872。<br>&ensp;&ensp;▶射向卡莲<br>&ensp;&ensp;▶射向德丽莎<br>&ensp;<hr><br>▶你可曾听说过舞卡传说？Max流血我开天火，诶就是van~<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhmichenghaitu: ["female", "bhzhongyingjie", 3, ["bhtouying", "bhhairu", "bhyongbing2"], ["des:迷城嗨兔（布洛妮娅·扎伊切克）<br><br>技能设计：汐带将军<br>玩法介绍：能够给【杀】赋予各种效果、并配合队友塞来的牌展开活动的压制型角色。擅长扰乱局势、压制需要发育的角色，不擅长逆转劣势局面。<br>关键卡牌：杀<br>擅长身份：忠臣、反贼<br><br>背景故事：其他世界线里活跃于天穹城的小个子黑客佣兵。拥有仿佛理之律者一般的超能力，这也是她跻身顶级黑客/佣兵行列的制胜法宝。<br>&ensp;<hr><br>▶鸭子还是兔子？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhnishenwunv: ["female", "bhzhongyingjie", 4, ["bhfeiying", "bhrenfan"], ["des:逆神巫女（八重樱）<br><br>技能设计：E带将军、汐带将军<br>玩法介绍：通过牌换取标记，再通过标记造成直接伤害。擅长大范围地快速收割敌方脆弱目标，或以直接伤害反制防御力很强的角色。不擅长对抗通过承受伤害换取收益的角色或扒牌能力较强的角色。自身没有防御能力且手牌并不充裕。<br>关键卡牌：无视距离的牌、指定多个目标的牌<br>擅长身份：忠臣、反贼<br><br>背景故事：文正11年（公元1477年），远东之地信浓的一座小村庄漂来一位西洋女人。当时正在洗澡的巫女八重樱发现此人尚有气息，遂将其带回神社照顾。在相处的过程中，二人逐渐熟悉、逐渐亲密。沉浸在恋爱般浪漫气氛中的卡莲放松了警惕，未能察觉名为崩坏的恶魔早已伸出血手牢牢掐住八重樱破碎的灵魂。因为妹妹的离去，八重樱对人类心生怨念，这导致她被卡莲随身携带的“匣中恶魔”侵蚀心智、最后变成其傀儡。待卡莲发现时，一切为时已晚。<br>&ensp;<hr><br>▶嘤嘤嘤嘤嘤嘤嘤嘤。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶如果当时八重樱没有被蛊惑或者卡莲没有爱上她，卡莲或许并不会马上去世——但反正也不会就这样跟奥托私奔就是了。卡莲的悲剧看似偶然，实则是一个必然。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhyinghuolunwu: ["female", "bhxiubolian", 3, ["bhfeiying", "bhhuhuo", "bhhuling"], ["des:樱火轮舞（德丽莎·阿波卡利斯/A-310）<br><br>技能设计：E带将军、汐带将军<br>玩法介绍：周期爆发角色。通过每回合使用的第三张牌附加标记，再通过伤害触发标记造成连携伤害。擅长配合“连环状态”和元素增伤效果造成大量范围伤害，不擅长对抗压制能力较强的角色。<br>关键卡牌：天火圣裁、南蛮入侵、万箭齐发、崩坏爆发、五谷丰登<br>擅长身份：忠臣、内奸<br><br>背景故事：2014年，长空市千羽学园爆发第三次崩坏。在那以后，除了“雷之律者”雷电芽衣以外，天命组织还侦测到一个与律者极为相似的信号。德丽莎·阿波卡利斯当即决定亲自前往一探究竟，不料却被那名拟似律者下毒、生命垂危。就在这危急关头，她体内圣女卡莲的血液与某个圣痕起了反应，使之起死回生。<br>&ensp;<hr><br>▶属实是顶级丢人，不过考虑到官方有意让德莉傻天天吃瘪，也就很正常了...很蓝的辣。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhyuexiachuyong: ["female", "bhzhongyingjie", 3, ["bhxueyin", "bhchuyong", "bhkexue"], ["des:月下初拥（德丽莎·阿波卡利斯/A-872）<br><br>技能设计：汐带将军、E带将军<br>玩法介绍：通过“初拥”确保生存能力并暂时压制目标角色，通过“渴血”转化【杀】配合“血印”打出高额爆发伤害。不擅长对抗对【杀】防御能力较强的角色和擅长控制距离的角色。<br>关键卡牌：武器牌<br>擅长身份：反贼、内奸<br><br>背景故事：其他世界线的A系列克隆人后续个体。在“卡莲”的帮助下逃离奥托的实验室，尽管不想害人，但因吸血本能的原罪而造成当地“吸血鬼”眷族的横行。“卡莲”为防止A-872继续危害人类，决定追而杀之；另一方面，在其他世界线的奥托授意下介入的某个人类，与A-872结下了深厚的羁绊。<br>&ensp;&ensp;▶射向卡莲<br>&ensp;&ensp;▶射向德丽莎<br>&ensp;<hr><br>▶这炽热的鲜血，让我陶醉，让我疯狂！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶哼，也不看看我是何人！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhshengnvqidao: ["female", "bhxiubolian", 3, ["bhshenghu", "bhshengxue"], ["des:圣女祈祷（琪亚娜·卡斯兰娜/K-423）<br><br>技能设计：E带将军<br>玩法介绍：擅长回复体力，但是自身缺乏额外的牌的获取手段。适于辅助依赖承受伤害取得收益（尤其是能给队友发牌）的角色。不适于对抗擅长扒牌的角色。<br>关键卡牌：装备牌<br>擅长身份：忠臣、反贼<br><br>背景故事：在天命标准修女服的基础上，添加琪亚娜风格个性化改动的服装。象征着琪亚娜从母亲那里继承来的“圣血”。<br>&ensp;<hr><br>▶扩冰的时代早就一去不返咯，现在天罚的脆弱也没什么用了。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhshanchui: ["female", "bhxiubolian", 3, ["bhtiebi", "bhtongdiao"], ["des:驱动装·山吹（布洛妮娅·扎伊切克）<br><br>技能设计：汐带将军<br>玩法介绍：将弃置的牌转化为护盾，不怕废牌不怕乐，能为队伍提供极强的抗压能力。供给护盾之余，还能能够为队友回复体力。擅长保护缺牌且生存能力较弱的角色，适合搭配能给队友发牌的角色。需要运营，不擅长对抗扒牌能力较强的角色或以快速爆发见长的组合。你懂我意思吧？我懂.jpg<br>关键卡牌：无中生有<br>擅长身份：主公、忠臣<br><br>背景故事：布洛妮娅的训练装甲和作战服。“山吹”是形容其颜色的词语。紧身衣将布洛妮娅还在发育的身材一展无遗。<br>&ensp;<hr><br>▶30%脆弱，廉价但开荒。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶当年的平民高塔、无限激光。倒也，倒也！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhyueguang: ["female", "bhxiubolian", 4, ["bhyueshengy", "bhjiaoyi"], ["des:白骑士·月光（琪亚娜·卡斯兰娜/K-423）<br><br>技能设计：汐带将军<br>玩法介绍：团队型辅助，能够廉价出【杀】并且有限度地为队友提供相同能力，队友能在自己回合内上下马或者送刀送牌时有奇效。适于在人数较多时辅助不缺牌的角色，适于辅助防御力强但欠缺输出能力的角色，不适于对抗扒牌能力强或者压制型的角色。<br>关键卡牌：武器牌<br>擅长身份：主公、忠臣<br><br>背景故事：第四代弑神装甲的其中一件。如其名，似乎有足以弑杀神明的力量寄宿其中。曾在雷之律者的影响下变为“雷电女王的月光”。<br>&ensp;<hr><br>▶曾经的战场必备sss角色。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhciyuan: ["female", "bhxiubolian", 2, ["bhshijie", "bhhejin", "bhhuangguan"], ["des:次元边界突破（布狼牙）<br><br>技能设计：E带将军<br>玩法介绍：具有强大的控场能力、防御能力和伤害能力，但是血量很少。擅长在开局时压制关键对手阻碍其发育，不擅长对抗具有改判能力和封锁技能能力的角色。<br>关键卡牌：白银狮子<br>擅长身份：全能<br><br>背景故事：游戏界的传说“合金装备布狼牙”，是一个只要某游戏有排行榜就一定在榜首的奇妙人物。尽管从未露面，江湖上关于他/她/它的传说永远没有减少过。<br>&ensp;<hr><br>▶合金布狼牙.jpg<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhguikai: ["female", "bhxiubolian", 3, ["bhqinglei", "bhlongming"], ["des:雷电女王的鬼铠（雷电芽衣）<br><br>技能设计：E带将军<br>玩法介绍：雷电女王·杀我·神张角·芽衣。出【闪】必定可以挂感电，造成伤害有概率可以挂感电；挂感电后概率造成1点雷电伤害。运气好时，一瞬间就可以将全场角色劈成焦炭。对【杀】具有较强防御力，但是生存能力弱。擅长通过直接伤害击破久攻不下的角色。不擅长对抗能瞬间造成大量伤害的角色和擅长扒牌的角色。<br>关键卡牌：闪、铁索连环、南蛮入侵、万箭齐发<br>擅长身份：主公、忠臣、反贼、地主<br><br>背景故事：雷之律者不完全觉醒时的形态。烧焦的女高中生制服和头上的鬼面完全不搭调，腹部和手臂的暗色甲片给人一种略微怪异的压迫感，但是这样的服装放在美少女的身上却没有丝毫违和。正所谓“美丽的女孩子，什么都可以做到”（爱丽希雅）。<br>&ensp;<hr><br>▶在？有看到我的磁暴铲吗？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶是鬼铠不是鬼铠啊，什么拼音型带将军（恼）<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶带将军怎么后半部分的介绍也是拼音型带将军捏？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶倘若👴使用五笔，阁下该如何应对？<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhaidisheng: ["female", "bhnishang", 3, ["bhzhiliu", "bhzhuanli"], ["des:北美发明家（南希·托马斯·爱迪生）<br><br>技能设计：E带将军<br>玩法介绍：能扒皮的黑色“武圣”！擅长配合具有雷电伤害相关能力的队友、擅长对抗近距离的敌人和同样具有雷电伤害相关能力的敌人，不擅长对抗远距离的敌人和能够免疫雷电伤害的敌人、不擅长处理全场角色都没有雷电伤害相关能力的局面。<br>关键卡牌：黑色牌<br>擅长身份：反贼<br><br>背景故事：早在逆熵还是天命北美支部的时候，南希的产业就已经称霸北美了。结识了普朗克、爱因斯坦、特斯拉、瓦尔特等人的爱迪生了解到天命内部的黑暗，于是开始着手做些什么。这件事最终的结果就是一个以无穷为标志的新组织——逆熵的成立。虽然从未担任盟主，但爱迪生是毫无疑问的、逆熵的建立者。<br>&ensp;<hr><br>▶听说是个富婆？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶笑话，奥托怎么可能会让北美支部独立？还不是因为给的实在太多。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhtesila: ["female", "bhnishang", 3, ["bhjiaoliu", "bhtaitan"], ["des:正弦双马尾（芙蕾德莉卡·尼古拉·特斯拉）<br><br>技能设计：E带将军<br>玩法介绍：两条命的红色“武圣”！技能收益不低，但就像交流电一样并不稳定。可以根据周围角色的情况切换到物理伤害模式（驾驶泰坦机甲）。擅长提升【杀】的伤害，不适于对抗对【杀】具有较强防御能力的角色。<br>关键卡牌：杀、武器牌<br>擅长身份：忠臣、反贼<br><br>背景故事：有着一头鲜艳红发的著名工程师，因为逆熵成立之初与当时“黑渊白花”的持有者、天命女武神蕾安娜之间发生过一些事情而获得不老之身。虽然外表看上去只有二十来岁，但在主线剧情中已经年过八旬了。脾气火爆，酒品奇差，跟“鸡窝头”爱因斯坦共事多年，得意之作是各式各样的复杂机甲，令人叹为观止。身为逆熵三朝老臣之一，与建立者爱迪生、初代盟主瓦尔特、二代盟主瓦尔特·杨等人都有很深的关系。<br>&ensp;<hr><br>▶龙虾博士兼暴躁老姐<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhshenhong: ["female", "bhxiubolian", 4, ["bhronghe","bhleiren", "bhhaoling"], ["zhu", "des:融核装·深红（无量塔姬子）<br><br>技能设计：汐带将军<br>玩法介绍：依赖管理手牌蓄力，厚积薄发的角色。擅长点杀高价值目标、爆发性地制造直接伤害，不擅长与持续压制型角色打消耗战。<br>关键卡牌：杀、桃、酒、崩坏结晶<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：NEXUS系统是休伯利安号战舰搭载的实验性系统，可与专门适配的女武神装甲（融核装·深红）连携，将战舰崩坏能发生炉产出的崩坏能导入女武神装甲为其充能，使女武神装甲得以以远超常规装甲的功率运行。这个系统长期处于实验阶段的最主要问题在于超高功率意味着过量的崩坏能，因而对人体造成的健康损害仅仅低于直接致死。<br>&ensp;<hr><br>▶说实在话存在感实在是低，姬子阿姐你快用你万能的休伯利安动力炉想想办法啊！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhjialilue: ["female", "bhnishang", 3, ["bhluoti", "bhdanbai", "bhguanxing"], ["des:星海观察者（伽利略·伽利雷）<br><br>技能设计：E带将军<br>玩法介绍：能过牌控底，能辅助摸牌弃牌，能吸收伤害。辅助能力较为全面，防御能力也十分优秀。不擅长对抗爆发式造成多次伤害的角色。<br>关键卡牌：随机应变<br>擅长身份：忠臣、反贼、内奸<br><br>背景故事：伽利略被后人尊称为“现代物理学之父”。除了应用并推广天文望远镜，伽利略对物理学最重要的贡献莫过于将实验引入力学研究中，使物理学界乃至之后的自然科学逐渐形成以实验和观测为根本的研究方法。<br>&ensp;<hr><br>▶生生不息，源源不绝。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶矢志于北，尽忠于国！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhqianjie: ["male", "bhshijieshe", 7, ["bhaomie", "bhfanji"], ["des:狂王（千劫）<br><br>技能设计：汐带将军<br>玩法介绍：不发狂，就灭亡。能让全场陷入混乱与一片火海，除非大家齐心协力把千劫关在至深之处。生存能力较强的同时擅长秒杀全场。极端不适于保护队友。<br>关键卡牌：青釭剑、贯石斧、铁索连环<br>擅长身份：反贼、农民<br><br>背景故事：前文明“逐火之蛾”十三英桀中位列第六、背负“鏖灭”之铭的融合战士。无人知道其根源的神秘存在，加入“逐火之蛾”前就已能以普通人类的身份与当时顶尖的融合战士樱打得有来有回。其人如暴怒的凶兽般嗜血、疯狂，以杀伐为乐，仰赖杀伐而生，什么正义、希望、未来……对他而言都是风中飘荡的灰尘，只有战斗时的热血挥洒才是实在的。<br>&ensp;<hr><br>▶哈哈哈哈哈，也不看看我是不是人！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhnuobeier: ["female", "bhnishang", 4, ["bhbaopo", "bhdajiang"], ["des:如雷的轰响（阿尔弗雷德·诺贝尔）<br><br>技能设计：E带将军<br>玩法介绍：高几率让自己的牌不可被响应，但也有几率让自己成为自己的牌的目标。擅长对抗主要通过手牌进行防御的角色，擅长拯救濒死的队友。不擅长对抗回复能力较强的角色。<br>关键卡牌：丈八蛇矛、桃、崩坏结晶<br>擅长身份：忠臣、反贼<br><br>背景故事：诺贝尔一生中的大部分时间都献给了炸药的研发和推广工作。他所发明的最著名的爆炸物无非硝化甘油和更晚一些的硅藻土安全炸药，但他为这些发明付出的不仅只有时间，还有他弟弟的生命：在一次事故中，他和弟弟所在的工厂发生意外爆炸，他的弟弟葬身其中。诺贝尔临终前设立了今天世界上含金量最高的奖项——诺贝尔奖，用自己遗产每年的利息当作奖金去奖励在五个领域里对人类贡献最大的杰出个人。<br>&ensp;<hr><br>▶炸还是不炸，这是个问题。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhlanmeitegong: ["female", "bhnishang", 4, ["bhjiansheng"], ["des:蓝莓特攻（莉莉娅·阿琳）<br><br>技能设计：汐带将军<br>玩法介绍：孤儿院剑圣！能够防御对手的单体牌并借此反击。擅长配合罗莎莉亚或为关键队友隔绝伤害，不擅长对抗能够方便控顶或毫不惧怕【杀】的角色。<br>关键卡牌：青釭剑、杀<br>擅长身份：忠臣、内奸<br><br>背景故事：阿琳姐妹中的妹妹。因体内来自“阿湿波”的崩坏兽因子未能很好地融合，落下了嗜睡的毛病。本纪元文明人类对融合战士的先驱尝试个体之一，单纯从战斗力来说其效果不尽人意。装甲名称据称来自一种鸡尾酒。<br>&ensp;<hr><br>▶二锅头女孩，闪亮登场！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶不动白女孩，闪亮登场！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhyingtaozhadan: ["female", "bhnishang", 4, ["bhtouchui", "bhmoqi"], ["des:樱桃炸弹（罗莎莉亚·阿琳）<br><br>技能设计：汐带将军<br>玩法介绍：超级头槌！具有强制伤害并附加“连环状态”的能力，也有转移“杀”程度的能力。擅长配合莉莉娅以及大部分不动白角色，不适于对抗擅长扒牌的角色。<br>关键卡牌：杀<br>擅长身份：忠臣、反贼<br><br>背景故事：阿琳姐妹中的姐姐。体内来自“阿湿波”的崩坏兽因子比妹妹融合得更好，因此平时一直与妹妹一起行动，照顾随时可能睡着的妹妹，以及在妹妹醒着的时候被妹妹照顾。本纪元文明人类对融合战士的先驱尝试个体之一，单纯从战斗力来说其效果不尽人意。装甲名称据称来自一种鸡尾酒。<br>&ensp;<hr><br>▶伏特加女孩，闪亮登场！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶摸牌白女孩，闪亮登场！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhchiling: ["female", "bhzhongyingjie", "4/6", ["bhduchen", "bhzhonghuo"], ["des:炽翎（符华）<br><br>技能设计：汐带将军 & 拾壹<br>玩法介绍：滚雪球型辅助角色，讲究牌复牌，能够极大强化友方的生存能力和压制能力。擅长长线作战，配合技能与体力上限相关的角色有奇效，但缺乏自保能力，不擅长对抗伤害很足或起爆很快的角色。<br>关键卡牌：防御牌<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：本纪元文明苏醒之初的赤鸢仙人形象，也是丹朱所设计赤鸢（精卫）形象的本体。自苏醒后便与苍玄（伏羲）、丹朱（女娲）、姬麟（轩辕）、连山（神农）等人一同执行“火种计划”，但是不料过早授予的知识使崩坏的进程大幅加快、最后导致名为“蚩尤”的审判级崩坏兽诞生以及苍玄、丹朱、姬麟等人的意外身亡。“火种计划”遂被废止。符华持有“羽渡尘”并且战斗力凌驾于同时期的任何存在之上（蚩尤不明确，因为封印蚩尤时赤鸢不在场，不过理应仍是符华更胜一筹），直到太虚山事变永远改变了仙人为止。<br>&ensp;<hr><br>▶赤鸢仙人，我没有说谎。<br>&ensp;&ensp;&ensp;&ensp;——奥托·阿波卡利斯<br>"]],
                        bhyunmodanxin: ["female", "bhzhongyingjie", 4, ["bhxianfa", "bhhuiming", "bhzhexian"], ["des:云墨丹心（符华）<br><br>技能设计：汐带将军<br>玩法介绍：通过调整出牌顺序，获取不同效果。操作型角色。适于配合能给队友发牌的角色。不适于对抗擅长扒牌的角色。<br>关键卡牌：基本牌、锦囊<br>擅长身份：忠臣、反贼、内奸<br><br>背景故事：故人逝去、人类文明逐步壮大后，赤鸢仙人的服装。花开花败总归尘，人世沧海桑田也不过眨眼一瞬。<br>&ensp;<hr><br>▶为什么带伙都不先去学学八卦捏（半恼）<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶按说天命东征时期的老仙应该是云墨丹心才对，不过《紫鸢篇》中却作炽翎。考虑到当时（2017年）云墨丹心还未出现，出现此类问题倒也情有可原。并且这也算不上什么严重的吃书。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhqiangxi: ["female", "bhxiubolian", 3, ["bhwuyu", "bhxuzuo"], ["des:女武神·强袭（雷电芽衣）<br><br>技能设计：汐带将军<br>玩法介绍：别拿强袭不当歌王！使用同花色牌时可以摸牌，并具有一定辅助能力。擅长配合能发牌的角色、在短时间内通过大量的牌消灭对手，也可进行一定程度的持续骚扰。不适于对抗与自身特性接近的角色。<br>关键卡牌：诸葛连弩、锦囊<br>擅长身份：忠臣、反贼<br><br>背景故事：雷电芽衣的学园制服。刻意缩短的红色夹克是适应快速挥舞单手武器以及马上作战的特别设计，鲜艳服装的风尚与数世纪前的乌兰骑兵乃至稍后的骠骑兵遥相呼应，胸前点缀的金色绶带则展现刚毅的灵魂和卓著的功勋。在那个时代，由于步兵战术和武器装备的升级，骑兵（尤其是重骑兵）不再有条件执行从正面冲垮对方步兵阵型的任务，而是改为从侧翼切入战场、破坏敌方队形从而使本方主队得以向前推进。也正因此，传统的重骑兵开始放弃全身板甲、重型骑枪等重型旧装备，慢慢向轻骑兵的方向发展，改用更轻、更灵活、更先进的胸甲、马刀、火枪等装备。并且与此相应地，一种几乎完全放弃防御能力、追求极致机动性与杀伤力的轻骑兵逐渐被重视，即后人所称的骠骑兵。当时的骠骑兵主要负责在开战前突袭、骚扰敌方补给线，或者在战斗中强攻敌方阵型的薄弱环节。也正因此，不论战争胜负，骠骑兵队伍的伤亡往往都非常惨重，拿破仑手下的拉萨尔将军曾评论道：“如果一个骠骑兵服役一年而没有战死，那他一定是个懦夫而不是一个合格的骑兵。”<br>&ensp;<hr><br>▶强袭强无敌！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶事需缓图，欲速不达也。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhzhanchangjifeng: ["female", "bhtianming", 4, ["bhtuji","bhyadao"], ["des:战场疾风（无量塔姬子）<br><br>技能设计：汐带将军<br>玩法介绍：压制型角色，拼点获胜有奖励，没获胜有惩罚。擅长对抗基础体力值较低的发育型角色，擅长配合能够发牌的角色，不擅长对抗对【杀】有很高抗性的角色。血量降低时，逐渐转型为爆发型角色。犯天命疆土者，塔必姬而破之！<br>关键卡牌：杀、点数大的牌<br>擅长身份：忠臣、反贼<br><br>背景故事：女武神时期乃至圣芙蕾雅教官时期姬子常用的服装。整体印象为朴素的黄褐色，不过红色上衣与红色头发散发出无法隐藏的热情。<br>&ensp;<hr><br>▶矿场，我来辣。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶杀你个片甲不留！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhkaixuan: ["female", "bhxiubolian", 3, ["bhjianjie", "bhjianren"], ["des:女武神·凯旋（无量塔姬子）<br><br>技能设计：汐带将军<br>玩法介绍：弃置牌为队友换取物理伤害提升效果，并具有一定生存能力。适于辅助能瞬间造成多次物理伤害的角色，适于对抗擅长造成单次高额物理伤害的角色。不适于独自战斗。<br>关键卡牌：无中生有<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：姬子的教官制服。展现十足的力量感之余，亦不失女性魅力。几乎只在典礼或重要场合出现的服装。<br>&ensp;<hr><br>▶当年的最强易伤，虽然sp巨卡手，但是确实是无论理论还是实战最高伤害的实践者。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶崩坏3被最广泛认可的首个百万伤害（圣凯巫深渊大盾）就有其功劳。现在的玩家或许难以想象这个伤害全是由初始A甚至B打出来的。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhshiyue: ["female", "bhxiubolian", 3, ["bhyouda", "bhyueshu"], ["des:女武神·誓约（德丽莎·阿波卡利斯/A-310）<br><br>技能设计：汐带将军<br>玩法介绍：通过使用牌给目标挂标记，获取随机效果。擅长配合能够稳定造成多次伤害的角色压制对手或配合爆发式造成大量伤害的角色秒杀特定目标。不擅长对抗能够一瞬间造成大量爆发伤害的角色。<br>关键卡牌：杀、伤害性锦囊<br>擅长身份：忠臣、反贼、内奸<br><br>背景故事：天命最经典款式的修女服，也是最标准款式的女武神装甲。当然，前提是某个冒失的小个子修女今天出门时记得戴上配套的头巾。<br>&ensp;<hr><br>▶德莉傻啊德莉傻，你可长点心眼吧。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhyouxia: ["female", "bhxiubolian", 3, ["bhxingluo"], ["des:女武神·游侠（琪亚娜·卡斯兰娜/K-423）<br><br>技能设计：汐带将军<br>玩法介绍：同色歌王，不但能用1摸1，还对【杀】有显著的强化效果。擅长爆发性点杀高价值目标或通过连环状态秒杀全场，但生存能力孱弱，非常不擅长对抗压制型或扒牌型的角色，较依赖队友包养。<br>※伤害值限制，指int有多大、伤害就多高！<br>关键卡牌：铁索连环、属性杀、伤害类锦囊<br>擅长身份：忠臣、反贼<br><br>背景故事：琪亚娜的学园制服。以骚扰能力和机动性见长，契合线列兵时代的散兵一职。不过正统散兵所使用的应该是射程远、精度高的武器，目的是在敌方线列兵接近之前就消灭其有生力量，所以实际上几乎不使用手枪之类的近战武器。这一兵种在坦克出现之后便被狙击手取代了。<br>&ensp;<hr><br>▶作为你游早年为数不多的（废话就一个）正经双枪远程角色，无论是伤害还是机制都属实是蛋疼。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶180/14+4/2+3/3+4/60F·75G<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶游神，启动！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhpoxiaoqiangxi: ["female", "bhxiubolian", 3, ["bhfengyu", "bhliudian"], ["des:破晓强袭（雷电芽衣）<br><br>技能设计：汐带将军<br>玩法介绍：使用花色/点数相同的牌可以摸牌，欲速不打野。可以理解为SP版本的“女武神·强袭”。相较于之，强化了伤害能力，弱化了辅助能力。<br>关键卡牌：诸葛连弩、锦囊<br>擅长身份：内奸<br><br>背景故事：天命之战后由特斯拉博士亲手操刀改良的装甲。可以部分释放雷电的力量，相比旧款而言是不错的提升。<br>&ensp;<hr><br>▶感觉不如强袭...强度。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhyingwuchongji: ["female", "bhzhongyingjie", 3, ["bhyuedu"], ["des:影舞冲击（雷电芽衣）<br><br>技能设计：汐带将军<br>玩法介绍：闪还是不闪，这是个问题。骚扰性能与爆发力俱佳的角色，擅长对抗依赖手牌数量构建防御的角色，不擅长对抗起爆很快或能够卖血的角色。<br>关键卡牌：杀<br>擅长身份：忠臣、反贼<br><br>背景故事：雷电芽衣的特色装甲，厚重的红黑甲片让人想到威权与幕府，出鞘的利刃寒光闪闪、冷若冰霜，眼角的血色又为肃杀的氛围增添一丝香艳。<br>&ensp;<hr><br>▶我想看那个...就是那个...四分身斩沉灵...<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶你可拉倒吧，猪杀完了吗？<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],//v1.0.0
                        //v1.0.0

                        bhkaipule: ["female", "bhnishang", 3, ["bhmianji", "bhguidao", "bhzhouqi"], ["des:天空立法者（约翰尼斯·开普勒）<br><br>技能设计：E带将军<br>玩法介绍：团队型角色，人数越多效果越明显。擅长微调全场角色互相间的距离及配合缺乏过牌能力的角色，不擅长对抗能够强制造成伤害或瞬间造成大量伤害的角色。<br>关键卡牌：进攻马、防御马<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：开普勒的三大定律几乎诠释了宏观宇宙一切天体的运动规律。不仅如此，其在天文学领域的诸多研究和工作使哥白尼的日心说得到广泛接受，并最终为牛顿的万有引力定律打下重要基础。后人感激他对天文学做出的卓越贡献，尊称他为“天空立法者”。<br>&ensp;<hr><br>▶+1神马，御敌于千里之外。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhxialuote: ["female", "bhtianming", 3, ["bhshengong", "bhlvlin"], ["des:射手（夏洛特）<br><br>技能设计：E带将军<br>玩法介绍：凭借高超的射术，身怀令人畏惧的狙击能力；依托深厚的密林，具有令人无奈的防御能力。上手简单，适宜对游戏尚不熟悉的玩家选用。擅长对抗依赖【杀】与【闪】进行攻击和防御的角色。不擅长对抗扒牌能力较强的角色。<br>关键卡牌：长射程武器<br>擅长身份：全能<br><br>背景故事：依托密林展开活动的侠盗，原型可能是英格兰民间传说中的侠盗罗宾汉。以绝对精准的箭法射中“圣殿骑士”露西亚胸前的宝石、营造后者假死的假象，从而完成二人商定的协议，使所在村庄免受天命暴政侵害，最后与露西亚过上了幸福的生活。<br>&ensp;<hr><br>▶贴，都可以贴。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhshalianna: ["female", "bhtianming", 4, ["bhjianwu"], ["des:剑士（莎莲娜）<br><br>技能设计：E带将军<br>玩法介绍：以过牌能力见长，牌少时能摸牌，搭配个别角色有奇效。上手简单，适宜对游戏尚不熟悉的玩家选用。能够应对大多数情况，不适于对抗擅长卡距离的角色。<br>关键卡牌：杀<br>擅长身份：全能<br><br>背景故事：莎莲娜出身于莉珐家，这条血脉使她和家人拥有远超常人的崩坏能抵抗性。许多年前，当时莉珐兄妹的妹妹为了保护所在的村镇用自己的身体、血液以及生命封印住当地一处崩坏源。在那之后过了一百年，不知出于何种原因，当地早已不再出现的崩坏再度爆发。已是天命女武神的莎莲娜闻讯急忙回乡，却找到了一位样貌几乎与自己完全相同的少女。<br>&ensp;<hr><br>▶吴懿不在此地。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶但吴懿能善算谋划。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhweiduoliya: ["female", "bhtianming", 6, ["bhjiaojian", "bhduanren"], ["des:放逐骑士（维多利亚）<br><br>技能设计：E带将军<br>玩法介绍：依赖承受伤害换取收益的角色，血量较高，但是有大幅增加嘲讽的负面技能。适于配合擅长以“连环状态”放大元素伤害的角色和能够造成单次高额元素伤害的角色。不适于对抗擅长配合的角色。<br>关键卡牌：铁索连环，队友的古锭刀、酒、火杀<br>擅长身份：反贼、内奸<br><br>背景故事：曾是骑士团军团长官，但因为坚持自己的骑士精神而遭到放逐。即使如此，她也仍在不断游历，四处帮助遇到困难的人们。曾经是薇欧拉的上司。<br>&ensp;<hr><br>▶我为天命出过力，啊啊啊！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhlinaerduo: ["female", "bhtianming", 4, ["bhjiaojian", "bhshaji"], ["des:狂暴骑士（里纳尔多）<br><br>技能设计：E带将军<br>玩法介绍：能够主动卖血的角色。擅长无视对手防具进行攻击。不擅长对抗天生对【杀】有较强抵抗力的角色。<br>关键卡牌：杀、酒<br>擅长身份：忠臣<br><br>背景故事：<br>&ensp;<hr><br>▶主公，你吃了吗？没吃的话，吃我一戟！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhshenensongge: ["female", "bhxiubolian", 4, ["bhmuen", "bhshengyu"], ["zhu", "des:神恩颂歌（德丽莎·阿波卡利斯/A-310）<br><br>技能设计：汐带将军<br>玩法介绍：配合队友时每轮高几率收益2牌、中几率收益1血，美中不足是启动条件略高。擅长配合只缺乏特定类别的牌的角色。不擅长对抗扒牌角色。<br>关键卡牌：防御牌<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：奥托为德丽莎准备的独特礼服。据说原本是为卡莲准备的，奥托特意将其改为适合德丽莎的尺码。足见奥托对德丽莎的喜爱——或者说，足见奥托对卡莲及其各种妹妹的喜爱。<br>&ensp;<hr><br>▶想和德丽莎一起睡午觉吗？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶因为懒，用的图来自其专属圣痕“卡莲·颂歌”。也就是说卡面上的其实是卡莲。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhyuepo: ["female", "bhtianming", 4, ["bhshenji", "bhkanluan"], ["des:辉骑士·月魄（比安卡·幽兰戴尔·阿塔吉娜）<br><br>技能设计：E带将军<br>玩法介绍：AP·AD双修的角色，通过使用牌、伤害和受伤积累标记，标记达到10枚后可发动一次强力攻击。擅长通过一定程度的手牌管理，一瞬间秒杀对手。不擅长对抗对【杀】防御能力较强的角色和擅长控制距离的角色。<br>关键卡牌：杀、各种锦囊<br>擅长身份：全能<br><br>背景故事：第四代弑神装甲的其中一件。具有优秀的机动能力和战斗能力，“荣耀捍卫者”可以据主人的意念自主展开活动。幽兰戴尔从剧情中初次登场就一直爱穿的外出服装。<br>&ensp;<hr><br>▶三十六方，必为大桶！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶我是终身制鹅黑，这个介绍本不该我写（<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶其他角色的你也没写啊！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶可是我是终身制鹅黑啊。说实在话这个玩意确实是让鹅在爷这种玩家群体里一步步走向黑名单的源头。很喜欢当时的一个表情包：弱者才需要依靠武器.jpg<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],//v1.0.1
                        //v1.0.1

                        bhyiduheiheqinshi: ["female", "bhnishang", 3, ["bhheliu", "bhshunbao", "bhanying"], ["des:异度黑核侵蚀（布洛妮娅·扎伊切克）<br><br>技能设计：E带将军<br>玩法介绍：无视【乐不思蜀】和【兵粮寸断】，且能方便地提高【杀】的伤害。擅长对抗通过延时锦囊赋予控制效果的角色和防御力薄弱的角色。不擅长对抗具有控制距离能力的角色或【杀】不容易打出伤害的角色。<br>关键卡牌：杀、武器牌<br>擅长身份：全能<br><br>背景故事：受到可可利亚后门影响而被遥控的布洛妮娅，对重要的伙伴大打出手。为证明自己对伙伴的珍视，选择烧毁可可利亚植入大脑的生物芯片以摆脱控制，但代价是令自己徘徊于鬼门关前。<br>&ensp;<hr><br>▶一拳超鸭，线下赛の传说级名场景之一。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶不论是游戏剧情还是战场深渊，都几乎完全隐身的角色。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhyinlangdeliming: ["female", "bhnishang", 3, ["bhmoxiang", "bhgongming", "bhyueqian"], ["des:银狼的黎明（布洛妮娅·扎伊切克）<br><br>技能设计：E带将军<br>玩法介绍：通过布置“小兔”来扒牌或赋予关键角色通过承受伤害换取收益的能力，比较依赖对于局势的预判。擅长对抗惧怕扒牌的角色，擅长辅助经常受到伤害的角色，擅长用丝袜杀死目标。不擅长对抗具有改判能力或（在未能良好布置“小兔”时）能够短时间造成大量伤害的角色。<br>关键卡牌：桃、酒、崩坏结晶、桃园结义<br>擅长身份：忠臣、反贼、内奸<br><br>背景故事：西伯利亚令人闻风丧胆的杀手“乌拉尔银狼”的本体。没有人能想到那位令人谈之色变的危险杀手竟然是个十岁出头的小女孩，不过也正因此，“银狼”下手前受到的怀疑也减少了很多。“银狼”从未失手，直到那一天——她被派去刺杀一位逆熵的高层、名叫可可利亚的女人的那一天。<br>&ensp;<hr><br>▶一直以来，就没有一个正经的重装老兔36D作为独立召唤物主要输出过，银狼算是个尝试，然而以刮痧见长。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhliewenhuke: ["female", "bhnishang", 3, ["bhmojing", "bhxianwei"], ["des:小人国公主（安东尼·凡·列文虎克）<br><br>技能设计：汐带将军<br>玩法介绍：通过牺牲前期的对其他角色的用牌机会以换取发育时间，在发育到一定阶段后拥有一个回合内多次观看敌方手牌并对其手牌管理进行破坏的能力。需要一定的发育时间。擅长配合能拖慢节奏的角色慢慢发育，不擅长对抗压制能力较强的角色。<br>关键卡牌：目标为自己的牌、防御牌<br>擅长身份：反贼<br><br>背景故事：列文虎克本是一位平平无奇的镜片工匠，从未受过正规的教育，以研磨镜片为生。平日里，他经常用自己制作的高倍放大镜观测各种各样的东西——昆虫，植物，矿石，等等。这本并不是什么值得称道的大事，直到他将他观测到的东西邮寄到英国皇家学会并引发了巨大轰动为止。<br>&ensp;<hr><br>▶带将军你在康甚么？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶嗯？（察觉）<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhhua: ["female", "bhshijieshe", 4, ["bhshenyin", "bhfusheng"], ["des:战士（华）<br><br>技能设计：汐带将军<br>玩法介绍：团队型辅助，为队友提供通过承受伤害获取收益的能力，并且个人能力较强。适于反制牌多或单段伤害较高的角色，擅长配合缺乏牌或生存能力的角色，不擅长对抗压制能力强或能够扒牌的角色，不适于对抗具备改判能力的角色。<br>关键卡牌：红色牌<br>擅长身份：全能<br><br>背景故事：前文明“逐火之蛾”十三英桀中位列第十二、背负“浮生”之铭的融合战士。寡言少语，沉稳可靠。“火种计划”的执行者，在“终焉”前夕陷入沉睡、度过漫长的五万年后醒来，为下一世代对抗崩坏的伟业传承希望之火。<br>&ensp;<hr><br>▶格蕾修多少岁来着？<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶114514岁（即答）<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhxi: ["male", "shen", 6, ["bhfeiqiu", "bhbaodi"], ["des:非酋型带将军<br><br>技能设计：汐带将军<br>玩法介绍：因为很非，所以摸不到什么好牌。<br>关键卡牌：保底<br>擅长身份：全不能<br><br>背景故事：今天的汐带将军保底了吗？<br>&ensp;<hr><br>▶玄不救非，氪不改命。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶保底香啊，很香啊！<br>&ensp;&ensp;&ensp;&ensp;——裴小哼<br>"]],//v1.0.2
                        //v1.0.2

                        bhkongzhilvzhe: ["female", "bhbenghuai", 3, ["bhlvling", "bhxujie", "bhlvzhe"], ["des:空之律者（琪亚娜·卡斯兰娜/K-423）<br><br>技能设计：E带将军<br>玩法介绍：通过布置“门”来转移【杀】，以此进攻或防守。非常依赖对局势的把握和预测，亦依赖与对手进行博弈。擅长防御【杀】并化为己用，适于对抗主要通过【杀】进行攻击的角色。不适于对抗通过【杀】以外手段瞬间造成大量爆发伤害的角色。<br>关键卡牌：杀<br>擅长身份：全能<br><br>背景故事：天命之战时因奥托阴谋而在K-423身上觉醒的空之律者人格。依托大量崩坏能，拥有“空间”的权能，通过各式各样的空间操作将人类玩弄于股掌之中。被姬子、符华等人舍身攻击才压制住。<br>&ensp;<hr><br>▶女王降临！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶光棱塔。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhafujiadeluo: ["female", "bhnishang", 3, ["bhachang", "bhmoer"], ["des:物质探究者（阿莫迪奥·阿伏伽德罗）<br><br>技能设计：E带将军<br>玩法介绍：具有印锦囊牌的能力和白嫖特定转化卡牌的能力。擅长在队友保护下展开活动或配合及反制能够将多张牌转化为其他牌的角色。不擅长对抗压制能力强或能够瞬间造成大量伤害的角色。<br>关键卡牌：装备牌<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：阿伏伽德罗定律和阿伏伽德罗常数已经是众所周知的公共信息了。然而当年阿伏伽德罗在盖-吕萨克气体定律的基础上提出其进一步发展的定律时，却一直得不到科学界的认可，一直到他逝世之后才逐渐被重视。这个定律的大致内容是，相同条件下（温度相同、压强相同等）等体积气体所含的分子数量相同。阿伏伽德罗常数则指一摩尔物质所含的微粒总数，约为6.02*10^23。<br>&ensp;<hr><br>▶阿福家的骡。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhxuedijuji: ["female", "bhzhongyingjie", 3, ["bhjuji", "bhdongtu"], ["des:雪地狙击<br><br>技能设计：汐带将军<br>玩法介绍：能够控制距离，通过预测对手使用的牌的花色和类型来取得收益。擅长压制生命值极低的角色，不擅长对抗压制能力很强或爆发能力很强的角色。<br>关键卡牌：防御牌<br>擅长身份：反贼<br><br>背景故事：出生于极寒之地的少年兵绝对擅长在雪地里的作战。她们熟悉避免寒冷侵蚀的方法，也了解在干枯草丛中隐身的要诀。这样的技巧使她们能够猎杀任何人，也是她们百战百捷的原因，但是在那个名为可可利亚的女人手里却意外地栽了跟头。<br>&ensp;<hr><br>▶兔子在注视着你.jpg<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶帝雪弑天。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],//v1.0.3
                        //v1.0.3

                        Ezie: ["male", "shen", 6, ["bhexiaodao", "bheqiyu"], ["des:小道型带将军<br><br>技能设计：汐带将军<br>玩法介绍：将军请走此小道。<br>关键卡牌：武将卡<br>擅长身份：地主、农民<br><br>背景故事：如果这个扩展很久没有更新，那一定是因为👴已经走小道了。<br>&ensp;<hr><br>▶将军请走此小道。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶虽然会被扣欢乐豆，但是将军请走此小道。<br>&ensp;&ensp;&ensp;&ensp;——裴小哼<br>"]],
                        bhyingtie: ["female", "bhtianming", 4, ["bhyiming", "bhshoulie"], ["des:猎袭装·影铁（丽塔·洛丝薇瑟）<br><br>技能设计：E带将军、汐带将军<br>玩法介绍：对被标记的虚弱角色造成伤害时可令其直接濒死（自己也需要失去1点体力）。擅长配合扒牌见长的角色、以强大的威慑力压制对手，尤其擅长对抗依赖承受伤害获取收益的角色。不擅长对抗体力值奇高的角色，自身体力值较低时能够发挥的作用有限。<br>关键卡牌：贯石斧、回复体力的牌<br>擅长身份：主公、反贼<br><br>背景故事：身为女仆，打扫自然是工作中必不可少的一环。普通的女仆只能结伴打扫宅邸、庭院等无聊的地方，而能力出众的女仆则可以以一己之力扫净战场上横刀相向的千军万马。<br>&ensp;<hr><br>▶狗塔罢了，不足挂齿。毕竟是塔子姐，不吃瘪翻车是不可能的。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhxuesemeigui: ["female", "bhbenghuai", 4, ["bhfenshen", "bhzaiyan", "bhxuewu"], ["des:血色玫瑰（无量塔姬子）<br><br>技能设计：E带将军<br>玩法介绍：操作型角色，需求对局势的精确把控。依赖手动进入/退出爆发状态，并在爆发状态下获取收益的角色。通过使用牌和造成伤害获取计数，退出爆发状态时据计数获取一次性收益。爆发状态下出牌太多会掉血，但也会每轮游戏仅限一次地获得脱离濒死的机会。擅长在一瞬间造成大量火焰伤害。不擅长对抗以扒牌能力见长的角色。<br>关键卡牌：天火大剑、劫灭<br>擅长身份：忠臣、反贼<br><br>背景故事：在“九幽”之下、“剑”的封印处，走在队伍最前的无量塔姬子不慎被崩坏能侵蚀，进而遭到远古意志（疑为黑轩辕剑）的操控。在崩坏能的浸润下形成此装甲。所幸最后在琪亚娜、符华等人的努力下，姬子化险为夷，最终成功回到圣芙蕾雅学园交付使命。<br>&ensp;<hr><br>▶呜呜呜，这可是爷当年第一个s。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶1.9版本最大受害者，没有之一。第二大受害者是鬼铠。在当年，这两个角色都是没有如今通体的黑丝的。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhyeyinchongxia: ["female", "bhzhongyingjie", 3, ["bhrenzhe",  "bhwaidao"], ["des:夜隐重霞（八重霞）<br><br>技能设计：汐带将军<br>玩法介绍：忍者的工作就是查明与等待。根据当前技能发动情况的不同，具有潜伏与进击两种状态：前者侧重保护自己与积攒力量，后者注重风险与收益并存的袭击活动。具有积蓄力量后一波摧毁敌人的能力，也具有较强的骚扰能力，能够对抗大多数角色不落下风，但对局势的把握要求非常高。<br>※〖外道〗仅能进行3A3=6次重新排列。并且完全有可能在一回合内就重新排列数次，因此尽量不要进行持久战。<br>关键卡牌：非基本牌<br>擅长身份：反贼<br><br>背景故事：在其他世界线中经由卡莲之手造出的八重樱克隆人。在其他世界线穿越而来的某个人的帮助下，总算完成在八重町街的任务并得知了自己的身世。最后被那个人带回休伯利安。<br>&ensp;<hr><br>▶电驴子啊电驴子。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhcxunyu: ["female", "bhxiubolian", 4, ["bhcunxin", "bhyanpo","bhyunlan","bhluanlei"], ["des:女武神·迅羽（符华）<br><br>技能设计：E带将军、汐带将军<br>玩法介绍：群攻锦囊变成单体锦囊，但是【杀】可以多指定一个目标。擅长一对一战斗。不擅长对抗防御力很强的角色。<br>关键卡牌：杀、南蛮入侵、万箭齐发<br>擅长身份：内奸<br><br>背景故事：符华的女武神制服。<br>&ensp;<hr><br>▶食我破盾200%大球球辣！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶本来设计的时候是做成像高顺那样的极致对单，但是汐带将军愣是改了个多指。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhaiyinsitan: ["female", "bhnishang", 3, ["bhxiangdui", "bhguangdian", "bhyinbian"], ["des:相对天然卷（丽瑟尔·阿尔伯特·爱因斯坦）<br><br>技能设计：E带将军<br>玩法介绍：拥有超强防御，且能够给队友支援大量手牌，但是不动白。“相对”在自身濒死时具有很强的负面作用效果，请注意。擅长反制卡距离打消耗的角色，擅长反制通过积攒大量手牌进行防御或进攻的角色。不擅长对抗能一瞬间造成多次伤害或能够通过技能强制造成伤害的角色。<br>关键卡牌：桃、酒、崩坏结晶、桃园结义<br>擅长身份：主公、反贼、内奸<br><br>背景故事：有着一头蓬乱蓝发的著名科学家，因为逆熵成立之初与当时“黑渊白花”的持有者、天命女武神蕾安娜之间发生过一些事情而获得不老之身。虽然外表看上去只有二十来岁，但在主线剧情中已经年过八旬了。态度慵懒，吐槽犀利，跟“龙虾博士”特斯拉共事多年，得意之作是各式各样拥有神奇功能、颠覆理论和常识的小玩意。身为逆熵三朝老臣之一，与建立者普朗克、初代盟主瓦尔特、二代盟主瓦尔特·杨等人都有很深的关系。<br>&ensp;<hr><br>▶鸡窝头。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],//v1.0.4
                        //v1.0.4

                        bhwumianliming: ["male", "shen", 4, ["bhjianwang", "bhchenzao"], ["des:健忘型带将军<br><br>技能设计：汐带将军<br>玩法介绍：随着时间流逝逐渐忘却一切……直到牌堆的终结。擅长与其他角色五五开。不擅长获胜。<br>关键卡牌：所有牌<br>擅长身份：全不能<br><br>背景故事：<br>&ensp;<hr><br>▶闻书强识，才可博于运筹。所阅所读，汪呜呜汪！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhanqiangwei: ["female", "bhtianming", 4, ["bhshuya"], ["des:黯蔷薇（丽塔·洛丝薇瑟）<br><br>技能设计：E带将军<br>玩法介绍：将单次伤害转化为体力流失，并由此获得收益。擅长为队友吸收单次高额伤害。不擅长进行发育。<br>关键卡牌：桃、酒、崩坏结晶、桃园结义<br>擅长身份：主公、内奸<br><br>背景故事：丽塔幼年时不幸遭遇崩坏，但却幸运地被以拉格纳为首的天命女武神救出。在崩坏中失去了一切的丽塔，亲眼目睹了那位英雄平日里穿上女仆装后的另一面——一位能够诠释何谓“完美”的救命恩人，自然会成为少女心中第一顺位的导师。于是，“完美”成了少女的信条，她也像启迪了自己的导师一样，穿上了意味着“完美”的女仆装。<br>&ensp;<hr><br>▶不灭之刃副队长x<br>鹅叠专用女仆v<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhduanzuihuangnv: ["female", "bhzhongyingjie", 3, ["bhyouzi", "bhyayan"], ["des:断罪皇女！！（菲谢尔·冯·露弗施洛斯·那菲多特）<br><br>技能设计：E带将军<br>玩法介绍：脆弱，但可以通过回合内的交换位置获取大量收益。擅长在队友完备的保护下发育并辅助其他队友发育。不擅长接近敌人或对抗压制能力强、爆发能力强、控制能力强等的角色。<br>关键卡牌：防御牌<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：那是跨越万千宇宙、手握断罪之圣雷降临的皇女。邪祟为之颤抖，幽夜为之臣服，天上天下无一善人不受其恩赐，亦无一恶人可躲其裁罚……凡此种种，均需我等赞颂伟大的幽夜之主、神圣的维系者、断罪之皇女——菲谢尔！<br>&ensp;<hr><br>▶我乃断罪之皇女菲谢尔，今天来隔壁没带奥兹。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhyuehuang: ["female", "bhxiubolian", 4, ["bhhundian", "bhfeixue", "bhmuguang"], ["des:暮光骑士·月煌（德丽莎·阿波卡利斯/A-310）<br><br>技能设计：汐带将军、E带将军<br>玩法介绍：通过进入或退出爆发状态来切换压制流程和发育流程的角色。擅长通过短时间的手牌管理换取长时间的强力压制。不擅长对抗以控制距离见长的角色。<br>关键卡牌：杀、锦囊<br>擅长身份：全能<br><br>背景故事：含有“约束”之力的女武神装甲。在高度解放自身力量的“沸血”状态下，若解放程度过高则对融合了崩坏兽的德丽莎自身有毁灭性的伤害，所以这件装甲也起到限制器的作用。<br>&ensp;<hr><br>▶紫苑一步从c级女武神到主流机械c，这次增幅功不可没。据传又是不愿透露姓名の德莉莎厨出力才能有幸见到这个增幅。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],//v1.0.5
                        //v1.0.5

                        Argon: ["female", "shen", 6, ["bhaoye", "bhyexing"], ["des:熬夜型带将军<br><br>技能设计：汐带将军<br>玩法介绍：今晚通宵……睡觉。<br>关键卡牌：一轮10牌。<br>擅长身份：全能<br><br>背景故事：西半球作息的带将军。<br>&ensp;<hr><br>▶真好，👴一觉睡到大天光。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhyuelun: ["female", "bhtianming", 4, ["bhanlei", "bhcunzhi"], ["des:影骑士·月轮（符华）<br><br>技能设计：E带将军<br>玩法介绍：半辅助半输出型的角色。擅长配合能造成大量伤害（尤其是能力与雷电伤害有关）的角色。不擅长对抗具有免疫伤害效果的角色。<br>关键卡牌：雷杀<br>擅长身份：忠臣、反贼<br><br>背景故事：第四代弑神装甲的其中一件。天命之战时期以及之前的一段时间符华的主要服装，能力是强大的力量与精准的动作。<br>&ensp;<hr><br>▶欧拉欧拉欧拉<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhzhangheng: ["female", "bhzhongyingjie", 3, ["bhhuntian", "bhdidong"], ["des:木圣（张衡/蔡天仪）<br><br>技能设计：E带将军<br>玩法介绍：脆弱，但是具有强大的解控能力和控制能力。擅长对抗依赖【乐不思蜀】【兵粮寸断】等控制类延时锦囊的角色，擅长配合具有改判能力的角色和受益于【闪电】的角色。不擅长对抗压制能力强或能一瞬间造成大量伤害的角色。<br>关键卡牌：防御牌<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：张衡是我国古代历史中最著名的发明家之一。其最著名的发明非可预测地震的“地动仪”莫属。实际上，张衡对当时的观星器具“浑天仪”也施加过诸多改良，大大促进了当时天文学的发展。<br>&ensp;<hr><br>▶天雷滚滚呐。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhjinshengtan: ["female", "bhzhongyingjie", 3, ["bhguaijie", "bhpiping", "bhkumiao"], ["des:鲲鹏散士（金圣叹/叶采章）<br><br>技能设计：E带将军<br>玩法介绍：易如反掌！回合外概率免费出牌，具有一定的防御和辅助能力；每轮可配合队友评价一名角色，令其摸牌或弃牌。亡语能够辅助摸牌能力强但用牌能力不足的角色。擅长配合缺牌的队友扩大优势。不擅长对抗爆发力强的角色或独自作战，技能收益比较依赖运气。<br>关键卡牌：防御牌<br>擅长身份：忠臣、反贼<br><br>背景故事：著名的文学家和批评家，为我国文学的发展（尤其是通俗文学的发展）做出很大贡献。金圣叹评点的《水浒传》《西厢记》等书，至今仍是经典。其人才华横溢但性格古怪，视功名利禄如粪土。留下很多“整活”的传说，最著名的大约是在哭庙案的处刑现场、自己即将要面临被斩首的命运时，以“有要事相告”叫来狱卒，并对狱卒说：“花生米与豆干同嚼，大抵有胡桃滋味。”<br>&ensp;<hr><br>▶之前听老师讲的时候还没啥感觉，自己去找资料的时候发现金圣叹整的都是绝活，前无古人后无来者那种。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶多少是个顶级整活人。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhdilake: ["female", "bhnishang", 3, ["bhdifang", "bhchanglun", "bhanhai"], ["des:深海的少女（保罗·狄拉克）<br><br>技能设计：E带将军、汐带将军<br>玩法介绍：通过独特的转化机制，用手牌复制另一张手牌。结束阶段可以补牌，回合外可以捡垃圾，自身的生存能力比较有保障。依据场上局势灵活变更策略可应对大部分情况。不擅长对抗爆发力很强的角色。<br>关键卡牌：锦囊<br>擅长身份：全能<br><br>背景故事：狄拉克方程被提出后，一个问题逐渐浮出水面：我们都知道开平方会开出正、负两个值，那么通过求解狄拉克方程得到的某些“本不应该存在”的负的物理量意味着什么呢？经过种种思考，保罗·狄拉克提出了一种新的理论，并且预言了普通电子的反粒子——正电子的存在。这个预言于数年之后的1932年被其他科学家的实验证实，并且在那之后的几十年间人类逐渐发现了反质子、反中子、反中微子等一大批反粒子。狄拉克对正电子的解释是，根据“能量最低原理”，高能级的粒子一定倾向于跃迁到更低的能级上去；而每个能级只能容纳两个自旋相反的电子，并且我们能“看见”的能级有限；我们可以“看见”的电子，似乎并不喜欢跃迁到更低的能级，仿佛这些能级已经是最低的能级了——但通过狄拉克方程，却能解出正好与其相反的负能级来。据此，狄拉克推测，那些“不可能存在”的负能级其实并非“不存在”，而是“看不见”；我们发现不了这些能级，其实是因为其早就被同样“看不见”的各种粒子填满、达成了某种“不可观测”的绝对稳态——换句话说，在这个说法的体系内，我们所在的世界不止“看见”的部分，在那之下还有无限个“看不见”的世界叠加在我们“所见”的部分之上，就好像被“负能级”的大海浸泡着。这个猜想被称为“狄拉克之海”，或者用更晚一点的称呼，叫做“量子之海”。<br>&ensp;<hr><br>▶科学的美在于极致的简洁。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],//v1.0.6
                        //v1.0.6

                        bhjinyang: ["female", "bhtianming", 4, ["bhbaquan"], ["des:圣仪装·今样（卡莲·卡斯兰娜）<br><br>技能设计：E带将军<br>玩法介绍：受伤后与伤害来源拼点获胜可以回血且血越多收益越高，不动白的角色。擅长在体力值高时借助大量的手牌压制对手、营造滚雪球般的发育环境，不擅长对抗能够一次性造成非常高额伤害的角色。<br>关键卡牌：点数大的牌、回复体力的牌<br>擅长身份：主公、内奸<br><br>背景故事：奥托自研游戏《卡莲幻想VII》中出现的角色“转校生卡莲”。讲述了转校生来到学园后披荆斩棘一路前进，最终打倒学园霸主、学生会长八重樱，最终成为学园首席的热血故事。<br>&ensp;<hr><br>▶卡莲幻想只能有一个赢家.jpg<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶圣仪装♂Van样。当年作为“逆熵F4”出道时所用的马甲为迪迦奥特曼。顺带一提，逆熵F4为：迪迦（今样）、奥托（冰卡）、岳父（游侠）、王♂（圣女）、班尼特·福迪（玫瑰）。那段岁月的鬼畜mod不知为何尤为中意双枪角色。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhyanyexingyuan: ["female", "bhnishang", 4, ["bhaizeng", "bhyanye"], ["des:魇夜星渊（希儿·芙乐艾）<br><br>技能设计：汐带将军<br>玩法介绍：具有多个风格的角色，游戏开始时据是否有其他【希儿】角色切换风格。在有其他【希儿】角色时，主要通过为其承受伤害并将伤害转化为摸牌收益；没有时，则以造成或受到伤害提升自身造成的伤害。擅长造成单次高额伤害。不擅长对抗具有体力流失效果或低频免伤能力的角色。<br>关键卡牌：杀、回复体力的牌<br>擅长身份：全能<br><br>背景故事：希儿里人格占据身体时所展现的样貌。嗜血、疯狂、孤僻、热爱报复、崇尚仇恨、厌恶人群乃至光明的一切……总之是令人不寒而栗的存在。但她对希儿的感情是货真价实的。<br>&ensp;<hr><br>▶4月c，寄中寄，史上死的最快的s级主c捏。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],//v1.0.7
                        //v1.0.7

                        bhmeibiwusi: ["female", "bhshijieshe", "3/8", ["bhwuxian", "bhjinhua", "bhhuanshe", "bhsbenghuai"], ["des:蛇主（梅比乌斯）<br><br>技能设计：E带将军<br>玩法介绍：令特定对手感到无解、运营得当时甚至不会死亡的发育型角色。具有永久夺取其他角色技能或永久赋予技能的能力，也有强大的摸牌能力和冷却时间较长的强制复活能力。使用时需要时刻注意剩余SP是否满足“环蛇”复活的要求。擅长对抗一切输出能力不足的角色。不擅长对抗能够封锁技能、能够造成SP流失、能够在一瞬间秒杀魔将、能够稳定造成大量伤害的角色。<br>关键卡牌：回复体力的牌<br>擅长身份：全能<br><br>背景故事：前文明“逐火之蛾”十三英桀中位列第十、背负“无限”之铭的融合战士，“往事乐土”实际的控制者。不知是否因融合的崩坏兽影响，喜欢做非常颠覆伦理的恐怖实验。其自身在实验中获得“逆向死亡”的能力，早已进化为超越人类的存在。在其助手克莱因意外过世后疯狂的程度与日俱增，已经到了就连那位梅博士听后也要摇头的程度。<br>&ensp;<hr><br>▶可惜无限的数值是9，mhy已经算出来了。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhkuangrelandiao: ["female", "bhnishang", 4, ["bhjiumeng", "bhshuangxiang", "bhkuangre"], ["des:狂热蓝调（Δ）<br><br>技能设计：汐带将军<br>玩法介绍：二刀流，自带一把【寂静天鹅湖】（需要装备其他武器解锁）。发育型角色，能够在战斗中永久改变自身技能风格，转变为强力的压制型角色。<br>关键卡牌：杀、武器牌<br>擅长身份：忠臣、反贼、内奸<br><br>背景故事：其他世界线中罗莎莉亚和莉莉娅融合后的形态，主体为罗莎莉亚。性格与之前的双子大相径庭，差距堪比琪亚娜和芽衣经历天命之战前后。<br>&ensp;<hr><br>▶粉蓝毛。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶桐生战兔。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhzuoluo: ["female", "bhzhongyingjie", 4, ["bhyouxia", "bhchenge"], ["des:假面义侠（佐罗）<br><br>技能设计：E带将军<br>玩法介绍：回合内平平无奇，回合外威慑力十足。擅长反制压制型的角色或依赖【决斗】造成伤害的角色。不擅长对抗爆发型的角色或压制其他角色。<br>关键卡牌：杀<br>擅长身份：反贼<br><br>背景故事：南美民间传说中反抗殖民者的义贼侠盗。招牌标志是黑色的面具、一袭黑衣和夜幕下闪亮的“Z”字剑迹，时常潜入暴政者的庄园、将其财物散予穷苦人家，又或者在穷人遭受压迫之时挺身而出、与不义的压迫者决斗并华丽取胜。没有人知道佐罗的真身，但佐罗为平民百姓带去的希望和勇气不会被任何人忘记。<br>&ensp;<hr><br>▶这玩意也是整活好手，在闪避都得自己蹭的年头可是跳舞的不二之选。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶Persona 5里莫娜的Persona，不知为何是个奶妈。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhbanbenlongma: ["female", "bhzhongyingjie", 4, ["bhbeichen", "bhbace"], ["des:船中八策（坂本龙马）<br><br>技能设计：E带将军<br>玩法介绍：一个回合内【杀】使用得越多，奖励效果就越强的爆发型角色。擅长通过一定程度的手牌管理，一瞬间秒杀对手。不擅长对抗对【杀】防御能力较强的角色和独自作战。<br>关键卡牌：杀、诸葛连弩<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：明治维新时期的维新志士，因其上奏的“船中八策”而闻名。家族为土佐藩最底层的“乡士”（即花钱买来武士身份的平民富商家族），年轻时在当地道场学武，后来为了搞革命毅然脱离藩籍（在当时是重罪）、离家出走，来到江户追随当时的幕臣胜海舟、在他身边学习航海技术和西方的现代思想等知识。不过好景不长，他在献上具有划时代意义的“船中八策”之后，于1867年年底的寒冬中遭人刺杀。<br>&ensp;<hr><br>▶其实关于坂本龙马的传闻还有很多，比如他是日本第一个穿靴子的武士——这在圣痕图片上也有体现。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶有个说法是这家伙不是那次刺杀的主要对象，只是纯倒霉在案发现场，有幸一并称为亟待验尸的一份子捏。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],//v1.0.8
                        //v1.0.8

                        bhdanzhu: ["female", "bhzhongyingjie", 3, ["bhmoou", "bhcaolian"], ["des:人偶师（丹朱）<br><br>技能设计：E带将军<br>玩法介绍：通过独特的印卡机制复制特定花色的牌。生存能力很弱，需要队友全力保护。擅长在发育完全后对抗不动白，擅长配合能发牌的角色。不擅长对抗大多数压制型和爆发型的角色，不擅长单打独斗。<br>关键卡牌：♥牌、♠牌<br>擅长身份：主公、反贼、内奸<br><br>背景故事：神州大地的先驱者之一，几乎总是与其姐姐苍玄一起出现。爱好是用粘土塑造各式各样的人偶，曾亲自操刀为日后的赤鸢真人设计了一款胸很大的粘土人以作为其通俗的流传形象。真实身份为前文明“逐火之蛾”十三英桀第十二席“战士”华的下属，因共同的使命“火种计划”而进行活动。<br>&ensp;<hr><br>▶丹居，一个没有什么存在感的早期整活圣痕。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],//v1.0.9
                        bhmikailangjiluo: ["female", "bhzhongyingjie", 3, ["bhchuangshi", "bhshenpan"], ["des:文艺复兴之星（米开朗基罗·博纳罗蒂）<br><br>技能设计：E带将军<br>玩法介绍：团队型辅助，体力值越低则辅助能力越强。具有全场大量发牌的能力。擅长配合非常需要额外摸牌或控场能力较强的角色、营造并扩大优势局面。不擅长逆转劣势，尤其不擅长残局中的单打独斗。<br>关键卡牌：红色牌、回复体力的牌<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：米开朗基罗在其长达89年的生命、超过70年的艺术生涯中留下了诸多举世闻名的著作，如《大卫》《创世纪》《最后的审判》等，体裁从布面油画到穹顶壁画再到雕塑雕像皆有，不一而足。其传世之作几乎都为宗教题材，尤以西斯廷教堂的穹顶和壁画为代表。与拉斐尔、达芬奇二人并称文艺复兴三杰，此三人代表了文艺复兴时期意大利乃至整个欧洲最高的艺术成就。<br>&ensp;<hr><br>▶这哥们在梵蒂冈的教堂里顶着教皇的反对还是画出了一教堂的裸体，牛逼到什么程度可想而知。教皇和谐这些画都是在大师过世之后才找人把裤头加上去的。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        //v1.0.9

                        bhtailesi: ["female", "bhzhongyingjie", 4, ["bhsanjiao"], ["des:烈阳先知（泰勒斯）<br><br>技能设计：E带将军<br>玩法介绍：受伤后可以令其他角色摸牌，但需要与伤害来源博弈，期望收益较高但不稳定。不动白。擅长配合缺乏手牌的角色。不擅长对抗控制力较强的角色。<br>关键卡牌：诸葛连弩、虚空万藏、桃、酒、崩坏结晶<br>擅长身份：全能<br><br>背景故事：古希腊以哲学、戏剧、文学等人文学科所散发出的独特魅力影响了两千多年来整个欧洲的文化发展。而在古希腊历史上第一个留下文字记载的哲学家，就是艾欧尼亚学派的泰勒斯。泰勒斯必定不是希腊众多哲学家中第一个探讨世界本源的人，但却是第一个被记载的人：在他的构想中，世界是由水组成的——就像他在埃及看到泛滥的尼罗河一样，没有水就没有被水带来的泥土，进而更不可能有生命，凡此种种。不过比起哲学，泰勒斯对后世更大的贡献无疑是几何学，例如以他命名的泰勒斯定理（圆直径所对应的圆周角一定是直角）仍在初中课本上出现、在埃及游历时通过相似三角形原理为法老求得金字塔的高度、在没有天文工具的年代几乎准确地测量太阳的直径，等等。<br>&ensp;<hr><br>▶这家伙无疑是数学dark师，那年头哲学家不会点数学是很蓝的辣。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],//v1.1.0
                        bhdanding: ["female", "bhzhongyingjie", 3, ["bhxinsheng", "bhshenqu"], ["des:文艺复兴之祖（但丁·阿利吉耶里）<br><br>技能设计：E带将军<br>玩法介绍：回合外歌王。擅长配合能够给予回合外出手权的角色，擅长吸收敌方火力。不擅长进行压制。<br>关键卡牌：队友的借刀杀人、南蛮入侵、万箭齐发<br>擅长身份：内奸<br><br>背景故事：现在公认的文艺复兴时期的起点是但丁所著《神曲》的问世，这本书也是欧洲最伟大的著作之一——从它被用来标志一个时代的开端就可窥端倪。在《神曲》中，但丁发挥想象力，遨游天界、人界和炼狱，并在炼狱中发现了恶魔为教皇预留的位置。与彼得拉克、薄伽丘并称“文艺复兴前三杰”。<br>&ensp;<hr><br>▶“他是中世纪的最后一位诗人，同时也是新时代最初的一位诗人。”<br>&ensp;&ensp;&ensp;&ensp;——恩格斯<br>"]],
                        bhkaiwen: ["male", "bhshijieshe", 5, ["bhzhileng", "bhjiushi", "bhguying", "bhwangjian"], ["zhu", "des:英雄（凯文·卡斯兰娜）<br><br>技能设计：汐带将军<br>玩法介绍：压迫力极强的主公。擅长通过无限次数的冰【杀】配合【劫灭】造成阴曹地府程度的伤害，不擅长保护自己身边的队友。<br>关键卡牌：天火圣裁/天火大剑/劫灭<br>擅长身份：主公、内奸、地主<br><br>背景故事：前文明“逐火之蛾”十三英桀首席、背负“救世”之铭的融合战士。其信念为消灭崩坏，五万年如一日。如今正忠实地执行梅博士在生命最后下达的任务——“圣痕计划”。<br>&ensp;<hr><br>▶进乐土前：凯文咋魔怔成这样了？<br>进乐土后：凯文咋才魔怔成这样？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶交警先生，别苦着脸啦，来吃碗面吧。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhyidian: ["female", "bhshijieshe", 3, ["bhyelv", "bhhuangjin", "bhfuge"], ["des:歌者（伊甸）<br><br>技能设计：E带将军<br>玩法介绍：多功能辅助，只能按照特定点数组合使用牌，但也会随用法不同而产生额外效果。运营能力极强，但依赖人数发挥作用，不适于单打独斗。回合外牌很多，生存能力强，但会在第十四轮坠机，不过当代的对局也不太会打这么久。<br>关键卡牌：需要大量手牌启动，数量胜过质量<br>擅长身份：忠臣、反贼<br><br>背景故事：前文明“逐火之蛾”十三英桀中位列第四、背负“黄金”之铭的融合战士。加入组织之前是穆大陆最富盛名的歌星，拥有令人叹为观止的财产和眼花缭乱的收藏。现文明所见的“往世乐土”，就是伊甸给逐火之蛾的捐赠。<br>&ensp;<hr><br>▶说是富婆已经很难形容其有钱程度了。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        //v1.1.0

                        bhleizhilvzhe: ["female", "bhxiubolian", 3, ["bhqianniao", "bhwange"], ["des:雷之律者（雷电芽衣）<br><br>技能设计：汐带将军<br>玩法介绍：依赖队友濒死达成觉醒条件的发育型角色。稳定双刀，压制力强，发育完毕后生存能力有一定保障。嘲讽较高。擅长压制其他需要发育的角色。不擅长对抗不需要发育就可爆发的角色。<br>关键卡牌：涤罪七雷、防御牌<br>擅长身份：全能<br><br>背景故事：位于2014年于长空市爆发的第三次崩坏中心的雷之律者，一直沉睡在芽衣体内。当时在琪亚娜的帮助下，律者人格和力量都被完全压制，雷电芽衣害怕这种危险的力量而选择将其“封印”起来——最为典型的特征，就是圣芙蕾雅学园时期其主动要求在心脏附近植入的遥控炸弹。天命之战（2017）后琪亚娜失踪，雷电芽衣痛定思痛认为“我什么都做不到”是引发这一切变故的根本原因，最终经过激烈的思想斗争决定不再逃避自己的命运、全面接受作为律者的自己和全新的力量。<br>&ensp;<hr><br>▶逆熵机甲，何惧于天下！——雷笨<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶逆熵机甲逆熵兵，成就54320！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhlizhilvzhe: ["female", "bhxiubolian", 3, ["bhjiexi", "bhqishi", "bhgouzao"], ["des:理之律者（布洛妮娅·扎伊切克）<br><br>技能设计：汐带将军<br>玩法介绍：发育型印卡角色，正如以解析和构造见长的理之核心。擅长秒全场。不擅长对抗压制型角色。<br>关键卡牌：防御牌、无中生有<br>擅长身份：全能<br><br>背景故事：与雷电芽衣不同，布洛妮娅无法完整继承律者核心更多地出于客观因素而非主观因素。其身体的崩坏能适应性不如其他律者的容器，与当年的瓦尔特·杨有几分相似，不过情况要好得多。对律者核心的掌握不够全面曾一度导致其在凯文的介入下被迫目睹核心脱离身体、仿佛驾驶证被吊销一般的绝望。在经历了珊瑚岛崩坏、千人律者和支配剧场、柯洛斯滕事件等历练后，对律者核心的使用越发纯熟，虽然“仍不认为我有资格继承逆熵盟主一职”，但是已下定决心“成为无愧瓦尔特之名的理之律者”。<br>&ensp;<hr><br>▶cece好快的cece！ <br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶害搁着cece呢，驾照都被跤♂警吊销了。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhshashibiya: ["female", "bhzhongyingjie", 3, ["bhfuchou", "bhshishi"], ["des:超限界复兴（玛丽·威廉·莎士比亚）<br><br>技能设计：E带将军<br>玩法介绍：绝地仍有生机，死战或可破敌！令全场角色解锁通过黑色牌进行【决斗】反击的能力，并且自身能够从中获益的辅助型角色。擅长辅助手牌过剩的角色、需要依赖“爆发状态”取得收益的角色、对【决斗】等锦囊有额外加成效果的角色。不擅长对抗通过受到伤害换取收益的角色。<br>关键卡牌：黑色牌<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：在英国文学史上具有无可撼动统治地位的文学巨匠。如果说意大利的前三杰、后三杰是意大利文化复兴时期艺术成果的缩影，那么莎士比亚就是文化复兴时期英国文学和戏剧发展的最佳代言人。即便四百多年已经过去，莎士比亚所著的戏剧仍是教科书般的经典。<br>&ensp;<hr><br>▶打起来打起来。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶其实崩坏系列的莎士比亚不是我们熟悉的那个莎士比亚，而应该是他奶奶或者别的什么先祖。卡莲东征失利回到柯洛斯滕、开始进行怪盗活动是1475年，而我们熟悉的莎士比亚要到1564年才出生，比剧情里的莎士比亚晚了一百年有余。然后视觉小说里的船长也有点奇怪，据船长自我介绍说她来自“维多利亚时代”，而众所周知维多利亚时代指的是英国维多利亚女王统治时期，即1837到1901年，这又比我们熟悉的莎士比亚再晚了三百年。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶有没有一种可能崩三里的历史人物真的只是挂个名，这种跨时代的貌似不知这么一个吧。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhchaliman: ["female", "bhzhongyingjie", 4, ["bhliedi", "bhwutong", "bhshengjian"], ["des:欧洲之父（查理曼）<br><br>技能设计：E带将军<br>玩法介绍：好酒，哈哈，好酒！可以同时使用大量【酒】来造成无双万军取首程度的伤害。适于配合“连环状态”秒全场。不适于对抗具有减伤能力的角色或对【杀】抗性超强的角色。<br>关键卡牌：贯石斧、♥牌<br>擅长身份：忠臣、反贼<br><br>背景故事：铁锤查理（查理·马特）通过强大的武力征服了彼时混战已久的法兰克诸邦，稳定王朝的内部局势。尔后又亲自带兵与从西班牙方向进犯的阿拉伯入侵者决一死战（当时阿拉伯人已经征服了整个西班牙），最终叫阿拉伯人大败而归。铁锤查理征战一生，虽然身为法兰克王国实际上的统治者，却无国王的名号而只能屈居“宫相”之位；其过世后，按照传统将王国传给两个儿子——卡洛曼和丕平三世（矮子丕平）。两位儿子先扶持了一个“懒王”，随后大打出手，争夺王国的领土；这场宫斗以矮子丕平的大获全胜告终。独揽大权之后，丕平积极准备称帝一事。在那个君权神授的年代，想要成为新的国王，最大的阻力并非来自国内，而是来自教会。因此，丕平三番五次出兵，不远万里救教皇于水火，甚至还将从伦巴底人手中抢来的意大利中部的大片土地送给教皇（也就是著名的“丕平献土”），使教皇得以成立“教皇国”（梵蒂冈的前身）。此后丕平三世数次出兵萨克森地区平定叛乱，继续执行积极的扩张计划。直至将法兰克王国传给他的两个儿子——查理曼和卡洛曼——乃至其死去，丕平始终没有称帝。查理曼和弟弟卡洛曼分得土地、分别加冕之后仅仅三年，弟弟意外死亡，这使查理曼无需争斗就统一了其父亲原有的整个帝国版图。站稳脚跟的查理曼像他的父亲和祖父一样积极扩张，在父亲打下的基础上征服了萨克森地区，尔后又出兵前往意大利、灭亡并占领伦巴底王国，使教皇转危为安。三代人经过过不懈努力，最终在公元800年时，当时的教皇利奥三世亲自为查理曼加冕，使其成为“罗马人的皇帝”，著名的加洛林王朝就此建立，千秋的霸业从此开始。两百多年后，1165年，教皇亚历山大三世将查理曼尊称为“欧洲之父”。<br>&ensp;<hr><br>▶喝了点小酒下手没轻没重的。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶虽然利奥三世承认查理曼是罗马皇帝，但那时候的罗马正统其实应该还是尚未灭亡的东罗马帝国，也就是拜占庭帝国。那时候的拜占庭还不是败仗庭，到后面十字军东征再晚就真是败仗庭了。<br>&ensp;&ensp;顺带一提，扑克牌上的红桃K就是查理曼。若敢来犯，必叫你大败而归！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhaojier: ["female", "bhzhongyingjie", 4, ["bhlingzhu", "bhhuangting", "bhshengjian", "bhguixiang"], ["des:丹麦王子（奥吉尔）<br><br>技能设计：E带将军<br>玩法介绍：可以将♠牌转化为【决斗】和【杀】、造成大量伤害。觉醒后拥有白银狮子程度的减伤能力，可以从高危险度的对手手中保护队友。擅长对抗虚弱的角色或能够造成无双万军取首程度伤害的角色（需要觉醒）。不擅长对抗压制能力强或防御能力强的角色。<br>关键卡牌：♠牌<br>擅长身份：忠臣<br><br>背景故事：传说中“查理曼十二圣骑”中的第三席、丹麦的王子。历史上他曾是查理曼大帝身边十分亲近的重要同伴，但出于某些原因意外杀死了查理曼的儿子，于是只好逃回丹麦老家，尔后与查理曼一直处于敌对——但是阿拉伯人入侵的时候两人放下了这些恩怨，联手在比利牛斯山脉将入侵者击退。传说他使用一把“不开刃的钝剑”，谓之“卡提那”或“慈悲之刃”，这把剑与查理曼大帝的随身佩剑“黄金之刃”咎瓦尤斯和十二圣骑首席罗兰的佩剑“不灭之刃”幽兰戴尔并称“欧洲三大圣剑”。三圣剑的另外两把皆已失传，唯有卡提那据称仍被英国王室收藏（这要归功于将剑带入不列颠岛的丹麦入侵者和赶走丹麦入侵者的英国国王忏悔者爱德华）且每次国王即位都会被作典礼用具。顺带一提，这个三圣剑的传说是法国人整出来的，所以“石中剑”“湖中剑”之类的英国剑就别想了，洗洗睡吧。<br>&ensp;<hr><br>▶父亲先走，孩儿殿后！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶扑克牌上的黑桃J就是奥吉尔。茶将军，比比看谁杀敌更多！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],//v1.1.1
                        //v1.1.1

                        bhatila: ["female", "bhzhongyingjie", 4, ["bhtieti", "bhweicheng", "mashu"], ["des:上帝之鞭（阿提拉）<br><br>技能设计：E带将军<br>玩法介绍：自带丈八矛，马神青春版。特定情况下可以秒杀全场。擅长压制其他角色。不擅长对抗压制型的角色。<br>关键卡牌：诸葛连弩<br>擅长身份：忠臣<br><br>背景故事：史书上最早记载的匈奴人部落大约出现在公元前300年，当时的匈奴人主要在河西走廊以北一带的草原活动。到汉武帝（公元前141-前87年）时，屡次侵扰汉朝的匈奴被汉朝组织的大规模反攻打得落荒而逃，撤退至西域诸国（今中亚一带）苟延残喘。几十年后，因为严重的自然灾害和权力更迭，匈奴继续分裂成大大小小的许多部落，一些部落继续西迁，一些部落则留在当地，要么与汉朝继续对抗，要么选择归顺汉朝。到两晋南北朝时期，匈奴人已经基本被汉人和鲜卑人完全同化，此后便完全销声匿迹了。<br>ensp;ensp;ensp;ensp;在欧洲的史书里，也有匈奴人（Huns）的出现。目前主流有两种说法：1、东西方所记载的匈奴人出自同源，因汉朝的反击行动而被迫西迁、一直迁到今天的匈牙利附近，民国学者章太炎、梁启超等人也赞同此种较老的说法；2、东西方所记载的匈奴人并没有关联，现今的考古出土文物表明欧洲匈奴人无论人种还是科技都与东方记载的匈奴人大相径庭，其本质应该是蒙古人种的一支，而不是东方记载的有很多高加索人种特征的匈奴人。这里倾向于认为上述两个说法都有一些片面，因为匈奴本身幅员辽阔，就连罗马帝国都能分裂为东西两半，匈奴这样的部落制游牧民族更容易分裂成许多部分并各自为政才是。所以，这里采取一个折中的说法：最可能在汉武帝时期（公元前100年左右）分裂出去的“西匈奴帝国”（姑且这么说吧）一直西迁，并在路上不断与其他民族（尤其是西伯利亚地区的民族）逐渐融合，到阿提拉时期（公元400年左右）两边已经相互独立地发展了四五百年，应当认为已经是两个大不相同的民族。<br>ensp;ensp;ensp;ensp;总之，匈奴人从东方或东北方迁徙而来，击败当时的大国阿兰国（西域诸国之一，《史记》《汉书》等书均有记载）和东哥特王国，并占据了从顿河（位于今俄罗斯与乌克兰交界处周边）至多瑙河北岸的大片土地，并不断侵扰罗马的色雷斯、君士坦丁堡等重要城市。5世纪时，匈奴王鲁加统一匈奴各部，并在他逝世后将帝国传给他的两个侄子布莱达和阿提拉；一番斗争后，布莱达被杀，阿提拉独揽大权，成为唯一的匈奴王。由此开始，匈奴人屡次侵扰东罗马帝国（拜占庭）首都君士坦丁堡，迫使拜占庭人签下合约并每年纳贡；尝到甜头以后，阿提拉又带领人马进攻位于南方的萨珊波斯，但是大败而归。吃了瘪的阿提拉最终决定放弃东南方向的波斯人，改为将主要力量集中在欧洲方向一路西进。这个决策非常成功，匈奴人铁骑在东欧大地上畅行无阻，阿提拉以闪电般的速度占领了几乎整个巴尔干半岛和中欧的大片地区。阿提拉的西征导致了日耳曼人大迁徙和西罗马帝国的灭亡，到距离阿提拉起兵大约20年后的5世纪中期（公元452年），匈奴帝国已经占领了欧洲的半壁江山，其势力范围从今天的乌克兰一直延伸到西欧的莱茵河沿岸。当时，阿提拉转向南欧，攻打罗马人的总部意大利；就在匈奴人势如破竹时，阿提拉突然决定撤兵。次年（公元453年），阿提拉暴毙，匈奴人的帝国随之土崩瓦解，匈奴人也迅速且彻底地消失在历史长河之中，但是心里充满阴影的罗马人给“野蛮人（哥特人）眼中的野蛮人”首领阿提拉起的外号“上帝之鞭”则一直流传到了现在。<br>&ensp;<hr><br>▶传说中的下位是六星圣痕。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶尽管匈奴人的帝国寄了，但他们的血统在东欧得以保存，现今匈牙利、克罗地亚、保加利亚等东欧国家都能找到匈奴人的后代和匈奴文化的影子，他们与后来的马扎尔人、保加尔人等可能也有一定程度的联系。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhzhijiangjianxu: ["female", "bhzhongyingjie", 4, ["bhmingwang"], ["des:重锤将军（直江兼续）<br><br>技能设计：E带将军<br>玩法介绍：对【杀】具有天生的防御力，对别人使用【杀】可以扒牌。擅长压制惧怕扒牌的角色，擅长对抗依赖【杀】造成伤害的角色。不擅长对抗能够一瞬间造成大量直接伤害的角色。<br>关键卡牌：杀<br>擅长身份：忠臣、反贼、内奸<br><br>背景故事：日本战国晚期的名将，因擅长使用重锤而得名。幼年时及年轻时在上杉家担任家臣，上杉谦信死后平乱有功，因而得以入继一直活跃于上杉家的直江家，得名直江兼续。本能寺之变后，上杉家与丰臣家结盟，因而直江兼续时常需要面对与德川家作战的情况，他的才能也因此逐渐被天下人熟知，连敌方老大德川家康都对他赞誉有加，以至于关原合战彻底结束后西军（石田三成为首，上杉家也在其中）被东军（德川家康为首，主要为德川家）打败、上杉家被迫投降臣服德川家时，德川家康也没有为难直江兼续。<br>ensp;ensp;ensp;ensp;日本战国时代的武将普遍有一种用文字装饰自己头盔的传统，直江兼续也不例外——他头盔上装饰的字是“爱”字。关于这个字历来说法不一，有人认为是直江兼续对“仁爱”品格的自我追求，也有人认为是其所信奉的“爱染明王”的简写。<br>&ensp;<hr><br>▶爱将爱酱。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhzhentianxingcun: ["female", "bhzhongyingjie", 4, ["bhduzhan"], ["des:战国第一兵（真田幸村）<br><br>技能设计：E带将军<br>玩法介绍：据队友人数不同，能够获得的效果也逐渐不同。战士出门在外要注意保护自己身份。<br>关键卡牌：无中生有<br>擅长身份：反贼、内奸<br><br>背景故事：丰臣秀吉死后，丰臣家内部的撕裂和混乱越来越一发不可收拾，原本具有最大势力的地方大名（“五大老”）与丰臣政权内部（“五奉行”）互相之间错综复杂的矛盾越积越深。此时德川大名（德川家康）崭露头角，德川家的势力逐渐抬头，不可避免地与“五大老”产生冲突。其中一个“五大老”大名上杉景胜令其家臣直江兼续写出一封举世闻名的“直江状”驳斥德川家康，两家爆发的矛盾如同导火索，最终引发了称为“关原合战”的、决定丰臣政权命运走向的大决战，这场决战发生在真田家领地不远处的美浓关原。当时真田家面临与整个日本所有其他大名一样的抉择：是加入德川家康组建的东军，还是加入石田三成为首的西军？这场大战的胜利者，毫无疑问就将是今后整个日本的统治者。真田家族最后做出的决定是，家主真田昌幸与小儿子真田幸村（当时还叫真田信繁）加入西军，而真田昌幸的长子真田信幸因为是德川家手下大名的女婿而加入了东军。这场战斗中尽管真田父子尽全力为主战场的西军阻拦了东军的大量部队，也没能阻止石田三成方面的大溃败，最终遭到德川家软禁。十年后，真田昌幸病逝，真田幸村心中对德川家的怨恨逐渐积累；又过了四年，一个绝好的机会出现——大阪城的丰臣家希望真田幸村出山协助对抗德川家康，特意派来密探盛情邀请。真田幸村随即连夜前往大阪，发挥自己的本事构建防御工事，于当年冬天将试图攻城的德川大军打得找不着北，不得不放弃强攻、改为围城（后人称为大坂冬之阵）。那之后暂时和平了半年，德川家康于次年初夏下达讨伐丰臣家的命令，再度率领大军开来。此时以淀姬（浅井茶茶）为首的大阪城高层决定分兵对抗人数倍多的德川大军，真田幸村不得已领命。一直打到一个多月后，大阪城的部队和将领死的死逃的逃，已经到了背水一战的地步——而真田幸村堪称最后的希望。这场战役最终开始时，大阪城方面人数约五千人，不到德川军的三分之一，人数上处于绝对的劣势；也正因此，真田幸村策划了一场极为冒险的奇袭，即在其他部队拖住德川军时亲自率领精锐冲入敌方本阵、直取德川家康项上人头。只可惜德川家康老谋深算，尽管被杀得割须弃袍，德川家康还是死里逃生；而真田幸村带领的真田军则全军覆没，其本人也被斩首。之后的事情十分简单，大阪破城，淀姬自杀，丰臣家被德川家康赶尽杀绝，后人称为大阪夏之阵。<br>&ensp;<hr><br>▶时代的夏侯笨。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhyuanfeihua: ["female", "bhzhongyingjie", 3, ["bhyingsha", "bhlangke", "bhshoufeng"], ["des:条顿骑士（猿飞花）<br><br>技能设计：E带将军<br>玩法介绍：危险但脆弱的刺客，觉醒后变为战士。擅长通过少量的手牌管理积攒力量、一举秒杀敌方关键人物。不擅长对抗压制型角色。<br>关键卡牌：锦囊、黑色牌、诸葛连弩<br>擅长身份：忠臣、反贼<br><br>背景故事：猿飞花出身于极东之地的忍者家族，其父因向汉娜体内植入人工圣痕的实验失败而脱离猿飞家族，因此遭到家族追杀，最终几经辗转、飘洋过海来到条顿人的地盘——19世纪中叶的普鲁士王国。年幼的猿飞花发现其具有超越人类的力量，例如能够轻易打碎巨石等等，因而质问其父，得到关于身世的残酷答案，以及自饮毒酒而疯狂地逝去的父亲。不过猿飞花的运气很好，她在勃兰登堡的申豪森庄园遇见了许许多多与自己拥有相似背景的形形色色的孩子，以及那位父亲口中所说“忍者必须仰赖其生存的所侍奉之主人”——手持遗落的圣物“册封骑士之剑”的，后人称为“铁血”的俾斯麦。猿飞花放弃了自己的出身和姓氏，而是采用俾斯麦赐予的名字“汉娜”，以此作为“铁血之子”展开黑暗中的活动。<br>&ensp;<hr><br>▶汉娜爱你呦。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶其实我本来不想写“铁血之子”的，但是米忽悠这旧背景故事的味道实在太冲了，严重怀疑这帮鸟人是在通关闪之轨迹的贤者时间里写出这些玩意的。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],//v1.1.2
                        //v1.1.2

                        bhhuanhaimengdie: ["female", "bhnishang", "0/1", ["bhwuhai", "bhweiguang", "bhmimeng"], ["des:幻海梦蝶（希儿·芙乐艾）<br><br>技能设计：E带将军<br>玩法介绍：不发牌，就死亡。初始0体力1上限的特殊角色，具有极强的给队友发牌的能力，但是自身的生存与否几乎完全依赖时运。擅长辅助极度缺乏手牌或能回复体力的角色，尤其擅长配合【可可利亚孤儿院】角色。不擅长对抗压制型、扒牌型或爆发式造成伤害的角色，尤其不擅长对抗能够削减体力上限或消灭技能的角色。<br>关键卡牌：黑色牌、桃、酒、崩坏结晶<br>擅长身份：忠臣、反贼<br><br>背景故事：逆熵内部虽有盟主瓦尔特统辖，却因其松散的体制而难以对各“执行者”起到实质上的约束。其中，激进派的代表可可利亚就野心勃勃，她效仿天命奥托的做法，在鄂霍茨克海深处建造X-10实验室推行“X-10实验计划”（也称“幻海计划”）。千米深水阻隔了崩坏能的泄露使之免遭天命甚至逆熵本身的发现，这项实验就这样在暗海里徐徐推进，直到2013年希儿·芙乐艾因为实验失败而化为量子态（介于“存在”与“不存在”的纠缠中）、布洛妮娅·扎伊切克在实验中脑部被崩坏能损伤且另因杏·玛尔造成的旧伤而致崩坏能影响双腿导致永久残疾，悲痛的可可利亚最后决定终止实验，彻底封锁X-10实验室。<br>&ensp;<hr><br>▶希尔·服了诶<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhduanzuiyingwu: ["female", "bhshijieshe", 3, ["bhreyuedu", "bhcaiduan", "bhshizui"], ["des:断罪影舞（雷电芽衣）<br><br>技能设计：E带将军<br>玩法介绍：回收用完的【杀】、【闪】、【无懈可击】来对其他角色造成伤害或增强自身防御。可以理解为SP版本的“影舞冲击”。能力较为均衡，需要发育，不擅长对抗启动速度很快且能爆发式造成大量伤害的角色。<br>关键卡牌：杀、闪、无懈可击<br>擅长身份：内奸<br><br>背景故事：加入世界蛇后雷电芽衣在非律者形态下常穿的服装。比旧款更加简洁、干练，裁去了许多花哨的设计元素，看上去更有力量感，也更加悲壮。<br>&ensp;<hr><br>▶界鹦鹉，说实在话这个增幅是个阉割品，本质上是准备和折剑一起掏出来给鹅叠当工具人的。3.7的对折剑以及羽渡尘作战也是玩家群体面对官方的最后一次胜利，自此以后冲塔只见mwb在和冲塔人掐架。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhweierwei: ["female", "bhshijieshe", 4, ["bhqudong", "bhluoxuan", "bhqiaogong"], ["des:愚者（维尔薇）<br><br>技能设计：E带将军<br>玩法介绍：发育速度较快的发育型角色，装备与锦囊双修，能力全面且强大。通过特殊的机制使用锦囊，颠覆普通锦囊“回合内爆发式获取收益”的特质，使用时需要注意。发育型大核，擅长搭配大多数角色。不适于应对开局即被集火的情况。<br>关键卡牌：防具<br>擅长身份：全能<br><br>背景故事：前文明“逐火之蛾”十三英桀中位列第五、背负“螺旋”之铭的融合战士。多重人格，性情多变，诸多矛盾与戏剧性反转的集合体，与其相处时必然惊喜不断。有时是魔术师，有时是发明家，有时是疯狂混沌的邪恶大魔，有时又是娇弱可人的纯情少女……不能一概而论。<br>&ensp;<hr><br>▶这可是一节更比8节强的。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶偌大逐火之蛾难道就没有一个正常人吗？<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhyilishabai: ["female", "bhzhongyingjie", 3, ["bhxueyin", "bhyehuang", "bhhongyu"], ["des:吸血鬼伯爵夫人（伊丽莎白·巴托里）<br><br>技能设计：E带将军<br>玩法介绍：能够抢走队友甚至对手造成的伤害并化为己用。辅助型发育角色，擅长配合能够频繁造成伤害的角色，擅长对抗需要通过自身造成伤害获取收益的角色。不擅长配合需要通过自身造成伤害获取收益的角色，不擅长对抗对【杀】有较强抵抗力的角色或爆发能力强的角色。<br>关键卡牌：杀<br>擅长身份：反贼、内奸<br><br>背景故事：以匈牙利王国的伊丽莎白·巴托里伯爵夫人相关的吸血鬼传说为原型。历史上伊丽莎白·巴托里伯爵夫人因为“虐杀大量仆人”等罪行受到终生软禁，实际情况也许与之不同。但出于这一罪名，民间与其相关的吸血鬼传说不胫而走，例如以少女的鲜血作为浴缸的水源、饮用年轻人的血液来永葆青春之类的。<br>&ensp;<hr><br>▶在本扩应该不容易死，只要有杀就能搞偷袭咯。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhlier: ["female", "bhzhongyingjie", 3, ["bhgangrou", "bhyouwu", "bhningjing", "bhwuwei", "bhziran"], ["des:上清止水（李耳/萧云）<br><br>技能设计：E带将军<br>玩法介绍：全身都是转化技，需要精确的计算才能够完美地扬长避短，操作型的角色。擅长对抗防御型的角色。不擅长对抗爆发型的角色。阿鸡有我良计，灭崩坏是易如反掌。目光所及，短寸之间；狭目之见，只能窥底。成略在胸，良计速出；吾有良略在怀，必为阿鸡所需。阿鸡，没有我，你灭不了崩坏啊！<br>关键卡牌：防御牌<br>擅长身份：反贼、内奸<br><br>背景故事：以道家学派创始人李耳（字聃，即老子）为原型设计的角色。道家学派尊称李耳为“太上老君”“太上玄元皇帝”等，其所著《道德经》是道家一贯不变的永恒经典，也是中国哲学史上辉煌的篇章。<br>&ensp;<hr><br>▶五档电风扇，说实在话当年好多改动（被改动）都十分可惜，只能说新玩家现在应该都听不懂这些了。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶2018年1月19日与许多圣痕一起喜提新名字，同时官方漫画《圣痕之谜篇》全网下架删除。太上老君摇身一变成了小燕子，属实绷不住了。但最绷不住的非诸葛孔明莫属。来者可是德丽莎·观星.jpg<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhshichuan: ["female", "bhzhongyingjie", 4, ["bhzhuangyi", "bhyouguo"], ["des:剑心侠胆（石川五右卫门）<br><br>技能设计：E带将军<br>玩法介绍：打土豪，分田地！拼点获胜的话可以夺取对方所有手牌并分给其他角色，但如果失败则会被吊起来扔进油锅。总之，擅长配合能发牌的队友对抗手牌特别多的角色，或者骚扰与自己手牌数量相差不大的对手。不擅长对抗扒牌压制型或擅长在拼点中取胜的角色。<br>※尽可能平均分配，指分到最多与最少牌的角色得到的牌不能相差超过一张。<br>关键卡牌：铁索连环、点数超级大的牌！<br>擅长身份：反贼<br><br>背景故事：安土桃山时期著名的日本盗贼，因为偷丰臣秀吉的东西失手而被丰臣秀吉抓获，然后投入油锅而死。早年间因不满丰臣秀吉的暴政几度试图刺杀之，但都没有成功。传说其具有忍者背景，精通甲贺流忍术。<br>&ensp;<hr><br>▶搏一搏，单车变摩托。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhmalixuelai: ["female", "bhzhongyingjie", 2, ["bhshanghen"], ["des:科学怪人（玛丽·雪莱）<br><br>技能设计：汐带将军<br>玩法介绍：先开始游戏再选将的角色。请根据场上阵营各自的战斗风格和优劣力量对比，合理选择技能。<br>关键卡牌：随机应变<br>擅长身份：内奸<br><br>背景故事：玛丽·雪莱是珀西·雪莱的妻子，珀西是当时著名的诗人，玛丽则是著名的小说家。玛丽写成的《科学怪人》一书，是文学史上定义“科幻小说”品类的第一部作品，因而被认为是世界上第一本科幻小说，于是玛丽便有了“科幻小说之母”的荣誉。<br>&ensp;<hr><br>▶替身使者。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhfulankensitan: ["female", "bhzhongyingjie", "0/0", [], ["des:科学怪人（弗兰肯斯坦）<br><br>技能设计：汐带将军<br>玩法介绍：先开始游戏再选将的角色。请根据场上阵营各自的战斗风格和优劣力量对比，合理选择技能。<br>关键卡牌：随机应变<br>擅长身份：内奸<br><br>背景故事：维克多·弗兰肯斯坦是一位疯狂科学家，他探究生命的界限、渴求长生不老的秘诀，最终在一个月黑风高的夜晚用死刑犯的尸体块拼出一个活生生的怪物。那怪物朝他微笑，他却吓得魂飞魄散、一病不起。起初，怪物是善良的，但因为其丑陋的面貌而被当地居民攻击、排斥，以至于不得不流落山野，过上了无比艰辛的生活。人类的自私和丑陋最终彻底改变了怪物，维克多再次见到怪物时，它已经是个嗜杀成性的危险分子了。维克多终于从内疚中走了出来，负起了与怪物决斗、为自己实验收尾的责任。这场战斗在北极展开，以维克多奄奄一息地被路过船只搭救、怪物跳入火中自焚作结。<br>&ensp;<hr><br>▶突然觉得玛丽雪莱口味有点重。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],//v1.1.3
                        //v1.1.3

                        bhgeleixiu: ["female", "bhshijieshe", 3, ["bhbaijuan", "bhfanxing", "bhhuishi"], ["des:画家（格蕾修）<br><br>技能设计：汐带将军<br>玩法介绍：一次性地复制并发动其他角色的技能，出奇制胜型的角色。擅长辅助不动白，擅长对抗关键技能依赖拼点的角色。不擅长对抗爆发力很强的角色。<br>关键卡牌：能够即时取得技能收益的角色的角色卡<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：前文明“逐火之蛾”十三英桀中位列第十一、背负“繁星”之铭的融合战士。真身是一位不到十岁左右的幼年女孩，其人如白纸一般纯净无暇。只要手中有画笔，就可发动令人咋舌程度的能力。<br>&ensp;<hr><br>▶怎么绘世呢？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶这tm八岁？<br>&ensp;&ensp;&ensp;&ensp;——上仙<br>"]],
                        bhaboniya: ["female", "bhshijieshe", 3, ["bhyujian", "bhzhongzhao", "bhjielv"], ["des:苦修（阿波尼亚）<br><br>技能设计：汐带将军<br>玩法介绍：印桃和无中生有，但是天生会被卡距离。使用得当带飞队友、使用不当全场坐牢的操作型角色。适于反制依赖连弩或进攻马发挥作用的角色，擅长辅助伤害很足或能够无视距离的角色，不适于造成伤害。<br>关键卡牌：用不出去的牌、回复体力的牌<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：前文明“逐火之蛾”十三英桀中位列第三、背负“戒律”之铭的融合战士。能力极为特殊而危险，为保证基地仍能运转而成为“至深之处”的管理者，平日里远离人类及一切喧嚣。“逐火之蛾”中为数不多能够拿捏千劫的人之一，似乎还有窥视未来一角的预言力量。<br>&ensp;<hr><br>▶好大的戒律，啊不，好白的苦修。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhcishengyinyi: ["female", "bhnishang", 4, ["bhyinyi", "bhyuji"], ["des:次生银翼（布洛妮娅·扎伊切克）<br><br>技能设计：汐带将军<br>玩法介绍：看脸的时候到了！上装备有机会免费用一次牌，并且也有机会连锁触发免费用牌效果。运气好时爆发能力很强，甚至可以秒全场。运气不好时约等于白板。<br>关键卡牌：五星上将、闪闪来迟<br>擅长身份：内奸<br><br>背景故事：消灭崩坏后过了8年，当年青涩贫瘠的少女已经成长为风姿绰约的上班族女性。平静的生活本该持续，直到圣方丹事件爆发的那一天为止——为回应在崩坏岁月时的战友的呼唤，已经退出江湖多年的布洛妮娅毅然拿起武器，踏上开往战场的列车。<br>&ensp;<hr><br>▶大鸭鸭嘿嘿嘿大鸭鸭<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhkesimo: ["male", "bhshijieshe", "4/9", ["bhxuguang", "bhshimo"], ["des:少年（科斯魔）<br><br>技能设计：E带将军<br>玩法介绍：究极发育怪，爆发能力极强，人不秒我我便秒人。具备用同一点伤害发动数次〖狂骨〗的恐怖爆发力，但代价是同样快速的体力流失，刀尖上跳舞的角色。擅长保护高嘲讽友军，擅长在人数多时秒杀全场，不擅长对抗有任何形式防御力的角色，不擅长对抗必须通过拖时间才能战胜的角色。哼，也不看看我是何人！<br>关键卡牌：南蛮入侵、万箭齐发<br>擅长身份：忠臣<br><br>背景故事：前文明“逐火之蛾”十三英桀中位列第九、背负“旭光”之铭的融合战士。战斗风格是在所有人（包括敌人）能够察觉之前就结束战斗，与“毒蛹”的成员樱有一些相似。据说喜欢不穿鞋的光脚小女孩。<br>&ensp;<hr><br>▶怎么绘世呢？对啊怎么绘世呢！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],//v1.1.4
                        //v1.1.4

                        bhqigefei: ["male", "bhzhongyingjie", 4, ["bhlangzi", "bhshengcai", "bhtongxin"], ["des:孤心浪子（齐格飞·卡斯兰娜）<br><br>技能设计：E带将军<br>玩法介绍：非限定业炎，代价是手臂。擅长通过超高额的单次强制伤害一瞬间秒杀敌方高价值目标，或配合“连环状态”倍增元素伤害。不擅长对抗压制型的角色。与塞西莉亚有独特配合。<br>关键卡牌：天火圣裁/天火大剑/劫灭<br>擅长身份：忠臣、反贼<br><br>背景故事：齐格飞·卡斯兰娜在2000年的第二次崩坏中失去了他生命中最重要的人以及他对天命组织的所有信任，不过当时的天命主教奥托·阿波卡利斯却不以为意——奥托所忌惮的只有战争中齐格飞身上爆发出的恐怖力量。因为无法掌控这股根源于前文明的恐怖力量和这个难以预测的男人，奥托出于限制其行动的目的无所不用其极，甚至连齐格飞与妻子塞西莉亚爱的结晶琪亚娜也被用作筹码和实验品。这样玩弄人心的恶劣态度最终造成2009年时齐格飞联合德丽莎展开的一场劫持行动——目的是从奥托的天命手中抢回齐格飞的亲生女儿琪亚娜，使其免受奥托毒手的侵害。这次行动因被奥托掌握而失败，最终齐格飞只带回了其女儿的一个复制体K-423。沉重的失败几乎打倒了这个男人，直到逆熵的高层出现，齐格飞才下定决定将K-423当作女儿一样对待、给她琪亚娜的名字，甚至为了保护她而不幸失去左臂。这份沉重的爱最终为琪亚娜克服过往、破茧成蝶提供了不可替代的力量。<br>&ensp;<hr><br>▶为了我所爱的人，我将发动一次nb的攻击。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhsaixiliya: ["female", "bhtianming", 4, ["bhshuangxing", "bhshengxue", "bhtongde", "bhchuangsheng"], ["des:无双圣女（塞西莉亚·沙尼亚特/塞西莉亚·卡斯兰娜）<br><br>技能设计：E带将军<br>玩法介绍：根据回合开始时的判定结果决定战斗风格，可攻可守的角色。擅长为生存能力较差的角色回复体力，擅长压制萎靡不振的角色或对抗依赖承受伤害获取收益的角色。缺点是自身掉血飞快，完完全全的舍己为人。与齐格飞有独特配合。<br>关键卡牌：黑渊白花、回复体力的牌<br>擅长身份：忠臣、反贼<br><br>背景故事：天命三大家族之一的沙尼亚特家族自有传承起就一直具有强大的崩坏能操控能力，其体内流淌的血液也具有高强度中和崩坏能的性质。奥托·阿波卡利斯将这种情况称为“圣血”，并瞄准了沙尼亚特家“圣血”纯度最高的战士塞西莉亚·沙尼亚特，甚至允许自己的心头肉德丽莎·阿波卡利斯与其共事、一同战斗、平时时刻相处。这种施予并非出自善意，而是实验的一环——塞西莉亚在奥托“律者杀手”计划完成时，体内的全部血液都已被替换成真正的“圣血”，一旦解放就可“杀死律者”，因而晋升至天命绝对稀少的S级女武神、成为家喻户晓但又一无所知的“王牌”。塞西莉亚那充满实验、如同木偶的生活，被两个男人突然打破——一位是敌对组织逆熵的头目、盟主瓦尔特·杨，而另一位则是天命三大家族中卡斯兰娜家的放荡公子齐格飞·卡斯兰娜。瓦尔特·杨袭击运送队，试图抢走奥托基于“圣血”开发的武器“律者杀手”实验品，但是扑了个空；而负责护送的塞西莉亚则被瓦尔特打飞，不偏不倚恰好落在正在附近游荡的齐格飞身上。两人的感情从此开始，至于其后政治联姻、琪亚娜的出生以及在奥托的阴谋下不得不殒命于第二次崩坏，都不是命运洪流之中的两人所能够遇见或避免的。究其原因，奥托是造成塞西莉亚死亡的最大祸根；在奥托眼中，塞西莉亚最多只不过是一枚稍微有点价值的“车”，舍弃与否并不是最终使“帅”存活的根本目的。奥托小丑般的失败，很大程度上也源于这样草菅人命、不相信人类牵绊及希望的力量的思维方式。<br>&ensp;<hr><br>▶岳母大人，当年黑渊白花节奏的时候还有个经典说法，岳母当年二崩寄了是因为黑渊白花限制词条“月魄使用时”。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhying: ["female", "bhshijieshe", 4, ["bhfengshuang", "bhchana"], ["des:落樱（樱）<br><br>技能设计：汐带将军<br>玩法介绍：砸·瓦鲁多！具有封锁全场技能的能力，自身也具有强大的伤害或扒牌能力，但并非没有代价。具体发挥如何取决于对战场环境的把控。适于反制依赖技能进行防御或通过受伤换取收益的角色、强行冲烂对手防御体系，不适于对抗能力相近的角色。缺乏手牌，生存能力孱弱，非常依赖友方保护。<br>关键卡牌：防御牌<br>擅长身份：忠臣、反贼<br><br>背景故事：前文明“逐火之蛾”十三英桀中位列第八、背负“刹那”之铭的融合战士。特殊部队“毒蛹”的一员，千劫的同事，不善言辞，冷静利落，是“两个半能打得过千劫”的人中的半个。与逐火之蛾的多数对抗崩坏的任务不同，平时一般负责处理与人类作战的任务。前文明侵蚀之律者生前的姐姐，因逐火之蛾人员误杀其妹和阿波尼亚“戒律”的影响而心灰意冷。<br>&ensp;<hr><br>▶在燃尽的大地上，向她，向所有人许下承诺...<br>&ensp;&ensp;&ensp;&ensp;——凯文·卡斯兰娜<br>"]],
                        bhyuehun: ["female", "bhtianming", 4, ["bhshenjib", "bhbinglao", "bhyinyue"], ["des:苍骑士·月魂（丽塔·洛丝薇瑟）<br><br>技能设计：E带将军<br>玩法介绍：【杀】附带翻面控制效果，具有强大控制力的压制型角色。也具有可观的爆发力，但生存能力稍显不足。擅长对抗体力上限不大于3的角色，不擅长反制压制型的角色或对抗防御能力较强的角色。<br>关键卡牌：杀、锦囊<br>擅长身份：全能<br><br>背景故事：第四代弑神装甲的其中一件。能够释放冰霜的力量，将敌人冻成冰雕。充满无敌气息的装甲。<br>&ensp;<hr><br>▶苏醒吧，冰箱的主人！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhailixiya: ["female", "bhshijieshe", 4, ["bhyaojing", "bhzhenwo", "bhsushi"], ["des:无暇（爱丽希雅）<br><br>技能设计：E带将军<br>玩法介绍：辅助型歌王，队伍中绝对的大核。擅长辅助或反制技能触发频率较高的角色，擅长爆发式地过牌和使用牌，擅长克制凯文。不擅长对抗强制造成伤害或不依赖【杀】造成伤害的角色。<br>关键卡牌：诸葛连弩<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：前文明“逐火之蛾”十三英桀中位列第二、背负“真我”之铭的融合战士。无所不能的美少女，深爱着世界上的每一个人。<br>&ensp;<hr><br>▶紫色老妖婆。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶粉色歌王小姐。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],//v1.1.5
                        //v1.1.5

                        bhdigengsi: ["female", "bhzhongyingjie", 3, ["bhwudu", "bhdawei", "bhshuangcheng"], ["des:批判之笔（查尔斯·狄更斯）<br><br>技能设计：E带将军<br>玩法介绍：杂技型角色，需要配合一名技能同时与SP体系和受伤/失去体力相关的队友方可取得高收益。超级英姿，偶尔琴音，需要迅速营造优势并维持压制态势的角色。擅长运营压力较小的局面持续消耗对手、积累优势，并具有些微爆发能力。不擅长对抗爆发力很强的角色。<br>关键卡牌：进攻牌<br>擅长身份：忠臣<br><br>背景故事：狄更斯是英国批判现实主义文学的开山鼻祖和公认的大师。狄更斯笔下多是些随处可见的英国市井小民，字里行间透露出当时社会的各色复杂现实，深刻而生动地展现了维多利亚时期因技术革新、知识进步而带来的巨大社会变革。在他笔下，贵族名门、资产阶级奢华无度的生活和阴狠丑恶的嘴脸，与市井街坊、平民百姓生活贫苦但仍不放弃追求公平和正义的精神形成鲜明对比。<br>&ensp;<hr><br>▶双城寄。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhzhinuo: ["female", "bhzhongyingjie", 3, ["bhbudong", "bhbuji", "bhbujin"], ["des:悖论之辩（芝诺）<br><br>技能设计：E带将军<br>玩法介绍：古希腊杠精，防御力超强，但是不动白。擅长配合能令队友瞬间多摸很多牌的角色，擅长反制压制型的角色，擅长从靠后的位置开始游戏。不擅长对抗能在一个回合内造成多次伤害的爆发型角色。<br>关键卡牌：随机应变<br>擅长身份：内奸<br><br>背景故事：芝诺是古希腊埃利亚学派著名的哲学家，因其留下的数个悖论而闻名于世，但其本人的生平缺乏可靠资料记载。芝诺对数学界的最大贡献莫过于将“无穷”这一概念的全新可能性宣传给当时世界上最厉害的每一个数学家，并经由亚里士多德的著作留到后世。实际上今天回过头看两千多年前芝诺提出的几个悖论，解决这些悖论所需要的理论基础（如微积分）已经远远超出了芝诺的时代。<br>&ensp;<hr><br>▶有一说一，这个技能模组倒是挺还原这种想让人揍他一顿的乌龟壳风格。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhtugeniefu: ["female", "bhzhongyingjie", 4, ["bhdizhu", "bhqianye"], ["des:反抗之枪（伊凡·谢尔盖维奇·屠格涅夫）<br><br>技能设计：E带将军<br>玩法介绍：每回合从邻居那里收租，血量少时变身贝蒂小熊。擅长积攒力量一举秒杀敌方关键人物。不擅长对抗以控制距离见长的角色。<br>关键卡牌：进攻马、武器牌<br>擅长身份：反贼、地主、农民<br><br>背景故事：屠格涅夫出身于一个富裕的沙俄农奴主家庭，但他从小就厌恶农奴制，并且同情生活在悲惨和苦难之中的广大农奴。大学毕业后开始创作小说、散文、诗歌等，因其内容过于进步甚至一度被当局拘捕入狱。晚年定居法国，为宣传俄罗斯文学作出了不可磨灭的贡献。<br>&ensp;<hr><br>▶斗得就是你地主。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶我不做地主啦，公公！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhluxiya: ["female", "bhtianming", 4, ["bhjiaojian", "bhzhixu"], ["des:圣殿骑士（露西亚）<br><br>技能设计：汐带将军<br>玩法介绍：主要强调扒牌能力并能从中受益，能力较为均衡的角色。获取收益依赖承受伤害，不动白。擅长对抗惧怕扒牌的角色。不擅长对抗主要通过体力流失等特殊手段“造成伤害”的角色。<br>关键卡牌：桃、酒、崩坏结晶、桃园结义<br>擅长身份：全能<br><br>背景故事：虽然身为普通花匠的女儿，露西亚却从小就拥有惊人的怪力。长大后加入天命，成为一名行事风风火火的骑士。秉承“拳头就是最好的语言”这一信念，以丝毫不逊色于男骑士的腕力和在花丛中击退敌人却瓣花不沾的傲人战功，赢得“圣殿的护花骑士”美称。<br>&ensp;<hr><br>▶听君一席话。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶如遭一顿打。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhnongji: ["female", "bhzhongyingjie", 3, ["bhbingying"], ["des:浓姬（斋藤归蝶）<br><br>技能设计：E带将军<br>玩法介绍：五星上将plus。爆发力强，擅长一回合唱死敌方关键角色或扭转劣势局面。生存能力较弱，不擅长对抗与自身特性接近的角色。<br>关键卡牌：锦囊<br>擅长身份：忠臣、反贼<br><br>背景故事：日本战国时期美浓国的公主，因与邻国求和而被嫁给日后著名的大名织田信长，出嫁后因出身美浓国而常被尊称为“浓姬”。斋藤归蝶终生不育，关于其的记载非常少，只知道她十分聪慧并且具有十分不甘受人摆布的独立性格（以当时极度重男轻女的社会氛围来说这是十分罕见的），被誉为“战国三夫人”之一。相传在她出嫁时，她的父亲“美浓之蝮蛇”斋藤道三赠她一把短刀并附言“若这织田信长真是个不折不扣的笨蛋、你就用这刀把他刺死”，归蝶当场回复道“或许这刀会被用来刺向父亲大人呢”，足见其具有洞察局势的高超本领。事实也如归蝶一语成谶，结婚七年后斋藤道三惨遭其子（也是归蝶的弟弟）斋藤义龙刺杀身亡，美浓国与织田信长所在的尾张国局势再次变得紧张，和平一去不返。此种状况下，织田信长最终于斋藤道三遇刺的十年后（1566年）完成对整个美浓国的征服，数年后即公布其著名的“天下布武”战略，开始计划一统日本江山，直到本能寺之变终结其毕生梦想。也正是从将美浓国纳入囊中时开始，斋藤归蝶从历史上消失了。关于她的传闻有很多，人们对此莫衷一是，真相或许已经随着本能寺的那场大火变成灰烬、不可寻得了吧。<br>&ensp;<hr><br>▶当年有人a希带这个过深渊，现在想来都是奇迹级整活。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhpaduo: ["female", "bhshijieshe", 3, ["bhqiongji", "bhweizang", "bhkongmeng"], ["des:凡人（帕朵菲利斯）<br><br>技能设计：E带将军<br>玩法介绍：这是什么牌？顺一下。能屯牌，能拉牌差，擅长反制缺牌的角色或依赖装备的角色，不擅长对抗控制能力强与摸牌很多不怕你拿的角色。猫的九条命能够吸收大量火力，但是除非有把握一定能够难逆转这种状态，还是不要轻易挨揍的好。是“凡人”，不是“烦人”哦！<br>关键卡牌：多体锦囊<br>擅长身份：主公、反贼<br><br>背景故事：前文明“逐火之蛾”末席、背负“空梦”之铭的融合战士。贪财，爱偷懒，活泼轻快，与逐火之蛾格格不入——或许是逐火之蛾里最正常的人。与名为“罐头”的猫咪时刻相伴。<br>&ensp;<hr><br>▶猫猫来辣！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶这不是我们原神的绮良良吗，下次引用记得标明出处。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhpagenini: ["female", "bhzhongyingjie", 3, ["bhqinyin", "bhdutu"], ["des:琴魔（尼可罗·帕格尼尼）<br><br>技能设计：E带将军<br>玩法介绍：看脸的时刻到了！擅长配合能够控顶的角色，擅长配合能够给队友发牌的角色，擅长配合需要经常回复体力的角色。不擅长对抗压制型角色或爆发型角色。不过即使运气再差，自身较低的体力值也能让琴音这一军八神技发挥出自己应有的价值，当然你说上限那就是ak秒全场了。<br>关键卡牌：回复体力的牌<br>擅长身份：反贼<br><br>背景故事：帕格尼尼出身于商人家庭，其父母都热爱音乐且从小就发现并着重培养其音乐天赋。帕格尼尼师从当地著名的小提琴家与作曲家弗朗切斯科·涅克，尔后有过一段较长的游学和环意大利公演时期。几乎功成名就之时，却又染上赌博的恶习，一朝回到解放前，甚至连仰仗吃饭的小提琴都输掉了。不过或许是突然开悟，又或许是一位神秘的妇人出手，总之从帕格尼尼穷困潦倒的1801年开始，他消失闭关去了；一直到1805年才回到公众的视野中。后来帕格尼尼移居法国，并在58岁时不幸死于肺结核。帕格尼尼是稀世罕有的音乐天才，无论到哪里演出都大获成功，他一生所总结出的演奏技法和创作的乐谱许多都已成为如今的传世经典，例如曾被钢琴家李斯特改编的著名的《钟》。<br>&ensp;<hr><br>▶赌狗赌狗，应有尽有。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],//v1.1.6
                        //v1.1.6

                        bhjingwei: ["female", "bhzhongyingjie", 4, ["bhtianhai", "bhlihuo"], ["des:填海之志（精卫/赤鸢）<br><br>技能设计：E带将军<br>玩法介绍：通过【火攻】和火【杀】在一回合内爆发式造成大量伤害，过牌能力极强。擅长点杀高价值目标。不擅长对抗防御力很强或具有火焰抗性的角色。<br>关键卡牌：诸葛连弩、四种花色的手牌<br>擅长身份：内奸<br><br>背景故事：精卫是古代传说中的神鸟，相传炎帝的小女儿女娃溺亡于东海，死后化作精卫。精卫鸟每天都衔来石块、木枝，将其投入东海，日复一日年复一年，以图填平海洋。<br>&ensp;&ensp;人们将守护神州的仙人称为赤鸢，或赤鸢仙人。这个形象的真身是前文明“逐火之蛾”十三英桀的第十二席——华。后世流传的赤鸢形象出自丹朱之手，与实际存在的仙人面貌具有很大差异。<br>&ensp;<hr><br>▶阿符，你没那么大！都是特效捏。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶在2018年1月19日《圣痕之谜篇》随着圣痕大改名运动而遭到全网封杀之前，符华的设定是“精卫的友人”，明面上的身份是“香港武术世家的独女”（这个设定现在仍在使用中，但是挪到了前文明纪元，也就是加入逐火之蛾以前华的身份）；而现在的设定则是“精卫本尊”。那一天的大改名运动之前“赤鸢”叫做“精卫”，并且在漫画中神农（连山）亲眼目睹精卫寿命已尽而死，并感慨符华“无穷的生命”“我们这些老友不能陪你了”云云。“丹朱捏赤鸢”的故事也是几年之后主线剧情才出现的填坑内容。《圣痕之谜篇》的封杀是整个崩坏系列历史上最严重的吃书事件。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhdaerwen: ["female", "bhnishang", 3, ["bhyanhua","bhtubian"], ["des:骑犬的巨人（查尔斯·罗伯特·达尔文）<br><br>技能设计：E带将军<br>玩法介绍：能够永久剥夺技能或令特定角色重复觉醒，具有核弹般威慑力的角色。发动技能的前置条件较为苛刻，因此生存能力也欠佳。遇强则强。擅长废除敌方团队核心。不擅长冲锋陷阵。<br>关键卡牌：防御牌<br>擅长身份：反贼<br><br>背景故事：随英国皇家海军“小猎犬”号军舰环球科考的五年时间彻底改变了达尔文，也进而彻底改变了整个生物学界。在这五年间，达尔文从世界各地搜集了无数珍贵的生物标本，并在之后的大半辈子里将这五年内的所有成果整理成划时代的巨著《物种起源》，以“进化论”奠定了现代生物学发展的基调。<br>&ensp;<hr><br>▶人均江东小霸王学习机。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhsikete: ["female", "bhzhongyingjie", 4, ["bhranyou", "bhbaoxue", "bhbaima"], ["des:南极英魂（罗伯特·斯科特）<br><br>技能设计：E带将军<br>玩法介绍：南极天险牢不可破！能够通过合理运营保有巨量手牌，但是随着时间的流逝会逐渐变得虚弱，非常惧怕火焰伤害。擅长在开局时通过巨大的牌差优势为队友争取发育时间或营造压制性的优势局面，擅长配合“连环状态”和能够造成单次高额火焰伤害的角色。不擅长应对中局和残局。<br>关键卡牌：藤甲、铁索连环、点数大的牌、队友的天火大剑/劫灭<br>擅长身份：忠臣、反贼<br><br>背景故事：斯科特是英国海军上校，从1900年开始进行南极探险。1910年，斯科特计划了一次冲击南极点的科学考察，当时他与挪威人阿蒙森竞争，但他比阿蒙森晚一个月抵达南极点，最终在回程路上不幸殒命。后人总结斯科特的失败通常归咎于其应对百年难遇的严寒时采取的策略不正确，不过也有人指出斯科特与阿蒙森策略的差异来自其目的的不同：斯科特并非单纯将前往南极点作为唯一目的，他和他的团队随身携带了大量的科学仪器，甚至在过世后被发现时身上都还带着十几公斤岩石标本；而阿蒙森从抵达南极开始就一直以抢先抵达南极点为唯一目标。斯科特的悲剧还说明，在面对极端严寒的天气时，西伯利亚矮种马确实不如雪橇犬可靠：尽管力量和耐力不及马，雪橇犬需要的食物更少，而这在补给严重匮乏时带来的优势是决定性的。<br>&ensp;<hr><br>▶坏力，油箱炸力。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhbaiyezhishi: ["female", "bhtianming", 4, ["bhbaiye", "bhqianxing"], ["des:白夜执事（符华）<br><br>技能设计：汐带将军<br>玩法介绍：随时间流逝稳定获得手牌的爆发型角色，队友的配合将使手牌获取速度大幅提升。擅长点杀高价值目标、瞬间造成大量伤害，不擅长与持续压制型角色打消耗战。<br>关键卡牌：杀<br>擅长身份：反贼<br><br>背景故事：混迹各种高端场合时符华常穿的白色西装，必要时可以冒充男性。执行间谍任务或暗杀任务时的首选，不过缺陷是白色的服装很容易被血迹污染并且污染后的视觉效果十分显眼。<br>&ensp;<hr><br>▶物理战神白夜，奇迹与感动.jpg<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhpili: ["female", "bhzhongyingjie", 4, ["bhyuanjing", "bhbingxiong", "bhxuelang"], ["des:北极征服者（罗伯斯·皮里）<br><br>技能设计：E带将军<br>玩法介绍：贝蒂小熊，乱世不败！可以通过弃置所有手牌来发动一次伟大的奇袭，但是这将导致自身的手牌区域作废。擅长点杀高价值目标、爆发性地制造高额直接伤害，擅长配合能够定向移除技能的角色。不擅长持续性地压制对手。<br>关键卡牌：装备牌<br>擅长身份：忠臣<br><br>背景故事：20世纪初，地理南北极、地磁南北极相继得到较为精确的测定，随之而来的是一股前所未有的两级探险热潮。而在这广大的探险家队伍之中，谁最先抵达极点，谁就取得了最大的荣耀。作为第一个抵达北极点的人，罗伯斯·皮里显然就将这一荣誉收归囊中。<br>&ensp;<hr><br>▶动物园。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],//v1.1.7
                        //v1.1.7

                        bhgusitafu: ["female", "bhzhongyingjie", 3, ["bhjinyu", "bhsanjie"], ["des:诅咒之影（古斯塔夫·克里姆特）<br><br>技能设计：E带将军<br>玩法介绍：即使队友受到伤害也能取得收益，但这种能力并非没有限制。擅长在第一轮内保护需要大量手牌进行发育的高价值队友，非常擅长反制爆发型的角色。不擅长持久战。<br>关键卡牌：回复体力的牌<br>擅长身份：忠臣<br><br>背景故事：古斯塔夫是奥地利画家，创建了维也纳分离派。其作品大多以繁复、抽象而难以理解的花纹和各式各样的女性闻名，是当时传统画派的诸多挑战者之一。<br>&ensp;<hr><br>▶反向大孙笨。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhcs:["male", "shen", 6, ["bhniuqu","bhxinyang"], ["des:扭曲型带将军<br><br>技能设计：汐带将军<br>玩法介绍：一张牌只有你去使用它、观测它，你才能知道其效果究竟为何；而如果你不去使用、不去观测，其性质就处于纠缠中的叠加状态，你无法知其确切，而只能通过概率去计算，就如同与上帝掷骰子。<br>关键卡牌：薛定谔的卡牌<br>擅长身份：猫<br>&ensp;<hr><br>▶我想看那个...就是那个借刀杀全场。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhlinnai:["female", "bhnishang", 3, ["bhjiukun", "bhenfan"], ["des:物种分类者（卡尔·冯·林奈）<br><br>技能设计：E带将军<br>玩法介绍：把身份局变成国战的辅助型角色。擅长给队友发牌。不擅长对抗爆发力很强的角色。<br>※双名法下，属名为势力名，种加词为角色姓名。六个濒危程度等级为：灭绝（已死亡）、极危（0体力及以下）、濒危（1体力）、易危（2体力）、低危（3体力）和无危（4体力及以上）。<br>关键卡牌：防御牌<br>擅长身份：忠臣、反贼<br><br>背景故事：大航海时代，欧洲海贼和殖民者从新世界带回了无数珍奇异宝，这其中又不乏各色各样的动植物。科学家们想要研究这些生物时，不可避免地必须知道和传播它们的名字，而带回这些生物的人往往大字不识一个。此种情况就造成了命名学上的灾难，许多的物种拥有多个不同的名字，而许多名字又能同时指代一个物种，为当时的科学研究带来极大混乱。最终平息这一切的是一位叫做林奈的科学家，他倡导的“双名法”和“纲-目-属-种”框架让乱糟糟的一切变得井井有条，资料因此更加清晰，学者们之间的交流也方便起来。此种自然分类法的成功一直延续到今天，现在的分类学就从林奈当年的框架上发展而来。<br>&ensp;<hr><br>▶同心同德，救困扶危。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶林奈的姓氏有个前缀“von”，通常这个前缀意味着祖上是德意志及周边地区的皇室或有封地的大贵族。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhtianyuanqiying:["female", "bhtianming", 4, ["bhzhengcheng"], ["des:天元骑英（比安卡·幽兰戴尔·卡斯兰娜）<br><br>技能设计：汐带将军<br>玩法介绍：天生制使命，达成有奖励，达不成有惩罚。使命结束前同时具备回复能力与伤害能力，使命成功后兼具防御、伤害和控场能力。擅长配合能给队友发牌的角色。不擅长对抗以扒牌能力见长的角色。<br>关键卡牌：红色牌<br>擅长身份：忠臣<br><br>背景故事：名为比安卡的少女于柯洛斯滕取得了了解自己身世的最后一块拼图。在最终的战斗里，她与“妹妹”携手，斩杀了全世界最为罪大恶极的人——奥托·阿波卡利斯。<br>&ensp;<hr><br>▶现在的人总喜欢说“五年前就有人知道呆鹅是真琪”这样的话，恰好👴那时候还是崩学家，就让👴来带领大家重回那一日、那一时的真相。<br>&ensp;&ensp;彼时的崩3，脚下有崩2正火，身后有原神待发。幽兰戴尔横空出世，要还崩学一个朗朗乾坤。传说幽兰黛尔初现之时，曾言道：哼，哼，哦啊……<br>&ensp;&ensp;整个崩坏系列幽兰黛尔第一次出场是在2016年年初，那时还只是一把剑（物理意义上的一把剑）。直到崩3开服的2016年10月1日，在崩3新剧情里（当时剧情尚未与崩2分离，仍然被视为崩2续作）的3村EX关，有德丽莎剧情提及“戏耍呆鹅”一事导致温蒂芽衣双双被抓的翻车下场，幽兰黛尔才算是真正意义上的初次出现。玩家社区内流传的“五年前就有人指出呆鹅是真琪”的说法，就落在这段时间到17年年初这大约半年时间内。当时米游社尚未成立，这种说法的根源只能来自贴吧。👴印象中第一次见到这个说法就是在当时贴吧著名的神帖《回顾漫画，楼主发现了主角不得了的伏笔！》的评论区。当时所讨论的“琪非琪”问题乃是崩学界最新最热也最众说纷纭的问题，这种说法其实在16年的年底就已经苗头初现。也就是说，呆鹅不可能甫一出场就被认为是真正琪亚娜，因为呆鹅刚出的时候连剧情里是否真琪都无法下定论（这个问题即便直到几个月后《永世回忆》暗示剧情角色并非真琪时也未完满解决），因此呆鹅真琪论只有一种可能，那就是《永世回忆》刚出现时基于“真琪没有死亡且剧情里的并非真琪”这一假设而进行的推论。当时主要的反对观点认为，整个系列掘地三尺都没有呆鹅的信息，年龄、能力、相貌一概不知，崩学界甚至猜测呆鹅是个萝莉（因为很好骗）——这样一个空降角色直接说是真琪，未免有种“扔一把沙子总有一颗正中靶心”的荒诞感。一直到天命之战版本呆鹅从天而降、气质上完完全全逼近岳母，并且空降完开始补各种设定的时候，这种说法才被人从古坟里刨出来。因此，“五年前就有人知道呆鹅是真琪”这一说法，纯粹是社区的添油加醋——当时绝对没有足够的证据证明呆鹅就是真琪，并且没有人在乎呆鹅是谁，全在吵真琪死没死。另一个非常重要的佐证材料就是，当时开始活跃的信浓对这种说法仅仅一笔带过（尽管这种说法确实有一点讨论度，毕竟崩坏系列就那么几个人），而其个人风格一直是“有一说一”，这说明在当时的他看来这并不是能够成为主流的妙论。结合此前“德丽莎宇宙”策划的“德丽莎厨力”，这里可以导出一个阴谋论：呆鹅之所以是真琪，因为有希望如此做的策划加入了米忽悠。当然，即便现在来看，呆鹅的塑造和心路历程仍然是略显僵硬、死板甚至突兀的，这样的问题主要源于《视觉小说·逆熵》优秀的表现力和平淡的主线剧情之间的割裂感。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],//v1.1.8
                        //v1.1.8

                        bhdegula:["female", "bhzhongyingjie", 4, ["bhxueyin","bhjuanzu","bhxueyong"], ["des:鲜血亲王（德古拉）<br><br>技能设计：E带将军<br>玩法介绍：能够将吸血效果转移给队友。擅长辅助体力值减少得很快的角色。不擅长对抗爆发力很强的角色。<br>关键卡牌：造成伤害的牌<br>擅长身份：主公、忠臣<br><br>背景故事：瓦拉几亚的弗拉德三世据信即为“吸血鬼亲王”德古拉的原型。弗拉德三世是十五世纪时罗马尼亚对抗奥斯曼人入侵的重要功臣，经常以远少于对方的人马击退奥斯曼大军。较为著名的传说指出弗拉德三世在其领地推行严峻的刑法，并且非常喜欢将人像烧烤肉片时一样串成一长串——不仅敌方战俘有这样的待遇，连本国忤逆他的贵族也得此奖赏。后世于是开始有外号称弗拉德三世为“穿刺大公”，其实为吸血鬼的传说也不胫而走。<br>&ensp;<hr><br>▶咕咕咕，我想看吸血鬼三人组。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhaotuo: ["male", "bhtianming", 4, ["bhzhuinian"], ["zhu", "des:天命威仪（奥托·阿波卡利斯）<br><br>技能设计：E带将军<br>玩法介绍：EL·PSY·CONGROO！以卡莲是否存活为主轴、能够穿梭于多个不同风格之间的发育型角色。能够应付几乎所有情况，面对强力的爆发型角色时略占下风。<br>世界线一览：<br><li>卡莲存活的世界线：<br> -	α线：发明家<br> -	δ线：天命跑男<br> -	SG线：欺骗世界的IF<br><li>卡莲不在的世界线：<br> -	β线：罗刹人<br> -	γ线：小丑<br> -	Ω线：伪神<br><br>技能组一览：<br><li>α线：“丰祈”、“血毒”、“迍穷”、“征行”<br><li>δ线：“崩心”、“伪念”、“树海”<br><li>SG线：“逆世”、“灵行”、“终望”、“正果”<br><li>β线：“神棺”、“朽奇”、“会仙”<br><li>γ线：“圣骸”、“魂座”、“哂面”、“天启”<br><li>Ω线：“至宝”、“虚神”、“舛宙”<br>关键卡牌：虚空万藏、神之键武器<br>擅长身份：全能<br><br>背景故事：奥托·阿波卡利斯的故事，一天一夜也说不完。他是五百多年来最伟大的人，同时也是五百多年来最邪恶的人，没有之一。他能以一己之力完全改写人类的结局，却连自己最爱的人也无法保护；最后落得小丑一般的下场，被他所吃掉的不知哪一片面包般的女儿们取下首级。<br>&ensp;<hr><br>▶一个复杂且纯粹的人，但是好似。<br><br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶开心滴锣鼓敲出年年的喜庆，好看滴舞蹈送来天天的欢腾~<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        //v1.1.9
                
                        bhyekajielinna:["female", "bhzhongyingjie", 4, ["bhtiewan","bhqiangquan"], ["des:大帝（叶卡捷琳娜二世）<br><br>技能设计：汐带将军<br>玩法介绍：控场能力较强的压制型角色。擅长对抗依赖装备和锦囊发挥优势或保护自己的角色，非常擅长反制因无法消耗而囤积大量手牌的角色。不擅长对抗“光脚”的“莽夫”角色。<br>关键卡牌：回复体力的牌、敌人的武器和防具<br>擅长身份：主公、反贼<br><br>背景故事：俄国历史上唯一一位被冠以“大帝”尊称的女皇。出生于普鲁士王国，嫁给沙俄王位继承人后改名叶卡捷琳娜。其夫彼得三世即位后，叶卡捷琳娜生下一个男孩，但父亲并非彼得三世；彼得三世闻讯大发雷霆，一度要处死叶卡捷琳娜，但被叶卡捷琳娜策划的政变按倒，叶卡捷琳娜随之登基，独揽大权。在位期间，她使沙俄的农奴制发展至顶峰，积极发展手工业和商业，振兴了几近荒废的国内经济。同时，她的铁腕也不忘开疆扩土，在发动两次俄土战争、与普鲁士和奥地利三次瓜分波兰后，沙皇俄国俨然已经成为具有霸主地位的强权——也即，正式跻身列强之位。<br>&ensp;<hr><br>▶这才叫杀你个片甲不留，界庞德懂不懂啊？（后仰）<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhwangzhenyi:["female", "bhzhongyingjie", 4, ["bhyuejie","bhtieti"], ["des:芳岁望星（王贞仪/贞仪）<br><br>技能设计：汐带将军<br>玩法介绍：孤好梦中杀人，大象很厉害吧？擅长压制和威慑生存能力较差的对手。不擅长对抗主要通过【杀】或其他低价值牌造成伤害的角色，以及直接造成强制伤害的角色。<br>关键卡牌：南蛮入侵、万箭齐发<br>擅长身份：全能<br><br>背景故事：王贞仪是清代的一位著名女科学家，总结中西方的数学、天文等科学成就并出版为科普类的书籍，其中最知名的兴许是解释日食月食的《月食解》。在那个极端重男轻女的封建社会，一位女性做出能够令人称道的成果稀世罕有。王贞仪年轻时随父亲游历楚粤，后来还在塞外生活过一段时间，从蒙古人那里学来骑射的技术。25岁时出嫁。十分令人惋惜的是，王贞仪29岁时就因病去世了。<br>&ensp;<hr><br>▶天妒英才啊。不禁让人想到死于决斗的伽罗瓦。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶说起某伽罗瓦，我们数学老师天天和我们说这位重量级，只能说下次和人争风吃醋得掂量自己的美式居合水平而非高数成绩。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶有一说一王贞仪这蒙古居合的水平还是很高的。真要决斗估计也不会怕。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhanna:["female", "bhtianming", 4, ["bhjiaojian","bhshengxue","bhshenmeng"], ["des:冰之律者（安娜·沙尼亚特）<br><br>技能设计：E带将军<br>玩法介绍：发育型大核，砸死一个是一个。技能的发动依赖随机涨落的SP，发育流程较长，容易倒在希望的田野上，也容易成就54320，需要队友全力保护，对卡牌【崩坏爆发】有一定的需求，该卡牌可以帮助其更快进入坐牢期——第二阶段：冰之律者。擅长在发育完全后通过恐怖的直接伤害强行砸死目标，擅长配合具有给予SP能力的角色。不擅长对抗爆发能力强或压制能力强的角色。<br>关键卡牌：防御牌、崩坏爆发、崩坏结晶<br>擅长身份：主公、反贼<br><br>背景故事：雪莲小队的女武神安娜·沙尼亚特因拯救平民有功而晋升为雪莲小队队长。因为只剩安娜一个存活者，这个小队被重组了。2017年珊瑚岛事件中，安娜被崩坏意志选中成为冰之律者，随后与身边刚刚觉醒的岩之律者融合，成为超越人类一切认知的全新的陨冰之律者。最后在诸多律者及女武神的努力，以及安娜本人意志的自我牺牲下，陨冰之律者于诞生后的90分钟内被歼灭。<br>&ensp;<hr><br>▶跟夜枭简直天造地设的一对。众所周知卧龙凤雏得一即安天下，可是当老头把龙凤印交到同一个人身上的时候，这个人多半要上千芬了。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶爷私以为此时应当查询编剧情商状态。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhchentianwu:["male", "bhshijieshe", 4, ["bhmingen","bhzhuifang"], ["des:夜枭（陈天武）<br><br>技能设计：汐带将军<br>玩法介绍：特技型的角色，拥有必定失败的使命，战斗风格也将随之大幅转变。擅长搭配能够给队友大量发牌的角色，擅长搭配需要消耗较多SP发动技能的角色，擅长暂时保护惧怕【崩坏爆发】的角色。在迎来注定失败的使命后，会变为帮助队友高频率获取SP与制衡牌的工具人，在面对牌数并不多的目标时还能起到破坏其防御牌结构的作用。不擅长对抗爆发能力强或压制能力强的角色。<br>关键卡牌：桃、酒、桃园结义、崩坏结晶<br>擅长身份：忠臣、反贼<br><br>背景故事：2015年的马尼拉崩坏中，全城生还者屈指可数。而在时任天命雪莲小队队员（亦为该小队最后的生还者）安娜·沙尼亚特的努力下，其以一己之力救出了超过10个生还者，这其中就包括一位日后经由“胡狼”克利欧之手加入“世界蛇”并成为“干部”之一的代号“夜枭”的人（当时已为改造人而非自然人）。夜枭潜伏于潜伏于黑暗中的“蛇”的“体内”，在珊瑚岛事件中置全人类安危于不顾，盘算了一出劫走律者、两“人”私奔的危险活动。在此期间，夜枭变为岩之律者、被彼时新生的冰之律者吞噬，后者进化为人类认知之外的新律者——陨冰之律者。这场闹剧最终以新生律者被雷之律者及各路女武神迅速斩杀收场。<br>&ensp;<hr><br>▶舔狗舔狗，一无所有。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶这下舔狗不得house了。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        //v1.2.0
                        
                        bhjiechuanlongzhijie:["female", "bhzhongyingjie", 3, ["bhrenjian","bhluosheng"], ["des:澄江堂主人（芥川龙之介）<br><br>技能设计：E带将军<br>玩法介绍：通过【小道消息】联动坐牢能力，控制型的角色。擅长封锁敌方核心高价目标，或在慢节奏环境进行伏笔以换取单回合极致大闭月。不擅长对抗具有较多【无懈可击】的角色。人数少时压制力更强，与之对抗时需要更优先解决。<br>关键卡牌：♠牌、防御牌<br>擅长身份：反贼、内奸<br><br>背景故事：芥川龙之介是近代日本知名的小说家，与森鸥外、夏目漱石等大家齐名。他的创作非常有大正时代的特点，既融合历史，又针砭时弊，展现出新旧思潮、新旧阶级等各色矛盾互相间的冲撞，折射出动荡、混乱而又正在飞速进步的时代背景。龙之介一生写就许多作品，多为短篇小说、散文、诗歌，35岁时因身体、精神等方面原因服安眠药自杀。现今日本文学界的“芥川赏”就以他的名字命名。<br>&ensp;<hr><br>▶记忆战场应该给龙之介专门开一个难度，这个难度下圣痕只能用龙之介和阿提拉。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶十年龙之介人不请自来，不过一蛋龙之介爷终究是咕咕咕了。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhchangguang:["female", "bhtianming", 4, ["bhdaijiang","bhmenngen","bhfumo"], ["des:天命之刃（长光）<br><br>技能设计：E带将军<br>玩法介绍：宝剑锋从bug出，梅花香自issue来。机te制xing独chao特duo的发育型角色，团队的核心。擅长辅助缺乏手牌的角色，但自身在前期需要一定的资源倾斜以打开局面，擅长反制依赖装备的角色。需要发育时间，游戏前中期生存能力较差。不擅长应对游戏前期单回合的爆发。<br>关键卡牌：装备牌<br>擅长身份：全能<br><br>背景故事：天命圣1504研究所所长，天命核心的技术骨干之一，地位堪比逆熵的鸡窝头博士和大龙虾博士。实际上，比起实际存在的人名，“长光”已经成为一个荣誉称号，在圣1504研究所里代代相传。最早的长光或许是镰仓时期的名刀匠长船长光，而目前的长光（十七世）则是伊丽莎白·麦克史密斯。前者在卡莲的时代打造有大量传世神兵，而后者则制造了探索量子之海-虚数之树专用的保全设备格尼乌斯。<br>&ensp;<hr><br>▶说实在话长光这个龙套真在主线里出现还挺有意思的，之前的说法普遍倾向于认为长光仅限于历史人物、圣1504也早已断代，可是剧情里长光却跳出来说“这只是称号”，一方面解答了古代疑问，另一方面也趣味横生。同时，长光的出现也很大程度上缓解了“天命只是奥托·阿波卡利斯一个人的天命”这一印象（尽管实际上还是很严重）。长光在整个系列里的存在感并不低，例如代表崩坏3蒸蒸日上的著名的雷刀鬼角，就出自某位长光之手。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶实际上崩三现在“开放世界”蒸蒸日上，天天就惦记着那b空气墙和捡箱子，唯一一点值得肯定的就只剩对背景或者次要npc投入的笔墨了，“一个人的天命”现象在今日确实有所好转。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        //v1.2.1

                        bhshuoyeguanxing:["female", "bhzhongyingjie", 3, ["bhqixing","bhhuangyue","bhxingzhen"], ["des:朔夜观星（德丽莎）<br><br>技能设计：E带将军<br>玩法介绍：时代的数学家，依托独立的小型牌库保全自己或打击敌人。“星”将随着“有角色使用了一张牌”这一动作而产生频繁的变动，玩家需要时刻注意手动发动技能锁住符合需要的“星”的组合，因而操作难度和上手难度都较高。控制力强，但生存能力弱，十分依赖其他角色的保护。<br>关键卡牌：防御牌<br>擅长身份：主公、反贼<br><br>背景故事：承诺与约定，之于沧海桑田的世界而言、之于飘萍浮沉的个体而言、之于反复无常的人心而言，有什么意义吗？两情相悦许诺的山盟海誓，也不过镜中花水中月；挽狂澜于既倒、扶大厦于将倾，最终也不过换来背信弃义、四面楚歌。那么，当千年时光流逝而过，那一日、那一时的那一人如约而至，此地此间此人心中所想，又曾何人说？<br>&ensp;<hr><br>▶……正是在下。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhhulang:["female", "bhshijieshe", 3, ["bhguibing","bhshenyi"], ["des:胡狼（克利欧）<br><br>技能设计：E带将军<br>玩法介绍：机制特殊的角色，具有核弹般的威慑力，但生存能力弱。非常擅长反制依赖承受伤害换取收益的角色，能够为队友恢复体力，也能辅助对【决斗】有加成的角色。不擅长对抗压制型的角色、爆发型的角色、扒牌型的角色、律者角色和具有沙尼亚特血脉的角色。<br>关键卡牌：红色牌（回合内）、黑色牌（回合外）<br>擅长身份：反贼<br><br>背景故事：天穹市医疗产业龙头老大“神城医药”的掌控者，背地里也是神秘组织“世界蛇”的关键干部之一，代号“胡狼”。每次出现总会戴着一副狼不狼狗不狗的黄黑面具遮盖真容，行事风格既有野狼的狡诈又有毒蛇的阴狠，是个绝对不能扯上关系的危险人物。<br>&ensp;<hr><br>▶有一个女仆曾被狠狠地拿捏了，然后接受了治♀疗。我不说是谁。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>▶“塔子姐，你又翻车了啊。”“胡说，女武神的事，那能叫翻车吗，那叫意外！”<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhlagena:["female", "bhtianming", 4, ["bhheminga","bhxianfeng"], ["des:永远的教官（拉格纳·罗德布洛克）<br><br>技能设计：汐带将军<br>玩法介绍：进攻型辅助角色，需要发育。依赖通过每种花色的牌造成伤害解锁对应花色牌的强中机制，并且可以主动崩血以为队友提供强中能力。擅长辅助缺乏强制命中能力的角色，擅长反制主要通过体力流失效果“造成伤害”的角色，不擅长对抗防御能力强或压制能力强的角色。<br>关键卡牌：贯石斧、红色杀、火攻、决斗、南蛮入侵、万箭齐发<br>擅长身份：反贼<br><br>背景故事：天命麾下诸多女武神部队中曾经存在过一支名为“冲锋队”的敢死队，其职责是承担最危险且最困难的作战任务。也因这个要求，冲锋队的每一位队员都是万里挑一的精锐，而那位统领全体队员的队长则更是如此。女武神拉格纳就是这样一位优秀女武神，她担任冲锋队的队长，直到冲锋队因除无量塔姬子之外的所有队员都已死亡而解散的那一天为止。她分别以队长的身份、教官的身份和女武神的身份，无可磨灭地改变了三位女性的人生轨迹——无量塔姬子、比安卡·幽兰黛尔和丽塔·洛丝薇瑟，这三人钢铁般的意志和黄金般闪耀的人格魅力无疑就传承自那位传说中的伟大的拉格纳教官。<br>&ensp;&ensp;&ensp;&ensp;冲锋队阵亡应该是发生在2009年齐格飞劫法场的事件中。当时K-423律者力量暴走引发严重的危害，齐格飞也因此失去左臂。在各方的牺牲和不懈努力下，事件结束后不久，德丽莎依托塞西莉亚·沙尼亚特的遗志在远东地区建立圣芙蕾雅学园，并通过招纳无量塔姬子使之逐渐脱离失去队长、老师也是挚友的拉格纳所致的人生低谷。<br>&ensp;<hr><br>▶我觉得火攻不应该有伤害标签。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶你说的对，但是三色火攻不中是一款有ybb自主研发的...<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhyuehen:["female", "bhtianming", 4, ["bhfeifeng","bhhuanjian"], ["des:玉骑士·月痕（李素裳）<br><br>技能设计：E带将军<br>玩法介绍：辅助型角色，古希腊掌管操作武器牌的神，进可攻退可守。擅长保护生存能力较弱的角色，擅长配合能够卡距离的角色维持防御优势。不擅长对抗爆发力特别强的角色或厚积薄发型的角色。<br>关键卡牌：武器牌、防御马<br>擅长身份：主公、忠臣<br><br>背景故事：以柯洛斯滕时期经奥托之手解除“冬眠”重新回到人世的《神州折剑录》主角李素裳为蓝本设计的角色。《神州折剑录》讲述了1491年的一场“试剑”之旅，以及其背后需要追溯到1476年举世震惊的“太虚山之变”的故事。“试剑”的主角李素裳在旅途中邂逅了一位背着巨大棺材的西洋“罗刹人”，两人的恩怨纠缠就此展开……<br>&ensp;<hr><br>▶2kg 2kg<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶板鸭：你礼貌吗？ &ensp;阿符：你真的礼貌吗？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶现在板鸭礼貌了。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        //v1.2.2

                        bhbumiexingmao:["female", "bhtianming", 4, ["bhxinghai","bhxunyu","bhshengjian"], ["des:不灭星锚（比安卡·幽兰戴尔·阿塔吉娜）<br><br>技能设计：汐带将军<br>玩法介绍：依赖手牌点数获取收益的特殊角色。需在用1摸1但用多了会永久失去技能和白板叠层但叠满了能够逆天改命的两个方向不断抉择。擅长配合能够提供免费出牌效果的角色或者能够传递手牌的角色，不擅长对抗扒牌能力或控制能力很强的角色。<br>关键卡牌：诸葛连弩<br>擅长身份：全能<br><br>背景故事：名为比安卡·阿塔吉娜的少女拥有一个更加广为人知的绰号——“幽兰戴尔”。这个绰号的来源毫无疑问是她在一次彻底改变她的一生的任务中捡到的圣剑“小幽”，而如此称呼也随着比安卡的活跃而在崩坏世界的各处大放异彩。圣剑“小幽”和其所在世界泡带给比安卡的力量化作一身璀璨的星铠，始终陪伴在她的身边。<br>&ensp;<hr><br>▶用脚开弓其实不是明智之举，主要是射不准，而且射箭之后弓失去约束乱飞容易出事。伤人伤弓。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhliaoluanxingji:["female", "bhtianming", 3, ["bhhuangxing","bhtiangong","bhshengjian"], ["des:缭乱星棘（丽塔·洛丝薇瑟）<br><br>技能设计：汐带将军<br>玩法介绍：能够通过特殊机制印牌的辅助型角色，依赖博弈与管理手牌获取收益。擅长辅助能够连续使用同一种或同一张牌的角色，不擅长对抗压制力较强、能够扒牌或对虚拟牌具有较强防御能力的角色。<br>关键卡牌：杀、南蛮入侵、万箭齐发<br>擅长身份：忠臣、反贼<br><br>背景故事：2012年，在时任天命主教奥托·阿波卡利斯的指示下，丽塔（16）辅佐当时年纪轻轻（12）却已成为A级女武神的比安卡·阿塔吉娜执行一项最高机密任务，两人双双跳进了前往某个“世界泡”的装置中。此后，两人在这个如同异世界般的世界泡里展开了宏壮的历险。数年后，最终成功完成任务、回到现世的比安卡通过“视界反演”将自身当作锚点稳定了已与他们缔结了深厚友谊的世界泡、使之不再面临随时可能崩溃消失的危险，并因此获得了“圣剑”的力量和称号。在这个任务已经结束的许多年后，已经成为幽兰戴尔的比安卡即将与如同义父的奥托·阿波卡利斯决死一战，为防不测而将这个她最为重要的世界和力量暂时转交给她最信赖的丽塔进行管理。这套装甲就是丽塔获得原本专属于比安卡的力量之后的形态。<br>&ensp;<hr><br>▶怎么说呢，但凡获得了xx力量就换一身衣服，这种设定除了你崩也就KLK了。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhbasite:["female", "bhzhongyingjie", 3, ["bhfangxiang","bhyuezhao","bhshensi"], ["des:猫神（芭丝特）<br><br>技能设计：E带将军、汐带将军<br>玩法介绍：具有HP与SP回复能力的辅助型角色。擅长辅助任何通过消耗SP发动技能的角色，能够反制擅长通过【乐不思蜀】和【兵粮寸断】进行控制的角色，其他角色消耗SP的速度越快，自身能力就越强。不擅长对抗爆发型的角色或能够扒牌的角色。<br>关键卡牌：防御牌<br>擅长身份：忠臣、反贼<br><br>背景故事：埃及神话中的猫神，主要作为守护家庭的善神而广受崇拜。古埃及人特别爱猫，猫的地位也很高，或许与芭丝特常以猫的形象出现有关，又或许是因为古埃及人爱猫才将芭丝特的形象设定成猫头女身的样子。不过不管怎么说，这样一位像猫一样友善且温柔的女神，一直是古埃及最受尊敬的几位大神之一。<br>&ensp;<hr><br>▶想起德国挖出的四万年前的狮子人石像，看来人类对兽娘、furry之类的奇怪追求自古有之，并且广泛存在。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶猫娘滴捏，很怪的辣<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        //v1.2.3

                        bhziyuan:["female", "bhxiubolian", 4, ["bhbanxue","bhjiancai","bhjingwu","bhtiexin"], ["zhu","des:处刑装·紫苑（德丽莎·阿波卡利斯/A-310）<br><br>技能设计：汐带将军<br>玩法介绍：主题为势力，具有多种功能的团队型主公。具有解除翻面控制的能力，残局时能够限制敌方关键人物，自身可以反伤，做主公时还能保护下属。擅长应对大多数情况，尤其擅长配合生存能力欠佳的角色反制崩坏势力的敌对方。不擅长对抗爆发能力很强或能够造成无双万军取首程度伤害的角色。<br>关键卡牌：杀、闪<br>擅长身份：主公、反贼<br><br>背景故事：以雪狼小队时期和圣芙蕾雅时期为蓝本设计的德丽莎角色，主要体现其作为“学园长”的复杂形象。“紫苑”是第四代弑神装甲的其中一件，周身遍布尖刺，如同古老的刑具“铁处女”一样令人生畏。所以德丽莎通常只在出战时换上这套装甲。<br>&ensp;<hr><br>▶这里很想提一嘴著名的“德丽莎双标”问题。在最初（2009）建立圣芙蕾雅学园时，德丽莎招揽姬子时用的说辞是“希望给每一个女武神选择自己前路的权力”；但是到主线剧情中（2016），却又作为主要的推手以近乎威胁的方式将温蒂送往新西兰进行“渴望宝石”的植入实验。因此，不少分析人士认为，德丽莎本质上并不是一些人强调的花瓶形象，而是一位为了达成目标不惜摆出双重标准的、具政治手腕的人物。目前本扩展的紫苑，其核心设计就来自这个争议。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶早期mhy的各种设定不明无疑是使得这类跨时代的角色形象不可避免的奇奇怪怪，比如靠着天鹅剧情才算是洗白了的齐格飞。这种情况在德莉莎身上也有体现，为了剧情的需要，这一角色就算不怎么出现在主线剧情中，其在背景中的活跃程度也是相当高的，所以你细一琢磨就觉得怪起来了。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhtimiduo:["female", "bhtianming", 4, ["bhpianran","bhbingdian"], ["des:待绽的冰花（缇米朵）<br><br>技能设计：汐带将军<br>玩法介绍：未使用月之环的缇米朵。压制型的特技角色，使用不同颜色的手牌将导致攻击范围变化，因此产生一些效果。实际使用时，攻击处于攻击范围边缘的角色将带来巨大收益。擅长以直接伤害和扒牌效果压制躲在队友重重包围之下发育的敌方角色。不擅长对抗控制能力较强或扒牌能力很强的角色。<br>关键卡牌：普通锦囊<br>擅长身份：忠臣、反贼、内奸<br><br>背景故事：天命对崩坏作战第二小队的攻坚手，与队员莱尔一样是刚加入队伍的新人。现任队长正在别处执行其他任务，布洛妮娅只是代理队长，因此在圣方丹见到的第二小队实际上堪称散装的临时队伍。缇米朵向来就对雷电芽衣、布洛妮娅等大崩坏时期的前代女武神抱有憧憬，本次任务虽然艰险异常，却也算是圆了缇米朵长期以来的梦想。<br>&ensp;<hr><br>▶感觉缇米朵应该是临时工设计的。缇米朵身材底子很好，但服装搭配给我的感觉跟村里那些“时尚大妈”们对于穿搭的理解差不多：把所有时尚的玩意全都安排上，就“时尚”了。这套服装上广泛应用具仿古风格的纹饰，却又以紧身、护具等要素体现现代感和科技感；明明到处包得很死，却又把胸口开几个大洞非露出来不可。乍一看似乎很有冲击力，细看则发觉味道与以往大相径庭。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶某种意义上来说，差不多从缇米朵和大鸭鸭这里开始，ch就只会堆奇怪的元素和足够大的人心了，这俩还算做的好的了。大鸭鸭我个人觉得是成功的，缇米朵嘛，现在看来也是水平线以上咯。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhyadang:["male", "bhtianming", 4, ["bhranneng","bhxiaoguang"], ["des:前辈（亚当）<br><br>技能设计：汐带将军<br>玩法介绍：未使用月之环的亚当。同时具有强大的压制能力和爆发能力，但代价是几乎没有任何生存能力，拼了老命型的纯输出角色。擅长通过火【杀】造成恐怖的伤害瞬杀防御力不强的角色，不擅长对抗以扒牌、卡距离、延时锦囊等控制型防御能力见长的角色。来刀狠的！<br>关键卡牌：杀、武器<br>擅长身份：忠臣、反贼<br><br>背景故事：天命对崩坏作战第三小队队员，以优异成绩毕业于圣芙蕾雅学园，天命组织中屈指可数的男性女武神。学生时代与第二小队的莱尔·科洛迪是好友，现在则是队友卡罗尔·佩珀的可靠前辈。擅长使用一把名为“神火试炼”的砍刀。<br>&ensp;<hr><br>▶说实话第一次见到男武神的时候，👴是拒绝的。你不能叫👴用什么👴就用什么，👴不能欺骗牛牛。但是实际用过之后感觉还蛮好，duang的一下，挂火快伤害又高，还蛮不错的。👴今天做这个广告，就是要让你们知道，👴用完后是这个样子，你们用完后也会是这个样子。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶只能说雀氏摔，mhy在后崩一2.0首次引入的交互方式对于剧情关卡表现效果的提升是有目共睹的，可惜这一机制后来并未被很好的使用。现在这一交互方式给人的感觉更多的是不明所以的滥用，剧情关卡随后也进入了米式开放世界的摧残环节。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhhoubengyayi:["female", "bhtianming", 4, ["bhleisuo","bhtianji"], ["des:翀云雷影（雷电芽衣）<br><br>技能设计：E带将军<br>玩法介绍：未使用月之环的雷电芽衣。特技型的角色，进可攻退可守，但是对自身手牌数和其他角色的牌数非常敏感，且依赖玩家自身手牌质量和对对手手牌质量的预测。擅长破解积攒大量手牌的角色的防御，擅长破坏敌方角色的手牌结构并影响发育进程，擅长压制需要依靠手牌进行发育的角色。不擅长对抗控制能力强或能够造成直接伤害的角色。<br>关键卡牌：古锭刀、方天画戟、万箭齐发、南蛮入侵、崩坏爆发、五谷丰登、桃园结义<br>擅长身份：全能<br><br>背景故事：天命对崩坏作战第三小队队长，昔日的雷之律者。大崩坏结束后，仍然留在组织继续发光发热，也仍然在等待那位心上人的归回。大崩坏时期威震寰球的英雄女武神，圣芙蕾雅学园最著名的校友之一。其父雷电龙马曾为逆熵组织高级管理人员、知名企业“Massive&ensp;Electronic”株式会社（ME社）社长，于2014年因经济弊案而遭革职入狱。顺带一提，雷电芽衣不仅有逆熵背景，其早年（约21岁时）更是曾经脱离天命组织前往世界蛇任职。<br>&ensp;<hr><br>▶神徐盛，但是拿着关羽的剧本。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶问题来了，为什么不能是吕布呢？公若不弃，芽衣愿拜为义父...<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶握电子刀把，捅赛博义父。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        //v1.2.4

                        bhweioula:["female", "bhtianming", 3, ["bhjiaojian","bhshengge"], ["des:医院骑士（薇欧拉）<br><br>技能设计：E带将军<br>玩法介绍：能够动态提升或降低体力上限，配合特定角色有奇效。擅长辅助及反制技能收益与体力上限挂钩的角色，能够极大地限制卖血角色的发挥，但是不动白。自身体力较少，发育完成前生存能力偏弱。<br>关键卡牌：防御牌、回复体力的牌<br>擅长身份：忠臣、内奸<br><br>背景故事：薇欧拉并不是一名勇敢的骑士——至少在她的上级看来是如此。由于在前线的表现并不出色，薇欧拉只能留在后勤，专门照顾伤员。不过，当面对伤患时，她所表现出来的坚强和勇敢却非其他人能够企及——她昔日的上司维多利亚比任何人都清楚这一点。<br>&ensp;<hr><br>▶十字军东征时期，欧洲人组建了无数多个骑士团，这些骑士团共同组成了浩浩荡荡的十字军，向圣地耶路撒冷进发。在这些骑士团之中，最大而显赫者有三：圣殿骑士团、条顿骑士团以及医院骑士团。其中，医院骑士团由一些法国贵族于耶路撒冷的施洗者圣约翰教堂附近的医院中成立，在最开始时是一个专职治疗和保护伤患、朝圣者等人员的组织，不过在得到主要来自这些人的捐助后，医院骑士团迅速发展为一个不容忽视的强大军事组织。在十字军东征这场人类历史上规模最大也最疯狂的宗教战争刚刚结束的14世纪初，医院骑士团一路辗转，从圣地附近转移到罗得岛，最终于16世纪上半叶于今天的马耳他岛建立了骑士团国，且延续至今；因此，医院骑士团也有“马耳他骑士团”这一别称。马耳他时期的百多年间，医院骑士团以坚强的防守多次击退数倍于自身的土耳其大军，展现了极为强悍的战斗力。医院骑士团通行的标志是红色的八角十字（又名马耳他十字），这个标志可以在薇欧拉的满级圣痕背景上发现。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhlaier:["male", "bhtianming", 3, ["bhyexi","bhanbing"], ["des:最佳第四人（莱尔·科洛迪）<br><br>技能设计：汐带将军<br>玩法介绍：未使用月之环的莱尔。擅长骚扰敌方团体，擅长配合队友在一轮内打出多张伤害牌给予对手巨大的压力。自身生存能力很弱，需要集中保护。全都去猜猜看吧！<br>关键卡牌：杀<br>擅长身份：忠臣、反贼<br><br>背景故事：以优异成绩提前毕业并加入天命对崩坏作战第二小队的狙击手，在团队中担任侦察和狙击等辅助任务，从不正面接战。幼年时是世界蛇干部希奥拉所建立孤儿院“巢”的一员，据本人所述其枪法就来自孤儿院里“家长”的教导。嘴贫且话多，经常在不知不觉中令两位女性上司——芽衣和布洛妮娅——火冒三丈。<br>&ensp;<hr><br>▶比起官方所说的狙击手，莱尔的实际定位更加接近散兵。也就是说，莱尔应该穿上女武神·游侠。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶你说得对，但是猜猜看吧！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhkaluoer:["female", "bhtianming", 3, ["bhchongdou","bhzhenbi"], ["des:狂怒巨锤（卡罗尔·佩珀）<br><br>技能设计：汐带将军<br>玩法介绍：未使用月之环的卡罗尔。一拳护盾干碎，两拳脆皮残废，三拳魔将流泪，力量型的角色。豪迈却不粗鲁，能够将杀及武器转化为护盾暂时保护陷入危机的自身或队友。缺陷是身板较为脆弱，在团队中能够发挥多少作用取决于手牌质量。擅长对抗利用护盾保护队友的角色，不擅长对抗爆发力较强的角色。<br>关键卡牌：武器牌、杀<br>擅长身份：忠臣、反贼<br><br>背景故事：俏皮而可爱，但打起架来毫不含糊的天命对崩坏作战第三小队队员。与在第二次崩坏期间立下重要功劳的母亲刘易斯不同，卡罗尔生性浪漫，追求“在不成熟的年纪做不成熟的事情”，偶尔热血上头搞出一些青少年特有的违纪而遭处罚，因此从没少被严厉而一丝不苟的母亲训斥。擅长使用一对带火箭推进器的浮空臂铠“咪啾枕头4号”，破坏力非同小可，但操纵难度也非常人可以驾驭。<br>&ensp;<hr><br>▶如果你问👴为什么执意要把拳皇弄成3血，👴只会说，去玩后崩坏书1打一下砸瓦鲁多。然后你就知道👴的良苦用心了。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶嘿嘿嘿，全是盾的山吹，嘿嘿嘿！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhluolan:["female", "bhtianming", 4, ["bhjiaojian","bhhunshou"], ["des:神圣骑士（罗兰）<br><br>技能设计：E带将军<br>玩法介绍：团队型的角色，能够为附近队友吸收【杀】的火力从而保护生存能力较弱的队友，同时也具备让自身或队友额外出【杀】的辅助能力。擅长反制主要依赖【杀】和连弩输出的角色，不擅长对抗压制力很强且不依赖【杀】输出伤害的角色。你、你这是反了！<br>关键卡牌：防具<br>擅长身份：主公、反贼<br><br>背景故事：与英国人的圆桌骑士相对应，法国人的传奇皇帝、被后世教皇称为“欧洲之父”的查理曼大帝也有“十二圣骑士”的传说。而在这十二圣骑之中担任首席的，就是一位名叫罗兰的骑士。罗兰既是历史上第一个被冠以“圣骑士”（即“帕拉丁”，Paladin）名号的人，也是后世一切骑士传说和骑士精神的起点。在文学作品和吟游诗人的传承中，罗兰腰挂圣剑幽兰戴尔、胯骑骏马韦兰迪夫、手持号角奥利凡特，以无比耀眼的英雄形象出现于世人眼前。有人质疑罗兰是否是历史上真实存在的人物，因为每个史诗之中对罗兰身份的描述都不尽相同；不过，这并不影响其作为一个文学上的辉煌印记，在人们的心中传承下去。如今扑克牌上♦J牌对应的人像，就是罗兰。<br>&ensp;<hr><br>▶👨：抱歉，似乎太勉强你们3个了，这里就交给我吧。<br>&ensp;&ensp;&ensp;&ensp;🔨：咦？<br>&ensp;&ensp;&ensp;&ensp;👨：喔喔喔喔喔喔……<br>&ensp;&ensp;&ensp;&ensp;⚔️：等等，该不会——<br>&ensp;&ensp;&ensp;&ensp;🐇：不行，黎恩！<br>&ensp;&ensp;&ensp;&ensp;👨：神气合——<br>&ensp;&ensp;&ensp;&ensp;👩：その必要にない！<br>&ensp;&ensp;&ensp;&ensp;🔊：剑戟怒涛.mp3<br>"]],
                        //v1.2.5

                        bhshiluomidie:["female", "bhzhongyingjie", 3, ["bhdiyue","bhyiling"], ["des:冥府魔女 失落迷迭（丽塔）<br><br>技能设计：E带将军 汐带将军<br>玩法介绍：山不厌高，海不厌深；周公吐哺，天下归心。技能发动频率与全场过牌速度息息相关的控场角色，遇强则强。擅长以爆发式的集中伤害打开局面，擅长夺取其他角色的牌来迅速扩大牌差以营造优势。滚雪球型的角色，不擅长应对劣势局面，尤不擅长保护生存能力较弱的队友。<br>关键卡牌：防御牌、点数大的牌<br>擅长身份：反贼、内奸<br><br>背景故事：失落迷迭是一位穿梭于各个时空、具有强大魔力的魔女，甚至连神话中的神明都受之驱策。某一天，舰长因为观测活动进行过度而无法返回原本的世界，正在此时，一位远道而来的魔女现身并出手相助。面对舰长的行动以及眼前的形势，魔女提出的要求是……<br>&ensp;<hr><br>▶与主线无关的纯活动角色。福尔摩斯活动的角色。在活动剧情里拿的是艾琳·艾德勒的剧本。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶在后来活动写出来的外传线中应该是最早和摆渡人认识的来着？算了不管了，迷迭超限yyds！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhwangzhaojun:["female", "bhzhongyingjie", 3, ["bhluoyan","bhchusai"], ["des:明妃（王昭君）<br><br>技能设计：E带将军<br>玩法介绍：通过【乐不思蜀】和交换位置产生极为强力的控制效果，缺点是自身生存能力较差。擅长搭配具有强大压制能力与极端高嘲讽值的角色。<br>关键卡牌：乐不思蜀、无懈可击（反制对手的无邪和拆顺）<br>擅长身份：反贼<br><br>背景故事：大约在公元前33年，已向汉朝俯首称臣的南匈奴首领呼韩邪单于进京觐见天子。当时在位的西汉皇帝汉元帝以隆重的规格接待了呼韩邪单于，甚至将自己的宫女赏赐给他；而这位被赏给匈奴王的宫女，就是王昭君。随着呼韩邪单于告别天子、踏上归途，王昭君也就离开了她所生长的土地，孤身来到地偏路远的西北大漠。后世常常传说王昭君是自愿为了和平而远嫁匈奴的，不过这一点与史书中的记载有所出入。到晋朝时，为避司马昭的讳，当时的人便封昭君为“明妃”，这个称号也随着民间的各种传说一直流传到后世，例如诗圣杜甫有《咏怀古迹》云：<br>&ensp;&ensp;&ensp;&ensp;群山万壑赴荆门，生长明妃尚有村。<br>&ensp;&ensp;&ensp;&ensp;一去紫台连朔漠，独留青冢向黄昏。<br>&ensp;&ensp;&ensp;&ensp;画图省识春风面，环佩空归夜月魂。<br>&ensp;&ensp;&ensp;&ensp;千载琵琶作胡语，分明怨恨曲中论。<br>&ensp;&ensp;&ensp;&ensp;<br>&ensp;&ensp;&ensp;&ensp;在另外的传说中，西施、王昭君、貂蝉与杨玉环常常被归到一起，她们四人也就是传说中“沉鱼落雁，闭月羞花”的四大美女。这里其实包含了四个不同的典故，其中“沉鱼”是西施的典故，“落雁”系王昭君，“闭月”属貂蝉，而“羞花”则为杨玉环。<br>&ensp;<hr><br>▶从最老的版本开始，官方的圣痕“王昭君”的称号一直是“边塞妖女”，始终想不通米忽悠整的什么玩意。不过这从18年1月19日以后就成为了历史。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶确实很怪，从最开始的版本就这样，没整清楚他们的脑回路。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhchaikefusiji:["female", "bhzhongyingjie", 3, ["bhjiaoxiang","bhhutao","bhdajiang"], ["des:冬日旋律（柴可夫斯基）<br><br>技能设计：E带将军<br>玩法介绍：将任意牌转化为基本牌，且能给队友塞牌，辅助型的角色。适于辅助因缺乏手牌而致生存能力孱弱的角色。不适于对抗爆发力很强的角色。<br>关键卡牌：防御牌<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：柴可夫斯基响当当的大名可以说是俄国乐坛迄今为止最为重量级的金字牌匾。其一生创作无数经典曲目，以交响乐、歌剧与舞剧最为突出，例如芭蕾舞剧《天鹅湖》，即是出自柴可夫斯基之手。而以其名字命名的柴可夫斯基音乐奖，亦是含金量极高的重要奖项。<br>&ensp;<hr><br>▶与肖邦、贝多芬、莫扎特等人齐名的大神，每一个搞古典音乐的人都绕不开的大神。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶这位可是重量级，而且想必在从小到大认识的各类“斯基”中，这位应该是最早听说的？<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhkekeliya:["female", "bhnishang", 4, ["bhtiexue"], ["des:逆熵的枭雄（可可利亚）<br><br>技能设计：汐带将军<br>玩法介绍：予以面包，馈以功劳。进可伤敌离间，退可塞牌助威，具体情况具体分析。擅长压制生存能力较弱的角色以及辅助容易缺乏【杀】的角色，不擅长对抗防御力很强的角色，战略上的操作空间比较依赖玩家座次。<br>关键卡牌：杀<br>擅长身份：反贼<br><br>背景故事：2013年，逆熵支柱之一的ME社爆发巨大丑闻，时任ME社社长雷电龙马因经济弊案而锒铛入狱。从那以后，ME社就转由逆熵的另一位“台柱”——可可利亚接手经管。可以说雷电龙马入狱一事事实上的最大受益者就是可可利亚无疑，因此也常有人推测雷电龙马实为含冤入狱，而整个事件的幕后黑手就是可可利亚。这样的推测当然不是空穴来风，毕竟可可利亚本身的行事作风就是“为了目标不择手段”，其所主导的X-10实验更是与天命系各种实验并无根本性的区别，这些问题使可可利亚及以其为首的逆熵激进派没少受到各方面的批评。不过，可可利亚在西伯利亚开办的“可可利亚孤儿院”也同样是知名的慈善机构，尽管该孤儿院实际上最大的作用是为X-10实验培养和初步筛选适格者。在幻海事件之后，X-10实验被叫停，可可利亚的作风也收敛了很多。<br>&ensp;<hr><br>▶逆熵的小熊。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶小熊可不背这黑锅嗷，这可是逆熵的此世之锅，小熊担待不起。。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        //v1.2.6

                        bhalading:["female", "bhzhongyingjie", 4, ["bhshendeng"], ["des:神灯之眷（阿拉丁）<br><br>技能设计：E带将军<br>玩法介绍：你所渴望的是什么呢？没错，一定是胜利。为了抵达名为“胜利”的彼岸，诸神准许你踏上祂们的命途，借用祂们的伟力。但是注意，并非每位神明都永远慷慨……祂们或许会收取一些小小的代价。无妨，你的机会，足有三次之多；许下的愿望是否能助你扭转乾坤、化腐朽为神奇，且让我们拭目以待。<br>关键卡牌：视所选命途而定<br>擅长身份：全能<br><br>背景故事：阿拉伯童话集《一千零一夜》中《阿拉丁神灯》故事的主人公阿拉丁，设定上是出生于中国首都（唐长安）的异乡小混混——尽管与其父都有着阿拉伯名字。在魔法师的邀请下，阿拉丁深入秘境，取得了传说中的神灯；神灯召唤的精灵使阿拉丁变得有钱有势，从此走上人生巅峰。虽然故事是这么个故事，不过包括只能许三个愿望在内，很多情节实际上是编集《一千零一夜》的外国人进行的二次艺术加工。<br>&ensp;<hr><br>▶奥托大帝（青春版）<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        bhhabo:["female", "bhnishang", 3, ["bhqunxing","bhjiwang","bhshenkong"], ["des:宇宙开拓者（埃德温·哈勃）<br><br>技能设计：E带将军、汐带将军<br>玩法介绍：能够通过掌握关键角色手牌情况以取得战略优势的特殊角色。自带距离能够防御大多数攻击，但是也会影响自身的出牌能力。擅长拆穿生存能力孱弱或体力已经告急的角色的战略防御意图，不擅长对抗天生不受距离影响的输出型角色。让我康康！<br>关键卡牌：远射程武器、无懈可击<br>擅长身份：反贼、内奸<br><br>背景故事：哈勃的名字可能没有伽利略、开普勒等老牌天文学家那么响亮，但他对天文学的贡献也是不容小觑的。以其名字命名的哈勃定律是一种通过红移计算特定天体距离的方法，一切“xx星球距离地球xx光年”都是基于哈勃定律的计算结果。红移现象可以类比多普勒效应，后者在现实中的例子就是救护车：迎面开来的救护车是“滴嘟滴嘟滴嘟滴嘟”，但是在这辆车经过身边、离人而去的时候，声音变成了“滴——嘟——滴——嘟——”。这个现象的成因是，车速改变了声波的频率，就结果而言，将其“拉长”了；同样地，宇宙膨胀和星体的移动也会改变光的频率（因为光也是一种波），使之变长——但是宇宙没有空气不能传声，所以判断“被拉长”的方法是颜色，光的颜色变红即说明被拉长，反过来会有蓝移（靠近时，波长变短，颜色变蓝）。通过观测红移的程度，就可以使用哈勃定律计算距离了。<br>&ensp;&ensp;&ensp;&ensp;另一个哈勃<br>&ensp;&ensp;&ensp;&ensp;哈勃望远镜是著名的NASA（美国国家航天局）发射的最著名的航天器之一。自从1990年升空以来，哈勃望远镜在没有空气阻挡的深空，拍下了无数令人叹为观止的照片，为全世界天文学家提供了数不清的第一手资料，其中很多照片都可以直接从NASA官网免费下载，互联网的便利使任何人都得以一睹宇宙的深邃魅力。在其继任者詹姆斯·韦伯望远镜之前，哈勃望远镜是人类发射到深空的最大也是深空中造价最贵的望远镜，它也是工作时间最长的人造天体之一：作为一个90后，到现在（2023）已经33岁了。它的很多设备都出现了问题，以至于2021年年中时一个致命的内存错误使之停止了思考。不过好在当年年底的圣诞节，哈勃望远镜的继任者詹姆斯·韦伯望远镜终于结束了多年的延期顺利发射升空并于次年正式开始工作。人类观测星空的活动仍未也不会停止。<br>&ensp;<hr><br>▶圣痕里面的哈勃是个戴眼镜的太空人妹纸，这一点其实是有依据的。哈勃望远镜在1990年发射升空不久即被发现镜片有问题，换句话说就是眼睛坏了，要“戴个眼镜”才能正常工作。这个“戴眼镜”任务（加装额外的修正设备）就交给了1993年升空的奋进号航天飞机。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶这段介绍其实是👴2019年就写好的，现在只不过稍微改了一下。那时候韦伯还在鸽，哈勃也还在干活，这么一看好像也是见证历史了。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        //v1.2.7

                        bhsushana:["female", "bhtianming", 4, ["bhxiachen"], ["des:英伴侠侣（苏莎娜）<br><br>技能设计：汐带将军<br>玩法介绍：发牌型的辅助角色，具有给予其他角色相同辅助能力的能力。擅长辅助牌的效果加成丰富但缺乏手牌的菜刀型角色，不擅长单打独斗。<br>※叙述中的“牌面含有‘杀’字”具体说来即是“名字或描述里带有‘杀’字的牌”，也就是说符合条件的牌是【杀】本身（废话！）、一部分锦囊（借刀、决斗、南蛮等）、几乎所有的武器、大部分防具。“带限定技标签”意为以此法获得的技能（在重置前）只能发动一次——摸牌，或者给牌，二选一，只有一次机会。如果重置技能时还未发动这个限定技，那么这次重置如没有重置一般，并不能增加技能的发动次数。<br>关键卡牌：武器牌<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：生于西亚一个宝石经销商家庭的普通女孩，因为一腔热血而放弃继承家业，成为了天命西亚支部所属女武神部队“磷砂小队”的一员。而支撑她梦想的源动力，则是对天命那近乎传说般的S级女武神的向往。有点冒失，有点傻乎乎，常被人说具有这样的特质并不适合当个女武神；不过在梦想面前，他人的几句闲话又算什么呢？<br>&ensp;<hr><br>▶鹅将军，小心身后！<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶塔将军，比比看谁摸牌更多！<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhzhenlizhilvzhe:["female", "bhxiubolian", 3, ["bhyili","bhyantuo"], ["des:真理之律者（布洛妮娅）<br><br>技能设计：汐带将军<br>玩法介绍：理之律者只做三件事：印卡，印卡，还是x#@印卡！回合外印闪印无邪，回合内印被响应过的牌，还可以额外摸牌。防御力很强，擅长反制通过【杀】持续施加生存压力的角色，不擅长配合或对抗发牌型的角色。技能机制特殊，容易卡闪，与某些能够廉价出【杀】的角色搭配有奇效。<br>关键卡牌：借刀杀人<br>擅长身份：内奸<br><br>背景故事：获得了律者核心的少女，终于决定以世界之名继承理之律者称号。这份决心带来蜕变，遂有羽化的真理之律者。<br>&ensp;<hr><br>▶杀我。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶白马：“杀！”<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhresha:["female", "bhtianming", 4, ["bhlingwu"], ["des:女武神·热砂（苏莎娜）<br><br>技能设计：汐带将军<br>玩法介绍：欲速不打野，按照给定顺序使用符合要求的牌，用对了有奖励，用不对有惩罚。依据局势变化，合理选择“熠”将能够完成惊天的大逆转，但若选错将很容易变为白板一个，对规划与运气都有较高要求。擅长积攒力量后在单个回合内爆发式使用大量的手牌击垮敌方，也具有极强的持续骚扰能力。不擅长对抗扒牌能力强或以控制见长的角色。<br>※“自然转换”，指因转换技标签本身效果发动而进行的向后转换一项的行为；“转换一周”，指因自然转换由最后项转换至最初项。<br>关键卡牌：麦克风<br>擅长身份：全能<br><br>背景故事：苏莎娜的女武神装甲。设计中包含了许多可爱的熊元素，并且适合跳舞之用。苏莎娜年幼时习舞，具有深厚的功底，但从她平时平地摔跤的马虎样来看，倒也不像。不过这份小熊一样的天真烂漫倒是很得时任天命主教奥托·阿波卡利斯的赏识，后者曾经在某个绝密任务中，点名要求苏莎娜的参与——就因为这份纯真。详见官方漫画《雾都假日》。<br>&ensp;<hr><br>▶跳舞e怎么变5段了，坏了这下不妮露了。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br><br>▶E带将军：“改三段扔新杀都是相当炸裂的存在”，你害搁那妮露呢<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br><br>▶炸裂的哪是三段啊，分明是收益（恼）<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        //v1.2.8

                        bhzhongyanzhilvzhe:["female", "bhxiubolian", 4, ["bhzhongtu", "bhzhilin", "bhmingtian"], ["des:终焉之律者（琪亚娜·卡斯兰娜/K-423）<br><br>技能设计：汐带将军<br>玩法介绍：从根源上彻底改变游戏逻辑的特技型角色。将不可避免地淘汰缺乏生存能力的孱弱角色，利好生命值与上限较高的强壮角色。需要玩家在不同的胜利条件之间进行博弈与权衡。<br>※〖明天〗只是新增了一种胜利方式，并没有取消原有的胜利条件。<br>关键卡牌：防御牌<br>擅长身份：主公、反贼<br><br>背景故事：象征着文明的最终审判，最强的律者。其所拥有的“时间”权能，即是万物的法则。<br>&ensp;<hr><br>▶出于某种原因，我不想实装终焉的语音……<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        bhaiyi:["female", "bhxiubolian", 4, ["bhshilv","bhxiangshe"], ["des:时帆旅人（爱衣·休伯利安）<br><br>技能设计：E带将军<br>玩法介绍：没有回合的特技型角色，需要通过跳过阶段获取收益。擅长配合具有翻面、跳过阶段、量产兵乐等能力的角色，能辅助极度缺乏手牌的角色，不擅长单打独斗。<br>关键卡牌：兵粮寸断、乐不思蜀<br>擅长身份：主公、忠臣、反贼<br><br>背景故事：从无尽时间之海彼岸横渡而来的拯救者，以世界无法轻易理解的方式展开干涉，为所有世界的美好而战。时间不是单向的，而是像一个回转的车轮一样循环往复；熟知这样世界真理的存在，就有可能将其超越。<br>&ensp;<hr><br>▶时间不是单向……算了，编剧你开心就好。<br>&ensp;&ensp;&ensp;&ensp;——E带将军<br>"]],
                        //v1.2.9

                        bhbeiduofen:["female", "bhzhongyingjie", 3, ["bhchuanming","bhluoluo"], ["des:扼住命运咽喉之人（路德维希 · 凡 · 贝多芬）<br><br>技能设计：汐带将军<br>玩法介绍：天雷滚滚，压城欲摧；是逆天而行渡雷劫羽化而登圣，或是屈服于苛刻的命运甘当白板？极为另类的卖血角色，依赖大量伤害觉醒真正的力量，但也可能会因此遭到牌堆制裁，最好配合具有改判、控顶等能力的队友，也容易被敌方的此类效果深刻影响。多数时候能够在各种狂轰滥炸之中存活，但发育完成前自身不动白，容易被温水煮青蛙。<br>※〖舛命〗引用的〖不屈〗为界限突破版。<br>※〖珞珞〗的重置效果不会将技能恢复到角色卡上的状态（即删去的标签不会回来），仅会刷新标签限制的次数。<br>关键卡牌：铁索连环、白银狮子<br>擅长身份：主公、反贼、内奸<br><br>背景故事：被称为“乐圣”，也被叫做“交响乐之王”，贝多芬的艺术成就自然无需多言。时至今日，在大众的认知中，贝多芬早已与莫扎特、肖邦等人一同成为古典音乐的代表人物，贝多芬所创作的《欢乐颂》《致爱丽丝》《命运交响曲》等也早已成为家喻户晓的不朽华章。贝多芬一生历经劫难，幼年时丧母，青年时发现听力受损，爱情接二连三受挫，中老年时贫困且健康状况急转直下，58岁便离开了世界。贝多芬的作品（尤其是中晚期作品）融入了他对自己不公命运的抗争，在他生命中的最后数年，完全失去听觉、重病缠身、孤自一人的贝多芬毅然写下代表他艺术生涯最高峰的《第九交响曲》，他已经用自己的行动深刻诠释了他脍炙人口的名言：“我要扼住命运的咽喉，它绝不能使我完全屈服。”<br>&ensp;<hr><br>▶“世界音乐史记下了他的名字。他把戏剧性的、民族性的、炽热的激情种植在音符的土壤里，开出卓越不凡的花。”<br>&ensp;&ensp;&ensp;&ensp;——罗曼 · 罗兰<br>"]],
                        //v1.3.0

                        //v1.3.1

                        //bhailunpo:["female", "bhzhongyingjie", 3, ["bhhuiyu","bhhuiyan"], ["des:"]],
                        // bhcsf:["male", "bhtianming", 4, ["bhceshic"], ["des:测试角色114514<br><br>技能设计：汐带将军<br>玩法介绍：<br>关键卡牌：<br>擅长身份：<br><br>背景故事：<br>&ensp;<hr><br>▶将军请走此小道。<br>&ensp;&ensp;&ensp;&ensp;——汐带将军<br>"]],
                        //bhlisushang:["female", "bhtianming", 4, [], ["des:"]],
                    },
                    skill: {
                        bhtianzhao:{
                            audio: "ext:崩崩崩/audio:2",
                            locked:true,
                            forced:true,
                            trigger:{
                                player:'useCardAfter',
                            },
                            filter:function(event,player){
                                if(event.card.name!='sha') return false;
                                if(event.cards.length==0) return false;
                                return player.countCards('h',{name:'sha'})==0 && player.countCards('h')>0;
                            },
                            content:function(){
                                'step 0'
                                event.cards=player.getCards('h');
                                event.num=event.cards.length;
                                player.loseToDiscardpile(event.cards).visible=true;
                                'step 1'
                                player.draw(event.num);
                                player.chooseUseTarget({name:'sha',isCard:true},true);
                                'step 2'
                                player.addTempSkill('bhtianzhao_use');
                            },
                            subSkill:{
                                use:{
                                    audio:'bhtianzhao',
                                    sub:true,
                                    locked:true,
                                    forced:true,
                                    trigger:{
                                        player:'useCard',
                                    },
                                    content:function(){
                                        'step 0'
                                        player.storage.bhtianzhao_dam = trigger.card;
                                        player.addTempSkill('bhtianzhao_dam');
                                        'step 1'
                                        player.removeSkill('bhtianzhao_use');
                                    },
                                    mod:{
                                        cardUsable: function (card, player) {
                                            return Infinity;
                                        },
                                        targetInRange: function (card, player) {
                                            return true;
                                        },
                                    },
                                },
                                dam:{
                                    audio: "ext:崩崩崩/audio:2",
                                    locked:true,
                                    sub:true,
                                    forced:true,
                                    trigger:{
                                        source:"damageEnd",
                                    },
                                    filter:function(event,player){
                                        if(!player.storage.bhtianzhao_dam) return false;
                                        if(event.card!=player.storage.bhtianzhao_dam) return false;
                                        return event.player.countSP() + event.player.countCards('he') > 0;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.target = trigger.player;
                                        event.spBool = false;
                                        if(event.target.countSP()>0){
                                            event.spBool = true;
                                            event.goto(2);
                                        } else {
                                            player.choosePlayerCard('请选择'+get.translation(event.target)+'的一张牌分配',event.target,'he',true).set('ai',function(card){
                                                return get.value(card)+[-1,0,1,-2,2].randomGet();
                                            });
                                        }
                                        'step 1'
                                        event.card = result.cards[0];
                                        'step 2'
                                        player.chooseTarget('请选择分配'+(event.spBool?'SP':get.translation(event.card))+'的对象',function(card,player,target){
                                            return target!=event.target;
                                        },true).set('ai',function(target){
                                            return get.attitude(player,target) + [0,2,4].randomGet();
                                        });
                                        'step 3'
                                        player.line(event.target);
                                        event.target.line(result.targets[0]);
                                        if(event.spBool){
                                            event.target.loseSP(1,player);
                                            result.targets[0].gainSP(1,player);
                                        } else {
                                            result.targets[0].gain(event.card,event.target,'giveAuto');
                                        }
                                        'step 4'
                                        delete player.storage.bhtianzhao_dam;
                                        player.removeSkill('bhtianzhao_dam');
                                    },
                                },
                            },
                        },
                        bhqiangdou:{
                            audio: "ext:崩崩崩/audio:2",
                            enable:'chooseToUse',
                            group:['bhqiangdou2','bhqiangdou3'],
                            selectCard:function(card,player,target){
                                var player=_status.event.player;
                                return [3-player.countSP()<0 ? 0:3-player.countSP(), 3];
                            },
                            filterCard:function(card,player){
                                return true;
                            },
                            position:"hs",
                            viewAs:{
                                name:"sha",
                            },
                            viewAsFilter:function(player){
                                if(player.countCards('hs')+player.countSP()<3) return false;
                            },
                            prompt:"将数量合计为3的手牌或SP视为【杀】使用",
                            onuse:function(result,player){
                                if(result.cards.length<3) player.loseSP(3-result.cards.length);
                            },
                            check:function(card){
                                var val=get.value(card);
                                return 5-val;
                            },
                            ai:{
                                skillTagFilter:function(player){
                                    if(player.countCards('hs')+player.countSP()<3) return false;
                                },
                                respondSha:true,
                                yingbian:function(card,player,targets,viewer){
                                    if(get.attitude(viewer,player)<=0) return 0;
                                    var base=0,hit=false;
                                    if(get.cardtag(card,'yingbian_hit')){
                                        hit=true;
                                        if(targets.filter(function(target){
                                            return target.hasShan()&&get.attitude(viewer,target)<0&&get.damageEffect(target,player,viewer,get.nature(card))>0;
                                        })) base+=5;
                                    }
                                    if(get.cardtag(card,'yingbian_all')){
                                        if(game.hasPlayer(function(current){
                                            return !targets.contains(current)&&lib.filter.targetEnabled2(card,player,current)&&get.effect(current,card,player,player)>0;
                                        })) base+=5;
                                    }
                                    if(get.cardtag(card,'yingbian_damage')){
                                        if(targets.filter(function(target){
                                            return get.attitude(player,target)<0&&(hit||!target.mayHaveShan()||player.hasSkillTag('directHit_ai',true,{
                                            target:target,
                                            card:card,
                                            },true))&&!target.hasSkillTag('filterDamage',null,{
                                                player:player,
                                                card:card,
                                                jiu:true,
                                            })
                                        })) base+=5;
                                    }
                                    return base;
                                },
                                canLink:function(player,target,card){
                                    if(!target.isLinked()&&!player.hasSkill('wutiesuolian_skill')) return false;
                                    if(target.mayHaveShan()&&!player.hasSkillTag('directHit_ai',true,{
                                        target:target,
                                        card:card,
                                    },true)) return false;
                                    if(player.hasSkill('jueqing')||player.hasSkill('gangzhi')||target.hasSkill('gangzhi')) return false;
                                    return true;
                                },
                                basic:{
                                    useful:[5,3,1],
                                    value:[5,3,1],
                                },
                                order:function(item,player){
                                    if(player.hasSkillTag('presha',true,null,true)) return 10;
                                    if(game.hasNature(item,'linked')){
                                        if(game.hasPlayer(function(current){
                                            return current!=player&&current.isLinked()&&player.canUse(item,current,null,true)&&get.effect(current,item,player,player)>0&&lib.card.sha.ai.canLink(player,current,item);
                                        })&&game.countPlayer(function(current){
                                            return current.isLinked()&&get.damageEffect(current,player,player,get.nature(item))>0;
                                        })>1) return 3.1;
                                        return 3;
                                    }
                                    return 3.05;
                                },
                                result:{
                                    target:function(player,target,card,isLink){
                                        var eff=function(){
                                            if(!isLink&&player.hasSkill('jiu')){
                                                if(!target.hasSkillTag('filterDamage',null,{
                                                    player:player,
                                                    card:card,
                                                    jiu:true,
                                                })){
                                                    if(get.attitude(player,target)>0){
                                                        return -7;
                                                    }
                                                    else{
                                                        return -4;
                                                    }
                                                }
                                                return -0.5;
                                            }
                                            return -1.5;
                                        }();
                                        if(!isLink&&target.mayHaveShan()&&!player.hasSkillTag('directHit_ai',true,{
                                            target:target,
                                            card:card,
                                        },true)) return eff/1.2;
                                        return eff;
                                    },
                                },
                                tag:{
                                    respond:1,
                                    respondShan:1,
                                    damage:function(card){
                                        if(game.hasNature(card,'poison')) return;
                                        return 1;
                                    },
                                    natureDamage:function(card){
                                        if(game.hasNature(card)) return 1;
                                    },
                                    fireDamage:function(card,nature){
                                        if(game.hasNature(card,'fire')) return 1;
                                    },
                                    thunderDamage:function(card,nature){
                                        if(game.hasNature(card,'thunder')) return 1;
                                    },
                                    poisonDamage:function(card,nature){
                                        if(game.hasNature(card,'poison')) return 1;
                                    },
                                },
                            },
                        },
                        bhqiangdou2:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:"useCard",
                            },
                            init:function(player){
                                player.storage.bhqiangdou2 = []
                            },
                            filter:function(event,player){
                                if((event.card.name!='sha'&&event.card.name!='shan')) return false;
                                var target=lib.skill.bhqiangdou2.logTarget(event,player);
                                return target;
                            },
                            logTarget:function(event,player){
                                if(event.card.name=='sha') return event.targets[0];
                                return event.respondTo[0];
                            },
                            direct:true,
                            content:function(){
                                'step 0'
                                event.target=lib.skill.bhqiangdou2.logTarget(trigger,player);
                                player.logSkill('bhqiangdou',event.target);
                                player.gainSP(1);
                                'step 1'
                                if(player.storage.bhqiangdou2.length>0){
                                    if(player.storage.bhqiangdou2[0]==event.target && event.target.countGainableCards(player,'he')>0) player.gainPlayerCard(event.target,'he',true);
                                    player.storage.bhqiangdou2[0] = event.target;
                                } else {
                                    player.storage.bhqiangdou2.push(event.target);
                                }
                            },
                        },
                        bhqiangdou3:{
                            audio: "ext:崩崩崩/audio:2",
                            enable:["chooseToUse"],
                            selectCard:function(card,player,target){
                                var player=_status.event.player;
                                return [3-player.countSP()<0 ? 0:3-player.countSP(), 3];
                            },
                            filterCard:function(card){
                                return true;
                            },
                            viewAs:{
                                name:"shan",
                            },
                            viewAsFilter:function(player){
                                if(player.countCards('hs')+player.countSP()<3) return false;
                            },
                            position:"hs",
                            prompt:"将数量合计为3的手牌或SP视为【闪】使用",
                            onuse:function(result,player){
                                if(result.cards.length<3) player.loseSP(3-result.cards.length);
                            },
                            check:function(){return 1},
                            ai:{
                                order:3,
                                respondShan:true,
                                skillTagFilter:function(player){
                                    if(player.countCards('hs')+player.countSP()<3) return false;
                                },
                                effect:{
                                    target:function(card,player,target,current){
                                        if(get.tag(card,'respondShan')&&current<0) return 0.6
                                    },
                                },
                                basic:{
                                    useful:[7,5.1,2],
                                    value:[7,5.1,2],
                                },
                                result:{
                                    player:1,
                                },
                            },
                        },
                        bhchuanming:{
                            trigger:{
                                global:['phaseZhunbei','phaseJieshu'],
                            },
                            locked:function(skill,player){
                                if(!player||player.storage.bhchuanming>0) return true;
                                return false;
                            },
                            derivation:["bhyuesheng"],
                            direct:true,
                            filter:function(event,player){
                                if(player.hasSkill('bhchuanming_lm1')) return false;
                                if(player.hasSkill('bhchuanming_lm2')) return false;
                                if(player.hasSkill('bhchuanming_lm3')) return false;
                                return true;
                            },
                            init:function(player){
                                player.storage.bhchuanming=4;
                            },
                            content:function(){
                                'step 0'
                                player.logSkill('bhchuanming');
                                if(player.storage.bhchuanming>3) player.addSkill('bhchuanming_lm3');
                                if(player.storage.bhchuanming>2) player.addTempSkill('bhchuanming_lm2','roundStart');
                                if(player.storage.bhchuanming>1) player.addTempSkill('bhchuanming_lm1');
                                game.log(player,'进行了',{name:'shandian',isCard:true},'判定');
                                'step 1'
                                player.judge(function (card) {
                                    event.card=card;
                                    if(get.suit(card)=='spade'&&get.number(card)>1&&get.number(card)<10) return -5;
					                return 1;
                                }).judge2 = function (result) {
                                    if(result.bool==false) return true;
					                return false;
                                };
                                'step 2'
                                if(result.bool==false){
                                    player.damage(3,'thunder','nosource');
                                }
                                player.gain(result.card,'gain2');
                                'step 3'
                                if(result.bool==false){
                                    player.storage.bhchuanming--;
                                    if(player.storage.bhchuanming>0){
                                        player.removeSkill('bhchuanming_lm'+player.storage.bhchuanming)
                                    } else {
                                        game.log(player,'获得了技能','#g【乐圣】');
                                        player.addSkill('bhyuesheng');
                                    }
                                }
                            },
                            subSkill:{
                                lm1:{
                                    sub:true,
                                    unique:true,
                                    forced:true,
                                    charlotte:true,
                                },
                                lm2:{
                                    sub:true,
                                    unique:true,
                                    forced:true,
                                    charlotte:true,
                                },
                                lm3:{
                                    sub:true,
                                    unique:true,
                                    forced:true,
                                    charlotte:true,
                                },
                            },
                        },
                        bhluoluo:{
                            forced:true,
                            trigger:{
                                player:['dying','damageEnd'],
                            },
                            filter:function(event,player){
                                if(event.name=='dying') return player.hp<=0;
                                else {
                                    if(event.getParent()._buqu) return false;
                                    return true;
                                }
                            },
                            content:function(){
                                "step 0"
                                str1="发动一次〖不屈〗，重置〖舛命〗";
                                str2="回复1点体力，失去〖珞珞〗";
                                player.chooseControlList([str1,str2],true).set('ai',function(){
                                    return 0;
                                });
                                "step 1"
                                if(result.index==0){
                                    player.logSkill('bhbuqu');
                                    trigger.getParent(2)._buqu=true;
                                    var card=get.cards()[0];
                                    event.card=card;
                                    player.addToExpansion(card,'gain2').gaintag.add('buqu');
                                } else event.goto(4);
                                "step 2"
                                var cards=player.getExpansions('buqu'),num=get.number(card);
                                player.showCards(cards,'不屈')
                                for(var i=0;i<cards.length;i++){
                                    if(cards[i]!=card&&get.number(cards[i])==num){
                                        player.loseToDiscardpile(card);
                                        return;
                                    };
                                }
                                if(player.isDying()){
                                    trigger.cancel();
                                    trigger.result={bool:true};
                                } 
                                if(player.hp<=0){
                                    player.recover(1-player.hp);
                                }
                                "step 3"
                                if(player.hasSkill('bhchuanming_lm1')) player.removeSkill('bhchuanming_lm1');
                                if(player.hasSkill('bhchuanming_lm2')) player.removeSkill('bhchuanming_lm2');
                                if(player.hasSkill('bhchuanming_lm3')) player.removeSkill('bhchuanming_lm3');
                                event.finish();
                                "step 4"
                                player.recover();
                                player.removeSkill('bhluoluo');
                            },
                            ai:{
                                save:true,
                                //mingzhi:true,
                                skillTagFilter:function(player,tag,target){
                                    if(player!=target) return false;
                                },
                            },
                            intro:{
                                name:"创",
                                content:"expansion",
                                markcount:"expansion",
                            },
                        },
                        bhyuesheng:{
                            unique:true,
                            enable:"chooseToUse",
                            hiddenCard:function(player,name){
                                if(get.type(name)!='trick'&&get.type(name)!='delay') return false;
                                var cards = player.getExpansions('buqu');
                                var cardname = ['bingliang','guohe','huogong','juedou','jiedao','lebu','nanman','shandian','shunshou','tiesuo','taoyuan','wugu','wanjian','wuxie','wuzhong'];
                                var index = cardname.indexOf(name);
                                if(index<0) return false;
                                for (var i = 0; i < cards.length; i++) {
                                    if(get.number(cards[i])==index+1) return player.countCards('he',{number:(index+1)});
                                }
                                return false;
                            },
                            filter:function(event,player){
                                var cards = player.getExpansions('buqu');
                                for (var i = 0; i < cards.length; i++) {
                                    if(player.countCards('he',function(card){
                                        return get.number(card) == get.number(cards[i]);
                                    })) return true;
                                }
                                return false;
                            },
                            chooseButton:{
                                dialog:function(event,player){
                                    //字典序：1兵粮寸断，2过河拆桥，3火攻，4决斗，5借刀杀人，6乐不思蜀，7南蛮入侵，8闪电，9顺手牵羊，10铁索连环，11桃园结义，12五谷丰登，13万箭齐发，14无懈可击，15无中生有
                                    var cardname = ['bingliang','guohe','huogong','juedou','jiedao','lebu','nanman','shandian','shunshou','tiesuo','taoyuan','wugu','wanjian','wuxie','wuzhong'];
                                    var list=[];
                                    var cards = player.getExpansions('buqu');
                                    for (var i = 0; i < cardname.length; i++) {
                                        for(let j of cards){
                                            if(get.number(j)==i+1&&!list.contains(['锦囊', ''+(i+1), cardname[i]])){
                                                if (get.type(cardname[i])=='trick'&&event.filterCard({ name: cardname[i], isCard:false }, player, event)) list.push(['锦囊', ''+(i+1), cardname[i]]);
                                                if (get.type(cardname[i])=='delay'&&event.filterCard({ name: cardname[i], isCard:false }, player, event)) list.push(['锦囊', ''+(i+1), cardname[i]]);
                                            }
                                        }
                                    }
                                    return ui.create.dialog('乐圣',[list,'vcard'],'hidden');
                                },
                                check: function (button, player) {
                                    var cardname = ['bingliang','guohe','huogong','juedou','jiedao','lebu','nanman','shandian','shunshou','tiesuo','taoyuan','wugu','wanjian','wuxie','wuzhong'];
                                    var index = cardname.indexOf(button.link[2]);
                                    var cards = player.getExpansions('buqu');
                                    for (var i = 0; i < cards.length; i++) {
                                        if(get.number(cards[i])==index+1) return _status.event.player.getUseValue({ name: cards[i]});
                                    }
                                    return 0;
                                },
                                backup:function(links,player){
                                    return {
                                        filterCard:function(card,player,target){
                                            var cardname = ['bingliang','guohe','huogong','juedou','jiedao','lebu','nanman','shandian','shunshou','tiesuo','taoyuan','wugu','wanjian','wuxie','wuzhong'];
                                            var index = cardname.indexOf(links[0][2]);
                                            if(index<0) return false;
                                            return get.number(card) == index+1;
                                        },
                                        selectCard:1,
                                        check:function(card,player,target){
                                            if(!ui.selected.cards.length&&get.type(card)=='basic') return 6;
                                            else return 6-get.value(card);
                                        },
                                        viewAs:{name:links[0][2]},
                                        position:'he',
                                        popname:true,
                                        onuse:function(result,player){
                                            player.storage.bhyuesheng = result.card.name;
                                            player.addTempSkill('bhyuesheng_use');
                                        },
                                    }
                                },
                                prompt:function(links,player){
                                    return '你可以将一张同“创”点数的牌视为'+get.translation(links[0][2])+'使用';
                                },
                            },
                            ai:{
                                skillTagFilter:function(player,tag,arg){
                                },
                                order:function(){
                                    var player=_status.event.player;
                                    var event=_status.event;
                                    if(event.filterCard({name:'jiu'},player,event)&&get.effect(player,{name:'jiu'})>0&&player.storage.yizan&&player.countCards('hs',{type:'basic'})>2){
                                        return 3.3;
                                    }
                                    return 3.1;
                                },
                                result:{
                                    player:function(player){
                                        var allshown=true,players=game.filterPlayer();
                                        for(var i=0;i<players.length;i++){
                                            if(players[i].ai.shown==0){
                                                allshown=false;
                                            }
                                            if(players[i]!=player&&players[i].countCards('h')&&get.attitude(player,players[i])>0){
                                                return 1;
                                            }
                                        }
                                        if(allshown) return 1;
                                        return 0;
                                    },
                                },
                                threaten:1.9,
                            },
                            subSkill:{
                                use:{
                                    sub:true,
                                    unique:true,
                                    forced:true,
                                    charlotte:true,
                                    silent:true,
                                    trigger:{
                                        player:'useCard',
                                    },
                                    filter:function(event,player){
                                        if(!player.storage.bhyuesheng) return false;
                                        return event.card.name == player.storage.bhyuesheng;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.cards = trigger.cards;
                                        event.targets = trigger.targets;
                                        var cards = player.getExpansions('buqu');
                                        var cardname = ['bingliang','guohe','huogong','juedou','jiedao','lebu','nanman','shandian','shunshou','tiesuo','taoyuan','wugu','wanjian','wuxie','wuzhong'];
                                        var index = cardname.indexOf(trigger.card.name);
                                        for (var i = 0; i < cards.length; i++) {
                                            if(get.number(cards[i])==index+1) {
                                                event.cardname = cards[i].name;
                                                event.index=i;
                                            }
                                        }

                                        delete player.storage.bhyuesheng;
                                        trigger.cancel();
                                        'step 1'
                                        player.useCard({name: event.cardname, isCard: false, cards: event.cards}, event.cards, event.targets, false).viewAs=true;
                                        'step 2'
                                        player.gain(player.getExpansions('buqu')[event.index],'log','gain2');
                                        'step 3'
                                        player.removeSkill('bhyuesheng_use');
                                    },
                                },
                            },
                        },
                        bhxiangshe:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:"phaseUseEnd",
                            },
                            filter:function(event,player){
                                if(event.player==player) return false;
                                if(event.skill) return false;
                                var history=event.player.getHistory('useCard');
                                return !history.length;
                            },
                            check:function(event,player){
                                let att=get.attitude(player,event.player);
                                if(att>0) return true;
                                else {
                                    if(player.countCards('h')<3&&(event.player.countCards('h')>2||event.player.hp>2)) return true;
                                    if(player.countCards('h')>4) return true;
                                    return false;
                                }
                            },
                            logTarget:function(event,player){
                                return event.player;
                            },
                            content:function(){
                                'step 0'
                                player.draw();
                                event.target=trigger.player;
                                event.target.draw();
                                'step 1'
                                if(player.countCards('h')&&event.target.countCards('h')){
                                    player.chooseCard('你可以与'+get.translation(event.target)+'交换一张手牌，令此出牌阶段视为已跳过','h').set('ai',function(card){
                                        var att=get.attitude(player,event.target);
                                        if(att>0) return get.value(card)+[1,2,3,4].randomGet();
                                        else return 6-get.value(card)+(player.countCards('hs')>1?2:0);
                                    });
                                } else event.finish();
                                'step 2'
                                if(result.bool){
                                    event.card1=result.cards[0];
                                    event.target.chooseCard('请选择一张手牌与'+get.translation(player)+'交换','h',true).set('ai',function(card){
                                        var att=get.attitude(event.target,player);
                                        if(att>0) return get.value(card)+[1,2,3,4].randomGet();
                                        else return 6-get.value(card);
                                    });
                                } else event.finish();
                                'step 3'
                                event.card2=result.cards[0];
                                player.lose(event.card1,ui.ordering);
                                target.lose(event.card2,ui.ordering);
                                player.gain(event.card2);
                                event.target.gain(event.card1);
                                event.target.getHistory('skipped').add('phaseUse');
                            },
                            group:['bhxiangshe2'],
                        },
                        bhxiangshe2:{
                            audio: "bhxiangshe",
                            trigger:{
                                global:"phaseDiscardAfter",
                            },
                            filter:function(event,player){
                                if(event.player==player) return false;
                                if(event.skill) return false;
                                var cards=[];
                                event.player.getHistory('lose',function(evt){
                                    if(evt.type=='discard'&&evt.getParent('phaseDiscard')==event) cards.addArray(evt.cards2);
                                });
                                return !cards.length;
                            },
                            check:function(event,player){
                                let att=get.attitude(player,event.player);
                                if(att>0) return true;
                                else {
                                    if(player.countCards('h')<3&&(event.player.countCards('h')>2||event.player.hp>2)) return true;
                                    return false;
                                }
                            },
                            logTarget:function(event,player){
                                return event.player;
                            },
                            content:function(){
                                'step 0'
                                player.draw();
                                event.target=trigger.player;
                                event.target.draw();
                                'step 1'
                                if(player.countCards('h')&&event.target.countCards('h')){
                                    player.chooseCard('你可以与'+get.translation(event.target)+'交换一张手牌，令此弃牌阶段视为已跳过','h').set('ai',function(card){
                                        var att=get.attitude(player,event.target);
                                        if(att>0) return get.value(card)+[1,2,3,4].randomGet();
                                        else return 5-get.value(card);
                                    });
                                } else event.finish();
                                'step 2'
                                if(result.bool){
                                    event.card1=result.cards[0];
                                    event.target.chooseCard('请选择一张手牌与'+get.translation(player)+'交换','h',true).set('ai',function(card){
                                        var att=get.attitude(event.target,player);
                                        if(att>0) return get.value(card)+[1,2,3,4].randomGet();
                                        else return 6-get.value(card);
                                    });
                                } else event.finish();
                                'step 3'
                                event.card2=result.cards[0];
                                player.lose(event.card1,ui.ordering);
                                target.lose(event.card2,ui.ordering);
                                player.gain(event.card2);
                                event.target.gain(event.card1);
                                event.target.getHistory('skipped').add('phaseDiscard');
                            },
                        },
                        bhshilv:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:['turnOverEnd','enterGame'],
                                global:'phaseBefore', 
                            },
                            priority:101,
                            forced: true,
                            filter: function (event, player) {
                                if(event.name=='phase') return game.phaseNumber==0;
                                else if(event.name=='turnOver') return !player.isTurnedOver();
                                else return true;
                            },
                            content:function(){
                                player.turnOver();
                            },
                            group:['bhshilv_skipped','bhshilv_logs','bhshilv_skipped2'],
                            subSkill:{
                                logs:{
                                    trigger:{
                                        global:"phaseBefore",
                                    },
                                    priority:99,
                                    silent:true,
                                    forced:true,
                                    charlotte:true,
                                    init:function(player){
                                        player.storage.bhshilv_logs=[];
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhshilv_logs.contains(event.player);
                                    },
                                    content:function(){
                                        player.storage.bhshilv_logs.remove(trigger.player);
                                    },
                                },
                                skipped:{
                                    audio: "bhshilv",
                                    trigger:{
                                        global:"turnOverEnd",
                                    },
                                    check:function(event,player){
                                        return true;
                                    },
                                    filter:function(event,player){
                                        if(player==event.player) return false;
                                        if(!event.player.phaseSkipped) return false;
                                        return !event.player.isTurnedOver()&&!player.storage.bhshilv_logs.contains(event.player);
                                    },
                                    prompt2:function(event,player){
                                        return '其他角色的回合结束或因翻回正面而终止回合时，你可以额外进行该回合被跳过的所有阶段。（本回合已跳过所有阶段）';
                                    },
                                    content:function(){
                                        'step 0'
                                        game.log('phase');
                                        player.storage.bhshilv_logs.push(trigger.player);
                                        event.num=0;
                                        event.list=['phaseZhunbei','phaseJudge','phaseDraw','phaseUse','phaseDiscard','phaseJieshu'];
                                        'step 1'
                                        var next = player[event.list[event.num]]();
                                        event.next.remove(next);
                                        trigger.next.push(next);
                                        'step 2'
                                        event.num++;
                                        if(event.num<event.list.length) event.goto(1);
                                    },
                                },
                                skipped2:{
                                    audio: "bhshilv",
                                    trigger:{
                                        global:"phaseEnd",
                                    },
                                    prompt2:function(event,player){
                                        let str='其他角色的回合结束或因翻回正面而终止回合时，你可以额外进行该回合被跳过的所有阶段。（本回合跳过的阶段：';
                                        let list=event.player.getHistory('skipped');
                                        for(let i=0;i<list.length;i++){
                                            if(list[i].search('phaseZhunbei')!=-1) str+='准备阶段';
                                            else if(list[i].search('phaseJudge')!=-1) str+='判定阶段';
                                            else if(list[i].search('phaseDraw')!=-1) str+='摸牌阶段';
                                            else if(list[i].search('phaseUse')!=-1) str+='出牌阶段';
                                            else if(list[i].search('phaseDiscard')!=-1) str+='弃牌阶段';
                                            else if(list[i].search('phaseJieshu')!=-1) str+='结束阶段';

                                            if(i<list.length-1) str+='、';
                                        }
                                        str+='）';
                                        return str;
                                    },
                                    check:function(event,player){
                                        var val=0;
                                        var list=event.player.getHistory('skipped');
                                        for(let i of list){
                                            if(i.search('Discard')!=-1&&player.needsToDiscard()) val--;
                                            else if(i.search('Judge')!=-1&&player.countCards('j',{name:['lebu','bingliang','shandian']})) val--;
                                            else if(i.search('Use')!=-1) val+=(player.countCards('hs')>1?1.2:0.9);
                                            else if(i.search('Draw')!=-1) val+=1.2;
                                        }
                                        return val>=0;
                                    },
                                    filter:function(event,player){
                                        if(player==event.player) return false;
                                        return event.player.getHistory('skipped').length>0;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.num=0;
                                        event.list=trigger.player.getHistory('skipped');
                                        'step 1'
                                        var next = player[event.list[event.num]]();
                                        event.next.remove(next);
                                        trigger.next.push(next);
                                        'step 2'
                                        event.num++
                                        if(event.num<event.list.length) event.goto(1);
                                    },
                                },
                            },
                        },
                        bhzhilin:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger: { 
                                global: 'phaseBefore', 
                                player: ['enterGame'],
                            },
                            priority:8,
                            forced:true,
                            charlotte:true,
                            direct:true,
                            unique:true,
                            filter: function (event, player) {
                                return (event.name != 'phase' || game.phaseNumber == 0);
                            },
                            content:function(){
                                'step 0'
                                event.targets=game.filterPlayer();
                                for(let i of event.targets){
                                    i.addSkill('bhzhilin_use');
                                }
                            },
                            subSkill:{
                                use:{
                                    sub:true,
                                    direct:true,
                                    forced:true,
                                    charlotte:true,
                                    unique:true,
                                    enable:"chooseToUse",
                                    filter:function(event,player){
                                        if(player.hasSkill('bhzhilin_lm')) return false;
                                        if(player.hasSkill('bhzhilin')){
                                            var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                            for(let i of list){
                                                if(player.hasSkill(i)) return true;
                                            }
                                            for(var i=1;i<=8;i++){
                                                if(player.hasSkill('bhbenghuai'+i)) return true;
                                            }
                                            return false;
                                        }
                                        else {
                                            var count=0;
                                            var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                            for(let i of list){
                                                if(player.hasSkill(i)) count++;
                                            }
                                            for(var i=1;i<=8;i++){
                                                if(player.hasSkill('bhbenghuai'+i)) count++;
                                            }
                                            if(!count) return false;
                                            if(game.hasPlayer(function(current){
                                                if(current==player) return false;
                                                var count2=0;
                                                var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                                for(let i of list){
                                                    if(current.hasSkill(i)) count2++;
                                                }
                                                for(var i=1;i<=8;i++){
                                                    if(current.hasSkill('bhbenghuai'+i)) count2++;
                                                }
                                                return count2>=count;
                                            })) return false;
                                            return true;
                                        }
                                    },
                                    hiddenCard: function (player, name) {
                                        var bool=false;
                                        var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                        for(let i of list){
                                            if(player.hasSkill(i)) bool=true;
                                        }
                                        for(var i=1;i<=8;i++){
                                            if(player.hasSkill('bhbenghuai'+i)) bool=true;
                                        }
                                        if (!player.hasSkill('bhzhilin')&&bool) return false;
                                        if (['basic', 'trick'].contains(get.type(name))) {
                                            return true;
                                        }
                                        return false;
                                    },
                                    chooseButton: {
                                        dialog: function (event, player) {
                                            var list=[];
                                            if(event.filterCard({name:'sha'},player,event)){
                                                list.push(['基本','','sha']);
                                                for(var j of lib.inpile_nature) list.push(['基本','','sha',j]);
                                            }
                                            for (var i = 0; i < lib.inpile.length; i++) {
                                                if (lib.inpile[i] != 'du'&& lib.inpile[i]!='sha'&& get.type(lib.inpile[i]) == 'basic' && event.filterCard({ name: lib.inpile[i] }, player, event)) list.push(['基本', '', lib.inpile[i]]);
                                                if (get.type(lib.inpile[i]) == 'trick' && event.filterCard({ name: lib.inpile[i] }, player, event)) list.push(['锦囊', '', lib.inpile[i]]);
                                            }
                                            return ui.create.dialog('至临',[list,'vcard'],'hidden');
                                        },
                                        check: function (button, player) {
                                            return _status.event.player.getUseValue({ name: button.link[2], nature: button.link[3] });
                                        },
                                        backup: function (links, player) {
                                            return {
                                                popname: true,
                                                viewAs: { name: links[0][2], nature: links[0][3] },
                                                selectCard: 0,
                                                filterCard: false,
                                                position: 'h',
                                                precontent: function () {
                                                    'step 0'
                                                    player.logSkill('bhzhilin');
                                                    player.addTempSkill('bhzhilin_lm');
                                                    player.addTempSkill('bhzhilin_after');
                                                    event.num=-1;
                                                    event.bool=false;
                                                    var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                                    for(let i of list){
                                                        //if(event.bool) continue;
                                                        if(player.hasSkill(i)){
                                                            if(event.bool) player.removeSkill(i);
                                                            event.num++;
                                                            event.bool=true;
                                                        }
                                                    }
                                                    for(var i=1;i<=8;i++){
                                                        //if(event.bool) continue;
                                                        if(player.hasSkill('bhbenghuai'+i)){
                                                            if(!event.bool) player.removeSkill('bhbenghuai'+i);
                                                            event.num++;
                                                            event.bool=true;
                                                        }
                                                    }
                                                },
                                            }
                                        },
                                        prompt: function (links, player) {
                                            return '视为使用' + get.translation(links[0][2]);
                                        },
                                    },
                                    ai: {
                                        respondSha: true,
                                        respondShan: true,
                                        save: true,
                                        skillTagFilter: function (player) {
                                            if(player.hasSkill('bhzhilin')) return true;
                                            else {
                                                var count=0;
                                                var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                                for(let i of list){
                                                    if(player.hasSkill(i)) count++;
                                                }
                                                for(var i=1;i<=8;i++){
                                                    if(player.hasSkill('bhbenghuai'+i)) count++;
                                                }
                                                if(!count) return false;
                                                if(game.hasPlayer(function(current){
                                                    var count2=0;
                                                    var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                                    for(let i of list){
                                                        if(current.hasSkill(i)) count2++;
                                                    }
                                                    for(var i=1;i<=8;i++){
                                                        if(current.hasSkill('bhbenghuai'+i)) count2++;
                                                    }
                                                    return count2>=count;
                                                })) return false;
                                                return true;
                                            }
                                        },
                                        order: 7.1,
                                        result: {
                                            player: function (player) {
                                                if (_status.event.dying) {
                                                    return get.attitude(player, _status.event.dying);
                                                }
                                                if (_status.event.type == 'respondShan') return 1;
                                                if (_status.event.type == 'respondSha') return 1;
                                                var cards = lib.inpile;
                                                if (!cards.length) return 0;
                                                var val = 0;
                                                for (var i of cards) {
                                                    val += player.getUseValue({ name: i.name });
                                                    return val;
                                                }
                                                return 0;
                                            },
                                        },
                                    },
                                },
                                after:{
                                    sub:true,
                                    direct:true,
                                    forced:true,
                                    charlotte:true,
                                    unique:true,
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    content:function(){
                                        'step 0'
                                        event.num=0;
                                        event.bool=false;
                                        var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                        for(let i of list){
                                            //if(event.bool) continue;
                                            if(player.hasSkill(i)){
                                                event.num++;
                                            }
                                        }
                                        for(var i=1;i<=8;i++){
                                            //if(event.bool) continue;
                                            if(player.hasSkill('bhbenghuai'+i)){
                                                event.num++;
                                            }
                                        }
                                        'step 1'
                                        if(event.num<=0) event.finish();
                                        'step 2'
                                        player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                            if (player.hp == player.maxHp) return 'baonue_hp';
                                            if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                            return 'baonue_hp';
                                        }).set('prompt', '崩坏：失去1点体力或减1点体力上限（剩余'+get.cnNumber(event.num-1)+'次）');
                                        'step 3'
                                        if (result.control == 'baonue_hp') {
                                            player.loseHp();
                                        }
                                        else {
                                            player.loseMaxHp(true);
                                        }
                                        'step 4'
                                        event.num--;
                                        if(event.num>0) event.goto(2);
                                        'step 5'
                                        player.removeSkill('bhzhilin_after');
                                    }
                                },
                                lm:{
                                    sub:true,
                                    charlotte:true,
                                    forced:true,
                                    unique:true,
                                },
                            },
                        },
                        bhmingtian:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger: { 
                                global: 'phaseBefore', 
                                player: ['enterGame'],
                            },
                            priority:9,
                            direct:true,
                            forced:true,
                            charlotte:true,
                            unique:true,
                            filter: function (event, player) {
                                return (event.name != 'phase' || game.phaseNumber == 0);
                            },
                            content:function(){
                                'step 0'
                                event.targets=game.filterPlayer();
                                for(let i of event.targets){
                                    i.addSkill('bhmingtian_over');
                                }
                            },
                            subSkill:{
                                over:{
                                    sub:true,
                                    direct:true,
                                    forced:true,
                                    charlotte:true,
                                    unique:true,
                                    trigger:{
                                        global:'phaseBegin',
                                    },
                                    filter:function(event,player){
                                        return !game.hasPlayer(function(target){
                                            var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                            for(let i of list){
                                                if(target.hasSkill(i)) return true;
                                            }
                                            for(var i=1;i<=8;i++){
                                                if(target.hasSkill('bhbenghuai'+i)) return true;
                                            }
                                            return false;
                                        });
                                    },
                                    content:function(){
                                        'step 0'
                                        player.logSkill('bhmingtian');
                                        'step 1'
                                        game.over(true);
                                    },
                                },
                            },
                        },
                        bhzhongtu:{
                            derivation:'bhbenghuai1',
                            audio: "ext:崩崩崩/audio:2",
                            trigger: { 
                                global: 'phaseBefore', 
                                player: ['enterGame'],
                            },
                            forced:true,
                            charlotte:true,
                            unique:true,
                            priority:10,
                            filter: function (event, player) {
                                return (event.name != 'phase' || game.phaseNumber == 0);
                            },
                            content:function(){
                                'step 0'
                                event.targets=game.filterPlayer();
                                event.count=0;
                                event.targets.sortBySeat();
                                'step 1'
                                event.target=event.targets[event.count];
                                event.target.addSkill('bhzhongtu_gain');
                                if(!event.target.hasSkill('bhbbenghuai')&&!event.target.hasSkill('bhsbenghuai')&&!event.target.hasSkill('benghuai')) event.target.addSkill('bhbenghuai'+(event.count+1));
                                'step 2'
                                event.count++;
                                if(event.count<event.targets.length) event.goto(1);
                            },
                            subSkill:{
                                gain:{
                                    sub:true,
                                    direct:true,
                                    forced:true,
                                    charlotte:true,
                                    unique:true,
                                    trigger:{
                                        source:'damageEnd',
                                    },
                                    filter:function(event,player){
                                        if(player.hasSkill('bhzhongtu_lm')) return false;
                                        if(!event.player.isAlive()) return false;
                                        var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                        for(let i of list){
                                            if(event.player.hasSkill(i)) return true;
                                        }
                                        for(var i=1;i<=8;i++){
                                            if(event.player.hasSkill('bhbenghuai'+i)) return true;
                                        }
                                        return false;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.target=trigger.player;
                                        player.chooseBool('是否发动〖终途〗？').set('prompt2','你可以获得'+get.translation(event.target)+'的所有〖崩坏〗并回复等量点体力或增加等亮点体力上限').set('ai',function(){
                                            var att=get.attitude(player,event.target);
                                            var count=0;
                                            var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                            for(let i of list){
                                                if(event.target.hasSkill(i)) count++;
                                            }
                                            for(var i=1;i<=8;i++){
                                                if(event.target.hasSkill('bhbenghuai'+i)) count++;
                                            }
                                            if(att>0&&event.target.hp>count) return false;
                                            //if(att<0&&event.target.hp<=count) return false;
                                            return true;
                                        });
                                        'step 1'
                                        if(result.bool){
                                            player.logSkill('bhzhongtu',event.target);
                                            player.addTempSkill('bhzhongtu_lm');
                                            event.num=0;
                                            var list=['bhsbenghuai','benghuai','bhbbenghuai'];
                                            for(let i of list){
                                                if(event.target.hasSkill(i)){
                                                    event.target.removeSkill(i);
                                                    player.addSkill(i);
                                                    event.num++;
                                                }
                                            }
                                            for(var i=1;i<=8;i++){
                                                if(event.target.hasSkill('bhbenghuai'+i)){
                                                    event.target.removeSkill('bhbenghuai'+i);
                                                    player.addSkill('bhbenghuai'+i);
                                                    event.num++;
                                                }
                                            }
                                            game.log(player,'获得了',event.target,'的所有〖崩坏〗（共'+get.cnNumber(event.num)+'个）');
                                        } else event.finish();
                                        'step 2'
                                        event.str1='回复'+(event.num)+'点体力';
                                        event.str2='增加'+event.num+'点体力上限';
                                        player.chooseControl(event.str1,event.str2).set('prompt','请选择一项').set('ai',function(){
                                            if(player.maxHp-player.hp>=event.num||(player.hp<=1&&player.maxHp>1)) return event.str1;
                                            else return event.str2;
                                        });
                                        'step 3'
                                        if(result.control==event.str1) player.recover(event.num);
                                        else player.gainMaxHp(event.num);
                                    },
                                },
                                lm:{
                                    sub:true,
                                    charlotte:true,
                                    forced:true,
                                },
                            },
                        },
                        bhbenghuai1: {
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            forced: true,
                            check: function () {
                                return false;
                            },
                            priority:12,
                            filter: function (event, player) {
                                return !player.isMinHp() && !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                            },
                            content: function () {
                                "step 0"
                                player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                    if (player.hp == player.maxHp) return 'baonue_hp';
                                    if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                    return 'baonue_hp';
                                }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                "step 1"
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                            ai: {
                                threaten: 0.5,
                                neg: true,
                            },
                        },
                        bhbenghuai2: {
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            forced: true,
                            check: function () {
                                return false;
                            },
                            priority:11,
                            filter: function (event, player) {
                                return !player.isMinHp() && !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                            },
                            content: function () {
                                "step 0"
                                player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                    if (player.hp == player.maxHp) return 'baonue_hp';
                                    if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                    return 'baonue_hp';
                                }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                "step 1"
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                            ai: {
                                threaten: 0.5,
                                neg: true,
                            },
                        },
                        bhbenghuai3: {
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            forced: true,
                            check: function () {
                                return false;
                            },
                            priority:10,
                            filter: function (event, player) {
                                return !player.isMinHp() && !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                            },
                            content: function () {
                                "step 0"
                                player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                    if (player.hp == player.maxHp) return 'baonue_hp';
                                    if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                    return 'baonue_hp';
                                }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                "step 1"
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                            ai: {
                                threaten: 0.5,
                                neg: true,
                            },
                        },
                        bhbenghuai4: {
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            forced: true,
                            check: function () {
                                return false;
                            },
                            priority:9,
                            filter: function (event, player) {
                                return !player.isMinHp() && !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                            },
                            content: function () {
                                "step 0"
                                player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                    if (player.hp == player.maxHp) return 'baonue_hp';
                                    if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                    return 'baonue_hp';
                                }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                "step 1"
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                            ai: {
                                threaten: 0.5,
                                neg: true,
                            },
                        },
                        bhbenghuai5: {
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            forced: true,
                            check: function () {
                                return false;
                            },
                            priority:8,
                            filter: function (event, player) {
                                return !player.isMinHp() && !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                            },
                            content: function () {
                                "step 0"
                                player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                    if (player.hp == player.maxHp) return 'baonue_hp';
                                    if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                    return 'baonue_hp';
                                }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                "step 1"
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                            ai: {
                                threaten: 0.5,
                                neg: true,
                            },
                        },
                        bhbenghuai6: {
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            forced: true,
                            check: function () {
                                return false;
                            },
                            priority:7,
                            filter: function (event, player) {
                                return !player.isMinHp() && !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                            },
                            content: function () {
                                "step 0"
                                player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                    if (player.hp == player.maxHp) return 'baonue_hp';
                                    if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                    return 'baonue_hp';
                                }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                "step 1"
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                            ai: {
                                threaten: 0.5,
                                neg: true,
                            },
                        },
                        bhbenghuai7: {
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            forced: true,
                            check: function () {
                                return false;
                            },
                            priority:6,
                            filter: function (event, player) {
                                return !player.isMinHp() && !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                            },
                            content: function () {
                                "step 0"
                                player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                    if (player.hp == player.maxHp) return 'baonue_hp';
                                    if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                    return 'baonue_hp';
                                }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                "step 1"
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                            ai: {
                                threaten: 0.5,
                                neg: true,
                            },
                        },
                        bhbenghuai8: {
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            forced: true,
                            check: function () {
                                return false;
                            },
                            priority:5,
                            filter: function (event, player) {
                                return !player.isMinHp() && !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                            },
                            content: function () {
                                "step 0"
                                player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                    if (player.hp == player.maxHp) return 'baonue_hp';
                                    if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                    return 'baonue_hp';
                                }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                "step 1"
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                            ai: {
                                threaten: 0.5,
                                neg: true,
                            },
                        },
                        bhlingwu:{
                            audio: "ext:崩崩崩/audio:2",
                            forced:true,
                            trigger:{
                                player:"bhlingwu_use",
                            },
                            silent:true,
                            mark:true,
                            init:function(player){
                                player.storage.bhlingwu_count=1;
                                player.storage.bhlingwu=[];
                                player.storage.bhlingwu_use=0;
                            },
                            intro:{
                                name:'熠',
                                markcount:function (storage) {
                                    return 0;
                                },
                                mark:function (dialog, storage, player) {
                                    if (!player.storage.bhlingwu.length) return;
                                    dialog.addAuto(player.getExpansions('bhlingwu'));
                                    if(player.hasSkill('bhlingwu_im')){
                                        dialog.addText('失效中');
                                        return;
                                    }
                                    var str='当前项：';
                                    var list=['①颜色','②类型','③花色','④点数','⑤牌名'];
                                    str+='<font color=orange>';
                                    str+=list[player.storage.bhlingwu_count-1];
                                    str+='</font>';
                                    dialog.addText(str);
                                },
                                onunmark:function (storage, player) {
                                    player.storage.bhlingwu=[];
                                },
                            },
                            onremove:function(player){
                                delete player.storage.bhlingwu;
                            },
                            content:function(){
                                'step 0'
                                player.storage.bhlingwu_count++;
                                player.storage.bhlingwu_use++;
                                if(player.storage.bhlingwu_count>5) {
                                    player.storage.bhlingwu_count=1;
                                    event.bool=true;
                                }
                                player.syncStorage('bhlingwu');
                                'step 1'
                                if(player.storage.bhlingwu_use>=3){
                                    player.moveCard();
                                    player.storage.bhlingwu_use=0;
                                }
                                'step 2'
                                if(event.bool&&player.storage.bhlingwu.length>0&&player.countCards('h')){
                                    player.chooseCard('h','你可以用一张手牌交换“熠”').set('ai',function(card){
                                        var val=10,val2=10;
                                        var card2=player.storage.bhlingwu[0];
                                        if(get.type(card)=='equip') val-=6;
                                        if(get.type(card)=='basic') val+=2;
                                        if(get.number(card)<3||get.number(card)>11) val-=6;
                                        if(get.type(card2)=='equip') val-=6;
                                        if(get.type(card2)=='basic') val+=2;
                                        if(get.number(card2)<3||get.number(card2)>11) val-=6;
                                        return val-val2;
                                    });
                                } else event.finish();
                                'step 3'
                                if(result.bool){
                                    event.card=result.cards[0];
                                    if(player.storage.bhlingwu.length>0||player.getExpansions('bhlingwu').length>0) {
                                        player.storage.bhlingwu=[];
                                        var cards=player.getExpansions('bhlingwu');
                                        player.gain(cards,'gain2');
                                    }
                                    player.addToExpansion(event.card,'gain2').gaintag.add('bhlingwu');
                                    player.storage.bhlingwu.push(event.card);
                                    player.syncStorage('bhlingwu');
                                }
                            },
                            group:['bhlingwu_start','bhlingwu_use'],
                            subSkill:{
                                start:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    trigger: { 
                                        global: 'phaseBefore', 
                                        player: ['enterGame','bhxinghai_redo'],
                                    },
                                    filter: function (event, player) {
                                        return (event.name != 'phase' || game.phaseNumber == 0);
                                    },
                                    content: function () {
                                        'step 0'
                                        event.targets=game.filterPlayer(function(target){
                                            return target.identity=='zhu';
                                        });
                                        if(!event.targets.length) event.target=player;
                                        else event.target=event.targets[0];
                                        event.target.chooseCard('h','请选择一张手牌作为'+get.translation(player)+'的“熠”',true).set('ai',function(card){
                                            var att=get.attitude(event.target,player);
                                            var val=10;
                                            if(get.type(card)=='equip') val-=6;
                                            if(get.type(card)=='basic') val+=2;
                                            if(get.number(card)<3||get.number(card)>11) val-=6;
                                            if(att<0) return 10-val+[0,2,4,5].randomGet();
                                            return val;
                                        });
                                        'step 1'
                                        event.card=result.cards[0];
                                        if(player.storage.bhlingwu.length>0||player.getExpansions('bhlingwu').length>0) {
                                            player.storage.bhlingwu=[];
                                            var cards=player.getExpansions('bhlingwu');
                                            player.loseToDiscardpile(cards);
                                        }
                                        player.addToExpansion(event.card,event.target,'give').gaintag.add('bhlingwu');
                                        player.storage.bhlingwu.push(event.card);
                                        player.syncStorage('bhlingwu');
                                    },
                                },
                                use:{
                                    sub:true,
                                    forced:true,
                                    trigger:{
                                        player:'useCard',
                                    },
                                    audio:'bhlingwu',
                                    filter:function(event,player){
                                        return !player.hasSkill('bhlingwu_im');
                                    },
                                    content:function(){
                                        'step 0'
                                        event.card=trigger.card;
                                        event.num=player.storage.bhlingwu_count;
                                        event.card2=player.storage.bhlingwu[0];
                                        player.draw();
                                        'step 1'
                                        if(event.num==1){
                                            event.bool=get.color(event.card)==get.color(event.card2);
                                        } else if(event.num==2) {
                                            if(['trick','delay'].contains(get.type(event.card))) event.bool=['trick','delay'].contains(get.type(event.card2));
                                            else event.bool=get.type(event.card)==get.type(event.card2);
                                        } else if(event.num==3){
                                            event.bool=get.suit(event.card)==get.suit(event.card2);
                                        } else if(event.num==4){
                                            event.bool=get.number(event.card)==get.number(event.card2);
                                        } else {
                                            event.bool=get.name(event.card)==get.name(event.card2);
                                        }
                                        'step 2'
                                        if(event.bool){
                                            event.trigger('bhlingwu_use');
                                        } else {
                                            game.playAudio('..','extension','崩崩崩/audio','bhlingwu_fail');
                                            player.storage.bhlingwu_count=1;
                                            player.syncStorage('bhlingwu');
                                            player.addTempSkill('bhlingwu_im');
                                        }
                                    },
                                },
                                im:{
                                    charlotte:true,
                                    forced:true,
                                },
                            },
                        },
                        bhyantuo:{
                            mark:true,
                            init:function(player){
                                player.storage.bhyantuo_index = 0;
                                player.storage.bhyantuo_cards=['shan','wuxie','空'];
                                player.bhyantuo_use=false;
                            },
                            intro:{
                                name:"延拓",
                                content:function(storage,player){
                                    var str='<li>当前项：';
                                    str+=get.translation(player.storage.bhyantuo_cards[player.storage.bhyantuo_index]);
                                    str+='<br><li>';
                                    str+='所有项：';
                                    var i=0;
                                    for(let j of player.storage.bhyantuo_cards){
                                        i++;
                                        if(i>1) str+=', '
                                        str+='['+i+']';
                                        str+=get.translation(j);
                                    }
                                    return str;
                                },
                                markcount:function(){
                                    return 0;
                                },
                            },
                            group:['bhyantuo_shan','bhyantuo_wuxie','bhyantuo_nul','bhyantuo_res'],
                            subSkill:{
                                res:{
                                    trigger:{
                                        player:["respond","useCard"],
                                    },
                                    filter:function(event,player){
                                        if(!event.respondTo) return false;
                                        return event.respondTo[1]&&player.storage.bhyantuo_use;
                                    },
                                    silent:true,
                                    forced:true,
                                    content:function(){
                                        'step 0'
                                        player.storage.bhyantuo_use=false;
                                        event.cardname=trigger.respondTo[1].name;
                                        event.bool=false;
                                        event.num=parseInt(player.storage.bhyantuo_cards.length/2);
                                        for(var i=0;i<player.storage.bhyantuo_cards.length;i++){
                                            if(player.storage.bhyantuo_cards[i]=='空'){
                                                player.storage.bhyantuo_cards[i]=event.cardname;
                                                event.bool=true;
                                                player.syncStorage('bhyantuo_cards');
                                            }
                                        }
                                        'step 1'
                                        if(!event.bool&&player.countCards('he')>=event.num){
                                            player.chooseCard('你可以重铸'+get.cnNumber(event.num)+'张牌以获得一个新项','he',event.num).set('ai',function(card){
                                                if(player.countCards('he',function(card){
                                                    return get.value(card)<=7.9;
                                                })>=event.num) return 8-get.value(card);
                                                else return -1;
                                            });
                                        } else event.finish();
                                        'step 2'
                                        if(result.bool){
                                            player.loseToDiscardpile(result.cards);
                                            player.draw(event.num);
                                            player.storage.bhyantuo_cards.push('空');
                                            player.syncStorage('bhyantuo_cards');
                                        }
                                    },
                                },
                                shan:{
                                    prompt:"是否发动【延拓】视为使用【闪】?",
                                    audio: "ext:崩崩崩/audio:2",
                                    enable:"chooseToUse",
                                    filter:function(event,player){
                                        var name=player.storage.bhyantuo_cards[player.storage.bhyantuo_index];
                                        return name=='shan'&&player.countCards('he')>0;
                                    },
                                    precontent:function(){
                                        'step 0'
                                        if(player.storage.bhyantuo_cards[player.storage.bhyantuo_cards.length-1]!='空'){
                                            event.bool=true;
                                            player.chooseCard('请选择一张牌分配','he',true).set('ai',function(card){
                                                return 8-get.value(card);
                                            });
                                        } else {
                                            player.chooseToDiscard('请弃置一张牌','he',true).set('ai',function(card){
                                                return 8-get.value(card);
                                            });
                                            event.bool=false;
                                        }
                                        'step 1'
                                        if(!event.bool) event.finish();
                                        else {
                                            event.card=result.cards[0];
                                            player.chooseTarget('将'+get.translation(event.card)+'分配给一名其他角色',function(card,player,target){
                                                return target!=player;
                                            },true).set('ai',function(target){
                                                var att=get.attitude(player,target);
                                                if(att<0) return -2;
                                                return att+10-target.countCards('he');
                                            });
                                        }
                                        'step 2'
                                        result.targets[0].gain(event.card,player,'give');
                                    },
                                    onuse:function(result,player){
                                        player.storage.bhyantuo_index++;
                                        if(player.storage.bhyantuo_index>=player.storage.bhyantuo_cards.length) player.storage.bhyantuo_index=0;
                                        player.syncStorage('bhyantuo_index');
                                        player.storage.bhyantuo_use=true;
                                    },
                                    filterCard:false,
                                    position:"he",
                                    selectCard:0,
                                    viewAs:{
                                        name:"shan",
                                    },
                                    ai:{
                                        skillTagFilter:function(player){
                                            return player.storage.bhyantuo_index==0;
                                        },
                                        threaten:1.5,
                                        respondShan:true,
                                        order:3,
                                        basic:{
                                            useful:[7,5.1,2],
                                            value:[7,5.1,2],
                                        },
                                        result:{
                                            player:1,
                                        },
                                    },
                                },
                                wuxie:{
                                    enable:"chooseToUse",
                                    audio:"bhyantuo_shan",
                                    prompt:"是否发动【延拓】视为使用【无懈可击】?",
                                    viewAsFilter:function(player){
                                        var name=player.storage.bhyantuo_cards[player.storage.bhyantuo_index];
                                        return name=='wuxie'&&player.countCards('he')>0;
                                    },
                                    precontent:function(){
                                        'step 0'
                                        if(player.storage.bhyantuo_cards[player.storage.bhyantuo_cards.length-1]!='空'){
                                            event.bool=true;
                                            player.chooseCard('请选择一张牌分配','he',true).set('ai',function(card){
                                                return 8-get.value(card);
                                            });
                                        } else {
                                            player.chooseToDiscard('请弃置一张牌','he',true).set('ai',function(card){
                                                return 8-get.value(card);
                                            });
                                            event.bool=false;
                                        }
                                        'step 1'
                                        if(!event.bool) event.finish();
                                        else {
                                            event.card=result.cards[0];
                                            player.chooseTarget('将'+get.translation(event.card)+'分配给一名其他角色',function(card,player,target){
                                                return target!=player;
                                            },true).set('ai',function(target){
                                                var att=get.attitude(player,target);
                                                if(att<0) return -2;
                                                return att+10-target.countCards('he');
                                            });
                                        }
                                        'step 2'
                                        result.targets[0].gain(event.card,player,'give');
                                    },
                                    onuse:function(result,player){
                                        player.storage.bhyantuo_index++;
                                        if(player.storage.bhyantuo_index>=player.storage.bhyantuo_cards.length) player.storage.bhyantuo_index=0;
                                        player.syncStorage('bhyantuo_index');
                                        player.storage.bhyantuo_use=true;
                                    },
                                    filterCard:false,
                                    position:"he",
                                    selectCard:0,
                                    viewAs:{
                                        name:"wuxie",
                                    },
                                    ai:{
                                        basic:{
                                            useful:[6,4,3],
                                            value:[6,4,3],
                                        },
                                        result:{
                                            player:1,
                                        },
                                        expose:0.2,
                                    },
                                },
                                nul:{
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhyantuo_cards[player.storage.bhyantuo_index]=='空'||player.storage.bhyantuo_use;
                                    },
                                    silent:true,
                                    forced:true,
                                    charlotte:true,
                                    sub:true,
                                    content:function(){
                                        'step 0'
                                        while(player.storage.bhyantuo_cards[player.storage.bhyantuo_index]=='空'){
                                            player.storage.bhyantuo_index++;
                                            if(player.storage.bhyantuo_index>=player.storage.bhyantuo_cards.length) player.storage.bhyantuo_index=0;
                                            player.syncStorage('bhyantuo_index');
                                        }
                                        player.storage.bhyantuo_use=false;
                                    },
                                },
                            },
                            audio: "ext:崩崩崩/audio:2",
                            enable:"chooseToUse",
                            filter:function(event,player){
                                var name=player.storage.bhyantuo_cards[player.storage.bhyantuo_index];
                                if(name=='空'||name=='shan'||name=='wuxie') return false;
                                return event.type!='wuxie'&&event.type!='respondShan'&&player.countCards('he')>0;
                            },
                            hiddenCard:function(player,name){
                                return (player.countCards('he')>0&&player.storage.bhyantuo_cards[player.storage.bhyantuo_index]==name&&lib.inpile.contains(name));
                            },
                            onremove:true,
                            chooseButton:{
                                dialog:function(event,player){
                                    var list=[];
                                    var name=player.storage.bhyantuo_cards[player.storage.bhyantuo_index];
                                    if(name=='sha'){
                                        list.push(['基本','','sha']);
                                        for(var j of lib.inpile_nature) list.push(['基本','','sha',j]);
                                    }
                                    else if(get.type(name)=='trick') list.push(['锦囊','',name]);
                                    else if(get.type(name)=='basic') list.push(['基本','',name]);
                                    return ui.create.dialog('延拓',[list,'vcard']);
                                },
                                filter:function(button,player){
                                    return _status.event.getParent().filterCard({name:button.link[2]},player,_status.event.getParent());
                                },
                                check:function(button){
                                    var player=_status.event.player;
                                    if(player.countCards('hs',button.link[2])>0) return 0;
                                    if(button.link[2]=='wugu') return 0;
                                    var effect=player.getUseValue(button.link[2]);
                                    if(effect>0) return effect;
                                    return 0;
                                },
                                backup:function(links,player){
                                    return {
                                        filterCard:false,
                                        audio:'bhyantuo',
                                        selectCard:0,
                                        popname:true,
                                        check:function(card){
                                            return 6-get.value(card);
                                        },
                                        position:'he',
                                        viewAs:{name:links[0][2],nature:links[0][3]},
                                        precontent:function(){
                                            'step 0'
                                            if(player.storage.bhyantuo_cards[player.storage.bhyantuo_cards.length-1]!='空'){
                                                event.bool=true;
                                                player.chooseCard('请选择一张牌分配','he',true).set('ai',function(card){
                                                    return 8-get.value(card);
                                                });
                                            } else {
                                                player.chooseToDiscard('请弃置一张牌','he',true).set('ai',function(card){
                                                    return 8-get.value(card);
                                                });
                                                event.bool=false;
                                            }
                                            'step 1'
                                            if(!event.bool) event.finish();
                                            else {
                                                event.card=result.cards[0];
                                                player.chooseTarget('将'+get.translation(event.card)+'分配给一名其他角色',function(card,player,target){
                                                    return target!=player;
                                                },true).set('ai',function(target){
                                                    var att=get.attitude(player,target);
                                                    if(att<0) return -2;
                                                    return att+10-target.countCards('he');
                                                });
                                            }
                                            'step 2'
                                            result.targets[0].gain(event.card,player,'give');
                                        },
                                        onuse:function(result,player){
                                            player.storage.bhyantuo_index++;
                                            if(player.storage.bhyantuo_index>=player.storage.bhyantuo_cards.length) player.storage.bhyantuo_index=0;
                                            player.syncStorage('bhyantuo_index');
                                            player.storage.bhyantuo_use=true;
                                        },
                                    }
                                },
                                prompt:function(links,player){
                                    return '视为使用'+(get.translation(links[0][3])||'')+get.translation(links[0][2])+'';
                                },
                            },
                            ai:{
                                skillTagFilter:function(player){
                                    if(!player.countCards('he')) return false;
                                    if(!player.storage.bhyantuo_cards[player.storage.bhyantuo_index]=='tao'){}
                                    else if(player.isDying()&&!player.storage.bhyantuo_cards[player.storage.bhyantuo_index]=='jiu'){}
                                    else return false;
                                },
                                order:4.3,
                                result:{
                                    player:function(player){
                                        var allshown=true,players=game.filterPlayer();
                                        for(var i=0;i<players.length;i++){
                                            if(players[i].ai.shown==0){
                                                allshown=false;
                                            }
                                            if(players[i]!=player&&players[i].countCards('h')&&get.attitude(player,players[i])>0){
                                                return 1;
                                            }
                                        }
                                        if(allshown) return 1;
                                        return 0;
                                    },
                                },
                                threaten:1.9,
                            },
                        },
                        bhyili:{
                            audio: "ext:崩崩崩/audio:2",
                            enable:"phaseUse",
                            usable:1,
                            filter:function(event,player){
                                return player.countCards('h') && game.hasPlayer(function(current){
                                    return current!=player && current.countCards('h');
                                });
                            },
                            filterTarget:function(card,player,target){
                                return target!=player && target.countCards('h');
                            },
                            content:function(){
                                'step 0'
                                event.target=targets[0];
                                player.chooseCard('请选择一张手牌展示','h',true).set('ai',function(card){
                                    if(player.hp<2&&get.suit(card)=='heart') return 18;
                                    else if(player.hp>1 && get.color(card)!='red') return 10;
                                    else return [2,4,6].randomGet();
                                });
                                'step 1'
                                event.card1=result.cards[0];
                                event.target.chooseCard('请选择一张手牌展示','h',true).set('ai',function(card){
                                    if([0,1,0].randomGet() == 1 && get.suit(card)==get.suit(event.card1)) return 20; 
                                    if(player.hp<2&&get.suit(card)=='heart') return 18;
                                    else if(player.hp>1 && get.color(card)!='red') return 10;
                                    else return [2,4,6].randomGet();
                                });
                                'step 2'
                                event.card2=result.cards[0];
                                player.showCards(event.card1);
                                event.target.showCards(event.card2);
                                event.suits=[];
                                event.suits.push(get.suit(event.card1));
                                if(!event.suits.contains(get.suit(event.card2))) event.suits.push(get.suit(event.card2));
                                event.cards=get.cards(8);
                                event.index=0;
                                'step 3'
                                player.showCards(event.cards[event.index]);
                                if(!event.suits.contains(get.suit(event.cards[event.index]))) event.suits.push(get.suit(event.cards[event.index]));
                                'step 4'
                                event.index++;
                                if(event.index<event.cards.length && event.suits.length<4) event.goto(3);
                                'step 5'
                                event.suits2=[];
                                for(var i=0;i<event.index;i++){
                                    if(!event.suits2.contains(get.suit(event.cards[i]))) event.suits2.push(get.suit(event.cards[i]));
                                }
                                event.suits2.push('cancel');
                                player.chooseControl(event.suits2).set('prompt','你可以选择一种花色的亮出牌获得之').set('ai',function(){
                                    if(player.hasSkill('bhyantuo')&&player.countCards('hs')>2&&event.suits2.length<3) return 'cancel';
                                    else {
                                        var list = event.suits2;
                                        list.remove('cancel');
                                        return list.randomGet();
                                    }
                                });
                                'step 6'
                                event.choice1=result.control;
                                if(event.choice1!='cancel') event.suits2.remove(event.choice1);
                                event.target.chooseControl(event.suits2).set('prompt','你可以选择一种花色的亮出牌获得之').set('ai',function(){
                                    var list = event.suits2;
                                    list.remove('cancel');
                                    return list.randomGet();
                                });
                                'step 7'
                                event.choice2=result.control;
                                event.suits2.remove(event.choice2);
                                event.suits2.remove('cancel');
                                event.cards1=[];
                                event.cards2=[];
                                event.cards3=[];
                                event.cards4=[];
                                for(var i=0;i<event.index;i++){
                                    if(get.suit(event.cards[i])==event.choice1) event.cards1.push(event.cards[i]);
                                    else if(get.suit(event.cards[i])==event.choice2) event.cards2.push(event.cards[i]);
                                    else if(event.suits2.contains(get.suit(event.cards[i]))) event.cards3.push(event.cards[i]);
                                    else event.cards4.push(event.cards[i]);
                                }
                                'step 8'
                                if(event.cards1.length>0) player.gain(event.cards1,'gain2');
                                if(event.cards2.length>0) event.target.gain(event.cards2,'gain2');
                                'step 9'
                                if(event.cards3.length>0&&player.hasSkill('bhyantuo')){
                                    player.chooseButton(['你可以将一张牌的牌名填入〖延拓〗的空项中',event.cards3],function(button){
                                        if(['equip','delay'].contains(get.type(button.link))&&player.storage.bhyantuo_cards[player.storage.bhyantuo_cards.length-1]!='空') return -10;
                                        return player.getUseValue({name:button.link.name});
                                    });
                                } else event.goto(13);
                                'step 10'
                                if(result.bool&&result.links){
                                    event.cardname=result.links[0].name;
                                    event.bool=false;
                                    event.num=parseInt(player.storage.bhyantuo_cards.length/2);
                                    
                                    for(var i=0;i<player.storage.bhyantuo_cards.length;i++){
                                        if(player.storage.bhyantuo_cards[i]=='空'){
                                            player.storage.bhyantuo_cards[i]=event.cardname;
                                            event.bool=true;
                                            player.syncStorage('bhyantuo_cards');
                                        }
                                    }
                                    
                                } else event.goto(13);
                                'step 11'
                                if(!event.bool&&player.countCards('he')>=event.num){
                                    player.chooseCard('你可以重铸'+get.cnNumber(event.num)+'张牌以获得一个〖延拓〗的新项','he',event.num).set('ai',function(card){
                                        if(player.countCards('he',function(card){
                                            return get.value(card)<=7.9;
                                        })>=event.num) return 8-get.value(card);
                                        else return -1;
                                    });
                                } else event.goto(13);
                                'step 12'
                                if(result.bool){
                                    player.loseToDiscardpile(result.cards);
                                    player.draw(event.num);
                                    player.storage.bhyantuo_cards.push('空');
                                    player.syncStorage('bhyantuo_cards');
                                }
                                'step 13'
                                game.cardsDiscard(event.cards3);
                                game.cardsDiscard(event.cards4);
                            },
                            ai:{
                                order:9,
                                result:{
                                    player:2,
                                    target:2,
                                },
                            },
                        },
                        bhxiachen:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:["useCardAfter","damageEnd"],
                            },
                            filter:function(event,player){
                                if(event.player==player) return false;
                                if(!event.player.isAlive()) return false;
                                if(event.name=='useCard'&&event.card.name!="sha") return false;
                                var cards=player.getCards('he',function(card){
                                    var name=card.name;
                                    if(get.type(card)=='basic') return false;
                                    if(lib.translate[name]&&lib.translate[name].indexOf("杀")!=-1) return true;
                                    if(lib.translate[name+"_info"]&&lib.translate[name+"_info"].indexOf("杀")!=-1) return true;
                                    return false;
                                });
                                if(!cards||!cards.length) return false;
                                return player.inRange(event.player);
                            },
                            logTarget:function(event,player){
                                return event.player;
                            },
                            check:function(event,player){
                                return get.attitude(player,event.player)>0;
                            },
                            content:function(){
                                'step 0'
                                event.player=player;
                                event.trigger('bhxiachen_use');
                                event.target=trigger.player;
                                'step 1'
                                player.chooseCard('请选择一张牌面带有“杀”字的非基本牌交给'+get.translation(event.target),'he',function(card){
                                    var name=card.name;
                                    if(get.type(card)=='basic') return false;
                                    if(lib.translate[name]&&lib.translate[name].indexOf("杀")!=-1) return true;
                                    if(lib.translate[name+"_info"]&&lib.translate[name+"_info"].indexOf("杀")!=-1) return true;
                                    return false;
                                },true).set('ai',function(card){
                                    return event.target.getUseValue(card)-get.value(card)+6;
                                });
                                'step 2'
                                event.card=result.cards[0];
                                event.target.gain(event.card,player,'give');
                                if(game.hasPlayer(function(current){
                                    return event.target.canUse(event.card,current);
                                })){
                                    event.target.chooseUseTarget("你可以选择目标使用"+get.translation(event.card),event.card);
                                } else {
                                    event._result = { bool: false };
                                }
                                'step 3'
                                if(result.bool){
                                    if(event.target.hasSkill('bhxiachen')) return;
                                    else if(event.target.hasSkill('bhxiachen_limited')||event.target.storage.bhxiachen_limited==true){
                                        event.target.restoreSkill("bhxiachen_limited");
                                        event.target.storage.bhxiachen_limited=false;
                                        game.log(event.target,'重置了限定技','#g【侠忱】');
                                    } else if(!event.target.hasSkill('bhxiachen_limited')){
                                        event.target.storage.bhxiachen_limited=false;
                                        event.target.addSkill('bhxiachen_limited');
                                        game.log(event.target,'获得了带有限定技标签的','#g【侠忱】');
                                    }
                                }
                            },
                            group:'bhxiachen_draw',
                            subSkill:{
                                draw:{
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger:{
                                        global:"bhxiachen_use",
                                    },
                                    init:function(player){
                                        player.storage.bhxiachen_draw=[];
                                    },
                                    filter:function(event,player){
                                        if(player.storage.bhxiachen_draw.contains(event.player)) return false;
                                        return event.player!=player;
                                    },
                                    prompt2:"其他角色发动“侠忱”时，你可以摸一张牌。",
                                    content:function(){
                                        'step 0'
                                        event.player=player;
                                        player.storage.bhxiachen_draw.push(trigger.player);
                                        'step 1'
                                        event.trigger("bhxiachen_use");
                                        'step 2'
                                        player.draw();
                                        player.storage.bhxiachen_draw=[];
                                    },
                                },
                            },
                        },
                        bhxiachen_limited:{
                            audio:'bhxiachen',
                            trigger:{
                                global:["useCardAfter","damageEnd"],
                            },
                            limited:true,
                            skillAnimation: true,
                            animationColor: "gray",
                            logTarget:function(event,player){
                                return event.player;
                            },
                            filter:function(event,player){
                                if(event.player==player) return false;
                                if(!event.player.isAlive()) return false;
                                if(event.name=='useCard'&&event.card.name!="sha") return false;
                                var cards=player.getCards('he',function(card){
                                    var name=card.name;
                                    if(get.type(card)=='basic') return false;
                                    if(lib.translate[name]&&lib.translate[name].indexOf("杀")!=-1) return true;
                                    if(lib.translate[name+"_info"]&&lib.translate[name+"_info"].indexOf("杀")!=-1) return true;
                                    return false;
                                });
                                if(!cards||!cards.length) return false;
                                return player.inRange(event.player);
                            },
                            check:function(event,player){
                                return get.attitude(player,event.player)>0;
                            },
                            content:function(){
                                'step 0'
                                player.awakenSkill("bhxiachen_limited");
                                player.storage.bhxiachen_limited=true;
                                'step 1'
                                event.player=player;
                                event.trigger('bhxiachen_use');
                                event.target=trigger.player;
                                'step 2'
                                player.chooseCard('请选择一张牌面带有“杀”字的非基本牌交给'+get.translation(event.target),'he',function(card){
                                    var name=card.name;
                                    if(get.type(card)=='basic') return false;
                                    if(lib.translate[name]&&lib.translate[name].indexOf("杀")!=-1) return true;
                                    if(lib.translate[name+"_info"]&&lib.translate[name+"_info"].indexOf("杀")!=-1) return true;
                                    return false;
                                },true).set('ai',function(card){
                                    return event.target.getUseValue(card)-get.value(card)+6;
                                });
                                'step 3'
                                event.card=result.cards[0];
                                event.target.gain(event.card,player,'give');
                                if(game.hasPlayer(function(current){
                                    return event.target.canUse(event.card,current);
                                })){
                                    event.target.chooseUseTarget("你可以选择目标使用"+get.translation(event.card),event.card).set('ai',function(card){
                                        if(event.target.hasSkill('bhxiachen')&&event.target.countCards('e',{subtype:get.subtype(card)})>0){
                                            return get.value(card)-get.value(event.target.getCards('e',{subtype:get.subtype(card)})[0]);
                                        }
                                        return 10;
                                    });
                                } else {
                                    event._result = { bool: false };
                                }
                                'step 4'
                                if(result.bool){
                                    if(event.target.hasSkill('bhxiachen')) return;
                                    else if(event.target.hasSkill('bhxiachen_limited')||event.target.storage.bhxiachen_limited==true){
                                        event.target.restoreSkill("bhxiachen_limited");
                                        event.target.storage.bhxiachen_limited=false;
                                        game.log(event.target,'重置了限定技','#g【侠忱】');
                                    } else if(!event.target.hasSkill('bhxiachen_limited')){
                                        event.target.storage.bhxiachen_limited=false;
                                        event.target.addSkill('bhxiachen_limited');
                                        game.log(event.target,'获得了带有限定技标签的','#g【侠忱】');
                                    }
                                }
                            },
                            group:'bhxiachen_limited_draw',
                            subSkill:{
                                draw:{
                                    audio:'bhxiachen_draw',
                                    trigger:{
                                        global:"bhxiachen_use",
                                    },
                                    skillAnimation: true,
                                    animationColor: "gray",
                                    init:function(player){
                                        player.storage.bhxiachen_draw=[];
                                    },
                                    filter:function(event,player){
                                        if(player.storage.bhxiachen_draw.contains(event.player)) return false;
                                        return event.player!=player;
                                    },
                                    check:function(event,player){
                                        if(game.filterPlayer(function(current){
                                            return current.hasSkill("bhxiachen")||current.hasSkill("bhxiachen_limited");
                                        }).length>=3) return true;
                                        if(player.countCards("hs")<2&&player.hp<=2) return true;
                                        return false;
                                    },
                                    prompt2:"限定技，其他角色发动“侠忱”时，你可以摸一张牌。",
                                    content:function(){
                                        'step 0'
                                        player.awakenSkill("bhxiachen_limited");
                                        player.storage.bhxiachen_limited=true;
                                        'step 1'
                                        event.player=player;
                                        player.storage.bhxiachen_draw.push(trigger.player);
                                        'step 2'
                                        event.trigger("bhxiachen_use");
                                        'step 3'
                                        player.draw();
                                        player.storage.bhxiachen_draw=[];
                                    },
                                },
                            },
                        },
                        bhhuiyu:{
                            trigger:{
                                player:"useCard",
                            },
                            frequent:true,
                            silent:true,
                            filter:function(event,player){
                                if(event.targets.length!=1) return false;
                                if(get.tag(event.card,'damage')){
                                    if(game.hasPlayer(function(current){
                                        return player.canUse(event.card,current)&&current.hp==current.maxHp;
                                    })) return true;
                                } else {
                                    if(game.hasPlayer(function(current){
                                        return player.canUse(event.card,current)&&current.hp<current.maxHp;
                                    })) return true;
                                }
                                return false;
                            },
                            content:function(){
                                'step 0'
                                player.chooseTarget('你可以选择一名角色作为额外目标',1,function(card,player,target){
                                    if(target==trigger.targets[0]) return false;
                                    if(get.tag(trigger.card,'damage')){
                                        return player.canUse(trigger.card,target)&&target.hp==target.maxHp;
                                    } else {
                                        return player.canUse(trigger.card,target)&&target.hp<target.maxHp;
                                    }
                                }).set('ai',function(target){
                                    return get.effect(target,trigger.card,player,player);
                                });
                                'step 1'
                                if(result.bool){
                                    player.logSkill('bhhuiyu');
                                    trigger.targets.push(result.targets[0]);
                                    trigger.targets.sortBySeat();
                                }
                            },
                        },
                        bhhuiyan:{},
                        bhjiwang:{
                            init:function(player){
                                player.storage.bhjiwang=0;
                            },
                            enable:'chooseToUse',
                            viewAs:{name:'zhibi'},
                            filter:function(event,player){
                                return player.countCards('h')>=Math.min(5,player.getAttackRange()+player.storage.bhjiwang);
                            },
                            filterCard:true,
                            selectCard:function(player){
                                var player=_status.currentPhase;
                                return Math.min(5,player.getAttackRange()+player.storage.bhjiwang);
                            },
                            selectTarget:1,
                            filterTarget:function(card,player,target){
                                return player.canUse('zhibi',target);
                            },
                            precontent:function(){
                                player.addTempSkill('bhjiwang_af');
                            },
                            mod:{
                                attackFrom:function(from,to,distance){
                                    if(from.storage.bhjiwang) return distance-from.storage.bhjiwang;
                                    else return distance;
                                }
                            },
                            ai:{
                                order:7.5,
                                result:{
                                    player:1,
                                },
                            },
                            group:'bhjiwang_after',
                            subSkill:{
                                af:{
                                    forced:true,
                                    sub:true,
                                    charlotte:true,
                                },
                                after:{
                                    forced:true,
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    filter:function(event,player){
                                        return player.hasSkill('bhjiwang_af')&&event.card.name=='zhibi';
                                    },
                                    content:function(){
                                        'step 0'
                                        player.storage.bhjiwang++;
                                        player.syncStorage('bhjiwang');
                                        event.targets=trigger.targets;
                                        event.num=0;
                                        event.cardlen=trigger.cards.length;
                                        'step 1'
                                        event.target=event.targets[event.num];
                                        if(event.target.countCards('h')<event.cardlen) event.goto(5);
                                        'step 2'
                                        event.target.chooseCard('h','你可以将'+get.cnNumber(event.cardlen)+'张手牌当做【远交近攻】或者【杀】对'+get.translation(player)+'使用',event.cardlen)
                                            .set('ai',function(card){
                                                if(event.cardlen>4) return false;
                                                var att=get.attitude(event.target,player);
                                                if(att<0){
                                                    if(event.cardlen<=2) return 8;
                                                    if(player.hp<=1) return 8;
                                                    if(event.target.countCards('h',function(card){
                                                        return get.value(card)<7;
                                                    })>=event.cardlen) return 6;
                                                    return -1;
                                                } else {
                                                    if(event.cardlen==5) return [-1,-1,-1,1].randomGet();
                                                    else return 10;
                                                }
                                            });
                                        'step 3'
                                        if(result.bool){
                                            event.cards=result.cards;
                                            event.target.chooseControl('远交近攻','杀').set('prompt','请选择要使用的牌名').set('ai',function(){
                                                if(get.attitude(event.target,player)<0) return '杀';
                                                else return '远交近攻';
                                            });
                                        } else event.goto(5);
                                        'step 4'
                                        if(result.control=='杀'){
                                            event.target.useCard({name:'sha',cards:event.cards},event.cards,player,false).viewAs=true;
                                        } else {
                                            event.target.useCard({name:'yuanjiao',cards:event.cards},event.cards,player,false).viewAs=true;
                                        }
                                        'step 5'
                                        event.num++;
                                        if(event.num<event.targets.length) event.goto(1);
                                    },
                                },
                            },
                        },
                        bhshenkong:{
                            mod:{
                                globalFrom:function(from,to,distance){
                                    return distance+2;
                                },
                                globalTo:function(from,to,distance){
                                    return distance+2;
                                }
                            },
                        },
                        bhqunxing:{
                            // init:function(player){
                            //     player.addToExpansion(get.cards(10),'gain2').gaintag.add('bhqunxing');
                            // },
                            intro:{
                                content:"expansion",
                                markcount:"expansion",
                            },
                            mark:true,
                            enable:["chooseToUse"],
                            hiddenCard:function(player,name){
                                if(!game.hasPlayer(function(current){
                                    return player.canUse({name:name},current);
                                })&&!['shan','wuxie'].contains(name)) return false;
                                if(player.countCards('h',{name:name})) return false;
                            },
                            filter:function(event,player){
                                // if(player.hasSkill('bhqunxing_im')) return false;
                                if(!player.getExpansions('bhqunxing')) return false;
                                for(let i of player.getExpansions('bhqunxing')){
                                    if(event.filterCard({name:i.name},player,event)&&!player.hasCard('h',{name:i.name})) return true;
                                }
                                return false;
                            },
                            chooseButton:{
                                dialog:function(event,player){
                                    var list=[];
                                    var cardList=player.getExpansions('bhqunxing');
                                    for (var i = 0; i < cardList.length; i++) {
                                        if (get.type(cardList[i]) == 'trick' && event.filterCard({ name: cardList[i].name}, player, event)) list.push(['锦囊', '', cardList[i].name]);
                                    }
                                    return ui.create.dialog('群星',cardList,'hidden');
                                },
                                filter:function(button,player){
                                    var evt=_status.event.getParent();
                                    return evt.filterCard({
                                        name:get.name(button.link,player),
                                        nature:get.nature(button.link,player),
                                        isCard:true,
                                    },player,evt);
                                },
                                check:function(button){
                                    var player=_status.event.player;
                                    var card={name:button.link};
                                    if(_status.event.getParent().type!='phase'||game.hasPlayer(function(current){
                                        return player.canUse(card,current)&&get.effect(current,card,player,player)>0;
                                    })){
                                        switch(button.link){
                                            case 'tao':case 'shan':return 5;
                                            case 'jiu':{
                                                if(player.storage.yizan&&player.countCards('hs',{type:'basic'})>2) return 3;
                                            };
                                            case 'sha':
                                                return 2.9;
                                            default: return [2,3,4].randomGet();
                                        }
                                    }
                                    return 0;
                                },
                                backup:function(links,player){
                                    return {
                                        filterCard:function(card,player,target){
                                            return false;
                                        },
                                        selectCard:-1,
                                        viewAs:{name:links[0].name},
                                        position:'hes',
                                        popname:true,
                                        // precontent:function(){
                                        //     'step 0'
                                        //     event.cardname=links[0][2];
                                        //     player.showCards();
                                        //     var list=player.getExpansions('bhqunxing');
                                        //     player.chooseButton(1,['请选择一张同名“群星”牌移去',[list]],true).set('filterButton',function(button){
                                        //         return button.link[0].name==event.cardname;
                                        //     });
                                        //     'step 1'
                                        //     player.loseToDiscardpile(result.links[0]);
                                        // },
                                        onuse: function (result, player) {
                                            player.showCards(player.getCards('h'));
                                            player.loseToDiscardpile(links[0]);
                                        },
                                    }
                                },
                                prompt:function(links,player){
                                    return '移去一张同名“群星”牌以视为使用'+get.translation(links[0]);
                                },
                            },
                            ai:{
                                order:function(){
                                    var player=_status.event.player;
                                    var event=_status.event;
                                    if(event.filterCard({name:'jiu'},player,event)&&get.effect(player,{name:'jiu'})>0&&player.storage.yizan&&player.countCards('hs',{type:'basic'})>2){
                                        return 3.3;
                                    }
                                    return 3.1;
                                },
                                skillTagFilter:function(player,tag,arg){
                                    if(tag=='fireAttack') return true;
                                    if(!player.countCards('hes')) return false;
                                    if(!player.hasCard(function(card){
                                        return get.type(card)=='basic';
                                    },'hes')){
                                        return false;
                                    }
                                },
                                result:{
                                    player:1,
                                },
                                respondSha:true,
                                respondShan:true,
                                fireAttack:true,
                            },
                            group:'bhqunxing_getcard',
                            subSkill:{
                                im:{
                                    forced:true,
                                    charlotte:true,
                                    sub:true,
                                },
                                getcard:{
                                    trigger:{
                                        global:'useCardAfter',
                                    },
                                    prompt2:'每回合限一次，你可以将攻击范围内的其他角色出牌阶段使用的非转化普通锦囊牌于结算后置于角色卡上。',
                                    filter:function(event,player){
                                        if(player.hasSkill('bhqunxing_im')) return false;
                                        if(get.type(event.card)!='trick') return false;
                                        if(!event.player.isPhaseUsing()) return false;
                                        if(event.player==player) return false;
                                        if(event.cards.length!=1) return false;
                                        if(event.cards[0].name!=event.card.name) return false;
                                        return player.inRange(event.player);
                                    },
                                    content:function(){
                                        player.addToExpansion(trigger.cards,'gain2').gaintag.add('bhqunxing');
                                        player.addTempSkill('bhqunxing_im');
                                    },
                                },
                            },
                        },
                        bhbuqu:{
                            audio:'gzbuqu',
                            trigger:{
                                player:"changeHp",
                            },
                            filter:function(event,player){
                                return player.hp<=0&&event.num<0;
                            },
                            init:function(player){
                                if(!player.storage.bhbuqu) player.storage.bhbuqu=[];
                            },
                            intro:{
                                content:"cards",
                            },
                            group:"bhbuqu_recover",
                            forced:true,
                            locked:false,
                            ondisable:true,
                            onremove:function(player){
                                if(player.storage.bhbuqu.length){
                                    delete player.nodying;
                                    player.hp=1-player.storage.bhbuqu.length;
                                    game.log(player,'移去了不屈牌',player.storage.bhbuqu);
                                    game.cardsDiscard(player.storage.bhbuqu);
                                    player.storage.bhbuqu=[];
                                    player.unmarkSkill('bhbuqu');
                                    player.dying({});
                                }
                            },
                            process:function(player){
                                delete player.nodying;
                                player.markSkill('bhbuqu');
                                player.syncStorage('bhbuqu');
                                var nums=[];
                                var cards=player.storage.bhbuqu;
                                for(var i=0;i<cards.length;i++){
                                    if(nums.contains(get.number(cards[i]))){
                                        return;
                                    }
                                    else{
                                        nums.push(get.number(cards[i]));
                                    }
                                }
                                player.nodying=true;
                            },
                            subSkill:{
                                recover:{
                                    trigger:{
                                        player:"changeHp",
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhbuqu.length>0&&event.num>0;
                                    },
                                    forced:true,
                                    popup:false,
                                    content:function(){
                                        'step 0'
                                        event.count=trigger.num;
                                        'step 1'
                                        event.count--;
                                        if((player.hp+player.storage.bhbuqu.length)>1){
                                            player.chooseCardButton('移去一张不屈牌',true,player.storage.bhbuqu).set('ai',function(button){
                                                var buttons=get.selectableButtons();
                                                for(var i=0;i<buttons.length;i++){
                                                    if(buttons[i]!=button&&
                                                        get.number(buttons[i].link)==get.number(button.link)&&
                                                        !ui.selected.buttons.contains(buttons[i])){
                                                        return 1;
                                                    }
                                                }
                                                return 0;
                                            });
                                        }
                                        'step 2'
                                        for(var i=0;i<result.links.length;i++){
                                            result.links[i].discard();
                                            player.storage.bhbuqu.remove(result.links[i]);
                                        }
                                        player.$throw(result.links);
                                        game.log(player,'移去了不屈牌',result.links);
                                        if(event.count&&player.storage.bhbuqu.length>0) event.goto(1);
                                        'step 3'
                                        lib.skill.bhbuqu.process(player);
                                    },
                                    sub:true,
                                },
                            },
                            content:function(){
                                'step 0'
                                var num=(-trigger.num-Math.max(player.hp-trigger.num,1)+1);
                                var cards=get.cards(num);
                                game.cardsGotoSpecial(cards);
                                player.storage.bhbuqu.addArray(cards);
                                //event.trigger("addCardToStorage");
                                player.showCards(get.translation(player)+'的不屈牌',player.storage.bhbuqu);
                                'step 1'
                                lib.skill.bhbuqu.process(player);
                            },
                            ai:{
                                mingzhi:true,
                            },
                        },
                        bhshendeng:{
                            enable:'phaseUse',
                            usable:1,
                            init:function(player){
                                player.storage.bhshendeng=0;
                            },
                            filter:function(event,player){
                                return player.storage.bhshendeng<3;
                            },
                            content:function(){
                                'step 0'
                                var skills1=['lianying','xinzhan','yicong','kuanggu','jushou','yizhong','bhbuqu','leiji'];
                                var skillBool=false;
                                for(let i of skills1){
                                    if(player.hasSkill(i)) skillBool=true;
                                }

                                event.skillsCard=['bhshendeng_caifu','bhshendeng_zhishi','bhshendeng_kongjian','bhshendeng_weili','bhshendeng_shike','bhshendeng_lunhui','bhshendeng_shengming','bhshendeng_famen'];
                                if(skillBool) event.skillsCard.push('bhshendeng_weilai');
                                event.skillsPool=[['lianying','zhiheng','rerende'],['xinzhan','guanxing','jizhi'],['yicong','feiying','benxi'],['kuanggu','qiangxi','zhuiji'],['jushou','keji','fangzhu'],['yizhong','zhenwei','weimu'],['bhbuqu','qingnang','niepan'],['leiji','reguicai','bazhen']];

                                player.chooseButton(1, ['请许愿吧！', [event.skillsCard, "vcard"]], true, function (button) {
                                    if(event.skillsCard.contains('bhshendeng_weilai')&&button.link[2]=='bhshendeng_weilai') {
                                        return [1,1,0].randomGet()>0?11:9;
                                    } else {
                                        return [8,6,4,10,2].randomGet();
                                    }
                                }).set('filterButton',function(button){
                                    for(var i=0;i<8;i++){
                                        if(player.hasSkill(event.skillsPool[i][0])&&button.link[2]==event.skillsCard[i]) return false;
                                    }
                                    return true;
                                });
                                'step 1'
                                var skillsCard=[];
                                for(var i=0;i<8;i++){
                                    if(player.hasSkill(event.skillsPool[i][0])) skillsCard.push(event.skillsCard[i]);
                                }
                                if(result.links[0][2]=='bhshendeng_weilai'){
                                    player.chooseButton(1, ['你想要的[未来]是....?', [skillsCard, "vcard"]], true, function (button) {
                                        for(let i of skillsCard){
                                            if(player.hasSkill(i)&&button.link[2]==i) return 8;
                                        }
                                        return [8,6,4,10,2].randomGet();
                                    });
                                }
                                'step 2'
                                event.index1=event.skillsCard.indexOf(result.links[0][2]);
                                var i=0;
                                while(i<3){
                                    if(!player.hasSkill(event.skillsPool[event.index1][i])){
                                        event.skillName=event.skillsPool[event.index1][i];
                                        if([5,6].contains(event.index1)&&i==1) player.loseMaxHp();
                                        break;
                                    }
                                    i++;
                                }
                                player.chooseButton([0,1],['你的愿望已经实现了',[[event.skillName],"vcard"]],true);
                                player.storage.bhshendeng++;
                                'step 3'
                                player.addSkill(event.skillName);
                            },
                            ai:{
                                order:10,
                                result:{
                                    player:9,
                                },
                            },
                        },
                        bhtiexue:{
                            enable:'phaseUse',
                            usable:2,
                            selectCard:1,
                            filterCard:function(card){
                                return get.name(card)=='sha';
                            },
                            selectTarget:1,
                            filterTarget:function(card,player,target){
                                return target!=player;
                            },
                            discard:false,
                            lose:false,
                            filter:function(event,player){
                                return player.countCards('hs',{name:'sha'});
                            },
                            content:function(){
                                'step 0'
                                event.target=targets[0];
                                event.card=cards[0];
                                event.target.gain(event.card,player,'give').gaintag.add('bhtiexue');;
                                'step 1'
                                if(event.target.hp<player.hp){
                                    event.target.addSkill('bhtiexue_use');
                                    event.finish();
                                }
                                'step 2'
                                if(!game.hasPlayer(function(current){
                                    return event.target.canUse(event.card,current,false);
                                })) return;
                                event.target.addTempSkill('bhtiexue_nolose','useCardAfter');
                                event.target.chooseTarget('对与你距离最近的合法角色使用'+get.translation(event.card),function(card,player,target){
                                    if(player==target) return false;
                                    if(!event.target.canUse(event.card,target,false)) return false;
                                    var dist=get.distance(player,target);
                                    if(dist>1){
                                        if(game.hasPlayer(function(current){
                                            return current!=player&&get.distance(player,current)<dist;
                                        })){
                                            return false;
                                        }
                                    }
                                    return true;
                                },true).set('ai',function(target){
                                    return get.effect(target,event.card,event.target,event.target);
                                });
                                'step 3'
                                event.target2=result.targets[0];
                                event.target.useCard(event.card,event.target2);
                                'step 4'
                                if (event.target.hasHistory('sourceDamage', function (evt) {
                                    var card = evt.card;
                                    if (!card || card.name != 'sha') return false;
                                    var evtx = evt.getParent('useCard');
                                    return evtx.card == card && evtx.getParent() == event;
                                })) {
                                    player.draw(2);
                                }
                            },
                            group:'bhtiexue_lose',
                            subSkill:{
                                nolose:{
                                    sub:true,
                                    charlotte:true,
                                    forced:true,
                                },
                                lose:{
                                    trigger:{
                                        global:"loseBegin",
                                    },
                                    direct:true,
                                    forced:true,
                                    filter:function(event,player){
                                        // if(event.player.isPhaseUsing()) return false;
                                        if(event.player.hasSkill('bhtiexue_nolose')) return false;
                                        for(let i of event.cards){
                                            if(i.hasGaintag('bhtiexue')) return true;
                                        }
                                        return false;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.target=trigger.player;
                                        event.num=2;
                                        if(event.target.countCards('he')==1) return;
                                        event.target.chooseCard('交给'+get.translation(player)+'一张牌',1,'he',function(card){
                                            return !card.hasGaintag('bhtiexue');
                                        },true).set('ai',function(card){
                                            return 8-get.value(card);
                                        });
                                        'step 1'
                                        player.gain(result.cards,event.target,'give');
                                    },
                                    sub:true,
                                },
                                use:{
                                    trigger:{
                                        player:"phaseUseBegin",
                                    },
                                    forced:true,
                                    silent:true,
                                    sub:true,
                                    content:function(){
                                        'step 0'
                                        event.cards=player.getCards('hs',function(card){
                                            return card.hasGaintag('bhtiexue');
                                        });
                                        if(!event.cards.length) event.goto(2);
                                        'step 1'
                                        player.useCard({name:'bhbenghuaijiejing',cards:event.cards},event.cards,player).viewAs=true;
                                        'step 2'
                                        player.removeSkill('bhtiexue_use');
                                    },
                                },
                            },
                            ai:{
                                order:5.1,
                                result:{
                                    player:function(player,target){
                                        if(target.hp<player.hp) return get.attitude(player,target)<0?1.5:-1;
                                        else return target.canUse({name:'sha'},player)?-2:1;
                                    },
                                    target:function(player,target){
                                        if(target.hp<player.hp) return -2;
                                        else {
                                            var targets=game.filterPlayer(function(current){
                                                if(current==target) return false;
                                                if(!target.canUse({name:'sha'},current,false)) return false;
                                                var dist=get.distance(target,current);
                                                if(dist>1){
                                                    if(game.hasPlayer(function(current2){
                                                        return current2!=target&&get.distance(target,current2)<dist;
                                                    })){
                                                        return false;
                                                    }
                                                }
                                                return true;
                                            });
                                            var val=0,tmp=0;
                                            for(let i of targets){
                                                tmp=get.effect(i,{name:'sha'},target,target);
                                                if(tmp>val) val=tmp;
                                            }
                                            return tmp;
                                        }
                                    },
                                },
                            },
                        },
                        bhjiaoxiang:{
                            zhuanhuanji:true,
                            init:function(player){
                                player.storage.bhjiaoxiang=true;
                            },
                            mark:true,
                            intro:{
                                content:function(storage,player){
                                    if(player.storage.bhjiaoxiang) return '你弃置一次牌时，可以将其中一张作为“奖”置于角色卡上';
                                    else return '你获得一次牌后，可以将角色卡上的一张“奖”交给一名其他角色';
                                },
                                markcount:function(){
                                    return 0;
                                },
                            },
                            trigger:{
                                player:'bhjiaoxiang',
                            },
                            direct:true,
                            content:function(){
                                var bool=player.storage.bhjiaoxiang;
                                player.storage.bhjiaoxiang=!bool;
                                player.syncStorage('bhjiaoxiang');
                            },
                            group:['bhjiaoxiang_discard','bhjiaoxiang_gain'],
                            subSkill:{
                                im:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                },
                                discard:{
                                    trigger:{
                                        player:'discard',
                                    },
                                    direct:true,
                                    filter:function(event,player){
                                        if(player.hasSkill('bhjiaoxiang_im')) return false;
                                        if(!player.storage.bhjiaoxiang) return false;
                                        if(!event.cards.length) return false;
                                        return player.hasSkill('bhdajiang');
                                    },
                                    content:function(){
                                        'step 0'
                                        event.cards=trigger.cards;
                                        player.chooseButton(['交响：你可以将其中一张作为“奖”置于角色卡上',event.cards],1).set('ai',function(button){
                                            return get.value(button.link);
                                        });
                                        'step 1'
                                        if(result.bool){
                                            player.logSkill('bhjiaoxiang');
                                            event.card=result.links[0];
                                            if(player.getExpansions('bhdajiang').length>=16){
                                                var card=player.getExpansions('bhdajiang').randomGet();
                                                player.discard(card);
                                            }
                                            player.addToExpansion(event.card, 'gain2').gaintag.add('bhdajiang');
                                            player.syncStorage('bhdajiang');
                                            player.markSkill('bhdajiang');
                                        } else event.finish();
                                        'step 2'
                                        player.storage.bhdajinag_count++;
                                        if(player.storage.bhdajinag_count%2==0) player.draw();
                                        player.addTempSkill('bhjiaoxiang_im');
                                        event.trigger('bhjiaoxiang');
                                    },
                                },
                                gain:{
                                    trigger:{
                                        player:'gainAfter',
                                    },
                                    filter:function(event,player){
                                        if(player.hasSkill('bhjiaoxiang_im')) return false;
                                        if(player.storage.bhjiaoxiang) return false;
                                        if(!player.getExpansions('bhdajiang').length) return false;
                                        return true;
                                    },
                                    direct:true,
                                    content:function(){
                                        'step 0'
                                        event.cards=player.getExpansions('bhdajiang');
                                        player.chooseButton(['交响：你可以将角色卡上的一张“奖”交给一名其他角色',event.cards],1).set('ai',function(button){
                                            if(!game.hasPlayer(function(current){
                                                return get.attitude(player,current)>0;
                                            })) return false;
                                            return get.value(button.link);
                                        });
                                        'step 1'
                                        if(result.bool){
                                            player.logSkill('bhjiaoxiang');
                                            event.card=result.links[0];
                                            player.chooseTarget('将'+get.translation(event.card)+'交给一名其他角色',function(card,player,target){
                                                return target!=player;
                                            },true).set('ai',function(target){
                                                var att=get.attitude(player,target);
                                                if(att<0) return false;
                                                return att+(5-target.countCards('hs'));
                                            });
                                        } else event.finish();
                                        'step 2'
                                        player.line(result.targets[0]);
                                        result.targets[0].gain(event.card,player,'give');
                                        player.addTempSkill('bhjiaoxiang_im');
                                        event.trigger('bhjiaoxiang');
                                    },
                                },
                            },
                        },
                        bhhutao:{
                            enable:["chooseToUse","chooseToRespond"],
                            hiddenCard:function(player,name){
                                if(!['sha','shan','tao','jiu'].contains(name)) return false;
                                if(!player.countCards('hes')) return false;
                                return true;
                            },
                            filter:function(event,player){
                                if(!player.countCards('hes')) return false;
                                if(event.filterCard({name:'sha'},player,event)||
                                    event.filterCard({name:'shan'},player,event)||
                                    event.filterCard({name:'jiu'},player,event)||
                                    event.filterCard({name:'tao'},player,event)){
                                    return true;
                                }
                                return false;
                            },
                            chooseButton:{
                                dialog:function(event,player){
                                    var list=[];
                                    if(event.filterCard({name:'sha'},player,event)){
                                        list.push(['基本','','sha']);
                                        for(var j of lib.inpile_nature) list.push(['基本','','sha',j]);
                                    }
                                    for (var i = 0; i < lib.inpile.length; i++) {
                                        var hs=player.getCards('hes');
                                        if (lib.inpile[i] != 'du'&& lib.inpile[i]!='sha'&& get.type(lib.inpile[i]) == 'basic' && event.filterCard({ name: lib.inpile[i], cards: hs }, player, event)) list.push(['基本', '', lib.inpile[i]]);
                                    }
                                    return ui.create.dialog('胡桃夹子',[list,'vcard'],'hidden');
                                },
                                check:function(button){
                                    var player=_status.event.player;
                                    var card={name:button.link[2],nature:button.link[3]};
                                    if(_status.event.getParent().type!='phase'||game.hasPlayer(function(current){
                                        return player.canUse(card,current)&&get.effect(current,card,player,player)>0;
                                    })){
                                        switch(button.link[2]){
                                            case 'tao':case 'shan':return 5;
                                            case 'jiu':{
                                                if(player.storage.yizan&&player.countCards('hs',{type:'basic'})>2) return 3;
                                            };
                                            case 'sha':
                                                if(button.link[3]=='fire') return 2.95;
                                                else if(button.link[3]=='thunder'||button.link[3]=='ice') return 2.92;
                                                else return 2.9;
                                            default: return [2,3,4].randomGet();
                                        }
                                    }
                                    return 0;
                                },
                                backup:function(links,player){
                                    return {
                                        filterCard:function(card,player,target){
                                            return true;
                                        },
                                        selectCard:1,
                                        check:function(card,player,target){
                                            if(!ui.selected.cards.length&&get.type(card)=='basic') return 6;
                                            else return 6-get.value(card);
                                        },
                                        viewAs:{name:links[0][2],nature:links[0][3]},
                                        position:'hes',
                                        popname:true,
                                        onuse: function (result, player) {
                                            if(!player.storage.bhhutao_use) player.storage.bhhutao_use=[];
                                            player.storage.bhhutao_use.push(links[0][2]);
                                            player.addTempSkill('bhhutao_use');
                                        },
                                    }
                                },
                                prompt:function(links,player){
                                    return '将一张牌当做'+get.translation(links[0][3]||'')+get.translation(links[0][2])+'使用或打出';
                                },
                            },
                            ai:{
                                order:function(){
                                    var player=_status.event.player;
                                    var event=_status.event;
                                    if(event.filterCard({name:'jiu'},player,event)&&get.effect(player,{name:'jiu'})>0&&player.storage.yizan&&player.countCards('hs',{type:'basic'})>2){
                                        return 3.3;
                                    }
                                    return 3.1;
                                },
                                skillTagFilter:function(player,tag,arg){
                                    if(tag=='fireAttack') return true;
                                    if(!player.countCards('hes')) return false;
                                    if(!player.hasCard(function(card){
                                        return get.type(card)=='basic';
                                    },'hes')){
                                        return false;
                                    }
                                },
                                result:{
                                    player:1,
                                },
                                respondSha:true,
                                respondShan:true,
                                fireAttack:true,
                            },
                            subSkill:{
                                use:{
                                    sub:true,
                                    trigger:{
                                        player:['useCardAfter','respond'],
                                    },
                                    filter:function(event,player){
                                        if(!event.cards||event.cards.length>1) return false;
                                        return player.storage.bhhutao_use.contains(event.card.name);
                                    },
                                    forced:true,
                                    charlotte:true,
                                    silent:true,
                                    content:function(){
                                        'step 0'
                                        player.judge(function(card){
                                            if(get.suit(card)!=get.suit(trigger.cards[0])) return -0.9;
                                            return 0.4;
                                        }).judge2 = function (result) {
                                            return result.bool;
                                        };
                                        'step 1'
                                        if(result.judge==-0.9){
                                            if(!player.countCards('he')) return;
                                            player.chooseToDiscard('请弃置一张牌','he',true).set('ai',function(card){
                                                return 8-get.value(card);
                                            });
                                        }
                                        'step 2'
                                        player.storage.bhhutao_use.remove(trigger.card.name);
                                        if(player.storage.bhhutao_use.length==0){
                                            delete player.storage.bhhutao_use;
                                            player.removeSkill('bhhutao_use');
                                        }
                                    },
                                },
                            },
                        },
                        bhluoyan:{
                            trigger:{
                                global:'phaseJudgeBegin',
                            },
                            filter:function(event,player){
                                return event.player.countCards('j',{name:'lebu'});
                            },
                            check:function(event,player){
                                var att=get.attitude(player,event.player);
                                if(game.filterPlayer().length>=6){
                                    if(event.player.hp>1||event.player.countCards('hs')<5) return att>0;
                                    return !game.hasPlayer(function(current){
                                        return get.attitude(current,event.player)>0&&current.countCards('hs',{name:'wuxie'});
                                    });
                                } else {
                                    if(event.player.hp>1||event.player.countCards('hs')<5) return att<0
                                    return game.hasPlayer(function(current){
                                        return get.attitude(current,event.player)>0&&current.countCards('hs',{name:'wuxie'});
                                    });
                                }
                            },
                            content:function(){
                                'step 0'
                                event.card=trigger.player.getCards('j',{name:'lebu'});
                                player.judge(function (card) {
                                    if (card.number<=game.filterPlayer().length) return 2.5;
                                    return -2.5;
                                }).judge2 = function (result) {
                                    return result.bool;
                                };
                                'step 1'
                                if(result.number<=game.filterPlayer().length){
                                    player.gain(event.card,trigger.player,'gain2');
                                } else {
                                    trigger.player.discard(event.card);
                                    trigger.player.addTempSkill('bhluoyan_skip');
                                }
                            },
                            subSkill:{
                                skip:{
                                    silent:true,
                                    trigger:{
                                        player:["phaseUseBefore"],
                                    },
                                    charlotte:true,
                                    forced:true,
                                    content:function () {
                                        trigger.cancel();
                                        game.log(player, '跳过了出牌阶段');
                                    },
                                },
                            },
                        },
                        bhchusai:{
                            trigger:{
                                player:"phaseDrawBegin",
                            },
                            filter:function(event,player){
                                return player.countCards('h',{color:'red'});
                            },
                            check:function(event,player){
                                return get.attitude(player,player.next)<0||get.attitude(player,player.previous)>0;
                            },
                            content:function(){
                                'step 0'
                                trigger.num--;
                                player.chooseCard('将一张红色手牌当做【乐不思蜀】对自己使用','h',{color:'red'},true).set('ai',function(card){
                                    return 8-get.value(card);
                                });
                                'step 1'
                                event.cards=result.cards;
                                player.useCard({name:'lebu',cards:event.cards},event.cards,player).viewAs=true;
                                var str1='你与你的下家交换位置，然后令其摸两张牌';
                                var str2='你与你的上家交换位置，然后令其弃两张牌';
                                player.chooseControlList([str1,str2],true).set('prompt','请选择一项执行').set('ai',function(){
                                    if(get.attitude(player,player.next)<0) return 0;
                                    else return 1;
                                });
                                'step 2'
                                if(result.index==0){
                                    event.target=player.next;
                                    event.drawCard=true;
                                } else {
                                    event.target=player.previous;
                                    event.drawCard=false;
                                }
                                game.broadcastAll(function (target1, target2) {
                                    game.swapSeat(target1, target2);
                                }, player, event.target);
                                if(event.drawCard) event.target.draw(2);
                                else event.target.chooseToDiscard('请弃置两张牌',2,'he',true);
                            },
                        },
                        bhdiyue:{
                            audio: "ext:崩崩崩/audio:2",
                            forced:true,
                            trigger:{
                                global:"phaseUseEnd",
                            },
                            logTarget:function(event,player){
                                return event.player;
                            },
                            init:function(player){
                                player.storage.bhdiyue=[];
                            },
                            mark:true,
                            intro:{
                                content:function(storage,player){
                                    if(!player.storage.bhdiyue.length) return '此技能未发动过';
                                    else {
                                        return '已对'+get.translation(player.storage.bhdiyue)+'发动过【缔约】';
                                    }
                                },
                                markcount:function(){
                                    return 0;
                                },
                            },
                            filter:function(event,player){
                                if(player.storage.bhdiyue.contains(event.player)) return false;
                                return event.player.countCards('he');
                            },
                            content:function(){
                                'step 0'
                                var str;
                                if(trigger.player==player) str='请选择一张牌重铸并获得对应印记';
                                else str='请选择一张牌交给'+get.translation(player)+'并获得对应印记';
                                event.target=trigger.player;
                                event.target.chooseCard(str,'he',true).set('ai',function(card){
                                    var att=get.attitude(event.target,player);
                                    if(!player.hasSkill('bhyiling')){
                                        if(att>0) return 8-get.value(card)+[0,1,-1,2].randomGet();
                                        else return 6-get.value(card);
                                    } else {
                                        var types=[];
                                        var val=8-get.value(card)+[-1.5,1.5,0].randomGet();
                                        if(game.hasPlayer(function(current){
                                            return current.storage.bhdiyue_yin&&current.storage.bhdiyue_yin==1;
                                        })) types.push('basic');
                                        if(game.hasPlayer(function(current){
                                            return current.storage.bhdiyue_yin&&current.storage.bhdiyue_yin==2;
                                        })){
                                            types.push('delay');
                                            types.push('trick');
                                        }
                                        if(game.hasPlayer(function(current){
                                            return current.storage.bhdiyue_yin&&current.storage.bhdiyue_yin==3;
                                        })) types.push('equip');
                                        if(!types.contains(get.type(card))) val+=(att>0?3.1:1.8);
                                        return val;
                                    }
                                });
                                'step 1'
                                event.card=result.cards[0];
                                if(event.target==player){
                                    event.target.loseToDiscardpile(event.card).visible=true;
                                    event.target.draw();
                                } else {
                                    player.gain(event.card,event.target,'give');
                                }
                                if(get.type(event.card)=='basic') event.target.storage.bhdiyue_yin=1;
                                else if(get.type(event.card)=='equip') event.target.storage.bhdiyue_yin=3;
                                else event.target.storage.bhdiyue_yin=2;
                                if(event.target!=player) player.storage.bhdiyue.push(event.target);
                                player.syncStorage('bhdiyue');
                                event.target.syncStorage('bhdiyue_yin');
                                event.target.unmarkSkill('bhdiyue_yin1');
                                event.target.unmarkSkill('bhdiyue_yin2');
                                event.target.unmarkSkill('bhdiyue_yin3');
                                if(event.target.storage.bhdiyue_yin==1) event.target.markSkill('bhdiyue_yin1');
                                if(event.target.storage.bhdiyue_yin==2) event.target.markSkill('bhdiyue_yin2');
                                if(event.target.storage.bhdiyue_yin==3) event.target.markSkill('bhdiyue_yin3')
                            },
                            group:'bhdiyue_restart',
                            subSkill:{
                                yin:{
                                    forced:true,
                                    unique:true,
                                    sub:true,
                                },
                                yin1:{
                                    forced:true,
                                    unique:true,
                                    sub:true,
                                    marktext:'狼灵',
                                    intro:{
                                        name:"印记",
                                        content:function(storage,player){
                                            if(player.storage.bhdiyue_yin==1) return '狼灵';
                                            else if(player.storage.bhdiyue_yin==2) return '蛇灵';
                                            else return '枭灵';
                                        },
                                        markcount:function(){
                                            return 0;
                                        },
                                    },
                                },
                                yin2:{
                                    forced:true,
                                    unique:true,
                                    sub:true,
                                    marktext:'蛇灵',
                                    intro:{
                                        name:"印记",
                                        content:function(storage,player){
                                            if(player.storage.bhdiyue_yin==1) return '狼灵';
                                            else if(player.storage.bhdiyue_yin==2) return '蛇灵';
                                            else return '枭灵';
                                        },
                                        markcount:function(){
                                            return 0;
                                        },
                                    },
                                },
                                yin3:{
                                    forced:true,
                                    unique:true,
                                    sub:true,
                                    marktext:"枭灵",
                                    intro:{
                                        name:"印记",
                                        content:function(storage,player){
                                            if(player.storage.bhdiyue_yin==1) return '狼灵';
                                            else if(player.storage.bhdiyue_yin==2) return '蛇灵';
                                            else return '枭灵';
                                        },
                                        markcount:function(){
                                            return 0;
                                        },
                                    },
                                },
                                restart:{
                                    silent:true,
                                    forced:true,
                                    sub:true,
                                    trigger: {
                                        global: 'washCard',
                                    },
                                    priority:2,
                                    content:function(){
                                        player.storage.bhdiyue=[];
                                        player.syncStorage('bhdiyue');
                                    },
                                },
                            },
                        },
                        bhyiling:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: ['roundStart'],
                            },
                            animationColor:'blue',
                            skillAnimation:true,
                            priority:10,
                            filter:function(event,player){
                                return game.hasPlayer(function(current){
                                    return current.storage.bhdiyue_yin&&current.storage.bhdiyue_yin>0&&current!=player;
                                });
                            },
                            content:function(){
                                'step 0'
                                event.targets=game.filterPlayer(function(current){
                                    return current.storage.bhdiyue_yin&&current.storage.bhdiyue_yin>0&&current!=player;
                                });
                                event.targets.sortBySeat();
                                event.num=0;
                                event.targets2=[];
                                'step 1'
                                event.target=event.targets[event.num];
                                event.target.chooseBool('是否移去【缔约】印记并摸三张牌？').set('ai',function(){
                                    var att=get.attitude(event.target,player);
                                    if(att>0) return true;
                                    else {
                                        if(event.target.hp>2||(event.target.countCards('he')<=1&&event.target.hp>1)) return true;
                                    }
                                });
                                'step 2'
                                if(result.bool){
                                    event.target.draw(3);
                                    event.targets2.push(event.target);
                                }
                                'step 3'
                                event.num++;
                                if(event.num<event.targets.length) event.goto(1);
                                'step 4'
                                if(event.targets2.length==0) event.finish();
                                'step 5'
                                if(event.targets2.length%2==1){
                                    event.targets2.push(player);
                                    player.draw(3);
                                }
                                event.targets4=[];
                                event.targets4.addArray(event.targets2);
                                event.num=event.targets2.length/2;
                                event.group=[];
                                'step 6'
                                player.chooseTarget('请选择两名角色作为一组进行拼点',2,function(card,player,target){
                                    return event.targets2.contains(target);
                                },true).set('ai',function(target){
                                    var att=get.attitude(player,target);
                                    if(ui.selected.targets.length==0) return -att;
                                    else return att;
                                });
                                'step 7'
                                event.group.push([result.targets[0],result.targets[1]]);
                                event.targets2.remove(result.targets[0]);
                                event.targets2.remove(result.targets[1]);
                                'step 8'
                                event.num--;
                                if(event.num>0) event.goto(6);
                                'step 9'
                                event.num=0;
                                event.targets3=[];
                                'step 10'
                                event.target1=event.group[event.num][0];
                                event.target2=event.group[event.num][1];
                                if(!event.target1.canCompare(event.target2)){
                                    event._result={bool:false,tie:true};
                                } else {
                                    event.target1.addTempSkill('bhyiling_add','bhyiling1');
                                    event.target1.chooseToCompare(event.target2);
                                }
                                'step 11'
                                event.trigger('bhyiling1');
                                if(result.bool){
                                    event.targets3.push(event.target2);
                                } else if(event.tie){
                                    event.targets3.push(event.target1);
                                    event.targets3.push(event.target2);
                                } else {
                                    event.targets3.push(event.target1);
                                }
                                'step 12'
                                event.num++;
                                if(event.num<event.group.length) event.goto(10);
                                'step 13'
                                event.num=event.targets4.length/2;
                                event.damtargets=[];
                                event.dams=[];
                                event.list=[];
                                var name = 'bhyiling_dam';
                                if (!lib.card[name]) {
                                    var info = {
                                        fullskin:true,
                                        type: "伤害",
                                        image: 'ext:崩崩崩/card/' + name + '.png',
                                        suit:null,
                                        number:null,
                                    }
                                    lib.card[name] = info;
                                    lib.translate[name] = '雷电伤害';
                                    lib.translate[name + '_info'] = '可分配的1点雷电伤害';
                                }
                                for(var i=0;i<event.num;i++){
                                    event.list.push(game.createCard(name,'',0));
                                }
                                'step 14'
                                player.chooseButton(['你可以分配任意点雷电伤害',event.list],[1,event.list.length]).set('ai',function(button){
                                    if(!game.hasPlayer(function(target){
                                        return !event.damtargets.contains(target)&&event.targets3.contains(target)&&get.damageEffect(target,player,player,'thunder')>0;
                                    })) return 0;
                                    if(ui.selected.buttons.length<=parseInt(event.list.length/game.filterPlayer(function(target){
                                        return get.damageEffect(target,player,player,'thunder')>0;
                                    }).length)||!ui.selected.buttons.length) return 3;
                                    else return [0,1].randomGet();
                                });
                                // game.log(event.list);
                                // player.chooseCardButton('你可以分配任意点雷电伤害',[1,event.list.length],event.list).set('ai',function(button){
                                //     return ui.selected.buttons.length<=parseInt(event.list.length/game.filterPlayer(function(target){
                                //         return get.damageEffect(target,player,player,'thunder')>0;
                                //     }).length)-1;
                                // });
                                'step 15'
                                if(!result.bool) event.goto(17);
                                else {
                                    event.num=result.links.length;
                                    player.chooseTarget('将'+get.cnNumber(event.num)+'点雷电伤害分配给一名角色',function(card,player,target){
                                        return !event.damtargets.contains(target)&&event.targets3.contains(target);
                                    },true).set('ai',function(target){
                                        return get.damageEffect(target,player,player,'thunder');
                                    });
                                }
                                'step 16'
                                for(var i=0;i<event.num;i++){
                                    event.list.pop();
                                }
                                event.dams.push(event.num);
                                event.damtargets.push(result.targets[0]);
                                if(event.list.length>0&&game.hasPlayer(function(target){
                                    return !event.damtargets.contains(target)&&event.targets3.contains(target);
                                })) event.goto(14);
                                'step 17'
                                var targets=game.filterPlayer();
                                targets.sortBySeat();
                                // game.log(event.damtargets,'/',event.dams);
                                for(let i of targets){
                                    for(var j=0;j<event.damtargets.length;j++){
                                        if(event.damtargets[j]==i){
                                            player.line(i);
                                            i.damage(event.dams[j],'thunder');
                                            event.damtargets.remove(i);
                                            event.dams.remove(event.dams[j]);
                                        }
                                    }
                                }
                                'step 18'
                                for(let i of event.targets4){
                                    i.unmarkSkill('bhdiyue_yin1');
                                    i.unmarkSkill('bhdiyue_yin2');
                                    i.unmarkSkill('bhdiyue_yin3');
                                    delete i.storage.bhdiyue_yin;
                                }
                            },
                            subSkill:{
                                add:{
                                    silent:true,
                                    forced:true,
                                    sub:true,
                                    trigger:{
                                        player:"compare",
                                    },
                                    forced:true,
                                    popup:false,
                                    filter:function(event,player){
                                        if(!event.player.storage.bhdiyue_yin||!event.target.storage.bhdiyue_yin) return false;
                                        return event.player.storage.bhdiyue_yin!=event.target.storage.bhdiyue_yin;
                                    },
                                    content:function(){
                                        var bool;
                                        if(trigger.player.storage.bhdiyue_yin==1){
                                            if(trigger.target.storage.bhdiyue_yin==2) bool=false;
                                            else bool=true;
                                        } else if(trigger.player.storage.bhdiyue_yin==2){
                                            if(trigger.target.storage.bhdiyue_yin==3) bool=false;
                                            else bool=true;
                                        } else {
                                            if(trigger.target.storage.bhdiyue_yin==1) bool=false;
                                            else bool=true;
                                        }
                                        if(bool){
                                            game.log(player,'的拼点牌点数+3');
                                            trigger.num1=Math.min(13,trigger.num1+3);
                                            game.log(trigger.target,'的拼点牌点数-3');
                                            trigger.num2=Math.max(1,trigger.num2-3);
                                        } else {
                                            game.log(player,'的拼点牌点数-3');
                                            trigger.num1=Math.max(1,trigger.num1-3);
                                            game.log(trigger.target,'的拼点牌点数+3');
                                            trigger.num2=Math.min(13,trigger.num2+3);
                                        }
                                    },
                                },
                            },
                        },
                        bhhunshou:{
                            derivation:['bhshenqi','bhguiqi'],
                            trigger:{
                                global:"phaseZhunbei",
                            },
                            filter:function(event,player){
                                return player.countCards('he');
                            },
                            check:function(event,player){
                                var att=get.attitude(player,_status.currentPhase);
                                if(att>0){
                                    if(player.hp<=1&&!player.countCards('he',function(card){
                                        return get.value(card)<8;
                                    })) return false;
                                    if(_status.currentPhase.countCards('hs',{name:'sha'})>=2&&game.hasPlayer(function(target){
                                        return _status.currentPhase.canUse({name:'sha'},target)&&get.effect(target,{name:'sha'},_status.currentPhase,_status.currentPhase)>0;
                                    })) return true;
                                    return false;
                                } else {
                                    if(player.hp<=1&&!player.countCards('he',function(card){
                                        return get.value(card)<8;
                                    })) return false;
                                    if(_status.currentPhase.countCards('hs',{name:'sha'})&&game.hasPlayer(function(target){
                                        return _status.currentPhase.canUse({name:'sha'},target)&&get.effect(target,{name:'sha'},_status.currentPhase,player)<0;
                                    })) return true;
                                    if(player.hp>2&&player.countCards('h')<3) return true;
                                    return false;
                                }
                            },
                            content:function(){
                                'step 0'
                                player.chooseToDiscard('请弃置一张牌','he',true).set('ai',function(card){
                                    return 8-get.value(card);
                                });
                                event.targets=game.filterPlayer(function(target){
                                    return player.inRange(target)&&target!=player;
                                });
                                if(!event.targets.length) event.finish();
                                else {
                                    event.targets.sortBySeat();
                                    event.num=0;
                                }
                                'step 1'
                                event.target=event.targets[event.num];
                                event.target.chooseCard('你可以交给'+get.translation(player)+'一张手牌','h').set('ai',function(card){
                                    var att=get.attitude(event.target,player);
                                    if(att<0) return -10;
                                    if(event.target.countCards('hs',{name:'sha'})>=2&&game.hasPlayer(function(target){
                                        return event.target.canUse({name:'sha'},target)&&get.effect(target,{name:'sha'},event.target,event.target)>0;
                                    })) return -2;
                                    return 8-get.value(card);
                                });
                                'step 2'
                                if(result.bool){
                                    player.gain(result.cards,event.target,'give');
                                }
                                'step 3'
                                event.num++;
                                if(event.num<event.targets.length) event.goto(1);
                                'step 4'
                                player.chooseControl('神气','鬼气').set('prompt','请选择一个技能获得直到回合结束').set('ai',function(){
                                    if(get.attitude(player,_status.currentPhase)>0) return '神气';
                                    return '鬼气';
                                });
                                'step 5'
                                if(result.control=='神气'){
                                    game.log(player,'获得了','#g【神气】');
                                    player.addTempSkill('bhshenqi','phaseEnd');
                                } else {
                                    game.log(player,'获得了','#g【鬼气】');
                                    player.addTempSkill('bhguiqi','phaseEnd');
                                }
                            },
                        },
                        bhshenqi:{
                            global:'bhshenqi_give',
                            // mod: {
                            //     cardUsable: function (card, player, num) {
                            //         if (card.name == 'sha') {
                            //             return num+player.maxHp-1;
                            //         }
                            //     },
                            // },
                            mark:true,
                            intro:{
                                name:"神气",
                                content:function(storage,player){
                                    return '手牌数不小于你的角色可以于出牌阶段额外使用x张【杀】。（x为该角色的体力上限-1）';
                                },
                                markcount:function(){return 0;},
                            },
                            subSkill:{
                                give:{
                                    mod: {
                                        cardUsable: function (card, player, num) {
                                            if (card.name == 'sha') {
                                                if(player.hasSkill('bhshenqi')) return num+player.maxHp-1;
                                                var targets=game.filterPlayer(function(target){
                                                    return target.hasSkill('bhshenqi');
                                                });
                                                if(targets.length==0) return num;
                                                var handcardnum=targets[0].countCards('h');
                                                for(let i of targets){
                                                    if(i.countCards('h')<handcardnum) handcardnum=i.countCards('h');
                                                }
                                                if(player.countCards('h')>=handcardnum) return num+player.maxHp-1;
                                            }
                                        },
                                    },
                                    sub:true,
                                },
                            },
                        },
                        bhguiqi:{
                            global:'bhguiqi_give',
                            mark:true,
                            intro:{
                                name:"神气",
                                content:function(storage,player){
                                    return '锁定技，手牌数小于你且攻击范围内有你的角色使用【杀】时仅能指定你为目标。';
                                },
                                markcount:function(){return 0;},
                            },
                            subSkill:{
                                give:{
                                    mod:{
                                        targetEnabled:function(card,player,target){
                                            if(card.name=='sha'){
                                                if(player.hasSkill('bhguiqi')) return;
                                                if(target.hasSkill('bhguiqi')) return;
                                                if(game.hasPlayer(function(current){
                                                    return current.hasSkill('bhguiqi')&&player.countCards('h')<current.countCards('h')&&player.inRange(current);
                                                })){
                                                    return false;
                                                }
                                            }
                                        },
                                    },
                                    sub:true,
                                },
                            },
                        },
                        bhchongdou:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:"useCard",
                            },
                            filter:function(event,player){
                                if(event.card.name!='sha'&&event.card.name!='juedou') return false;
                                if(!player.getExpansions('bhhudun').length) return false;
                                return true;
                            },
                            check:function(event,player){
                                var num=0;
                                for(let i of event.targets){
                                    if(get.attitude(player,i)<0) num++;
                                    else num--;
                                }
                                return num>0;
                            },
                            content:function(){
                                'step 0'
                                var list=[];
                                var num=player.getExpansions('bhhudun').length;
                                if(num>=1) list.push('一');
                                if(num>=2) list.push('二');
                                if(num>=3) list.push('三');
                                player.chooseControl(list).set('ai',function(){
                                    var nums=[0,0,0];
                                    for(let i of trigger.targets){
                                        if(get.attitude(player,i)<0){
                                            if(i.getExpansions('bhhudun').length>=2) nums[2]++;
                                            if(i.countCards('e')>=2||i.countCards('h')>=3||i.countCards('h')==1) nums[1]++;
                                            if(i.mayHaveShan()) nums[0]++;
                                        } else {
                                            for(let j of nums){
                                                j--;
                                            }
                                        }
                                    }
                                    if(num<3) nums[2]=0;
                                    if(num<2) nums[1]=0;
                                    var maxnum=Math.max(nums[0],nums[1],nums[2]);
                                    for(var i=2;i>=0;i--){
                                        if(nums[i]==maxnum) return get.cnNumber(''+(i+1));
                                    }
                                    return '一';
                                }).set('prompt','请选择移去“盾”的数量');
                                'step 1'
                                if(result.control=='一'){
                                    player.loseHudun(1);
                                    trigger.directHit.addArray(game.filterPlayer());
                                } else if(result.control=='二'){
                                    player.loseHudun(2);
                                    trigger.directHit.addArray(game.filterPlayer());
                                    player.addTempSkill('bhchongdou_damage','useCardAfter');
                                } else {
                                    player.loseHudun(3);
                                    trigger.directHit.addArray(game.filterPlayer());
                                    player.addTempSkill('bhchongdou_damage','useCardAfter');
                                    player.addTempSkill('bhchongdou_hudun','useCardAfter');
                                }
                            },
                            subSkill:{
                                damage:{
                                    sub:true,
                                    forced:true,
                                    silent:true,
                                    trigger:{
                                        source:"damageEnd",
                                    },
                                    filter:function(event,player){
                                        return event.card.name=='sha'||event.card.name=='juedou';
                                    },
                                    content:function(){
                                        player.discardPlayerCard('请弃置'+get.translation(trigger.player)+'一张牌',trigger.player,'he',true);
                                    },
                                },
                                hudun:{
                                    sub:true,
                                    silent:true,
                                    forced:true,
                                    trigger:{
                                        source:'damageBegin1',
                                    },
                                    filter:function(event,player){
                                        if(event.card.name!='sha'&&event.card.name!='juedou') return false;
                                        return event.player.getExpansions('bhhudun').length>=2;
                                    },
                                    content:function(){
                                        var num=trigger.player.getExpansions('bhhudun').length;
                                        event.num=parseInt(num/2);
                                        trigger.num+=event.num;
                                    },
                                },
                            },
                        },
                        bhzhenbi:{
                            audio: "ext:崩崩崩/audio:2",
                            enable:'phaseUse',
                            usable:2,
                            position:'he',
                            filter:function(event,player){
                                if(player.hasSkill('bhzhenbi_im1')) return player.countCards('he',{subtype:'equip1'});
                                if(player.hasSkill('bhzhenbi_im2')) return player.countCards('h',{name:'sha'});
                                return player.countCards('he',function(card){
                                    return card.name=='sha'||get.subtype(card)=='equip1';
                                });
                            },
                            selectCard:1,
                            filterCard:function(card,player,target){
                                if(player.hasSkill('bhzhenbi_im1')) return get.subtype(card)=='equip1';
                                if(player.hasSkill('bhzhenbi_im2')) return card.name=='sha';
                                return card.name=='sha'||get.subtype(card)=='equip1';
                            },
                            selectTarget:1,
                            filterTarget:function(card,player,target){
                                if(player.getExpansions('bhhudun').length>0) return target!=player;
                                return true;
                            },
                            discard:false,
                            lose:false,
                            content:function(){
                                'step 0'
                                event.target=targets[0];
                                event.cards=cards;
                                if(event.cards[0].name=='sha'){
                                    player.addTempSkill('bhzhenbi_im1');
                                } else {
                                    player.addTempSkill('bhzhenbi_im2');
                                }
                                'step 1'
                                event.target.gainHudun(event.cards,player);
                                event.target.gainHudun(get.cards(1),player);
                                if(event.target==player){
                                    event.target.gainHudun(get.cards(1),player);
                                }
                                player.draw();
                            },
                            subSkill:{
                                im1:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                },
                                im2:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                },
                            },
                            ai:{
                                order:6.2,
                                result:{
                                    player:function(player,target){
                                        if(target==player) return 3;
                                        else if(get.attitude(player,target)>0&&target.hp<=1) return 3.1;
                                        else return 0.1;
                                    },
                                    target:2,
                                },
                            },
                        },
                        bhyexi:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:'useCard',
                            },
                            forced:true,
                            filter:function(event,player){
                                return event.card.name=='sha'&&event.targets.length>=1;
                            },
                            content:function(){
                                "step 0"
                                player.chooseTarget('请选择'+get.translation(trigger.card)+'的实际目标',trigger.targets.length,function(card,player,target){
                                    return trigger.targets.contains(target)||(player.inRange(target)&&player.canUse('sha',target,false));
                                },true).set('ai',function(target){
                                    var val=get.effect(target,trigger.card,player,player);
                                    if(val>0&&!player.inRange(target)) val+=3;
                                    return val;
                                });
                                "step 1"
                                event.targets=result.targets;
                                event.targets2=game.filterPlayer(function(target){
                                    return player.inRange(target);
                                });
                                event.targets3=[];
                                event.targets4=[];
                                event.num=0;
                                event.targets2.sortBySeat();
                                "step 2"
                                var target=event.targets2[event.num];
                                event.target=target;
                                var next=target.chooseToUse('请使用一张闪响应杀');
                                next.set('type','respondShan');
                                next.set('filterCard',function(card,player){
                                    if(get.name(card)!='shan') return false;
                                    return lib.filter.cardEnabled(card,player,'forceEnable');
                                });
                                next.set('ai1',function(card){
                                    var target=_status.event.player;
                                    var evt=_status.event.getParent(4);
                                    var bool=true;
                                    if(!get.is.object(card)&&target.countCards('h','shan')<1){
                                        bool=false;
                                    }
                                    else if(target.hasSkillTag('useShan')){
                                        bool=true;
                                    }
                                    else if(target.hasSkillTag('noShan')){
                                        bool=false;
                                    }
                                    else if(get.damageEffect(target,evt.player,target,evt.card.nature)>=0) bool=false;
                                    if(bool){
                                        return get.order(card)+[-10,10,-5,5,0].randomGet();
                                    }
                                    return 0;
                                }).set('shanRequired',1);
                                next.set('respondTo',[player,card]);
                                "step 3"
                                if(!result||!result.bool||!result.result||result.result!='shaned'){
                                } else {
                                    event.targets3.push(event.target);
                                }
                                "step 4"
                                event.num++;
                                if(event.num<event.targets2.length) event.goto(2);
                                "step 5"
                                for(let i of event.targets){
                                    if(event.targets3.contains(i)) event.targets.remove(i);
                                }
                                //game.log(event.targets,'/',event.targets2,'/',event.targets3);
                                trigger.targets=event.targets;
                                trigger.directHit.addArray(event.targets);
                            },
                        },
                        bhanbing:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:'useCardAfter',
                            },
                            usable:1,
                            filter:function(event,player){
                                return event.card.name=='sha'&&event.targets.length>=1&&event.player!=player&&event.player.countCards('h')&&player.countCards('h');
                            },
                            check:function(event,player){
                                return get.attitude(player,event.player)>0;
                            },
                            logTarget:function(event,player){
                                return event.player;
                            },
                            content:function(){
                                'step 0'
                                event.targets=trigger.targets;
                                event.target=trigger.player;
                                player.chooseCard('请选择一张手牌与'+get.translation(event.target)+'进行交换','h',true).set('ai',function(card){
                                    return 8-get.value(card)+(get.tag(card,'damage')?2:0)+(card.name=='sha'?3:0);
                                });
                                'step 1'
                                event.card1=result.cards[0];
                                event.target.chooseCard('请选择一张手牌与'+get.translation(player)+'进行交换','h',true).set('ai',function(card){
                                    return 8-get.value(card)+(card.name=='sha'?2:0)+[-1,2,1,0].randomGet();
                                });
                                'step 2'
                                event.card2=result.cards[0];
                                player.lose(event.card1,ui.ordering);
                                target.lose(event.card2,ui.ordering);
                                player.gain(event.card2);
                                event.target.gain(event.card1);
                                event.target.chooseCard('请展示一张手牌','h',true).set('ai',function(card){
                                    if(get.attitude(event.target,player)<0) return get.tag(card,'damage')?-10:2;
                                    if(get.tag(card,'damage')){
                                        if(card.name=='sha') return 10;
                                        else return 8;
                                    } else return 8-get.value(card);
                                });
                                'step 3'
                                event.card=result.cards[0];
                                event.target.showCards(event.card);
                                if(get.tag(event.card,'damage')&&game.hasPlayer(function(target){
                                    return player.canUse(event.card,target,false)&&event.targets.contains(target);
                                })){
                                    event.target.chooseTarget('请选择'+get.translation(player)+'使用'+get.translation(event.card)+'的目标',function(card,player,target){
                                        return player.canUse(event.card,target,false)&&event.targets.contains(target);
                                    },true).set('ai',function(target){
                                        return get.effect(target,event.card,player,player);
                                    });
                                } else event.finish();
                                'step 4'
                                player.useCard(event.card,result.targets);
                            },
                        },
                        bhshengge:{
                            forced:true,
                            trigger:{
                                player:'bhjiaojian',
                            },
                            silent:true,
                            filter:function(event,player){
                                return event.bhjiaojian_type&&event.bhjiaojian_type!='null';
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.target;
                                if(!event.target.storage.bhshengge) event.target.storage.bhshengge=0;
                                if(trigger.bhjiaojian_type=='draw'){
                                    if(event.target.storage.bhshengge<4){
                                        player.logSkill('bhshengge',event.target);
                                        event.num=Math.min(4-event.target.storage.bhshengge,2);
                                        event.target.gainMaxHp(event.num);
                                        event.target.storage.bhshengge+=event.num;
                                    }
                                } else {
                                    if(event.target.storage.bhshengge>-2){
                                        player.logSkill('bhshengge',event.target);
                                        event.target.loseMaxHp();
                                        event.target.storage.bhshengge--;
                                    }
                                }
                            },
                            group:'bhshengge_maxHp',
                            subSkill:{
                                maxHp:{
                                    trigger:{
                                        player:"phaseZhunbei",
                                    },
                                    forced:true,
                                    filter:function(event,player){
                                        return game.hasPlayer(function(target){
                                            return target.storage.bhshengge&&target.storage.bhshengge!=0;
                                        });
                                    },
                                    content:function(){
                                        'step 0'
                                        event.targets=game.filterPlayer(function(target){
                                            return target.storage.bhshengge&&target.storage.bhshengge!=0;
                                        });
                                        event.targets.sortBySeat();
                                        event.num=0;
                                        'step 1'
                                        event.target=event.targets[event.num];
                                        if(event.target.storage.bhshengge>0){
                                            event.target.loseMaxHp();
                                            event.target.storage.bhshengge--;
                                        } else {
                                            event.target.gainMaxHp();
                                            event.target.storage.bhshengge++;
                                        }
                                        'step 2'
                                        event.num++;
                                        if(event.num<event.targets.length) event.goto(1);
                                        'step 3'
                                        player.gainSP();
                                    },
                                },
                            },
                        },
                        bhleisuo:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:"useCard",
                            },
                            direct:true,
                            filter:function(event,player){
                                if(player.hp<=0&&player.getExpansions('bhleisuo_card').length==0) return false;
                                if(!game.hasPlayer(function(target){
                                    if(!event.targets.contains(target)) return false;
                                    if(!target.countCards('he')) return false;
                                    if(target==player) return false;
                                    return true;
                                })) return false;
                                if(event.card.name=='sha'&&event.cards.length>0) return true;
                                if(get.type(event.card)=='trick') return true;
                                return false;
                            },
                            content:function(){
                                'step 0'
                                player.chooseCard('是否发动【雷锁】？','你可以将你至多'+get.cnNumber(player.hp)+'张牌扣置于角色卡旁','he',[1,Math.min(player.hp,player.countCards('he'))]).set('ai',function(card){
                                    if(player.getExpansions('bhleisuo_card')==0&&ui.selected.cards.length<2) return 7-get.value(card);
                                    if(card.name=='baiyin'&&player.getCards('e').contains(card)&&player.hp<player.maxHp) return 20;
                                    return 5-get.value(card);
                                });
                                'step 1'
                                if(result.bool&&result.cards.length){
                                    player.addToExpansion(result.cards,'giveAuto',player).gaintag.add('bhleisuo_card');
                                    player.addSkill('bhleisuo_card');
                                }
                                event.num=0;
                                event.targets=trigger.targets;
                                'step 2'
                                if(player.getExpansions('bhleisuo_card').length==0&&event.targets.length>1) event.finish();
                                'step 3'
                                event.target=event.targets[event.num];
                                if(event.target==player) event.goto(6);
                                if(!event.target.countCards('he')) event.goto(6);
                                'step 4'
                                event.length=player.getExpansions('bhleisuo_card').length;
                                if(event.targets.length==1) event.length++;
                                player.choosePlayerCard(event.target,'he',
                                    [1,Math.min(event.target.countCards('he'),event.length)],
                                    '你可以将'+get.translation(event.target)+'至多'+get.cnNumber(event.length)+'张牌扣置于其角色卡旁')
                                    .set('ai',function(button){
                                        var card=button.link;
                                        if(card.name=='baiyin'&&event.target.getCards('e').contains(card)&&event.target.hp<event.target.maxHp) return get.attitude(player,event.target)>0?20:-20;
                                        if(event.target.getCards('e').contains(card)) return get.value(card)+2;
                                        return get.value(card);
                                    });
                                'step 5'
                                if(result.bool&&result.cards.length){
                                    var target=event.target;
                                    player.line(event.target);
                                    player.logSkill('bhleisuo',event.target);
                                    target.addToExpansion(result.cards,'giveAuto',target).gaintag.add('bhleisuo_card');
                                    target.addSkill('bhleisuo_card');
                                }
                                'step 6'
                                event.num++;
                                if(event.num<event.targets.length) event.goto(3);
                            },
                            ai:{
                                "unequip_ai":true,
                                "directHit_ai":true,
                                skillTagFilter:function(player,tag,arg){
                                    if(get.attitude(player,arg.target)>0) return false;
                                    if(tag=='directHit_ai') return player.getExpansions('bhleisuo_card').length>=Math.max(1,arg.target.countCards('h')-1);
                                    if(arg&&arg.name=='sha'&&arg.target.getEquip(2)) return true;
                                    return false;
                                },
                            },
                            subSkill:{
                                card:{
                                    trigger:{
                                        global:"phaseEnd",
                                    },
                                    forced:true,
                                    popup:false,
                                    charlotte:true,
                                    filter:function(event,player){
                                        return player.getExpansions('bhleisuo_card').length>0;
                                    },
                                    content:function(){
                                        'step 0'
                                        var cards=player.getExpansions('bhleisuo_card');
                                        player.gain(cards,'draw');
                                        game.log(player,'收回了'+get.cnNumber(cards.length)+'张“雷锁”牌');
                                        'step 1'
                                        player.removeSkill('bhleisuo_card');
                                    },
                                    intro:{
                                        markcount:"expansion",
                                        mark:function(dialog,storage,player){
                                            var cards=player.getExpansions('bhleisuo_card');
                                            if(player.isUnderControl(true)) dialog.addAuto(cards);
                                            else return '共有'+get.cnNumber(cards.length)+'张牌';
                                        },
                                    },
                                },
                            },
                        },
                        bhtianji:{
                            audio: "ext:崩崩崩/audio:2",
                            enable:'phaseUse',
                            usable:2,
                            filter:function(event,player){
                                if(player.hasSkill('bhtianji_im')) return false;
                                var targets=game.filterPlayer(function(target){
                                    return target.getExpansions('bhleisuo_card').length>0;
                                });
                                if(targets.length==0) return false;
                                if(targets.length==1&&targets[0].getExpansions('bhleisuo_card').length>1) return false;
                                return true;
                            },
                            selectTarget:2,
                            multitarget:true,
                            filterTarget:function(card,player,target){
                                if(!ui.selected.targets.length) return target.getExpansions('bhleisuo_card').length>0;
                                else return Math.abs(target.getExpansions('bhleisuo_card').length-ui.selected.targets[0].getExpansions('bhleisuo_card').length)<=1;
                            },
                            selectCard:-1,
                            filterCard:false,
                            content:function(){
                                "step 0"
                                player.addTempSkill('bhtianji_im','phaseUseEnd');
                                game.log(targets[0],'和',targets[1],'交换了“雷锁”牌');
                                var cards1=targets[0].getExpansions('bhleisuo_card');
                                var cards2=targets[1].getExpansions('bhleisuo_card');
                                event.cards=[cards1,cards2];
                                "step 1"
                                targets[0].lose(event.cards[0],ui.ordering);
                                targets[1].lose(event.cards[1],ui.ordering);
                                // if(event.cards[0].length) targets[0].$give(event.cards[0],targets[1],false);
                                // if(event.cards[1].length) targets[1].$give(event.cards[1],targets[0],false);
                                "step 2"
                                targets[0].addToExpansion(event.cards[1],'draw',targets[0]).gaintag.add('bhleisuo_card');
                                targets[1].addToExpansion(event.cards[0],'draw',targets[1]).gaintag.add('bhleisuo_card');
                                "step 3"
                                if(targets[0].getExpansions('bhleisuo_card').length>0) targets[0].addSkill('bhleisuo_card');
                                if(targets[1].getExpansions('bhleisuo_card').length>0) targets[1].addSkill('bhleisuo_card');
                                if(event.cards[0].length==event.cards[1].length){
                                    player.removeSkill('bhtianji_im');
                                    player.chooseBool('是否视为对'+get.translation(targets)+'使用【铁索连环】？').set('ai',function(){
                                        return get.effect(targets[0],{name:'tiesuo'},player,player)+get.effect(targets[1],{name:'tiesuo'},player,player)>0;
                                    });
                                } else event.finish();
                                "step 4"
                                if(result.bool){
                                    player.useCard({name:'tiesuo'},targets);
                                }
                            },
                            subSkill:{
                                im:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                },
                            },
                            ai:{
                                order:3,
                                result:{
                                    player:0.1,
                                    target:function(player,target){
                                        if(!ui.selected.targets[0]) return 0;
                                        else return ui.selected.targets[0].getExpansions('bhleisuo_card').length>target.getExpansions('bhleisuo_card').length?2:-2;
                                    },
                                },
                            },
                        },
                        bhranneng:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:"useCard1",
                            },
                            init:function(player){
                                player.storage.bhranneng=0;
                            },
                            filter:function(event,player){
                                var num=2;
                                if(player.hasSkill('bhxiaoguang_buff')) num=1;
                                if(event.card.name=='sha'&&event.card.nature!='fire') return player.countSP()>=num;
                                return false;
                            },
                            check:function(event,player){
                                var eff=0;
                                for(var i=0;i<event.targets.length;i++){
                                    var target=event.targets[i];
                                    var eff1=get.damageEffect(target,player,player);
                                    var eff2=get.damageEffect(target,player,player,'fire');
                                    eff+=eff2;
                                    eff-=eff1;
                                }
                                return eff>=0;
                            },
                            "prompt2":function(event,player){
                                var num=2;
                                if(player.hasSkill('bhxiaoguang_buff')) num=1;
                                return '当你使用【杀】时，你可以消耗'+num+'点SP，将'+get.translation(event.card)+'改为火属性并摸一张牌';
                            },
                            content:function(){
                                if(player.hasSkill('bhxiaoguang_buff')) event.num=1;
                                else event.num=2;

                                player.loseSP(event.num);
                                trigger.card.nature='fire';
                                trigger.directHit.addArray(game.filterPlayer());
                                // if(get.itemtype(trigger.card)=='card'){
                                //     var next=game.createEvent('zhuque_clear');
                                //     next.card=trigger.card;
                                //     event.next.remove(next);
                                //     trigger.after.push(next);
                                //     next.setContent(function(){
                                //         delete card.nature;
                                //     });
                                // }
                                player.draw();
                            },
                            group:['bhranneng_sp','bhranneng_dam','bhranneng_start'],
                            subSkill:{
                                dam:{
                                    audio: "bhranneng",
                                    trigger:{
                                        source:'damageEnd',
                                    },
                                    priority:8,
                                    filter:function(event,player){
                                        if(event.player==player) return false;
                                        if(!event.player.isAlive()) return false;
                                        if(!event.nature||event.nature!='fire') return false;
                                        var num=2;
                                        if(player.hasSkill('bhxiaoguang_buff')) num=1;
                                        return player.countSP()>=num;
                                    },
                                    check:function(event,player){
                                        return get.effect(event.player,{name:'sha'},player,player)>0;
                                    },
                                    "prompt2":function(event,player){
                                        var num=2;
                                        if(player.hasSkill('bhxiaoguang_buff')) num=1;
                                        return '你可以消耗'+num+'点SP，视为对'+get.translation(event.player)+'使用了一张【杀】';
                                    },
                                    logTarget:function(event,player){
                                        return event.player;
                                    },
                                    content:function(){
                                        if(player.hasSkill('bhxiaoguang_buff')) event.num=1;
                                        else event.num=2;

                                        player.loseSP(event.num);
                                        player.useCard({name:'sha',isCard:true},trigger.player);
                                    },
                                },
                                start:{
                                    charlotte:true,
                                    forced:true,
                                    sub:true,
                                    direct:true,
                                    trigger:{
                                        global:'phaseEnd',
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhranneng>0;
                                    },
                                    content:function(){
                                        player.storage.bhranneng=0;
                                    },
                                },
                                sp:{
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger:{
                                        global:'damageEnd',
                                    },
                                    priority:10,
                                    frequent:true,
                                    filter:function(event,player){
                                        if(player.storage.bhranneng>=2&&!player.hasSkill('bhxiaoguang_buff')) return false;
                                        if(!event.source) return false;
                                        // var num=1;
                                        // if(player.countSP()<3) num=2;
                                        return get.distance(event.source,player)<=event.num;
                                    },
                                    content:function(){
                                        player.storage.bhranneng++;
                                        player.gainSP();
                                    },
                                },
                            },
                        },
                        bhxiaoguang:{
                            audio: "ext:崩崩崩/audio:2",
                            enable:'phaseUse',
                            usable:1,
                            filter:function(event,player){
                                if(player.countSP()>=5) return true;
                                if(player.countSP()+player.hp>=5) return true;
                                return false;
                            },
                            selectTarget:1,
                            selectCard:-1,
                            filterCard:false,
                            skillAnimation:true,
                            animationColor:'fire',
                            filterTarget:function(card,player,target){
                                return target!=player&&player.inRange(target);
                            },
                            precontent:function(){
                                'step 0'
                                if(player.countSP()<5){
                                    player.loseHp();
                                    player.gainSP();
                                    event.redo();
                                } else event.finish();
                            },
                            content:function(){
                                'step 0'
                                player.loseSP(5);
                                player.addTempSkill('bhxiaoguang_buff','phaseUseEnd');
                                'step 1'
                                targets[0].damage(2,'fire');
                            },
                            subSkill:{
                                buff:{
                                    charlotte:true,
                                    sub:true,
                                    forced:true,
                                },
                            },
                        },
                        bhpianran:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:'useCardAfter',
                            },
                            forced:true,
                            mark:true,
                            init:function(player){
                                player.storage.bhpianran=[0,1];
                            },
                            intro:{
                                content:function(storage,player){
                                    var str='<li>锁定技，当你于回合内使用';
                                    if(player.storage.bhpianran[1]==1) str+='红色/黑色牌后，你的攻击范围-1/+1';
                                    else str+='黑色/红色牌后，你的攻击范围-1/+1';

                                    str+='<br><li>当前效果：';
                                    if(player.storage.bhpianran[0]==0) str+='无效果';
                                   else str+='攻击范围'+(player.storage.bhpianran[0]>0?'':'+')+(-player.storage.bhpianran[0]);

                                   return str;
                                },
                                markcount:function(storage,player){
                                    return -player.storage.bhpianran[0];
                                },
                            },
                            filter:function(event,player){
                                return ['red','black'].contains(get.color(event.card))&&player==_status.currentPhase;
                            },
                            content:function(){
                                event.num=player.storage.bhpianran[1];
                                if(get.color(trigger.card)=='red') player.storage.bhpianran[0]+=event.num;
                                else player.storage.bhpianran[0]-=event.num;
                                player.syncStorage('bhpianran');
                            },
                            mod: {
                                attackFrom: function (from, to, distance) {
                                    if(from.storage.bhpianran){
                                        return distance+from.storage.bhpianran[0];
                                    }
                                    return distance;
                                },
                                // globalFrom: function (from, to, distance) {
                                //     if(from.storage.bhpianran){
                                //         return distance+from.storage.bhpianran[0];
                                //     }
                                //     return distance;
                                // },
                            },
                            group:'bhpianran_change',
                            subSkill:{
                                change:{
                                    audio:'bhpianran',
                                    trigger:{
                                        player:'phaseUseBegin',
                                    },
                                    forced:true,
                                    direct:true,
                                    content:function(){
                                        'step 0'
                                        player.chooseBool('是否发动【翩然】？','出牌阶段开始时，你可以交换本技能描述中“红色”与“黑色”的位置。').set('ai',function(){
                                            return [true,false,false].randomGet();
                                        });
                                        'step 1'
                                        if(result.bool){
                                            player.logSkill('bhpianran_change');
                                            player.storage.bhpianran[1]=-player.storage.bhpianran[1];
                                            player.syncStorage('bhpianran');
                                        }
                                    },
                                },
                            },
                        },
                        bhbingdian:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:'useCard',
                            },
                            filter:function(event,player){
                                if(!event.targets) return false;
                                var targets=game.filterPlayer(function(target){
                                    return player.inRange(target);
                                });
                                var num=1;
                                for(let i of targets){
                                    if(get.distance(player,i)>num) num=get.distance(player,i);
                                }
                                return game.hasPlayer(function(target){
                                    return get.distance(player,target)==num&&event.targets.contains(target);
                                });
                            },
                            init:function(player){
                                player.storage.bhbingdian_suit=[];
                                player.storage.bhbingdian_type=[];
                            },
                            direct:true,
                            content:function(event,player){
                                'step 0'
                                var targets=game.filterPlayer(function(target){
                                    return player.inRange(target);
                                });
                                var num=1;
                                for(let i of targets){
                                    if(get.distance(player,i)>num) num=get.distance(player,i);
                                }
                                event.targets=game.filterPlayer(function(target){
                                    return get.distance(player,target)==num&&trigger.targets.contains(target);
                                });
                                event.num=0;
                                'step 1'
                                event.target=event.targets[event.num];
                                if(!event.target.isAlive()||!event.target.countCards('he')) event.goto(4);
                                else {
                                    player.chooseBool('是否对'+get.translation(event.targets[event.num])+'发动【冰点】？','当你对一名处于你攻击范围边缘（你的攻击范围内你到其距离最远的角色）的其他角色使用牌时，你可以弃置其一张牌。').set('ai',function(){
                                        return get.attitude(player,target)<0;
                                    });
                                }
                                'step 2'
                                if(result.bool){
                                    player.logSkill('bhbingdian',event.target);
                                    player.line(event.target);
                                    player.discardPlayerCard(event.target,'he',true);
                                } else event.goto(4);
                                'step 3'
                                if(!result.cards) event.goto(4);
                                else {
                                    event.card=result.cards[0];
                                    if(!player.storage.bhbingdian_suit.contains(get.suit(event.card))) player.storage.bhbingdian_suit.push(get.suit(event.card));
                                    if(get.type(event.card)=='delay'||get.type(event.card)=='trick') event.cardtype='trick';
                                    else event.cardtype=get.type(event.card);
                                    if(!player.storage.bhbingdian_type.contains(event.cardtype)) player.storage.bhbingdian_type.push(event.cardtype);
                                    event.trigger('bhbingdian');
                                }
                                'step 4'
                                event.num++;
                                if(event.num<event.targets.length) event.goto(1);
                            },
                            group:['bhbingdian_suit','bhbingdian_type','bhbingdian_start'],
                            subSkill:{
                                start:{
                                    trigger:{
                                        global:'phaseEnd',
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhbingdian_suit.length+player.storage.bhbingdian_type.length>0;
                                    },
                                    direct:true,
                                    charlotte:true,
                                    forced:true,
                                    content:function(){
                                        player.storage.bhbingdian_suit=[];
                                        player.storage.bhbingdian_type=[];
                                    },
                                },
                                suit:{
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger:{
                                        player:"bhbingdian",
                                    },
                                    priority:10,
                                    usable:1,
                                    prompt2:'本回合因此技能弃置的牌花色数达到2时，你可以弃置一张手牌并对所有你攻击范围边缘的其他角色各造成一点伤害',
                                    check:function(event,player){
                                        var targets=game.filterPlayer(function(target){
                                            return player.inRange(target);
                                        });
                                        var num=1;
                                        for(let i of targets){
                                            if(get.distance(player,i)>num) num=get.distance(player,i);
                                        }
                                        var targets2=game.filterPlayer(function(target){
                                            return get.distance(player,target)==num;
                                        });
                                        var val=0;
                                        for(let i of targets2){
                                            val+=get.damageEffect(i,player,player);
                                        }
                                        return val>0;
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhbingdian_suit.length>=2&&player.countCards('h');
                                    },
                                    content:function(){
                                        'step 0'
                                        var targets=game.filterPlayer(function(target){
                                            return player.inRange(target);
                                        });
                                        var num=1;
                                        for(let i of targets){
                                            if(get.distance(player,i)>num) num=get.distance(player,i);
                                        }
                                        event.targets=game.filterPlayer(function(target){
                                            return get.distance(player,target)==num;
                                        });
                                        player.chooseToDiscard('h',true);
                                        'step 1'
                                        event.card=result.cards[0];
                                        if(get.type(event.card)=='delay'||get.type(event.card)=='trick') event.cardtype='trick';
                                        else event.cardtype=get.type(event.card);
                                        if(!player.storage.bhbingdian_type.contains(event.cardtype)) player.storage.bhbingdian_type.push(event.cardtype);
                                        event.trigger('bhbingdian');
                                        for(let i of event.targets){
                                            player.line(i);
                                            i.damage(player);
                                        }
                                    },
                                },
                                type:{
                                    audio: "bhbingdian_suit",
                                    trigger:{
                                        player:"bhbingdian",
                                    },
                                    priority:8,
                                    prompt2:'本回合因此技能弃置的牌类别数达到2时，你可以摸两张牌',
                                    usable:1,
                                    filter:function(event,player){
                                        return player.storage.bhbingdian_type.length>=2;
                                    },
                                    content:function(){
                                        player.draw(2);
                                    },
                                },
                            },
                        },
                        bhbanxue:{
                            priority:10,
                            trigger:{
                                global:"damageEnd",
                            },
                            check:function(event,player){
                                if(get.attitude(player,event.source)<0&&event.source.group=='bhbenghuai') return false;
                                return true;
                            },
                            logTarget:function(event,player){
                                return event.source;
                            },
                            filter:function(event,player){
                                if(player.hasSkill('bhbanxue_im')) return false;
                                if(!event.source||event.source.group=='bhxiubolian') return false;
                                if(event.player.group!='bhxiubolian') return false;
                                return true;
                            },
                            content:function(){
                                'step 0'
                                player.addTempSkill('bhbanxue_im','roundStart');
                                event.target=trigger.source;
                                var str1='受到来自'+get.translation(player)+'的一点伤害，然后弃置一张牌';
                                var str2='交给'+get.translation(player)+'一张手牌并将势力变更为“休伯利安”';
                                if(!event.target.countCards('h')){
                                    event.goto(2);
                                } else {
                                    event.target.chooseControlList([str1,str2],true).set('ai',function(){
                                        if(!event.target.countCards('he')&&event.target.hp>2) return 0;
                                        return 1;
                                    });
                                }
                                'step 1'
                                player.line(event.target);
                                if(result.index==1) event.goto(3);
                                'step 2'
                                event.target.damage(player);
                                event.target.chooseToDiscard('he',true);
                                event.finish();
                                'step 3'
                                event.target.chooseCard('请交给'+get.translation(player)+'一张牌','h',true).set('ai',function(card){
                                    if(get.attitude(event.target,player)>0) return 10-get.value(card)+[1,2,0].randomGet();
                                    else return 8-get.value(card);
                                });
                                'step 4'
                                player.gain(result.cards[0],event.target,'give');
                                event.target.group='bhxiubolian';
                            },
                            subSkill:{
                                im:{
                                    charlotte:true,
                                    sub:true,
                                },
                            },
                        },
                        bhjiancai:{
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            intro: {
                                content: "limited",
                            },
                            unique: true,
                            limited: true,
                            skillAnimation: true,
                            animationColor: "gray",
                            filter: function (event, player) {
                                if(!player.countCards('hs',{name:'sha'})) return false;
                                if(!game.hasPlayer(function(target){
                                    return target!=player&&target.group=='bhxiubolian';
                                })) return false;
                                return true;
                            },
                            filterCard:function(card,player,target){
                                return card.name=='sha';
                            },
                            lose:false,
                            discard:false,
                            filterTarget:function(card,player,target){
                                return target!=player&&target.group=='bhxiubolian';
                            },
                            content: function () {
                                'step 0'
                                player.awakenSkill('bhjiancai');
                                player.storage.bhjiancai = true;
                                targets[0].gain(cards[0],player,'give');
                                var str1='翻面并摸一张牌，然后令此技能的可用次数+1';
                                var str2='失去1点体力并将势力改为“崩坏”';
                                target.chooseControlList([str1,str2],true).set('ai',function(){
                                    if(target.isTurnedOver()) return 0;
                                    if(target.hp<3) return 0;
                                    if(target.countCards('hs')>3) return 1;
                                    if(game.filterPlayer(function(current){
                                        return current.group=='bhxiubolian'&&current!=player&&current!=target;
                                    }).length>0) return 1;
                                    return [0,0,1].randomGet();
                                });
                                'step 1'
                                if(result.index==1){
                                    target.loseHp();
                                    target.group='bhbenghuai';
                                } else {
                                    target.turnOver();
                                    target.draw();
                                    player.restoreSkill('bhjiancai');
                                }
                            },
                            ai:{
                                order:5.7,
                                result:{
                                    player:0,
                                    target:function(player,target){
                                        if(target.isTurnedOver()) return 4;
                                        else return -3;
                                    },
                                },
                            },
                        },
                        bhjingwu:{
                            trigger:{
                                player:'damageEnd',
                                source:'damageEnd',
                            },
                            priority:4,
                            logTarget:function(event,player){
                                if(player==event.source) return event.player;
                                else return event.source;
                            },
                            filter:function(event,player){
                                if(event.source==player){
                                    if(!event.player.isAlive()) return false;
                                    if(event.player.group=='bhbenghuai') return player.countCards('h');
                                    else return player.countCards('h',{name:'shan'});
                                } else if(!event.source){
                                    return false;
                                } else {
                                    if(!event.source.isAlive()) return false;
                                    if(event.source==event.player) return false;
                                    if(event.source.group=='bhbenghuai') return player.countCards('h');
                                    else return player.countCards('h',{name:'shan'});
                                }
                            },
                            check:function(event,player){
                                if(event.source==player) return get.attitude(player,event.player)<0;
                                else return get.attitude(player,event.source)<0;
                            },
                            content:function(){
                                'step 0'
                                if(player==trigger.source) event.target=trigger.player;
                                else event.target=trigger.source;
                                if(event.target.group=='bhbenghuai') player.chooseToDiscard('h',true);
                                else player.chooseToDiscard('请弃置一张【闪】','h',function(card){
                                    return card.name=='shan';
                                },true);
                                'step 1'
                                player.useCard({name:'sha'},event.target,false);
                            },
                        },
                        bhtiexin:{
                            zhuSkill:true,
                            trigger:{
                                global:"damageBegin",
                            },
                            filter:function(event,player){
                                if(player.identity!='zhu') return false;
                                if(player.hasSkill('bhtiexin_im')) return false;
                                if(event.player==player) return false;
                                return ['bhtianming','bhxiubolian'].contains(event.player.group);
                            },
                            direct:true,
                            content:function(){
                                'step 0'
                                event.target=trigger.player;
                                event.target.chooseCard('he').set('ai',function(card){
                                    var att=get.attitude(event.target,player);
                                    if(att>0&&player.hp>2&&get.attitude(event.target,trigger.source)<0) return 10-get.value(card)+[1,3,2,0].randomGet();
                                    else return -2;
                                }).set('prompt','是否发动【铁心】？').set('prompt2','交给'+get.translation(player)+'一张牌，令即将受到的伤害-1');
                                'step 1'
                                if(result.bool){
                                    player.addTempSkill('bhtiexin_im');
                                    event.target.line(player);
                                    player.gain(result.cards,event.target,'give');
                                    player.chooseBool('是否令本次伤害-1？（若如此做，你受到一点来自'+get.translation(trigger.source)+'的物理伤害）').set('ai',function(){
                                        var att=get.attitude(player,trigger.source);
                                        if(att>0&&event.target.hp>trigger.num) return false;
                                        else return player.hp>2;
                                    });
                                } else event.finish();
                                'step 2'
                                if(result.bool){
                                    trigger.num--;
                                    player.damage(1,trigger.source);
                                }
                            },
                            subSkill:{
                                im:{
                                    charlotte:true,
                                },
                            },
                        },
                        bhshensi:{
                            forced:true,
                            trigger:{
                                player:'phaseJudgeBegin',
                            },
                            filter:function(event,player){
                                return player.countCards('j',{name:['lebu','bingliang']});
                            },
                            content:function(){
                                if(player.countCards('j',{name:'lebu'})){
                                    player.addTempSkill('bhshensi_mh');
                                    player.markSkill('bhshensi_mh')
                                }
                                if(player.countCards('j',{name:'bingliang'})) player.draw();
                            },
                            subSkill:{
                                mh:{
                                    sub:true,
                                    forced:true,
                                    silent:true,
                                    trigger:{
                                        player:'phaseDiscardBegin',
                                    },
                                    marktext: '神嗣',
                                    intro: {
                                        content: '跳过本回合弃牌阶段',
                                    },
                                    onremove:function(player){
                                        player.unmarkSkill('bhshensi_mh');
                                    },
                                    content:function(){
                                        trigger.cancel();
                                    },
                                },
                            },
                        },
                        bhfangxiang:{
                            trigger:{
                                global:"gainSPAfter",
                            },
                            init:function(player){
                                player.storage.bhfangxiang=[[],0];
                            },
                            check:function(event,player){
                                return player.countCards('he',function(card){
                                    return !get.tag(card,'bhyuezhao');
                                })>=Math.max(player.storage.bhfangxiang[1],1)*event.num;
                            },
                            filter:function(event,player){
                                if(player.storage.bhfangxiang[0].contains(event.player)) return false;
                                return player.countCards('he')>=(Math.max(player.storage.bhfangxiang[1],1)*event.num);
                            },
                            content:function(){
                                'step 0'
                                player.storage.bhfangxiang[0].push(trigger.player);
                                var num=(Math.max(player.storage.bhfangxiang[1],1)*trigger.num)
                                player.chooseCard('请选择'+get.cnNumber(num)+'张牌重铸','he',num,true).set('ai',function(card){
                                    return 8-get.value(card)-(card.hasGaintag('bhyuezhao')?4:0);
                                });
                                'step 1'
                                player.loseToDiscardpile(result.cards);
                                player.draw(result.cards.length);
                                'step 2'
                                player.draw();
                                player.storage.bhfangxiang[1]++;
                            },
                            group:'bhfangxiang_round',
                            subSkill:{
                                round:{
                                    forced:true,
                                    silent:true,
                                    trigger:{
                                        global:"roundStart",
                                    },
                                    content:function(){
                                        player.storage.bhfangxiang=[[],0];
                                    },
                                },
                            },
                        },
                        bhyuezhao:{
                            trigger:{
                                global:'damageEnd',
                            },
                            filter:function(event,player){
                                if(!event.card) return false;
                                return player.countCards('h',function(card){
                                    return get.color(card)==get.color(event.card)&&card.hasGaintag('bhyuezhao');
                                });
                            },
                            check:function(event,player){
                                var att1=get.attitude(player,event.player),att2;
                                if(!event.source) att2=0;
                                else att2=get.attitude(player,event.source);
                                if(att1>0||att2>0) return true;
                            },
                            content:function(){
                                'step 0'
                                event.card=trigger.card;
                                if(!trigger.source){
                                    event.player=trigger.player;
                                    event.goto(2);
                                } else player.chooseTarget('请选择发动【月照】的目标',function(card,player,target){
                                    return target==trigger.player||target==trigger.source;
                                },true).set('ai',function(target){
                                    var att=get.attitude(player,target);
                                    if(att<0) return -10;
                                    return 2+att-((player.hasSkill&&player.storage.bhfangxiang[0].contains(target))?2:0)+(target.hp<3?2:0);
                                });
                                'step 1'
                                event.target=result.targets[0];
                                'step 2'
                                player.chooseCard('请选择一张“月照”牌弃置','h',function(card){
                                    return card.hasGaintag('bhyuezhao')&&get.color(card)==get.color(event.card);
                                },true).set('ai',function(card){
                                    return 8-get.value(card);
                                });
                                'step 3'
                                player.discard(result.cards);
                                event.card=result.cards[0];
                                player.line(event.target);
                                var str1='获得'+get.translation(event.card)+'并获得1点SP';
                                event.target.chooseControlList([str1,'回复1点体力'],true).set('ai',function(){
                                    if(event.target.hp==event.target.maxHp) return 0;
                                    if(event.target.hp<=2||get.value(event.card)<8||(player.storage.bhfangxiang&&player.storage.bhfangxiang[1]>1)) return 1;
                                    return 0;
                                });
                                'step 4'
                                if(result.index==1){
                                    event.target.recover();
                                } else {
                                    event.target.gain(event.card,'gain2');
                                    event.target.gainSP(1,player);
                                }
                            },
                            group:'bhyuezhao_mark',
                            subSkill:{
                                mark:{
                                    enable:'phaseUse',
                                    prompt:'出牌阶段，你可以记录一张本回合未记录过的类型的手牌。',
                                    filter:function(event,player){
                                        if(!player.hasSkill('bhyuezhao_im')) return true;
                                        if(player.countCards('h',function(card){
                                            return get.type(card)=='basic'&&!card.hasGaintag('bhyuezhao');
                                        })&&player.storage.bhyuezhao_im[0]==0) return true;
                                        if(player.countCards('h',function(card){
                                            return ['trick','delay'].contains(get.type(card))&&!card.hasGaintag('bhyuezhao');
                                        })&&player.storage.bhyuezhao_im[1]==0) return true;
                                        if(player.countCards('h',function(card){
                                            return get.type(card)=='equip'&&!card.hasGaintag('bhyuezhao');
                                        })&&player.storage.bhyuezhao_im[2]==0) return true;
                                        return false;
                                    },
                                    selectCard:1,
                                    discard:false,
                                    lose:false,
                                    position:'h',
                                    filterCard:function(card,player,target){
                                        if(!player.hasSkill('bhyuezhao_im')) return true;
                                        if(card.hasGaintag('bhyuezhao')) return false;
                                        if(get.type(card)=='basic'&&player.storage.bhyuezhao_im[0]==0) return true;
                                        if(['trick','delay'].contains(get.type(card))&&player.storage.bhyuezhao_im[1]==0) return true;
                                        if(get.type(card)=='equip'&&player.storage.bhyuezhao_im[2]==0) return true;
                                        return false;
                                    },
                                    content:function(){
                                        player.addGaintag(cards[0],'bhyuezhao');
                                        if(!player.hasSkill('bhyuezhao_im')) player.addTempSkill('bhyuezhao_im');
                                        if(get.type(cards[0])=='basic') player.storage.bhyuezhao_im[0]=1;
                                        if(['trick','delay'].contains(get.type(cards[0]))) player.storage.bhyuezhao_im[1]=1;
                                        if(get.type(cards[0])=='equip') player.storage.bhyuezhao_im[2]=1;
                                    },
                                    ai:{
                                        order:1.1,
                                        result:{
                                            player:function(player){
                                                if(get.value(ui.selected.cards[0])>7) return -1;
                                                return 1;
                                            },
                                        },
                                    },
                                },
                                im:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    init:function(player){
                                        player.storage.bhyuezhao_im=[0,0,0];
                                    },
                                    onremove:function(player){
                                        delete player.storage.bhyuezhao_im;
                                    },
                                },
                            },
                            //player.addGaintag(result.cards,'xinfu_bijing');
                        },
                        bhhuangxing:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:"useCardAfter",
                            },
                            filter:function(event,player){
                                if(!event.card.suit) return false;
                                if(!player.storage.bhhuangxing[0].length) return false;
                                var cards=player.storage.bhhuangxing[0];
                                for(let i of cards){
                                    if(i.suit==event.card.suit) return true;
                                }
                                return false;
                            },
                            content:function(){
                                'step 0'
                                event.card=trigger.card;
                                event.target=trigger.player;
                                var cards=[];
                                for(let i of player.storage.bhhuangxing[0]){
                                    if(i.suit==event.card.suit) cards.push(i);
                                }
                                player.chooseButton(['请选择一张“耀变”牌亮出',cards],true).set('ai',function(button){
                                    var att=get.attitude(player,_status.currentPhase);
                                    if(att>0) return (get.tag(button.link, 'damage')?-3:0)+get.value(button.link);
                                    else return (get.tag(button.link, 'damage')?3:0)+get.value(button.link);
                                });
                                'step 1'
                                event.card=result.links[0];
                                player.storage.bhhuangxing[1].push(event.card);
                                player.storage.bhhuangxing[0].remove(event.card);
                                player.showCards(event.card);
                                player.syncStorage('bhhuangxing');
                                player.draw();
                                if(!game.hasPlayer(function(target){
                                    return event.target.canUse({name:event.card.name},target);
                                })&&!game.hasPlayer(function(target){
                                    return player.canUse({name:event.card.name},target);
                                })) event.finish();
                                else player.chooseBool('令'+get.translation(event.target)+'视为使用了'+get.translation(event.card.name)+'？（或取消并令自己使用）').set('ai',function(){
                                    return get.attitude(player,event.target)>0;
                                });
                                'step 2'
                                if(result.bool){
                                    event.target.chooseUseTarget({name:event.card.name},true);
                                } else {
                                    player.chooseUseTarget({name:event.card.name},true);
                                }
                            },
                            mark:true,
                            init:function(player){
                                player.storage.bhhuangxing=[[],[]];
                            },
                            intro:{
                                markcount:"expansion",
                                mark:function(dialog,content,player){
                                    var str='';
                                    var content=player.storage.bhhuangxing[0];
                                    if(content&&content.length){
                                        if(player==game.me||player.isUnderControl()){
                                            dialog.addText('耀变：');
                                            dialog.addAuto(content);
                                        }
                                        else{
                                            str+='共有'+get.cnNumber(content.length)+'张耀变<br>';
                                        }
                                    } else {
                                        str+='暂无耀变<br>';
                                    }
                                    var content2=player.storage.bhhuangxing[1];
                                    if(content2&&content2.length){
                                        dialog.addText('璀光：');
                                        dialog.addAuto(content2);
                                        return str;
                                    } else {
                                        return str+'暂无璀光<br>';
                                    }
                                },
                                content:function(content,player){
                                    var str='';
                                    var content=player.storage.bhhuangxing[0];
                                    if(content&&content.length){
                                        if(player==game.me||player.isUnderControl()){
                                            str+=get.translation(content)+'<br>';
                                        }
                                        else{
                                            str+='共有'+get.cnNumber(content.length)+'张耀变<br>';
                                        }
                                    } else {
                                        str+='暂无耀变<br>';
                                    }
                                    var content2=player.storage.bhhuangxing[1];
                                    if(content2&&content2.length){
                                        str+=get.translation(content2);
                                    } else {
                                        str+='暂无璀光<br>';
                                    }
                                    return str;
                                },
                            },
                            group:['bhhuangxing_zhunbei','bhhuangxing_jieshu'],
                            subSkill:{
                                zhunbei:{
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger:{
                                        global:"phaseZhunbei",
                                    },
                                    silent:true,
                                    frequent:true,
                                    filter:function(event,player){
                                        return player.countCards('h');
                                    },
                                    content:function(){
                                        'step 0'
                                        player.chooseCard('h').set('prompt','是否发动【煌星】')
                                        .set('prompt2','一名角色的准备阶段，你可以将一张手牌扣置于你的角色牌上，称为“耀变”')
                                        .set('ai',function(card){
                                            return 8-get.value(card);
                                        });
                                        'step 1'
                                        if(result.bool){
                                            event.card=result.cards[0];
                                            player.logSkill('bhhuangxing_zhunbei');
                                            player.addToExpansion(event.card,player,'draw').gaintag.add('bhhuangxing');
                                            player.storage.bhhuangxing[0].push(event.card);
                                            player.syncStorage('bhhuangxing');
                                        }
                                    },
                                },
                                jieshu:{
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger:{
                                        global:'phaseJieshu',
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhhuangxing[1].length>0||player.storage.bhhuangxing[0].length>1;
                                    },
                                    frequent:true,
                                    content:function(){
                                        'step 0'
                                        var cards1=player.storage.bhhuangxing[0];
                                        var cards2=player.storage.bhhuangxing[1];
                                        player.loseToDiscardpile(cards2);
                                        player.storage.bhhuangxing[1]=[];
                                        player.syncStorage('bhhuangxing');
                                        if(cards1.length>1){
                                            player.chooseControl('弃置一张牌','弃置一张“耀变”牌').set('ai',function(){
                                                if(player.hasCard('he',function(card){
                                                    return get.value(card)<8;
                                                })) return '弃置一张牌';
                                                return '弃置一张“耀变”牌';
                                            });
                                        } else event.finish();
                                        'step 1'
                                        if(result.control=='弃置一张牌'){
                                            player.chooseToDiscard('he',true);
                                            event.finish();
                                        } else {
                                            player.chooseButton(['选择一张“耀变”牌弃置',player.storage.bhhuangxing[0]],true).set('ai',function(button){
                                                return 8-get.value(button.link);
                                            });
                                        }
                                        'step 2'
                                        player.loseToDiscardpile(result.links[0]);
                                        player.storage.bhhuangxing[0].remove(result.links[0]);
                                        player.syncStorage('bhhuangxing');
                                    },
                                },
                            },
                        },
                        bhtiangong:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:'useCard',
                            },
                            filter:function(event,player){
                                if(!player.storage.bhhuangxing[1].length) return false;
                                for(let i of player.storage.bhhuangxing[1]){
                                    if(i.number==event.card.number||i.name==event.card.name) return true;
                                }
                                return false;
                            },
                            check:function(event,player){
                                var att=get.attitude(player,_status.currentPhase);
                                if(event.player==_status.currentPhase){
                                    return true;
                                } else return att>0;
                            },
                            content:function(){
                                if(trigger.player==_status.currentPhase){
                                    player.draw();
                                } else {
                                    _status.currentPhase.draw();
                                }
                            },
                        },
                        bhxinghai:{
                            audio: "ext:崩崩崩/audio:1",
                            trigger: { 
                                global: 'phaseBefore', 
                                player: ['enterGame','bhxinghai_redo'],
                            },
                            forced: true,
                            init:function(player){
                                player.storage.bhxinghai=[[],7];
                            },
                            mark:true,
                            intro:{
                                name:'星海',
                                markcount:function (storage) {
                                    if (!storage) return 0;
                                    return storage[1];
                                },
                                mark:function (dialog, storage, player) {
                                    if (!storage) return;
                                    dialog.addAuto(storage[0]);
                                    dialog.addText('星位：'+storage[1]);
                                },
                                onunmark:function (storage, player) {
                                    player.storage.bhxinghai = [[], 7];
                                },
                            },
                            onremove:function(player){
                                delete player.storage.bhxinghai;
                            },
                            filter: function (event, player) {
                                return (event.name != 'phase' || game.phaseNumber == 0);
                            },
                            content: function () {
                                'step 0'
                                event.num=1;
                                'step 1'
                                event.card=get.cardPile(function(card){
                                    return card.number==event.num;
                                });
                                if(event.card){
                                    player.addToExpansion(event.card,'gain2').gaintag.add('bhxinghai');
                                    player.storage.bhxinghai[0].push(event.card);
                                }
                                'step 2'
                                event.num++;
                                if(event.num<=13) event.goto(1);
                                'step 3'
                                player.syncStorage('bhxinghai');
                                player.markSkill('bhxinghai');
                            },
                            group:['bhxinghai_up','bhxinghai_down'],
                            subSkill:{
                                up:{
                                    audio: "ext:崩崩崩/audio:2",
                                    skillAnimation:true,
                                    animationColor:"glod",
                                    forced:true,
                                    trigger:{
                                        player:'bhxinghai_up',
                                    },
                                    content:function(){
                                        'step 0'
                                        var cards=player.getExpansions('bhxinghai');
                                        player.gain(cards,'gain2');
                                        player.storage.bhxinghai=[[],7];
                                        player.syncStorage('bhxinghai');
                                        'step 1'
                                        event.trigger('bhxinghai_redo');
                                        player.addTempSkill('bhxunyu_im');
                                    },
                                },
                                down:{
                                    audio: "ext:崩崩崩/audio:1",
                                    skillAnimation:true,
                                    animationColor:"gray",
                                    forced:true,
                                    trigger:{
                                        player:'bhxinghai_down',
                                    },
                                    content:function(){
                                        player.removeSkill('bhxinghai');
                                    },
                                },
                            },
                        },
                        bhxunyu:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:['useCard','respond'],
                            },
                            filter:function(event,player){
                                if(player.hasSkill('bhxunyu_im')) return false;
                                if(!player.storage.bhxinghai) return false;
                                if(!player.storage.bhxinghai[0][player.storage.bhxinghai[1]-1]) return false;
                                var card=player.storage.bhxinghai[0][player.storage.bhxinghai[1]-1];
                                if(event.card.suit==card.suit) return true;
                                if(event.card.number==card.number) return true;
                                if(event.card.name==card.name) return true;
                                return false;
                            },
                            content:function(){
                                'step 0'
                                var str1='获其他角色其区域内一张牌并交给其一张点数不小于此牌的手牌，然后令“星位”上升1';
                                var str2='摸一张牌，然后令“星位”下降1';
                                player.chooseControlList([str1,str2],true).set('prompt','请选择一项执行').set('ai',function(){
                                    if(game.hasPlayer(function(target){
                                        if(get.attitude(player,target)>0&&target.countCards('j')) return true;
                                        if(get.attitude(player,target)<0&&target.countCards('e',function(card){
                                            return get.value(card)>5;
                                        })) return true;
                                    })) return 0;
                                    if(player.countCards('h')<3&&player.storage.bhxinghai[1]<11&&player.storage.bhxinghai[1]>1) return 1;
                                    return 0;
                                });
                                'step 1'
                                if(result.index==1){
                                    player.draw();
                                    if(player.storage.bhxinghai[1]==1) event.trigger('bhxinghai_down');
                                    else {
                                        player.storage.bhxinghai[1]--;
                                        player.syncStorage('bhxinghai');
                                    }
                                    event.finish();
                                }
                                'step 2'
                                player.chooseTarget('获得一名其他角色区域内的一张牌',function(card,player,target){
                                    return player!=target;
                                },true).set('ai',function(target){
                                    if(get.attitude(player,target)>0&&target.countCards('j')) return 10;
                                    if(get.attitude(player,target)<0&&target.countCards('e',function(card){
                                        return get.value(card)>5;
                                    })) return 10;
                                    return -get.attitude(player,target);
                                });
                                'step 3'
                                event.target=result.targets[0];
                                player.line(event.target);
                                player.gainPlayerCard('获得'+get.translation(event.target)+'区域内一张牌',event.target,'hej',true);
                                'step 4'
                                event.card=result.cards[0];
                                player.chooseCard('交给'+get.translation(event.target)+'一张点数不小于'+event.card.number+'的手牌',function(card){
                                    return card.number>=event.card.number;
                                },'h',true).set('ai',function(card){
                                    return 8-get.value(card);
                                });
                                'step 5'
                                event.target.gain(result.cards[0],player,'give');
                                if(player.storage.bhxinghai[1]==13) event.trigger('bhxinghai_up');
                                else {
                                    player.storage.bhxinghai[1]++;
                                    player.syncStorage('bhxinghai');
                                }
                            },
                            subSkill:{
                                im:{
                                    sub:true,
                                    charlotte:true,
                                },
                            },
                        },
                        // bhspl: {
                        //     marktext: "SP",
                        //     intro: {
                        //         name: "SP",
                        //         content: "mark",
                        //     },
                        //     gainSP:function(player,num){
                        //         if(num<=0) return;
                        //         if(!player.storage.bhspl) player.storage.bhspl=0;
                        //         player.storage.bhspl+=num;
                        //         player.syncStorage('bhspl');
                        //         player.markSkill('bhspl');
                        //     },
                        //     loseSP:function(player,num){
                        //         if(num<=0) return;
                        //         if(!player.storage.bhspl) return;
                        //         if(num>player.storage.bhspl) num=player.storage.bhspl;
                        //         player.storage.bhspl-=num;
                        //         player.syncStorage('bhspl');
                        //         if(!player.storage.bhspl) player.unmarkSkill('bhspl');
                        //     },
                        // },
                        bhfeifeng:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: ["chooseToRespondBegin", "chooseToUseBegin"],
                            },
                            logTarget:function(event,player){
                                return event.player;
                            },
                            filter: function (event, player) {
                                if (event.responded) return false;
                                if (event.bhfeifeng) return false;
                                if (!event.filterCard || !event.filterCard({ name: 'shan' }, event.player, event)) return false;
                                if (event.name == 'chooseToRespond' && !lib.filter.cardRespondable({ name: ['shan'] }, event.player, event)) return false;
                                if(event.player==player) return game.hasPlayer(function(target){
                                    var bool1=player.isEmpty(1)||player.countCards('e',{subtype:"equip1"});
                                    var bool2=target.isEmpty(1)||target.countCards('e',{subtype:"equip1"});
                                    var bool3=player.countCards('e',{subtype:"equip1"})+target.countCards('e',{subtype:"equip1"})>0;
                                    return target.inRange(player)&&bool1&&bool2&&bool3;
                                });
                                if(event.player!=player&&player.inRange(event.player)&&(!player.isEmpty(1)||!event.player.isEmpty(1))) return player.countCards('e',{subtype:"equip1"})+event.player.countCards('e',{subtype:"equip1"})>0;
                                return false;
                            },
                            check: function (event, player) {
                                if(player==event.player) return game.hasPlayer(function(target){
                                    var bool1=player.isEmpty(1)||player.countCards('e',{subtype:"equip1"});
                                    var bool2=target.isEmpty(1)||target.countCards('e',{subtype:"equip1"});
                                    var bool3=player.countCards('e',{subtype:"equip1"})+target.countCards('e',{subtype:"equip1"})>0;
                                    return target.inRange(player)&&bool1&&bool2&&bool3;
                                });
                                var val=0;
                                var att=get.attitude(player,event.player);
                                if(att<0) return false;
                                var skillList=['xiaoji','rexuanfeng','bhluoxuan'];
                                for(let i of skillList){
                                    if(event.player.hasSkill(i)) val+=(att>0?5:-5);
                                }
                                if(player.getAttackRange()>event.player.getAttackRange()&&att>0) val+=player.countCards('hs',{name:'shan'})>0?2:4;
                                if(event.player.hp<2) val+=4;
                                return val>0;
                            },
                            content: function () {
                                "step 0"
                                event.attR=player.getAttackRange();
                                event.cardname = 'shan';
                                trigger.bhfeifeng = true;
                                if(trigger.player==player){
                                    player.chooseTarget('与一名攻击范围内有你的角色交换武器',function(card,player,target){
                                        var bool1=player.isEmpty(1)||player.countCards('e',{subtype:"equip1"});
                                        var bool2=target.isEmpty(1)||target.countCards('e',{subtype:"equip1"});
                                        var bool3=player.countCards('e',{subtype:"equip1"})+target.countCards('e',{subtype:"equip1"})>0;
                                        return target.inRange(player)&&bool1&&bool2&&bool3;
                                    },true).set('ai',function(target){
                                        return get.attitude(player,target)+(target.getAttackRange()-player.getAttackRange()>0?10:0);
                                    });
                                }
                                "step 1"
                                if(trigger.player==player) event.target=result.targets[0];
                                else event.target=trigger.player;
                                var target=event.target;
                                game.log(player,'和',target,'交换了武器');
                                var e1=player.getCards('e',{subtype:'equip1'});
                                var todis1=[];
                                for(var i=0;i<e1.length;i++){
                                    if(target.isDisabled(get.subtype(e1[i]))) todis1.push(e1[i]);
                                }
                                player.discard(todis1);
                                var e2=target.getCards('e',{subtype:'equip1'});
                                var todis2=[];
                                for(var i=0;i<e2.length;i++){
                                    if(player.isDisabled(get.subtype(e2[i]))) todis2.push(e2[i]);
                                }
                                target.discard(todis2);
                                "step 2"
                                var target=event.target;
                                event.cards=[player.getCards('e',{subtype:'equip1'}),target.getCards('e',{subtype:'equip1'})];
                                player.lose(event.cards[0],ui.ordering,'visible');
                                target.lose(event.cards[1],ui.ordering,'visible');
                                if(event.cards[0].length) player.$give(event.cards[0],target,false);
                                if(event.cards[1].length) target.$give(event.cards[1],player,false);
                                "step 3"
                                var target=event.target;
                                for(var i=0;i<event.cards[1].length;i++){
                                    player.equip(event.cards[1][i]);
                                }
                                for(var i=0;i<event.cards[0].length;i++){
                                    target.equip(event.cards[0][i]);
                                }
                                "step 4"
                                game.delayx();
                                "step 5"
                                if (player.getAttackRange()<event.attR) {
                                    //game.log(player.getAttackRange(),'/',event.attR);
                                    game.playAudio('..','extension','崩崩崩/audio','bhfeifeng_shan');
                                    trigger.untrigger();
                                    trigger.set('responded', true);
                                    trigger.result = { bool: true, card: { name: event.cardname, isCard: true } }
                                }
                            },
                            ai: {
                                respondShan: true,
                                effect: {
                                    target: function (card, player, target, effect) {
                                        if (get.tag(card, 'respondShan')) return 0.5;
                                    },
                                },
                            },
                        },
                        bhhuanjian:{
                            audio: "ext:崩崩崩/audio:2",
                            enable:'phaseUse',
                            filter:function(event,player){
                                if(!player.isEmpty(1)) return player.countCards('he',{subtype:'equip1'})&&!player.hasSkill('bhhuanjian_im1');
                                return player.isEmpty(1)&&!player.hasSkill('bhhuanjian_im2');
                            },
                            selectTarget:function(card,player,target){
                                var player=_status.event.player;
                                if(player.isEmpty(1)&&!ui.selected.cards.length) return -1;
                                return 1;
                            },
                            filterTarget:function(card,player,target){
                                if(player.isEmpty(1)&&!ui.selected.cards.length) return false;
                                return player!=target;
                            },
                            filterCard:function(card,player,target){
                                if(player.isEmpty(1)&&!player.countCards('he',{subtype:'equip1'})) return false;
                                return get.subtype(card)=='equip1';
                            },
                            selectCard:function(card,player,target){
                                var player=_status.event.player;
                                if(player.isEmpty(1)&&!player.countCards('he',{subtype:'equip1'})) return -1;
                                if(player.isEmpty(1)&&player.countCards('he',{subtype:'equip1'})>0) return [0,1];
                                return 1;
                            },
                            lose:false,
                            discard:false,
                            content:function(){
                                'step 0'
                                if(player.isEmpty(1)&&!cards.length){
                                    player.addTempSkill('bhhuanjian_im2','phaseUseEnd');
                                    event.card = get.cardPile2(function (card) {
                                        return get.subtype(card) == 'equip1';
                                    });
                                    if(event.card){
                                        player.gain(event.card,'gain2');
                                        player.useCard(event.card,player);
                                    } else {
                                        player.say('本姑娘找不到武器了！');
                                        player.draw(2);
                                    }
                                    event.finish();
                                } else {
                                    // if(target.countCards('e',{subtype:'equip1'})){
                                    //     var cardtod=target.getCards('e',{subtype:'equip1'})[0];
                                    //     target.discard(cardtod);
                                    // }
                                    event.card=cards;
                                    if(player.getCards('e').contains(cards[0])) player.addTempSkill('bhhuanjian_im1','phaseUseEnd');
                                    //player.lose(event.card,ui.ordering,'visible');
                                    player.$give(event.card,target,false);
                                }
                                'step 1'
                                target.equip(event.card[0]);
                                player.chooseBool('是否视为对'+get.translation(target)+'使用一张【杀】？').set('ai',function(){
                                    return get.effect(target,{name:'sha'},player,player)>0;
                                });
                                'step 2'
                                game.delayx();
                                'step 3'
                                if(result.bool){
                                    game.playAudio('..','extension','崩崩崩/audio','bhhuanjian_sha'+[1,2].randomGet());
                                    player.useCard({name:'sha',isCard:true},target,false);
                                }
                            },
                            subSkill:{
                                im1:{
                                    sub:true,
                                    charlotte:true,
                                },
                                im2:{
                                    sub:true,
                                    charlotte:true,
                                },
                            },
                            position:'he',
                            ai:{
                                order:function(player){
                                    var player=_status.currentPhase;
                                    if(player.isEmpty(1)&&!player.countCards('hs',{type:"equip"})) return 9.1;
                                    else return 5.1
                                },
                                result:{
                                    player:function(player,target){
                                        if(player.isEmpty(1)&&!player.countCards('hs',{type:"equip"})) return 1;
                                        else return 0.1;
                                    },
                                    target:function(player,target){
                                        if(player.isEmpty(1)&&!player.countCards('hs',{type:"equip"})) return 1;
                                        else return -0.5;
                                    },
                                },
                            },
                        },
                        "bhheminga":{
                            trigger:{
                                player:'useCard',
                            },
                            forced:true,
                            mark:true,
                            intro:{
                                content:"expansion",
                                markcount:"expansion",
                            },
                            filter:function(event,player){
                                if(!event.card.suit) return false;
                                if(!player.getExpansions('bhheminga').length) return false;
                                var cards=player.getExpansions('bhheminga');
                                for(let i of cards){
                                    if(get.suit(i)==event.card.suit) return true;
                                }
                                return false;
                            },
                            content:function(){
                                trigger.directHit.addArray(game.filterPlayer());
                            },
                            ai:{
                                "directHit_ai":true,
                                skillTagFilter:function(player,tag,arg){
                                    if(!arg.card.suit) return false;
                                    if(!player.getExpansions('bhheminga').length) return false;
                                    var cards=player.getExpansions('bhheminga');
                                    var suits=[];
                                    for(let i of cards){
                                        if(!suits.contains(get.suit(i))) suits.push(get.suit(i));
                                    }
                                    if(!suits.contains(arg.card.suit)) return false;
                                },
                            },
                            group:['bhheminga2','bhheminga_give','bhheminga_remove'],
                            subSkill:{
                                give:{
                                    sub:true,
                                    marktext:"赫铭①",
                                    intro:{
                                        content:function(storage,player){
                                            return '与'+get.translation(player.storage.bhheminga_give)+'共享【赫铭】①效果';
                                        },
                                        markcount:function(){
                                            return 0;
                                        },
                                    },
                                    init:function(player){
                                        player.storage.bhheminga_give=[];
                                    },
                                    trigger:{
                                        global:'useCard',
                                    },
                                    forced:true,
                                    filter:function(event,player){
                                        if(event.player==player) return false;
                                        if(!player.storage.bhheminga_give.contains(event.player)) return false;
                                        if(!event.card.suit) return false;
                                        if(!player.getExpansions('bhheminga').length) return false;
                                        var cards=player.getExpansions('bhheminga');
                                        for(let i of cards){
                                            if(get.suit(i)==event.card.suit) return true;
                                        }
                                        return false;
                                    },
                                    content:function(){
                                        trigger.directHit.addArray(game.filterPlayer());
                                    },
                                },
                                remove:{
                                    sub:true,
                                    trigger:{
                                        global:'phaseUseEnd',
                                    },
                                    silent:true,
                                    charlotte:true,
                                    forced:true,
                                    filter:function(event,player){
                                        if(!player.storage.bhheminga_give) return false;
                                        return player.storage.bhheminga_give.contains(event.player);
                                    },
                                    content:function(){
                                        var r=[];
                                        for(let i of player.storage.bhheminga_give){
                                            if(!i.isAlive()) r.push(i);
                                        }
                                        player.storage.bhheminga_give.removeArray(r);
                                        player.storage.bhheminga_give.remove(trigger.player);
                                        player.syncStorage();
                                        if(!player.storage.bhheminga_give.length) player.unmarkSkill('bhheminga_give');
                                    },
                                },
                            },
                            mod:{
                                maxHandcard:function (player, num) {
                                    if(player.getExpansions('bhheminga').length) return num + player.getExpansions('bhheminga').length;
                                },
                            },
                        },
                        "bhheminga2":{
                            trigger:{
                                source:'damageBegin1',
                            },
                            forced:true,
                            silent:true,
                            filter:function(event,player){
                                if(!event.cards||!event.cards.length) return false;
                                if(event.cards.length>1) return false;
                                var cards=player.getExpansions('bhheminga');
                                if(!cards||!cards.length) return true;
                                for(let i of cards){
                                    if(get.suit(i)==event.card.suit) return false;
                                }
                                return true;
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.player;
                                player.chooseBool('是否发动【赫铭】','你可以令此伤害+1，然后将造成伤害的牌置于角色卡上').set('ai',function(){
                                    var att=get.attitude(player,event.target);
                                    if(att>0) return false;
                                    return true;
                                });
                                'step 1'
                                if(result.bool){
                                    player.logSkill('bhheminga');
                                    trigger.num++;
                                    player.addToExpansion(trigger.cards[0],'gain2').gaintag.add('bhheminga');
                                }
                            },
                        },
                        bhxianfeng:{
                            trigger:{
                                player:'loseHpAfter',
                            },
                            frequent:true,
                            content:function(){
                                'step 0'
                                event.card=get.cards()[0];
                                player.showCards(event.card);
                                if(get.tag(event.card, 'damage')){
                                    event.goto(2);
                                } else {
                                    player.chooseTarget('将'+get.translation(event.card)+'交给一名角色',true).set('ai',function(target){
                                        return 10+get.attitude(player,target)-target.countCards('he')+(target==player?0:-1);
                                    });
                                }
                                'step 1'
                                event.target=result.targets[0];
                                player.line(event.target);
                                event.target.gain(event.card,'cardPile','gain2');
                                event.target.draw();
                                if(player.hasSkill('bhheminga')&&!player.storage.bhheminga_give.contains(event.target)&&event.target!=player){
                                    player.storage.bhheminga_give.push(event.target);
                                    player.syncStorage('bhheminga_give');
                                    player.markSkill('bhheminga_give');
                                }
                                event.finish();
                                'step 2'
                                if(game.hasPlayer(function(target){
                                    return player.canUse(event.card,target,false);
                                })){
                                    player.chooseTarget('请选择'+get.translation(event.card)+'的目标',lib.card[event.card.name].selectTarget,function(card,player,target){
                                        return player.canUse(event.card,target,false);
                                    },true).set('ai',function(target){
                                        return get.effect(target,event.card,player,player);
                                    });
                                } else event.finish();
                                'step 3'
                                player.useCard(event.card,result.targets,false);
                                if(!player.storage.bhxianfeng_dis) player.storage.bhxianfeng_dis=[];
                                player.storage.bhxianfeng_dis.addArray(result.targets);
                                player.addTempSkill('bhxianfeng_dis');
                                player.markSkill('bhxianfeng_dis');
                            },
                            group:'bhxianfeng_use',
                            subSkill:{
                                use:{
                                    trigger:{
                                        player:'phaseUseBegin',
                                    },
                                    prompt:'是否发动【先锋】',
                                    'prompt2':'出牌阶段开始时，你可以失去1点体力',
                                    check:function(event,player){
                                        return player.hp>1||player.countCards('hs',{name:['tao','jiu','bhbenghuaijiejing']});
                                    },
                                    filter:function(event,player){
                                        return player.hp>0;
                                    },
                                    content:function(){
                                        player.loseHp();
                                    },
                                },
                                dis:{
                                    sub:true,
                                    intro:{
                                        content:"到$的距离视为1",
                                    },
                                    mod:{
                                        globalFrom:function (from, to,distance) {
                                            if(!from.storage.bhxianfeng_dis) return distance;
                                            if (from.storage.bhxianfeng_dis.contains(to)) {
                                                return -Infinity;
                                            }
                                        },
                                    },
                                },
                            },
                        },
                        "bhhemingb":{},
                        bhguibing:{
                            trigger:{
                                global:"loseHpAfter",
                            },
                            filter:function(event,player){
                                return player.countCards('hes',{color:"black"})&&event.player!=player&&event.player.isAlive();
                            },
                            check:function(event,player){
                                return get.attitude(player,event.player)<0;
                            },
                            logTarget:function(event,player){
                                return event.player;
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.player;
                                player.chooseToDiscard('请弃置一张黑色牌','hes',function(card){
                                    return get.color(card)=='black';
                                },true).set('ai',function(card){
                                    return 8-get.value(card);
                                });
                                'step 1'
                                if(!event.target.countCards('h')){
                                    event.target.loseHp();
                                    event.finish();
                                } else {
                                    var str1='展示所有手牌并令'+get.translation(player)+'获得其中一种花色的所有牌',str2='失去1点体力';
                                    event.target.chooseControlList([str1,str2],true).set('ai',function(){
                                        var cards=event.target.getCards('h');
                                        var values=[0,0,0,0],val;
                                        for(let i of cards){
                                            if(get.suit(i)=='heart') values[0]+=get.value(i);
                                            else if(get.suit(i)=='spade') values[1]+=get.value(i);
                                            else if(get.suit(i)=='club') values[2]+=get.value(i);
                                            else values[3]+=get.value(i);
                                        }
                                        val=Math.max(values[0],values[1],values[2],values[3]);
                                        if(val>6*(5-player.hp)&&event.target.hp>1) return 1;
                                        else return 0;
                                    });
                                }
                                'step 2'
                                if(result.index==1){
                                    event.target.loseHp();
                                    event.finish();
                                }
                                'step 3'
                                var cards=event.target.getCards('h');
                                event.target.showCards(cards);
                                var suits=[];
                                for(let i of cards){
                                    if(!suits.contains(get.suit(i))) suits.push(get.suit(i));
                                }
                                player.chooseControl(suits,true).set('prompt','请选择一种花色的牌获得之').set('ai',function(){
                                    var cards=event.target.getCards('h');
                                    var values=[0,0,0,0],val;
                                    for(let i of cards){
                                        if(get.suit(i)=='heart') values[0]+=get.value(i);
                                        else if(get.suit(i)=='spade') values[1]+=get.value(i);
                                        else if(get.suit(i)=='club') values[2]+=get.value(i);
                                        else values[3]+=get.value(i);
                                    }
                                    val=Math.max(values[0],values[1],values[2],values[3]);
                                    if(values[0]==val) return 'heart';
                                    else if(values[0]==val) return 'spade';
                                    else if(values[0]==val) return 'club';
                                    else return 'diamond';
                                });
                                'step 4'
                                var cards=event.target.getCards('h');
                                event.cards=[];
                                event.suit=result.control;
                                for(let i of cards){
                                    if(get.suit(i)==event.suit) event.cards.push(i);
                                }
                                player.gain(event.cards,event.target,'giveAuto');
                            },
                            ai:{
                                threaten:1.1,
                            },
                        },
                        bhshenyi:{
                            trigger:{
                                global:"phaseJieshu",
                            },
                            direct:true,
                            content:function(){
                                'step 0'
                                if(player.storage.bhshenyi_lose>=2){
                                    player.chooseTarget('是否发动【神医】','令一名其他角色回复1点体力并执行效果',function(card,player,target){
                                        return target!=player;
                                    }).set('ai',function(target){
                                        var att=get.attitude(player,target);
                                        if(att>0&&target.hp<target.maxHp) return att+1;
                                        if(att<0&&target.hp==target.maxHp&&target.group!='bhbenghuai') return -att+2;
                                        if(att<0&&target.group=='bhbenghuai') return 0;
                                        return -att-1;
                                    });
                                } else event.goto(6);
                                'step 1'
                                if(result.bool){
                                    event.target=result.targets[0];
                                    player.logSkill('bhshenyi',event.target);
                                    player.line(event.target);
                                    event.target.recover();
                                    if(game.hasPlayer(function(target){
                                        return target!=player&&target!=event.target&&target.countCards('hes');
                                    })){
                                        var str1='交给'+get.translation(player)+'一张牌并视为对其指定的角色使用一张【决斗】';
                                        var str2='视为使用了一张【崩坏结晶】';
                                        event.target.chooseControlList([str1,str2],true).set('ai',function(){
                                            if(get.attitude(event.target,player)>0) return 0;
                                            var num=player.countCards('hes');
                                            if(parseInt(num/2)<2||game.hasPlayer(function(target){
                                                return get.attitude(event.target,target)>0&&target.hp<2;
                                            })||event.target.group=='bhbenghuai') return 1;
                                            else return 0;
                                        });
                                    } else event.goto(5);
                                } else event.goto(6);
                                'step 2'
                                if(result.index==0){
                                    event.target.chooseCard('选择一张牌交给'+get.translation(player),'hes',true).set('ai',function(card){
                                        return 8-get.value(card);
                                    });
                                } else event.goto(5);
                                'step 3'
                                player.gain(result.cards[0],event.target,'giveAuto');
                                player.chooseTarget('请选择'+get.translation(event.target)+'使用【决斗】的目标',function(card,player,target){
                                    return target!=player&&target!=event.target;
                                },true).set('ai',function(target){
                                    return -get.attitude(player,target);
                                });
                                'step 4'
                                event.target2=result.targets[0];
                                //player.line(event.target2);
                                event.target.useCard({name:'juedou',isCard:true},event.target2);
                                event.goto(6);
                                'step 5'
                                event.target.useCard({name:"bhbenghuaijiejing",isCard:true},event.target);
                                'step 6'
                                player.storage.bhshenyi_lose=0;
                            },
                            group:['bhshenyi_lose','bhshenyi_use'],
                            subSkill:{
                                done:{
                                    sub:true,
                                    charlotte:true,
                                },
                                use:{
                                    //prompt:"是否发动【神医】？",
                                    prompt:function(event,player){
                                        var player=_status.currentPhase;
                                        if(!player.hasSkill('bhshenyi_done')) return "神医：出牌阶段，你可以重铸♥牌。";
                                        else return "神医：出牌阶段，你可以重铸红色牌。";
                                    },
                                    enable:'phaseUse',
                                    filter:function(event,player){
                                        if(!player.hasSkill('bhshenyi_done')) return player.countCards('hes',{suit:"heart"})>0;
                                        else return player.countCards('hes',{color:'red'});
                                    },
                                    position:"he",
                                    filterCard:function(card,player,target){
                                        var player=_status.currentPhase;
                                        if(!player.hasSkill('bhshenyi_done')) return get.suit(card)=='heart';
                                        else return get.color(card)=='red';
                                    },
                                    prepare:function(cards,player){
                                        player.loseToDiscardpile(cards).visible=true;
                                        //game.log(player,'将',cards,'置入了弃牌堆');
                                    },
                                    discard:false,
                                    lose:false,
                                    //loseTo:"discardPile",
                                    //visible:true,
                                    delay:false,
                                    content:function(){
                                        if(!player.hasSkill('bhshenyi_done')) player.addTempSkill('bhshenyi_done','phaseUseEnd');
                                        player.draw();
                                    },
                                    ai:{
                                        basic:{
                                            order:2,
                                        },
                                        result:{
                                            player:1,
                                        },
                                    },
                                },
                                lose:{
                                    init:function(player){
                                        player.storage.bhshenyi_lose=0;
                                    },
                                    trigger:{
                                        player:"loseAfter",
                                        global:["equipAfter","addJudgeAfter","gainAfter","loseAsyncAfter","addToExpansionAfter"],
                                    },
                                    direct:true,
                                    filter:function(event,player){
                                        var evt=event.getl(player);
                                        if(!(evt&&evt.player==player&&((evt.hs&&evt.hs.length>0)||(evt.es&&evt.es.length>0)))) return false;
                                        for(let i of evt.hs){
                                            if(get.color(i)=='red') return true;
                                        }
                                        for(let i of evt.es){
                                            if(get.color(i)=='red') return true;
                                        }
                                        return false;
                                    },
                                    content:function(){
                                        var evt=trigger.getl(player);
                                        event.num=0;
                                        //game.log(evt.hs,evt.es);
                                        for(let i of evt.hs){
                                            if(get.color(i)=='red') event.num++;
                                        }
                                        for(let i of evt.es){
                                            if(get.color(i)=='red') event.num++;
                                        }
                                        player.storage.bhshenyi_lose+=event.num;
                                    },
                                    sub:true,
                                },
                            },
                            ai:{
                                threaten:1.5,
                            },
                        },
                        bhqixing:{
                            unique:true,
                            trigger:{
                                global:"phaseBefore",
                                player:"enterGame",
                            },
                            forced:true,
                            filter:function(event,player){
                                return (event.name!='phase'||game.phaseNumber==0);
                            },
                            content:function(){
                                "step 0"
                                player.addToExpansion(get.cards(7),'gain2').gaintag.add('qixing');
                                "step 1"
                                var cards=player.getExpansions('qixing');
                                if(!cards.length||!player.countCards('h')){
                                    event.finish();
                                    return;
                                }
                                var next=player.chooseToMove('七星：是否交换“星”和手牌？');
                                next.set('list',[
                                    [get.translation(player)+'（你）的星',cards],
                                    ['手牌区',player.getCards('h')],
                                ]);
                                next.set('filterMove',function(from,to){
                                    return typeof to!='number';
                                });
                                next.set('processAI',function(list){
                                    var player=_status.event.player,cards=list[0][1].concat(list[1][1]).sort(function(a,b){
                                        return get.useful(a)-get.useful(b);
                                    }),cards2=cards.splice(0,player.getExpansions('qixing').length);
                                    return [cards2,cards];
                                });
                                "step 2"
                                if(result.bool){
                                    var pushs=result.moved[0],gains=result.moved[1];
                                    pushs.removeArray(player.getExpansions('qixing'));
                                    gains.removeArray(player.getCards('h'));
                                    if(!pushs.length||pushs.length!=gains.length) return;
                                    player.addToExpansion(pushs,player,'giveAuto').gaintag.add('qixing');
                                    game.log(player,'将',pushs,'作为“星”置于角色卡上');
                                    player.gain(gains,'gain2');
                                }
                            },
                            intro:{
                                markcount:"expansion",
                                mark:function(dialog,content,player){
                                    var content=player.getExpansions('qixing');
                                    if(content&&content.length){
                                        if(player==game.me||player.isUnderControl()){
                                            dialog.addAuto(content);
                                        }
                                        else{
                                            return '共有'+get.cnNumber(content.length)+'张星';
                                        }
                                    }
                                },
                                content:function(content,player){
                                    var content=player.getExpansions('qixing');
                                    if(content&&content.length){
                                        if(player==game.me||player.isUnderControl()){
                                            return get.translation(content);
                                        }
                                        return '共有'+get.cnNumber(content.length)+'张星';
                                    }
                                },
                            },
                            group:["bhqixing2"],
                            ai:{
                                combo:"dawu",
                            },
                        },
                        "bhqixing2":{
                            trigger:{
                                player:"phaseDrawAfter",
                            },
                            direct:true,
                            filter:function(event,player){
                                return player.getExpansions('qixing').length>0&&player.countCards('h')>0;
                            },
                            content:function(){
                                "step 0"
                                var cards=player.getExpansions('qixing');
                                if(!cards.length||!player.countCards('h')){
                                    event.finish();
                                    return;
                                }
                                var next=player.chooseToMove('七星：是否交换“星”和手牌？');
                                next.set('list',[
                                    [get.translation(player)+'（你）的星',cards],
                                    ['手牌区',player.getCards('h')],
                                ]);
                                next.set('filterMove',function(from,to){
                                    return typeof to!='number';
                                });
                                next.set('processAI',function(list){
                                    var player=_status.event.player,cards=list[0][1].concat(list[1][1]).sort(function(a,b){
                                        return get.value(a)-get.value(b);
                                    }),cards2=cards.splice(0,player.getExpansions('qixing').length);
                                    return [cards2,cards];
                                });
                                "step 1"
                                if(result.bool){
                                    var pushs=result.moved[0],gains=result.moved[1];
                                    pushs.removeArray(player.getExpansions('qixing'));
                                    gains.removeArray(player.getCards('h'));
                                    if(!pushs.length||pushs.length!=gains.length) return;
                                    player.logSkill('qixing2');
                                    player.addToExpansion(pushs,player,'giveAuto').gaintag.add('qixing');
                                    game.log(player,'将',pushs,'作为“星”置于角色卡上');
                                    player.gain(gains,'gain2');
                                }
                            },
                        },
                        bhhuangyue:{
                            trigger:{
                                global:['useCardBegin','respondBegin'],
                            },
                            filter:function(event,player){
                                if(player.hasSkill('bhhuangyue_im')) return false;
                                if(get.type(event.card)=='equip') return false;
                                if(!event.cards||!event.cards.length) return false;
                                return player.getExpansions('qixing').length>0;
                            },
                            direct:true,
                            content:function(){
                                player.logSkill('bhhuangyue');
                                var cards=player.getExpansions('qixing');
                                event.card=cards.randomGet();
                                event.target=trigger.player;
                                event.target.$gain2(event.card);
                                event.card2=trigger.cards.randomGet();
                                trigger.cards.remove(event.card2);
                                player.addToExpansion(event.card2,'gain2').gaintag.add('qixing');
                                trigger.cards.push(event.card);
                            },
                            group:['bhhuangyue_damage','bhhuangyue_change'],
                            subSkill:{
                                gain:{
                                    sub:true,
                                    frequent:true,
                                    trigger:{
                                        global:"roundStart",
                                    },
                                    filter:function(event,player){
                                        if(player.hasSkill('bhhuangyue_im')) return false;
                                        return true;
                                    },
                                    content:function(){
                                        if(player.getExpansions('qixing').length<7){
                                            var cards=get.cards(2);
                                            player.addToExpansion(cards,'gain2').gaintag.add('qixing');
                                        } else {
                                            player.draw(2);
                                        }
                                    },
                                },
                                lm:{
                                    sub:true,
                                    charlotte:true,
                                },
                                im:{
                                    charlotte:true,
                                    forced:true,
                                    silent:true,
                                    sub:true,
                                    trigger:{
                                        player:"phaseEnd",
                                    },
                                    init:function(player){
                                        player.markSkill('bhhuangyue_im');
                                    },
                                    intro:{
                                        name:"煌月",
                                        content:"失效中",
                                        markcount:function(){return 0},
                                    },
                                    content:function(){
                                        player.removeSkill('bhhuangyue_im');
                                        player.unmarkSkill('bhhuangyue_im');
                                    },
                                },
                                damage:{
                                    sub:true,
                                    frequent:true,
                                    trigger:{
                                        player:'damageEnd',
                                    },
                                    filter:function(event,player){
                                        if(player.hasSkill('bhhuangyue_im')) return false;
                                        return true;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.num=trigger.num;
                                        'step 1'
                                        event.num--;
                                        if(player.getExpansions('qixing').length<7){
                                            var cards=get.cards(2);
                                            player.addToExpansion(cards,'gain2').gaintag.add('qixing');
                                        } else {
                                            player.draw(2);
                                        }
                                        'step 2'
                                        if(event.num>0) event.goto(1);
                                    },
                                },
                                change:{
                                    sub:true,
                                    trigger:{
                                        global:"phaseEnd",
                                    },
                                    check:function(event,player){
                                        var cards=player.getExpansions('qixing');
                                        for(let i of cards){
                                            if(get.value(i)>8&&player.countCards('h',function(card){
                                                return get.value(i)-get.value(card)>2;
                                            })) return player.countCards('he')>1;
                                            else return false;
                                        }
                                    },
                                    filter:function(event,player){
                                        if(player.hasSkill('bhhuangyue_im')||player.hasSkill('bhhuangyue_lm')) return false;
                                        if(!player.getExpansions('qixing').length) return false;
                                        return player.countCards('he')>0;
                                    },
                                    prompt:'是否发动【煌月】',
                                    "prompt2":"每轮限一次，一名角色的回合结束时，你可以用任意数量的手牌替换等量的“星”，然后令此技能失效直到你的回合结束。",
                                    content:function(){
                                        "step 0"
                                        var cards=player.getExpansions('qixing');
                                        if(!cards.length||!player.countCards('he')){
                                            event.finish();
                                            return;
                                        }
                                        var next=player.chooseToMove('七星：是否交换“星”和手牌？');
                                        next.set('list',[
                                            [get.translation(player)+'（你）的星',cards],
                                            ['区域',player.getCards('he')],
                                        ]);
                                        next.set('filterMove',function(from,to){
                                            return typeof to!='number';
                                        });
                                        next.set('processAI',function(list){
                                            var player=_status.event.player,cards=list[0][1].concat(list[1][1]).sort(function(a,b){
                                                return get.value(a)-get.value(b);
                                            }),cards2=cards.splice(0,player.getExpansions('qixing').length);
                                            return [cards2,cards];
                                        });
                                        "step 1"
                                        if(result.bool){
                                            var pushs=result.moved[0],gains=result.moved[1];
                                            pushs.removeArray(player.getExpansions('qixing'));
                                            gains.removeArray(player.getCards('he'));
                                            if(!pushs.length||pushs.length!=gains.length) return;
                                            player.logSkill('qixing2');
                                            player.addToExpansion(pushs,player,'giveAuto').gaintag.add('qixing');
                                            game.log(player,'将',pushs,'作为“星”置于角色卡上');
                                            player.gain(gains,'gain2');
                                        } else event.finish();
                                        "step 2"
                                        player.addSkill('bhhuangyue_im');
                                        player.addTempSkill('bhhuangyue_lm','roundStart');
                                    },
                                },
                            },
                        },
                        bhxingzhen:{
                            trigger:{
                                player:"phaseJieshu",
                            },
                            skillAnimation:true,
                            animationColor:"metal",
                            filter:function(event,player){
                                if(!player.getExpansions('qixing').length) return false;
                                return true;
                            },
                            direct:true,
                            content:function(){
                                'step 0'
                                var cards=player.getExpansions('qixing');
                                player.chooseButton(['星阵：请选择点数和为7的正整数倍的“星”',cards],function(button){
                                    return 2;
                                }).set('filterButton',function(button){
                                    if(!ui.selected.buttons.length) return true;
                                    var cards=player.getExpansions('qixing');
                                    var num=0,num2=0;
                                    for(let i of cards){
                                        num2+=get.number(i);
                                    }
                                    for(var i=0;i<ui.selected.buttons.length;i++){
                                        num+=get.number(ui.selected.buttons[i]);
                                    }
                                    return get.number(button.link)+num<=7*parseInt(num2/7);
                                }).set('selectButton',function(){
                                    var num=0;
                                    for(var i=0;i<ui.selected.buttons.length;i++){
                                        num+=get.number(ui.selected.buttons[i]);
                                    }
                                    if(num%7==0&&num>0) return [ui.selected.buttons.length,ui.selected.buttons.length+2];
                                    return ui.selected.buttons.length+2;
                                });
                                'step 1'
                                if(result.bool){
                                    event.cards=result.links;
                                    player.chooseTarget('请选择一名角色执行【星阵】效果',true).set('ai',function(target){
                                        var att=get.attitude(player,target);
                                        if(att>0) return -2;
                                        if(target.isTurnedOver()) return -att-8;
                                        return -att;
                                    });
                                } else event.finish();
                                'step 2'
                                event.target=result.targets[0];
                                player.line(event.target);
                                player.logSkill('bhxingzhen',event.target);
                                player.showCards(event.cards);
                                'step 3'
                                var x=0,y=0,z=0;
                                for(let i of event.cards){
                                    if(get.type(i)=='equip') x++;
                                    else if(get.type(i)=='basic') z++;
                                    else y++;
                                }
                                x=parseInt((x+1)/2);
                                y=parseInt((y+1)/2);
                                event.nums=[x,y,z];
                                if(x>0){
                                    event.target.damage(x);
                                }
                                'step 4'
                                var y=event.nums[1],z=event.nums[2];
                                if(y>0){
                                    player.storage.bhxingzhen_remove=[event.target,(y+2)];
                                    player.addSkill('bhxingzhen_remove');
                                    event.target.addTempSkill('diaohulishan','bhxingzhen_remove');
                                }
                                if(z>=2) event.target.turnOver();
                                if(z>0&&event.target.isAlive()){
                                    player.chooseButton(['将'+get.cnNumber(z)+'张“星”交给'+get.translation(event.target),event.cards],z,function(button){
                                        return 8-get.value(button.link);
                                    },true);
                                } else event.goto(6);
                                'step 5'
                                event.cards.removeArray(result.links);
                                event.target.gain(result.links,'gain2');
                                'step 6'
                                player.loseToDiscardpile(event.cards);
                            },
                            subSkill:{
                                remove:{
                                    sub:true,
                                    trigger:{
                                        global:"phaseEnd",
                                    },
                                    forced:true,
                                    silent:true,
                                    charlotte:true,
                                    filter:function(event,player){
                                        return player.storage.bhxingzhen_remove;
                                    },
                                    content:function(){
                                        player.storage.bhxingzhen_remove[1]--;
                                        if(player.storage.bhxingzhen_remove[1]<=0){
                                            //player.storage.bhxingzhen_remove[0].removeSkill('diaohulishan');
                                            event.trigger('bhxingzhen_remove');
                                            player.removeSkill('bhxingzhen_remove');
                                            delete player.storage.bhxingzhen_remove;
                                        }
                                    },
                                },
                            },
                        },
                        bhdaijiang:{
                            forced:true,
                            trigger:{
                                player:['useCard','respond'],
                            },
                            filter:function(event,player){
                                return !player.storage.bhdaijiang_im||player.storage.bhdaijiang_im<3;
                            },
                            init:function(player){
                                player.storage.bhdaijiang=[0,0,0];
                            },
                            mark:true,
                            intro:{
                                content:function(storage,player){
                                    var str='<li>“欢欣”之附魔：';
                                    if(player.storage.bhdaijiang[0]>0) str+=player.storage.bhdaijiang[0];
                                    else str+='无';
                                    str+='<br><li>“圣谕”之附魔：';
                                    if(player.storage.bhdaijiang[1]>0) str+=player.storage.bhdaijiang[1];
                                    else str+='无';
                                    str+='<br><li>“决起”之附魔：';
                                    if(player.storage.bhdaijiang[2]>0) str+=player.storage.bhdaijiang[2];
                                    else str+='无';
                                    return str;
                                },
                                markcount:function(storage,player){
                                    return 0;
                                },
                            },
                            content:function(){
                                var type=get.type(trigger.card);
                                if(type=='basic') event.index=0;
                                else if(['trick','delay'].contains(type)) event.index=1;
                                else event.index=2;
                                player.storage.bhdaijiang[event.index]++;
                                if(!player.storage.bhdaijiang_im) player.storage.bhdaijiang_im=0;
                                player.storage.bhdaijiang_im++;
                                player.syncStorage('bhdaijiang');
                            },
                            group:['bhdaijiang_dis','bhdaijiang_im'],
                            subSkill:{
                                dis:{
                                    trigger:{
                                        player:'discardAfter',
                                    },
                                    forced:true,
                                    filter:function(event,player){
                                        return !player.storage.bhdaijiang_im||player.storage.bhdaijiang_im<3;
                                    },
                                    content:function(){
                                        var type;
                                        for(let i of trigger.cards){
                                            type=get.type(i);
                                            if(type=='basic') event.index=0;
                                            else if(['trick','delay'].contains(type)) event.index=1;
                                            else event.index=2;
                                            player.storage.bhdaijiang[event.index]++;
                                            player.syncStorage('bhdaijiang');
                                        }
                                        if(!player.storage.bhdaijiang_im) player.storage.bhdaijiang_im=0;
                                        player.storage.bhdaijiang_im++;
                                    },
                                },
                                im:{
                                    sub:true,
                                    trigger:{
                                        global:'phaseEnd',
                                    },
                                    forced:true,
                                    charlotte:true,
                                    silent:true,
                                    filter:function(event,player){
                                        return player.storage.bhdaijiang_im&&player.storage.bhdaijiang_im>0;
                                    },
                                    content:function(){
                                        player.storage.bhdaijiang_im=0;
                                    },
                                },
                            },
                        },
                        bhmengen:{
                            trigger:{
                                global:'phaseEnd',
                            },
                            direct:true,
                            filter:function(event,player){
                                if(event.player==player) return false;
                                if(!event.player.storage.bhmengen_card||!event.player.storage.bhmengen_card.length) return false;
                                return event.player.isAlive();
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.player;
                                trigger.player.chooseBool('蒙恩：是否令'+get.translation(player)+'随机获得本回合你弃置的牌中的一张？').set('ai',function(){
                                    return get.attitude(event.target,player)>0;
                                });
                                'step 1'
                                if(result.bool){
                                    player.logSkill('bhmengen',trigger.player);
                                    trigger.player.line(player);
                                    var cards;
                                    cards=trigger.player.storage.bhmengen_card;
                                    if(cards.length){
                                        var card1=cards.randomGet();
                                        // var card2=get.cardPile2(function(card){
                                        //     return card==card1;
                                        // });
                                        player.gain(card1,'gain2');
                                    }
                                }
                                'step 2'
                                event.targets=game.filterPlayer(function(target){
                                    return target.storage.bhmengen_card;
                                });
                                for(let i of event.targets){
                                    delete i.storage.bhmengen_card;
                                }
                            },
                            group:'bhmengen_card',
                            subSkill:{
                                card:{
                                    sub:true,
                                    frequent:true,
                                    silent:true,
                                    trigger:{
                                        global:'discardAfter',
                                    },
                                    filter:function(event,player){
                                        if(event.player!=_status.currentPhase) return false;
                                        return event.cards.length>0;
                                    },
                                    content:function(){
                                        event.target=trigger.player;
                                        if(!event.target.storage.bhmengen_card) event.target.storage.bhmengen_card=[];
                                        event.target.storage.bhmengen_card.addArray(trigger.cards);
                                    },
                                },
                            },
                        },
                        bhfumo:{
                            derivation:['bhfumo1','bhfumo2','bhfumo3','bhfumo4','bhfumo5'],
                            enable:'phaseUse',
                            usable:2,
                            filter:function(event,player){
                                return player.countCards('h')&&game.hasPlayer(function(target){
                                    return target.countCards('e');
                                });
                            },
                            filterCard:true,
                            selectCard:1,
                            position:'h',
                            filterTarget:function(card,player,target){
                                return target.countCards('e');
                            },
                            // check:function(card,player,target){
                            //     var att=get.attitude(player,target);
                            //     var color=get.color(card);
                            //     if(color=='red'&&att>0) return true;
                            //     else if(color=='black'&&att<0) return true;
                            //     else return false;
                            // },
                            selectTarget:1,
                            content:function(){
                                'step 0'
                                event.target=targets[0];
                                event.color=get.color(cards[0]);
                                player.choosePlayerCard('e',event.target,true).set('ai',function(card){
                                    return get.value(card);
                                });
                                'step 1'
                                event.card=result.cards[0];
                                if(event.card.name.search('bhfumo')==-1){
                                    var card=event.card.name;
                                    var suit=get.suit(event.card);
                                    var num=get.number(event.card);
                                    var name2='bhfumo_0000000'+card;
                                    var skills1=[],skills2 = lib.card[card].skills || [];
                                    if (skills2) {
                                        for (var i = 0; i < skills2.length; i++)
                                            if (skills2[i].search('chonggou') == -1) skills1.push(skills2[i]);
                                    }
                                    if (!lib.card[name2]) {
                                        var info = {
                                            enable: true,
                                            type: 'equip',
                                            subtype: lib.card[card].subtype,
                                            image: lib.card[card].image,
                                            fullskin:lib.card[card].fullskin,
                                            fullimage:lib.card[card].fullimage,
                                            cardimage: card,
                                            filterTarget: function (card, player, target) {
                                                return target == player;
                                            },
                                            allowMultiple: false,
                                            toself: true,
                                            selectTarget: -1,
                                            modTarget: true,
                                            content: lib.element.content.equipCard,
                                            legend: true,
                                            onEquip: lib.card[card].onEquip,
                                            onLose: lib.card[card].onLose,
                                            skills: skills1,
                                            distance: lib.card[card].distance,
                                            ai: {
                                                order: 8,
                                                basic: {
                                                    equipValue: 10,
                                                },
                                                equipValue: 9,
                                                useful: 2.5,
                                            }
                                        }
                                        lib.card[name2] = info;
                                        lib.translate[name2] = '附魔·' + get.translation(card);
                                        lib.translate[name2 + '_info'] = lib.translate[card + '_info'];
                                    }
                                    //lib.inpile.remove(cards[0].name);
                                    event.card.remove();
                                    event.card.destroyed = true;
                                    event.card = game.createCard({ name: name2, suit: suit, number: num });
                                    event.target.equip(event.card);
                                    //event.card.init(game.createCard({ name: name2, suit: suit, number: num }));
                                }
                                'step 2'
                                if(event.color=='black'){
                                    var card=event.card.name;
                                    var destroyed=parseInt(card.slice(7,8));
                                    var suit=get.suit(event.card);
                                    var num=get.number(event.card);
                                    if(destroyed==0){
                                        var name2=card.slice(0,7)+'1'+card.slice(8,card.length);
                                        var card0=card.slice(14);
                                        var skills1=[];
                                        if (!lib.card[name2]) {
                                            var info = {
                                                enable: true,
                                                type: 'equip',
                                                subtype: lib.card[card].subtype,
                                                image: lib.card[card0].image,
                                                fullskin:lib.card[card0].fullskin,
                                                fullimage:lib.card[card0].fullimage,
                                                cardimage:card0,
                                                filterTarget: function (card, player, target) {
                                                    return target == player;
                                                },
                                                allowMultiple: false,
                                                toself: true,
                                                selectTarget: -1,
                                                modTarget: true,
                                                content: lib.element.content.equipCard,
                                                legend: true,
                                                // onEquip: lib.card[card].onEquip,
                                                // onLose: lib.card[card].onLose,
                                                skills: skills1,
                                                //distance: lib.card[card].distance,
                                                ai: {
                                                    order: 8,
                                                    basic: {
                                                        equipValue: 0.1,
                                                    },
                                                    equipValue: 0.1,
                                                    useful: 0.1,
                                                }
                                            }
                                            lib.card[name2] = info;
                                            lib.translate[name2] = '崩毁·'+get.translation(card.slice(14));
                                            lib.translate[name2 + '_info'] = '（失效中）'+lib.translate[card + '_info'];
                                        }
                                        event.card.remove();
                                        event.card.destroyed = true;
                                        event.card = game.createCard({ name: name2, suit: suit, number: num });
                                        event.target.equip(event.card);
                                        // event.card.init(game.createCard({ name: name2, suit: suit, number: num }));
                                        // player.equip(event.card);
                                        event.trigger('bhfumo_add');
                                    } else {
                                        var name2=card.slice(0,7)+'0'+card.slice(8,card.length);
                                        event.card.remove();
                                        event.card.destroyed = true;
                                        event.card = game.createCard({ name: name2, suit: suit, number: num });
                                        event.target.equip(event.card);
                                        // event.card.init(game.createCard({ name: name2, suit: suit, number: num }));
                                        // player.equip(event.card);
                                        event.trigger('bhfumo_add');
                                    }
                                    event.finish();
                                }
                                'step 3'
                                event.index=[0,0,0];
                                event.used=[0,0,0];
                                event.stringl=-1;
                                event.str='0';
                                if(!event.target.storage.bhfumo_add) event.target.storage.bhfumo_add=[];
                                for(var i=0;i<event.target.storage.bhfumo_add.length;i++){
                                    if(event.target.storage.bhfumo_add[i].slice(14)==event.card.name.slice(14)){
                                        var stringl=event.target.storage.bhfumo_add[i];
                                        event.index[0]+=parseInt(stringl.slice(8,10));
                                        event.index[1]+=parseInt(stringl.slice(10,12));
                                        event.index[2]+=parseInt(stringl.slice(12,14));
                                        event.stringl=i;
                                    }
                                }
                                if(!player.hasSkill('bhdaijiang')||!player.storage.bhdaijiang[0]){
                                    event.str+='00';
                                    event.goto(5);
                                } else {
                                    player.chooseBool('是否为'+get.translation(event.card)+'添加“欢欣”之附魔？（共有'+player.storage.bhdaijiang[0]+'个）').set('ai',function(){
                                        return true;
                                    });
                                }
                                'step 4'
                                if(result.bool){
                                    var card=event.card.name;
                                    var num=player.storage.bhdaijiang[0];
                                    var num2 = Math.ceil(Math.random() * num);
                                    var num0=parseInt(card.slice(8,10));
                                    if(num2==0) num2=1;
                                    player.storage.bhdaijiang[0]-=num2;
                                    event.used[0]=num2;
                                    player.syncStorage('bhdaijiang');
                                    event.index[0]+=(num2+num0);
                                    if(event.index[0]<10) event.str+=('0'+event.index[0]);
                                    else if(event.index[0]>99) event.str+='99';
                                    else event.str+=event.index[0];
                                } else {
                                    event.str+='00';
                                }
                                'step 5'
                                if(!player.hasSkill('bhdaijiang')||!player.storage.bhdaijiang[1]){
                                    event.str+='00';
                                    event.goto(7);
                                } else {
                                    player.chooseBool('是否为'+get.translation(event.card)+'添加“圣谕”之附魔？（共有'+player.storage.bhdaijiang[1]+'个）').set('ai',function(){
                                        return true;
                                    });
                                }
                                'step 6'
                                if(result.bool){
                                    var card=event.card.name;
                                    var num=player.storage.bhdaijiang[1];
                                    var num2 = Math.ceil(Math.random() * num);
                                    var num0=parseInt(card.slice(10,12));
                                    if(num2==0) num2=1;
                                    player.storage.bhdaijiang[1]-=num2;
                                    event.used[1]=num2;
                                    player.syncStorage('bhdaijiang');
                                    event.index[1]+=(num2+num0);
                                    if(event.index[1]<10) event.str+=('0'+event.index[1]);
                                    else if(event.index[1]>99) event.str+='99';
                                    else event.str+=event.index[1];
                                } else {
                                    event.str+='00';
                                }
                                'step 7'
                                if(!player.hasSkill('bhdaijiang')||!player.storage.bhdaijiang[2]){
                                    event.str+='00';
                                    event.goto(9);
                                } else {
                                    player.chooseBool('是否为'+get.translation(event.card)+'添加“决起”之附魔？（共有'+player.storage.bhdaijiang[2]+'个）').set('ai',function(){
                                        return true;
                                    });
                                }
                                'step 8'
                                if(result.bool){
                                    var card=event.card.name;
                                    var num=player.storage.bhdaijiang[2];
                                    var num2 = Math.ceil(Math.random() * num);
                                    var num0=parseInt(card.slice(12,14));
                                    if(num2==0) num2=1;
                                    player.storage.bhdaijiang[2]-=num2;
                                    event.used[2]=num2;
                                    player.syncStorage('bhdaijiang');
                                    event.index[2]+=(num2+num0);
                                    if(event.index[2]<10) event.str+=('0'+event.index[2]);
                                    else if(event.index[2]>99) event.str+='99';
                                    else event.str+=event.index[2];
                                } else {
                                    event.str+='00';
                                }
                                'step 9'
                                player.chooseButton(['“铭记”附魔成功<br>分别使用“欢欣”/“圣谕”/“决起”之附魔'+event.used[0]+'/'+event.used[1]+'/'+event.used[2]+'个',[event.card]],true);
                                'step 10'
                                if(event.stringl>-1){
                                    event.target.storage.bhfumo_add[event.stringl]=(event.card.name.slice(0,7)+event.str+event.card.name.slice(14));
                                } else {
                                    event.target.storage.bhfumo_add.push(event.card.name.slice(0,7)+event.str+event.card.name.slice(14));
                                }
                                event.target.addSkill('bhfumo_add');
                            },
                            ai:{
                                order:8.8,
                                result:{
                                    player:function(player,target){
                                        if(!ui.selected.cards) return 0;
                                        var card=ui.selected.cards[0];
                                        var att=get.attitude(player,target);
                                        var color=get.color(card);
                                        if(color=='red'&&att>0) return 4;
                                        else if(color=='black'&&att<0) return 5;
                                        else return 0;
                                    },
                                },
                            },
                        },
                        'bhfumo_add':{
                            forced:true,
                            charlotte:true,
                            silent:true,
                            trigger:{
                                player:'damageEnd',
                                source:'damageEnd',
                            },
                            filter:function(event,player){
                                if(!player.storage.bhfumo_add||!player.storage.bhfumo_add.length) return false;
                                return player.countCards('e',function(card){
                                    for(let i of player.storage.bhfumo_add){
                                        if(i.slice(14)==card.name.slice(14)) return true;
                                    }
                                    return false;
                                });
                            },
                            content:function(){
                                'step 0'
                                event.cards=player.getCards('e',function(card){
                                    for(let i of player.storage.bhfumo_add){
                                        if(i.slice(14)==card.name.slice(14)) return true;
                                    }
                                    return false;
                                });
                                event.names=player.storage.bhfumo_add;
                                event.removeList=[];
                                event.num=0;
                                player.logSkill('bhfumo1');
                                'step 1'
                                event.card=event.cards[event.num];
                                var card=event.card.name;
                                var suit=get.suit(event.card);
                                var num=get.number(event.card);
                                var card0=card.slice(14);
                                var name2;
                                for(let i of event.names){
                                    if(card.slice(14)==i.slice(14)){
                                        event.removeList.push(i);
                                        name2=i;
                                    }
                                }
                                var skills1=[],skills2 = lib.card[card].skills || [];
                                if (skills2) {
                                    for (var i = 0; i < skills2.length; i++)
                                        if (skills2[i].search('chonggou') == -1) skills1.push(skills2[i]);
                                }
                                if(parseInt(name2.slice(8,10))>0&&!skills1.contains('bhfumo3_draw')) skills1.push('bhfumo3_draw');
                                if(parseInt(name2.slice(10,12))>0&&!skills1.contains('bhfumo4')) skills1.push('bhfumo4');
                                if(parseInt(name2.slice(12,14))>0&&!skills1.contains('bhfumo5')) skills1.push('bhfumo5');
                                if (!lib.card[name2]) {
                                    var info = {
                                        enable: true,
                                        type: 'equip',
                                        subtype: lib.card[card].subtype,
                                        image: lib.card[card0].image,
                                        fullskin:lib.card[card0].fullskin,
                                        fullimage:lib.card[card0].fullimage,
                                        cardimage: card0,
                                        filterTarget: function (card, player, target) {
                                            return target == player;
                                        },
                                        allowMultiple: false,
                                        toself: true,
                                        selectTarget: -1,
                                        modTarget: true,
                                        content: lib.element.content.equipCard,
                                        legend: true,
                                        onEquip: lib.card[card].onEquip,
                                        onLose: lib.card[card].onLose,
                                        skills: skills1,
                                        distance: lib.card[card].distance,
                                        ai: {
                                            order: 8,
                                            basic: {
                                                equipValue: 10,
                                            },
                                            equipValue: 9,
                                            useful: 2.5,
                                        }
                                    }
                                    lib.card[name2] = info;
                                    lib.translate[name2] = get.translation(card);
                                    var infostr=lib.translate[card.slice(14) + '_info'];
                                    if(infostr.search('“欢欣”之附魔')==-1&&parseInt(name2.slice(8,10))>0) infostr+='<br><li><span style=\"color: green\">“欢欣”之附魔（等级：'+parseInt(name2.slice(8,10))+'）</span>：失去此装备时，装备者摸x/2张牌（{向下取整且至少为1}，x为此“附魔”的等级）。若此“附魔”被施加于坐骑牌上，将{}内容改为“向上取整”。';
                                    if(infostr.search('“圣谕”之附魔')==-1&&parseInt(name2.slice(10,12))>0) infostr+='<br><li><span style=\"color: yellow\">“圣谕”之附魔（等级：'+parseInt(name2.slice(10,12))+'）</span>：装备者的手牌上限+y/2（向上取整，y为此“附魔”的等级）。若此“附魔”被施加于防具牌上，摸牌阶段，装备者额外摸y/2张牌（向下取整）。';
                                    if(infostr.search('“决起”之附魔')==-1&&parseInt(name2.slice(12,14))>0) infostr+='<br><li><span style=\"color: red\">“决起”之附魔（等级：'+parseInt(name2.slice(12,14))+'）</span>：装备者的攻击范围+z（z为此“附魔”的等级）。若此“附魔”被施加于武器牌上，装备者的【杀】造成的伤害+z/3（向下取整）。';
                                    lib.translate[name2 + '_info'] = infostr;
                                }
                                event.card.remove();
                                event.card.destroyed = true;
                                event.card = game.createCard({ name: name2, suit: suit, number: num });
                                player.equip(event.card);
                                // event.card.init(game.createCard({ name: name2, suit: suit, number: num }));
                                // player.equip(event.card);
                                event.trigger('bhfumo_add');
                                'step 2'
                                event.num++;
                                if(event.num<event.cards.length) event.goto(1);
                                'step 3'
                                for(let i of event.removeList){
                                    player.draw();
                                }
                                player.storage.bhfumo_add.removeArray(event.removeList);
                            },
                            group:"bhfumo_add_lose",
                            subSkill:{
                                lose:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    silent:true,
                                    trigger:{
                                        player:"loseAfter",
                                        global:["equipAfter","addJudgeAfter","gainAfter","loseAsyncAfter","addToExpansionAfter"],
                                    },
                                    filter:function(event,player){
                                        if(!player.storage.bhfumo_add||!player.storage.bhfumo_add.length) return false;
                                        var evt=event.getl(player);
                                        if(!(evt&&evt.player==player&&evt.es&&evt.es.length>0)) return false;
                                        for(let i of evt.es){
                                            for(let j of player.storage.bhfumo_add){
                                                if(i.name.slice(14)==j.slice(14)){
                                                    return true;
                                                } 
                                            }
                                        }
                                        return false;
                                    },
                                    content:function(){
                                        var evt=trigger.getl(player);
                                        var removeList=[];
                                        player.logSkill('bhfumo1');
                                        for(let i of evt.es){
                                            for(let j of player.storage.bhfumo_add){
                                                if(i.name.slice(14)==j.slice(14)){
                                                    removeList.push(j);
                                                    player.draw();
                                                } 
                                            }
                                        }
                                        player.storage.bhfumo_add.removeArray(removeList);
                                    },
                                },
                            },
                        },
                        'bhfumo31':{
                            forced:true,
                            charlotte:true,
                            trigger:{
                                player:"loseAfter",
                                global:["equipAfter","addJudgeAfter","gainAfter","loseAsyncAfter","addToExpansionAfter"],
                            },
                            filter:function(event,player){
                                var evt=event.getl(player);
                                if(!(evt&&evt.player==player&&evt.es&&evt.es.length>0)) return false;
                                for(let i of evt.es){
                                    if(i.name.search('bhfumo')!=-1&&parseInt(i.name.slice(8,10))>0) return true;
                                }
                                return false;
                            },
                            content:function(){
                                'step 0'
                                var evt=trigger.getl(player);
                                event.evt=evt;
                                event.list=[];
                                for(let i of evt.es){
                                    for(let i of evt.es){
                                        if(i.name.search('bhfumo')!=-1&&parseInt(i.name.slice(8,10))>0&&!event.list.contains(i)){
                                            event.list.push(i);
                                        }
                                    }
                                }
                                event.num=0;
                                'step 1'
                                event.card=event.list[event.num];
                                var card=event.card.name;
                                // var suit=get.suit(event.card);
                                // var num=get.number(event.card);
                                var num0=parseInt(card.slice(8,10));
                                var num2;
                                if(['equip3','equip4','equip6'].contains(lib.card[card].subtype)) num2=parseInt((num0+1)/2);
                                else num2=parseInt(num0/2);
                                if(num2==0) num2=1;
                                player.draw(num2);
                                // if(num2==0) num2=1;
                                // var name2;
                                // if(num2<10) name=card.slice(0,8)+'0'+num2+card.slice(10);
                                // else name=card.slice(0,8)+num2+card.slice(10);
                                // var skills1=[],skills2 = lib.card[card].skills || [];
                                // if (skills2) {
                                //     for (var i = 0; i < skills2.length; i++)
                                //         if (skills2[i].search('chonggou') == -1) skills1.push(skills2[i]);
                                // }
                                // if (!lib.card[name2]) {
                                //     var info = {
                                //         enable: true,
                                //         type: 'equip',
                                //         subtype: lib.card[card].subtype,
                                //         image: lib.card[card].image,
                                //         fullskin:lib.card[card].fullskin,
                                //         fullimage:lib.card[card].fullimage,
                                //         cardimage:lib.card[card].cardimage,
                                //         filterTarget: function (card, player, target) {
                                //             return target == player;
                                //         },
                                //         allowMultiple: false,
                                //         toself: true,
                                //         selectTarget: -1,
                                //         modTarget: true,
                                //         content: lib.element.content.equipCard,
                                //         legend: true,
                                //         onEquip: lib.card[card].onEquip,
                                //         onLose: lib.card[card].onLose,
                                //         skills: skills1,
                                //         distance: lib.card[card].distance,
                                //         ai: {
                                //             order: 8,
                                //             basic: {
                                //                 equipValue: 10,
                                //             },
                                //             equipValue: 9,
                                //             useful: 2.5,
                                //         },
                                //     }
                                //     lib.card[name2] = info;
                                //     lib.translate[name2] = '附魔·'+get.translation(card.slice(14));
                                //     lib.translate[name2 + '_info'] =lib.translate[card + '_info'];
                                // }
                                // //event.card.remove();
                                // //event.card.destroyed = true;
                                // //event.card = game.createCard({ name: name2, suit: suit, number: num });
                                // //player.equip(event.card);
                                // event.card.init(game.createCard({ name: name2, suit: suit, number: num }));
                                // // player.equip(event.card);
                                // event.trigger('bhfumo_add');
                                'step 2'
                                event.num++;
                                if(event.num<event.list.length) event.goto(1);
                                //'step 3'
                                //player.removeSkill('bhfumo31');
                            },
                        },
                        "bhfumo3_draw":{
                            forced:true,
                            silent:true,
                            trigger:{
                                player:["bhfumo_add","equipAfter"],
                            },
                            filter:function(event,player){
                                var cards=player.getCards('e');
                                if(!cards.length) return false;
                                for(let i of cards){
                                    if(i.name.search('bhfumo')!=-1&&parseInt(i.name.slice(8,10))>0) return !player.hasSkill('bhfumo31');
                                }
                                return false;
                            },
                            content:function(){
                                player.addSkill('bhfumo31');
                            },
                            charlotte:true,
                            onremove:function(player){
                                var next=game.createEvent('bhfumo3_draw');
                                event.next.remove(next);
                                var evt=event.getParent();
                                if(evt.getlx===false) evt=evt.getParent();
                                evt.after.push(next);
                                next.player=player;
                                next.setContent(function(){
                                    player.addSkill('bhfumo31');
                                });
                            },
                            filterRemove:function(card,player){
                                if(player.hasSkillTag('unequip2')) return false;
                                return true;
                            },
                            // onLose:function(){
                            //     var next=game.createEvent('bhfumo3_draw');
                            //     event.next.remove(next);
                            //     var evt=event.getParent();
                            //     if(evt.getlx===false) evt=evt.getParent();
                            //     evt.after.push(next);
                            //     next.player=player;
                            //     next.setContent(function(){
                            //         player.addSkill('bhfumo3');
                            //     });
                            // },
                            // filterLose:function(card,player){
                            //     if(player.hasSkillTag('unequip2')) return false;
                            //     return true;
                            // },
                        },
                        'bhfumo4':{
                            forced:true,
                            charlotte:true,
                            silent:true,
                            trigger:{
                                player:["equipAfter","loseAfter","bhfumo_add"],
                                global:["equipAfter","addJudgeAfter","gainAfter","loseAsyncAfter","addToExpansionAfter"],
                            },
                            init:function(player){
                                if(!player.storage.bhfumo4) player.storage.bhfumo4=0;
                            },
                            filter:function(event,player){
                                var cards=player.getCards('e');
                                if(!cards.length) return false;
                                for(let i of cards){
                                    if(i.name.search('bhfumo')!=-1&&parseInt(i.name.slice(10,12))>0) return true;
                                }
                                return false;
                            },
                            content:function(){
                                if(!player.storage.bhfumo4) player.storage.bhfumo4=0;
                                var cards=player.getCards('e');
                                event.num=0;
                                for(let i of cards){
                                    if(i.name.search('bhfumo')!=-1&&parseInt(i.name.slice(10,12))>0){
                                        event.num+=parseInt((parseInt(i.name.slice(10,12))+1)/2);
                                    }
                                }
                                player.storage.bhfumo4=event.num;
                            },
                            mod:{
                                maxHandcard:function (player, num) {
                                    if(player.storage.bhfumo4&&!player.hasSkillTag('unequip2')) return num + player.storage.bhfumo4;
                                },
                            },
                            group:'bhfumo4_draw',
                            subSkill:{
                                draw:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    trigger:{
                                        player:"phaseDrawBegin2",
                                    },
                                    filter:function(event,player){
                                        var cards=player.getCards('e');
                                        if(!cards.length) return false;
                                        for(let i of cards){
                                            if(i.name.search('bhfumo')!=-1&&parseInt(i.name.slice(10,12))>1&&get.subtype(i)=='equip2') return !event.numFixed&&!player.hasSkillTag('unequip2');
                                        }
                                        return false;
                                    },
                                    content:function(){
                                        var cards=player.getCards('e');
                                        event.num=0;
                                        for(let i of cards){
                                            if(i.name.search('bhfumo')!=-1&&parseInt(i.name.slice(10,12))>0&&get.subtype(i)=='equip2'){
                                                event.num+=parseInt(parseInt(i.name.slice(10,12))/2);
                                            }
                                        }
                                        trigger.num+=event.num;
                                    },
                                },
                            },
                        },
                        'bhfumo5':{
                            forced:true,
                            charlotte:true,
                            silent:true,
                            trigger:{
                                player:["equipAfter","loseAfter","bhfumo_add"],
                                global:["equipAfter","addJudgeAfter","gainAfter","loseAsyncAfter","addToExpansionAfter"],
                            },
                            init:function(player){
                                if(!player.storage.bhfumo5) player.storage.bhfumo5=0;
                            },
                            filter:function(event,player){
                                var cards=player.getCards('e');
                                if(!cards.length) return false;
                                for(let i of cards){
                                    if(i.name.search('bhfumo')!=-1&&parseInt(i.name.slice(12,14))>0) return true;
                                }
                                return false;
                            },
                            content:function(){
                                if(!player.storage.bhfumo5) player.storage.bhfumo5=0;
                                var cards=player.getCards('e');
                                event.num=0;
                                for(let i of cards){
                                    if(i.name.search('bhfumo')!=-1&&parseInt(i.name.slice(12,14))>0){
                                        event.num+=parseInt(i.name.slice(12,14));
                                    }
                                }
                                player.storage.bhfumo5=event.num;
                            },
                            mod: {
                                attackFrom: function (from, to, distance) {
                                    if (from.storage.bhfumo5&&!from.hasSkillTag('unequip2')){
                                        return distance - from.storage.bhfumo5;
                                    }
                                },
                            },
                            group:'bhfumo5_dam',
                            subSkill:{
                                dam:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    trigger:{
                                        source:'damageBegin1',
                                    },
                                    filter:function(event,player){
                                        if(!event.card||event.card.name!='sha') return false;
                                        var cards=player.getCards('e');
                                        if(!cards.length) return false;
                                        for(let i of cards){
                                            if(i.name.search('bhfumo')!=-1&&parseInt(i.name.slice(12,14))>2&&get.subtype(i)=='equip1') return !player.hasSkillTag('unequip2');
                                        }
                                        return false;
                                    },
                                    content:function(){
                                        event.num=0;
                                        var cards=player.getCards('e');
                                        for(let i of cards){
                                            if(i.name.search('bhfumo')!=-1&&parseInt(i.name.slice(12,14))>2&&get.subtype(i)=='equip1'){
                                                event.num+=parseInt(parseInt(i.name.slice(12,14))/3);
                                            }
                                        }
                                        trigger.num+=event.num;
                                    },
                                },
                            },
                        },
                        bhrenjian:{
                            trigger:{
                                player:'phaseJieshu',
                            },
                            filter:function(event,player){
                                return player.countCards('he',{suit:'spade'});
                            },
                            content:function(){
                                'step 0'
                                player.chooseCard('将一张♠牌当做【小道消息】使用','he',function(card){
                                    return get.suit(card)=='spade';
                                },true).set('ai',function(card){
                                    return 8-get.value(card);
                                });
                                'step 1'
                                event.card=result.cards[0];
                                player.useCard({name:'bhxiaodaoxiaoxi'},[event.card],player).viewAs = true;
                            },
                            group:'bhrenjian_use',
                            subSkill:{
                                use:{
                                    sub:true,
                                    frequent:true,
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    filter:function(event,player){
                                        return event.card.name=='bhxiaodaoxiaoxi';
                                    },
                                    content:function(){
                                        player.draw();
                                    },
                                },
                            },
                        },
                        bhluosheng:{
                            trigger:{
                                global:"bhxiaodaoxiaoxi",
                            },
                            intro:{
                                name:"罗生门",
                                content:function(storage,player){
                                    var str='共有';
                                    str+=get.cnNumber(player.getExpansions('bhluosheng').length);
                                    str+='张“罗生门”';
                                    return str;
                                },
                                markcount:function(storage,player){
                                    return player.getExpansions('bhluosheng').length;
                                },
                            },
                            filter:function(event,player){
                                return game.hasPlayer(function(target){
                                    return target.storage.bhxiaodaoxiaoxi&&target.storage.bhxiaodaoxiaoxi>0&&target.getExpansions('bhluosheng').length>0;
                                });
                            },
                            direct:true,
                            content:function(){
                                'step 0'
                                event.targets=game.filterPlayer(function(target){
                                    return target.storage.bhxiaodaoxiaoxi&&target.storage.bhxiaodaoxiaoxi>0&&target.getExpansions('bhluosheng').length>0;
                                });
                                event.num=0;
                                'step 1'
                                event.target=event.targets[event.num];
                                event.cards=event.target.getExpansions('bhluosheng');
                                if(event.cards.length>0) event.card=event.cards.randomGet();
                                else event.card=event.cards[0];
                                player.logSkill('bhluosheng',event.target);
                                event.target.showCards(event.card,'罗生门');
                                if(event.target.countCards('h',function(card){
                                    return get.suit(card)==get.suit(event.card);
                                })){
                                    var str1='获得'+get.translation(event.card)+'并翻面';
                                    var str2='或弃置一张'+get.translation(get.suit(event.card))+'的手牌并令'+get.translation(player)+'摸两张牌';
                                    event.target.chooseControlList([str1,str2],true).set('prompt','罗生：请选择一项').set('ai',function(){
                                        if(event.target.isTurnedOver()) return 0;
                                        else return 1;
                                    });
                                } else {
                                    event.goto(3)
                                }
                                'step 2'
                                if(result.index==1){
                                    event.target.chooseToDiscard('h',function(card){
                                        return get.suit(card)==get.suit(event.card);
                                    },true).set('ai',function(card){
                                        return 8-get.value(card);
                                    });
                                    player.draw(2);
                                    event.target.loseToDiscardpile(event.card);
                                    if(event.target.getExpansions('bhluosheng').length==0) event.target.unmarkSkill('bhluosheng');
                                    event.goto(4);
                                }
                                'step 3'
                                event.target.gain(event.card,'gain2');
                                if(event.target.getExpansions('bhluosheng').length==0) event.target.unmarkSkill('bhluosheng');
                                event.target.turnOver();
                                'step 4'
                                event.target.storage.bhxiaodaoxiaoxi--;
                                event.num++;
                                if(event.num<event.targets.length) event.goto(1);
                            },
                            group:'bhluosheng_set',
                            subSkill:{
                                set:{
                                    sub:true,
                                    enable:"phaseUse",
                                    usable:true,
                                    prompt:'罗生：将一张手牌扣置于一名角色的角色卡旁，称为“罗生门”',
                                    filter:function(event,player){
                                        return player.countCards('h');
                                    },
                                    lose:false,
                                    discard:false,
                                    filterCard:true,
                                    position:'h',
                                    filterTarget:function(card,player,target){
                                        return target!=player;
                                    },
                                    content:function(){
                                        targets[0].addToExpansion(cards[0],player,'give2').gaintag.add('bhluosheng');
                                    },
                                    ai:{
                                        order:3.4,
                                        result:{
                                            player:0.9,
                                            target:function(player,target){
                                                if(target.getExpansions("bhluosheng").length==0) return -1.5;
                                                else return 0;
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        bhxiongxing:{
                            trigger:{
                                player:'dieBegin',
                            },
                            forced:true,
                            filter:function(event,player){
                                return game.filterPlayer(function(target){
                                    return target!=player;
                                }).length>1;
                            },
                            content:function(){
                                'step 0'
                                player.chooseTarget('凶星：请选择一名其他角色',function(card,player,target){
                                    return target!=player;
                                },true).set('ai',function(target){
                                    var att=get.attitude(player,target);
                                    if(att<0) return -2;
                                    return att+(target.hasSkill('bhjueyan')?10:0);
                                });
                                'step 1'
                                event.targets=game.filterPlayer(function(target){
                                    return target!=player&&target!=result.targets[0];
                                });
                                player.line(result.targets[0]);
                                for(let i of event.targets){
                                    i.addTempSkill('diaohulishan','roundStart');
                                    i.addTempSkill('bhxiongxing2','roundStart');
                                }
                            },
                        },
                        "bhxiongxing2":{
                            forced:true,
                            charlotte:true,
                            trigger:{
                                player:['phaseBegin','phaseZhunbeiBegin','phaseJudgeBegin','phaseDrawBegin','phaseUseBegin','phaseDiscardBegin','phaseJieshuBegin','phaseEnd'],
                            },
                            priority:100,
                            silent:true,
                            popup:false,
                            firstDo:true,
                            content:function(){
                                trigger.cancel();
                            },
                        },
                        bhquanzhang:{
                            trigger:{
                                player:"damageEnd",
                                global:"phaseEnd",
                            },
                            frequent:true,
                            silent:true,
                            content:function(){
                                'step 0'
                                player.chooseTarget('泉杖：你可以令一名其他角色获得1点SP并重铸一张牌',function(card,player,target){
                                    return target!=player&&target.countCards('he');
                                }).set('ai',function(target){
                                    var att=get.attitude(player,target);
                                    if(target.hasSkill('bhhanxing')&&!target.hasSkill('bhyunbing')) return att<0?4:-2;
                                    else if(target.countCards('h')<3) return att<0?2:-1;
                                    else if(target.hasSkill('bhyunbing')&&att>0) return 6;
                                    return att>0?5:-1;
                                });
                                'step 1'
                                if(result.bool){
                                    player.logSkill('bhquanzhang',result.targets[0]);
                                    event.target=result.targets[0];
                                    player.line(event.target);
                                    event.target.gainSP(1,player);
                                    // if(!event.target.storage.bhsp) event.target.storage.bhsp=0;
                                    // event.target.storage.bhsp++;
                                    // event.target.syncStorage('bhsp');
                                    // event.target.markSkill('bhsp');
                                    event.target.chooseToDiscard('请重铸一张牌','he',true).set('ai',function(card){
                                        var val=8-get.value(card);
                                        if(get.color(card)=='black'){
                                            if(event.target.hp<3) val-=8;
                                            else val-=4;
                                        }
                                        return val;
                                    });
                                } else event.finish();
                                'step 2'
                                event.target.draw();
                                if(get.color(result.cards[0])=='black') event.target.loseHp();
                            },
                        },
                        bhzhuifang:{
                            init:function(player){
                                player.storage.bhzhuifang_use=0;
                            },
                            derivation:['bhquanzhang','bhxiongxing'],
                            dutySkill:true,
                            trigger:{
                                global:'useCardBegin',
                            },
                            prompt:function(event,player){
                                return get.translation(event.player)+'即将对'+get.translation(event.targets)+'使用'+get.translation(event.card);
                            },
                            check:function(event,player){
                                return get.attitude(player,event.player)<0&&player.hp>2;
                            },
                            filter:function(event,player){
                                if(event.card.name!='bhbenghuaibaofa') return false;
                                if(event.targets.length==0) return false;
                                return true;
                            },
                            content:function(){
                                player.loseHp();
                                event.cards=trigger.cards;
                                trigger.cancel();
                                get.owner(event.cards[0]).loseToDiscardpile(event.cards);
                            },
                            group:['bhzhuifang_use','bhzhuifang_fail'],
                            subSkill:{
                                fail:{
                                    sub:true,
                                    forced:true,
                                    skillAnimation:true,
                                    animationColor:"gray",
                                    trigger:{
                                        global:"useCardAfter",
                                    },
                                    filter:function(event,player){
                                        if(event.card.name!='bhbenghuaibaofa') return false;
                                        return player.storage.bhzhuifang_use&&player.storage.bhzhuifang_use>=2;
                                    },
                                    content:function(){
                                        'step 0'
                                        game.log(player, '使命失败');
                                        player.awakenSkill('bhzhuifang');
                                        player.removeSkill('bhmingen');
                                        player.recover();
                                        'step 1'
                                        lib.translate[player.name]='星之律者';
                                        player.addSkill('bhquanzhang');
                                        player.addSkill('bhxiongxing');
                                        game.log(player,'获得了技能【',get.translation('bhquanzhang'),'】、【',get.translation('bhxiongxing'),'】');
                                    },
                                },
                                use:{
                                    forced:true,
                                    silent:true,
                                    filter:function(event,player){
                                        return event.card.name=='bhbenghuaibaofa';
                                    },
                                    trigger:{
                                        global:'useCard',
                                    },
                                    content:function(){
                                        if(!player.storage.bhzhuifang_use) player.storage.bhzhuifang_use=0;
                                        player.storage.bhzhuifang_use++;
                                    },
                                },
                            },
                        },
                        bhmingen:{
                            trigger:{
                                player:["gainAfter"],
                            },
                            filter:function(event,player){
                                //if(!event.source||event.source==player||!event.source.hasSex('female')) return false;
                                return (event.num&&event.num>1)||(event.cards&&event.cards.length>1);
                            },
                            check:function(event,player){
                                return game.hasPlayer(function(target){
                                    var att=get.attitude(player,target)>0;
                                    if(att>0) return true;
                                    if(att<0&&target.hp==target.maxHp&&target.countCards('h')) return true;
                                });
                            },
                            content:function(){
                                'step 0'
                                player.chooseTarget('你可以对一名其他角色发动【铭恩】',function(card,player,target){
                                    return target!=player;
                                }).set('ai',function(target){
                                    var att=get.attitude(player,target);
                                    if(att<0){
                                        if(target.hp==target.maxHp&&target.countCards('h')) return 10;
                                        else return -2;
                                    }
                                    return att;
                                });
                                'step 1'
                                if(result.bool){
                                    event.target=result.targets[0];
                                    player.chooseControlList(['令'+get.translation(event.target)+'摸一张牌','令'+get.translation(event.target)+'获得1点SP','令'+get.translation(event.target)+'弃置一张手牌并回复1点体力'],true).set('ai',function(){
                                        var att=get.attitude(player,event.target);
                                        if(att<0&&event.target.hp==event.target.maxHp&&event.target.countCards('h')) return 2;
                                        if(event.target.hasSkill('bhjiaojian')) return 1;
                                        else if(event.target.countCards('h')>2&&event.target.hp<event.target.maxHp) return 2;
                                        else if(event.target.hp<2&&event.target.hp<event.target.maxHp) return 2;
                                        else return 0;
                                    });
                                } else event.finish();
                                'step 2'
                                player.line(event.target);
                                if(result.index==0){
                                    event.target.draw();
                                } else if(result.index==1){
                                    event.target.gainSP(1,player);
                                    // if(!event.target.storage.bhsp) event.target.storage.bhsp=0;
                                    // event.target.storage.bhsp++;
                                    // event.target.syncStorage('bhsp');
                                    // event.target.markSkill('bhsp');
                                } else {
                                    if(event.target.countCards('h')) event.target.chooseToDiscard('h',true).set('ai',function(card){
                                        return 8-get.value(card);
                                    });
                                    event.target.recover();
                                }
                            },
                        },
                        bhjianxiao:{
                            trigger:{
                                global:"phaseEnd",
                            },
                            init:function(player){
                                if(!player.storage.bhsp) player.storage.bhsp=0;
                            },
                            forced:true,
                            content:function(){
                                var list=[-3,-2,-1,0,1,2,3,4];
                                event.num=list.randomGet();
                                if(event.num<0) player.loseSP(-event.num);
                                else player.gainSP(event.num);
                                // player.syncStorage('bhsp');
                                // if(player.storage.bhsp>0) player.markSkill('bhsp');
                                // else player.unmarkSkill('bhsp');
                            },
                        },
                        bhhanxing:{
                            trigger:{
                                player:["loseAfter"],
                                global:["equipAfter","addJudgeAfter","gainAfter","loseAsyncAfter","addToExpansionAfter"],
                            },
                            forced:true,
                            init:function(player){
                                if(!player.storage.bhsp) player.storage.bhsp=0;
                                player.storage.bhhanxing=0;
                            },
                            filter:function(event,player){
                                //if(event.name=='damage'||event.name=='recover') return true;
                                //if(event.name=='gain'&&event.player==player) return event.cards&&event.cards.length>1;
                                var evt=event.getl(player);
                                return evt&&evt.cards2&&evt.cards2.length>1;
                            },
                            content:function(){
                                player.gainSP();
                                // player.storage.bhsp++;
                                // player.syncStorage('bhsp');
                                // player.markSkill('bhsp');
                            },
                            group:["bhhanxing_use","bhhanxing_damage"],
                            subSkill:{
                                damage:{
                                    sub:true,
                                    frequent:true,
                                    trigger:{
                                        player:["recoverAfter","damageEnd"],
                                    },
                                    content:function(){
                                        player.gainSP(trigger.num);
                                        // player.storage.bhsp+=trigger.num;
                                        // player.syncStorage('bhsp');
                                        // player.markSkill('bhsp');
                                    },
                                },
                                use:{
                                    trigger:{
                                        global:'phaseBegin',
                                    },
                                    sub:true,
                                    silent:true,
                                    forced:true,
                                    content:function(){
                                        'step 0'
                                        event.num=player.storage.bhhanxing-player.countSP();
                                        player.storage.bhhanxing=player.countSP();
                                        'step 1'
                                        if(event.num>=3){
                                            if(!player.countCards('he',{color:"red"})){
                                                player.chooseTarget(get.prompt('bhhanxing'),'令一名角色摸两张牌').set('ai',function(target){
                                                    return get.attitude(player,target);
                                                });
                                                event.goto(3);
                                            }
                                            else {
                                                var str1='弃置一张红色牌，然后增加1点体力上限',str2='令一名角色摸两张牌';
                                                player.chooseControlList([str1,str2,'取消'],true).set('ai',function(){
                                                    if(game.hasPlayer(function(target){
                                                        return get.attitude(player,target)>0&&target.countCards('h')<2;
                                                    })) return 1;
                                                    else return 0;
                                                }).set('prompt','寒星：请选择一项');
                                            }
                                        } else event.finish();
                                        'step 2'
                                        if(result.index==0){
                                            event.goto(4);
                                        } else if(result.index==1){
                                            player.chooseTarget(get.prompt('bhhanxing'),'令一名角色摸两张牌',true).set('ai',function(target){
                                                return get.attitude(player,target);
                                            });
                                        } else event.finish();
                                        'step 3'
                                        if(result.bool){
                                            player.logSkill('bhhanxing',result.targets[0]);
                                            player.line(result.targets[0]);
                                            result.targets[0].draw(2);
                                        }
                                        event.finish();
                                        'step 4'
                                        player.logSkill('bhhanxing',player);
                                        player.chooseToDiscard('弃置一张红色牌','he',function(card){
                                            return get.color(card)=='red';
                                        }).set('ai',function(card){
                                            return 8-get.value(card);
                                        });
                                        player.gainMaxHp();
                                    },
                                },
                            },
                        },
                        bhjueyan:{
                            init:function(player){
                                player.storage.bhjueyan=[0,false];
                                player.storage.bhjueyan[0]=game.filterPlayer(function(target){
                                    return !target.hasSkill('diaohulishan');
                                }).length+game.dead.length;
                                if(player.storage.bhjueyan[0]==2) player.storage.bhjueyan[1]=true;
                            },
                            trigger:{
                                global:"dieAfter",
                                player:"phaseZhunbei",
                            },
                            skillAnimation:false,
                            animationColor:"fire",
                            unique:true,
                            forced:true,
                            juexingji:true,
                            filter:function(event,player){
                                if(player.storage.bhjueyan[1]) return true;
                                if(game.filterPlayer(function(target){
                                    return !target.hasSkill('diaohulishan');
                                }).length<=parseInt((player.storage.bhjueyan[0]+1)/2)) return true;
                                return false;
                            },
                            content:function(){
                                'step 0'
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                                player.loseMaxHp();
                                player.removeSkill('bhshengxue');
                                'step 1'
                                lib.translate[player.name]='陨冰之律者';
                                player.node.avatar.setBackgroundImage('extension/崩崩崩/image/bhanna3.jpg');
                                player.addSkill('bhyunbing');
                                player.addSkill('bhlvzhe');
                                game.log(player,'获得了技能【',get.translation('bhyunbing'),'】和【',get.translation('bhlvzhe'),'】');
                            },
                        },
                        bhyunbing:{
                            enable:"phaseUse",
                            filterTarget:function(card,player,target){
                                return target!=player;
                            },
                            filterCard:false,
                            selectCard:-1,
                            filter:function(event,player){
                                if(player.hasSkill('bhyunbing_im')) return false;
                                return player.countSP()>=7;
                            },
                            line:false,
                            content:function(){
                                'step 0'
                                var str1='对'+get.translation(target)+'造成4点物理伤害';
                                var str2='弃置两张黑色牌,然后对'+get.translation(target)+'造成3点冰冻伤害';
                                player.loseSP(7);
                                // player.storage.bhsp-=7;
                                // player.syncStorage('bhsp');
                                // if(player.storage.bhsp==0) player.unmarkSkill('bhsp');
                                player.addTempSkill('bhyunbing_damage','bhyunbing');
                                if(player.countCards('he',{color:"black"})<2){
                                    event.goto(2);
                                } else {
                                    player.chooseControlList([str1,str2],true).set('ai',function(){
                                        return 0;
                                    });
                                }
                                'step 1'
                                if(result.index==1){
                                    player.chooseToDiscard('请弃置两张黑色牌','he',2,function(card){
                                        return get.color(card)=='black';
                                    },true).set('ai',function(card){
                                        return 8-get.value(card);
                                    });
                                    player.line(target);
                                    target.damage(3,'ice');
                                    event.goto(3);
                                }
                                'step 2'
                                player.line(target);
                                target.damage(4);
                                'step 3'
                                event.trigger('bhyunbing');
                            },
                            ai:{
                                order:4.3,
                                result:{
                                    player:0.1,
                                    target:-4,
                                },
                            },
                            subSkill:{
                                im:{
                                    sub:true,
                                    charlotte:true,
                                    trigger:{
                                        player:"phaseBegin",
                                    },
                                    forced:true,
                                    silent:true,
                                    content:function(){
                                        player.removeSkill('bhyunbing_im');
                                    },
                                },
                                damage:{
                                    trigger:{
                                        source:"dyingAfter",
                                    },
                                    charlotte:true,
                                    sub:true,
                                    forced:true,
                                    silent:true,
                                    content:function(){
                                        player.loseHp();
                                        player.addSkill('bhyunbing_im');
                                    },
                                },
                            },
                        },
                        bhshenmeng:{
                            //audio:"ext:崩崩崩/audio:2",
                            skillAnimation:false,
                            animationColor:"gray",
                            juexingji:true,
                            derivation:["bhjianxiao","bhhanxing","bhjueyan","bhyunbing"],
                            unique:true,
                            group:["bhshenmeng_use","bhshenmeng_caidan"],
                            trigger:{
                                global:"useCardAfter",
                            },
                            filter:function (event, player) {
                                if(event.card.name!='bhbenghuaibaofa') return false;
                                return player.storage.bhshenmeng_use&&player.storage.bhshenmeng_use>=2;
                            },
                            forced:true,
                            content:function(){
                                'step 0'
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                                player.group='bhbenghuai';
                                'step 1'
                                player.loseMaxHp();
                                lib.translate[player.name]='冰之律者';
                                player.node.avatar.setBackgroundImage('extension/崩崩崩/image/bhanna2.jpg');
                                player.recover(player.maxHp-player.hp);
                                player.removeSkill('bhjiaojian');
                                player.addSkill('bhjianxiao');
                                player.addSkill('bhhanxing');
                                player.addSkill('bhjueyan');
                                game.log(player,'获得了技能【',get.translation('bhjianxiao'),'】、【',get.translation('bhhanxing'),'】、【',get.translation('bhjueyan'),'】');
                            },
                            subSkill:{
                                caidan:{
                                    sub:true,
                                    forced:true,
                                    silent:true,
                                    trigger:{
                                        global:"roundStart",
                                    },
                                    init:function(player){
                                        player.storage.bhshenmeng_candan=[0,false];
                                    },
                                    filter:function(event,player){
                                        return game.hasPlayer(function(target){
                                            return target.name=='bhchentianwu';
                                        })&&!player.storage.bhshenmeng_candan[1];
                                    },
                                    charlotte:true,
                                    content:function(){
                                        player.storage.bhshenmeng_candan[0]++;
                                        if(player.storage.bhshenmeng_candan[0]>=2){
                                            player.line(game.filterPlayer());
                                            player.useCard({name:"bhbenghuaibaofa",isCard:true},game.filterPlayer());
                                            player.storage.bhshenmeng_candan[1]=true;
                                        }
                                    },
                                },
                                use:{
                                    forced:true,
                                    silent:true,
                                    filter:function(event,player){
                                        return event.card.name=='bhbenghuaibaofa';
                                    },
                                    trigger:{
                                        global:'useCard',
                                    },
                                    content:function(){
                                        if(!player.storage.bhshenmeng_use) player.storage.bhshenmeng_use=0;
                                        player.storage.bhshenmeng_use++;
                                    },
                                },
                            },
                        },
                        bhyuejie:{
                            trigger:{
                                player:'damage',
                                source:'damage',
                            },
                            intro:{
                                content:"expansion",
                                markcount:"expansion",
                            },
                            filter:function(event,player){
                                if(!event.cards||!event.cards.length) return false;
                                return get.itemtype(event.cards)=='cards'&&get.position(event.cards[0],true)=='o';
                            },
                            content:function(){
                                player.addToExpansion(trigger.cards,'gain2').gaintag.add('bhyuejie');
                                player.markSkill('bhyuejie');
                            },
                            group:"bhyuejie_gain",
                            subSkill:{
                                gain:{
                                    sub:true,
                                    enable:"phaseUse",
                                    prompt:"你可以弃置一张“月解”牌，然后获得一张“月解”牌",
                                    filter:function(event,player){
                                        return player.getExpansions('bhyuejie').length>1;
                                    },
                                    content:function(){
                                        'step 0'
                                        var cards=player.getExpansions('bhyuejie');
                                        player.chooseButton(['请依次选择需要弃置和获得的“月解”牌',cards],2,true,function(button){
                                            if(!ui.selected.buttons.length) return 8-get.value(button.link);
                                            else return get.value(button.link);
                                        });
                                        'step 1'
                                        event.cards=result.links;
                                        player.loseToDiscardpile(event.cards[0]);
                                        player.gain(event.cards[1],'gain2');
                                        if(player.getExpansions('bhyuejie').length==0) player.unmarkSkill('bhyuejie');
                                    },
                                    ai:{
                                        order:7.9,
                                        result:{
                                            player:2,
                                        },
                                    },
                                },
                            },
                        },
                        bhyaokong:{
                            trigger:{
                                player:"phaseUseBegin",
                            },
                            forced:true,
                            filter:function(event,player){
                                return !player.countCards('hes',function(card){
                                    return card.name.search('bhxukongwanzang')!=-1;
                                })&&player.storage.bhzhuinian_line==5;
                            },
                            content:function(){
                                var card=get.cardPile(function(card){
                                    return card.name.search('bhxukongwanzang')!=-1;
                                },'field');
                                if(card){
                                    player.gain(card,'gain2','log');
                                }
                            },
                        },
                        bhshenguan:{
                            global:'bhshenguan_use',
                            unique:true,
                            init:function(player){
                                player.addSkill('bhshenguan_zhunbei');
                                player.storage.bhshenguan_name=[];
                                player.storage.bhzhuinian_name=["bhdiliuyexinagqu","bhkalian","bhyuanzuilieren","bhjinyang"];
                            },
                            onremove:function(player){
                                var targets=game.filterPlayer(function(target){
                                    return target.hasSkill('bhshenguan_mark');
                                });
                                for(let i of targets){
                                    i.removeSkill('bhshenguan_mark');
                                }
                            },
                            discard:false,
                            lose:false,
                            marktext:"棺",
                            mark:true,
                            intro:{
                                mark:function(dialog,storage,player){
                                    dialog.addText('神棺');
                                    dialog.addAuto(player.getCards('s',function(card){
                                        return card.hasGaintag('bhshenguan');
                                    }));
                                },
                                markcount:function(storage,player){
                                    return player.getCards('s',function(card){
                                        return card.hasGaintag('bhshenguan');
                                    }).length;
                                },
                                onunmark:function(storage,player){
                                    var cards=player.getCards('s',function(card){
                                        return card.hasGaintag('bhshenguan');
                                    });
                                    if(cards.length){
                                        player.lose(cards,ui.discardPile);
                                        player.$throw(cards,1000);
                                        game.log(cards,'进入了弃牌堆');
                                    }
                                },
                            },
                            enable:"phaseUse",
                            usable:1,
                            filterCard:true,
                            position:'h',
                            selectCard:[1,Infinity],
                            filter:function(event,player){
                                return player.countCards('h');
                            },
                            content:function(){
                                game.log(player,'将',cards,'放到了武将牌上');
                                player.loseToSpecial(cards,'bhshenguan').visible=true;
                                // player.addToExpansion(cards,player,'gain2').gaintag.add('bhshenguan');
                                // player.syncStorage('bhshenguan');
                            },
                            ai:{
                                order:4.9,
                                result:{
                                    player:1,
                                },
                            },
                            //group:"bhshenguan_zhunbei",
                            subSkill:{
                                use:{
                                    hiddenCard:function(player,name){
                                        //if(player==_status.currentPhase) return false;
                                        if(!game.hasPlayer(function(target){
                                            return target.hasSkill('bhshenguan');
                                        })) return false;
                                        var target=game.filterPlayer(function(target){
                                            return target.hasSkill('bhshenguan');
                                        })[0];
                                        if(!target.storage.bhshenguan_name.contains(player)) return false;
                                        if(player==target) return false;
                                        var cards=target.getCards('s',function(card){
                                            return card.hasGaintag('bhshenguan');
                                        });
                                        for(var i of cards){
                                            if(get.name(i,target)==name) return true;
                                        }
                                        return false;
                                    },
                                    prompt:"你可以如手牌般使用或打出“棺”中的牌",
                                    enable:["chooseToUse","chooseToRespond"],
                                    charlotte:true,
                                    onremove:true,
                                    filter:function(event,player){
                                        //if(player==_status.currentPhase) return false;
                                        if(!game.hasPlayer(function(target){
                                            return target.hasSkill('bhshenguan');
                                        })) return false;
                                        var target=game.filterPlayer(function(target){
                                            return target.hasSkill('bhshenguan');
                                        })[0];
                                        if(!target.storage.bhshenguan_name.contains(player)) return false;
                                        if(player==target) return false;
                                        var cards=target.getCards('s',function(card){
                                            return card.hasGaintag('bhshenguan');
                                        });
                                        for(var i of cards){
                                            if(event.filterCard({
                                                name:get.name(i,target),
                                                nature:get.nature(i,target),
                                                isCard:true,
                                            },player,event)) return true;
                                        }
                                        return false;
                                    },
                                    chooseButton:{
                                        dialog:function(event,player){
                                            var target=game.filterPlayer(function(target){
                                                return target.hasSkill('bhshenguan');
                                            })[0];
                                            var cards=target.getCards('s',function(card){
                                                return card.hasGaintag('bhshenguan');
                                            });
                                            return ui.create.dialog('神棺',cards);
                                        },
                                        filter:function(button,player){
                                            var evt=_status.event.getParent();
                                            var target=game.filterPlayer(function(target){
                                                return target.hasSkill('bhshenguan');
                                            })[0];
                                            return evt.filterCard({
                                                name:get.name(button.link,target),
                                                nature:get.nature(button.link,target),
                                                isCard:true,
                                            },player,evt);
                                        },
                                        check:function(button){
                                            var player=_status.event.player;
                                            var evt=_status.event.getParent();
                                            if(evt.dying) return get.attitude(player,evt.dying);
                                            return 1;
                                        },
                                        backup:function(links,player){
                                            var target=game.filterPlayer(function(target){
                                                return target.hasSkill('bhshenguan');
                                            })[0];
                                            return {
                                                viewAs:{
                                                    name:get.name(links[0],target),
                                                    nature:get.nature(links[0],target),
                                                    isCard:true,
                                                },
                                                card:links[0],
                                                filterCard:()=>false,
                                                selectCard:-1,
                                                precontent:function(){
                                                    var card=lib.skill.bhshenguan_use_backup.card;
                                                    var target=game.filterPlayer(function(target){
                                                        return target.hasSkill('bhshenguan');
                                                    })[0];
                                                    event.target=target;
                                                    target.$give(card,player);
                                                    //player.logSkill('bhshenguan',target);
                                                    event.result.cards.push(card);
                                                    if(!player.storage.bhshenguan_use) player.storage.bhshenguan_use=0;
                                                    player.storage.bhshenguan_use++;
                                                },
                                            };
                                        },
                                        ai:{
                                            hasSha:true,
                                            hasShan:true,
                                            skillTagFilter:function(player,tag){
                                                var name='s'+tag.slice(4);
                                                return lib.skill.bhshenguan_use.hiddenCard(player,name);
                                            },
                                        },
                                    },
                                    ai:{
                                        order:8,
                                        result:{
                                            player:1,
                                        },
                                    },
                                },
                                mark:{
                                    sub:true,
                                    mark:true,
                                    init:function(player){
                                        player.markSkill('bhshenguan_mark');
                                    },
                                    discard:false,
                                    lose:false,
                                    marktext:"神棺",
                                    intro:{
                                        content:function(storage,player){
                                            return '一名光荣的抬棺人';
                                        },
                                        markcount:function(){
                                            return 0;
                                        },
                                    },
                                    prompt:"你可以将任意张手牌置于“棺”中",
                                    enable:"phaseUse",
                                    usable:1,
                                    filterCard:true,
                                    position:'h',
                                    selectCard:[1,Infinity],
                                    filter:function(event,player){
                                        return player.countCards('h');
                                    },
                                    filterTarget:function(card,player,target){
                                        return target.hasSkill('bhshenguan');
                                    },
                                    content:function(){
                                        'step 0'
                                        player.$give(cards,target);
                                        'step 1'
                                        target.loseToSpecial(cards,'bhshenguan').visible=true;
                                        game.log(player,'将',cards,'放到了',target,'的武将牌上');
                                        // target.addToExpansion(cards,player,'give').gaintag.add('bhshenguan');
                                        // target.syncStorage('bhshenguan');
                                    },
                                    ai:{
                                        order:5,
                                        result:{
                                            player:1,
                                            target:2,
                                        },
                                    },
                                },
                                zhunbei:{
                                    sub:true,
                                    trigger:{
                                        player:"phaseZhunbei",
                                    },
                                    frequent:true,
                                    content:function(){
                                        'step 0'
                                        player.chooseTarget('请选择任意名与你座次相邻的角色',[1,Infinity],function(card,player,target){
                                            return target==player.next||target==player.previous;
                                        }).set('ai',function(target){
                                            return get.attitude(player,target);
                                        });
                                        'step 1'
                                        if(result.bool){
                                            event.targets=result.targets;
                                            event.targets.addArray(game.filterPlayer(function(target){
                                                return player.storage.bhzhuinian_name.contains(target.name);
                                            }));
                                            //event.targets.push(player);
                                            player.line(event.targets);
                                            player.storage.bhshenguan_name.addArray(event.targets);
                                            for(let i of event.targets){
                                                i.addSkill('bhshenguan_mark');
                                            }
                                        }
                                        player.removeSkill('bhshenguan_zhunbei');
                                    },
                                },
                            },
                        },
                        bhxiuqi:{
                            trigger:{
                                player:"phaseJieshu",
                            },
                            init:function(player){
                                player.storage.bhxiuqi=[];
                            },
                            intro:{
                                content:function(storage,player){
                                    if(player.storage.bhxiuqi.length==0) return '无记录';
                                    else if(player.storage.bhxiuqi.length==1) return get.translation(player.storage.bhxiuqi[0]);
                                    else return '锦囊牌';
                                },
                            },
                            filter:function(event,player){
                                var cards=player.getCards('s',function(card){
                                    return card.hasGaintag('bhshenguan');
                                });
                                if(cards.length<2) return false;
                                var types=[];
                                for(let i of cards){
                                    if(!types.contains(get.type(i))) types.push(get.type(i));
                                }
                                return types.length>1;
                            },
                            content:function(){
                                'step 0'
                                var cards=player.getCards('s',function(card){
                                    return card.hasGaintag('bhshenguan');
                                });
                                player.chooseButton(['请选择“棺”中两张类别不同的牌弃置',cards],2).set('filterButton',function(button){
                                    if(!ui.selected.buttons.length) return true;
                                    else {
                                        var type=get.type(ui.selected.buttons[0].link);
                                        if(type=='trick'||type=='delay') return ['basic','equip'].contains(get.type(button.link));
                                        return get.type(button.link)!=type;
                                    }
                                });
                                'step 1'
                                if(result.bool){
                                    event.cards=result.links;
                                    var types=['basic','trick','delay','equip'];
                                    types.remove(get.type(event.cards[0]));
                                    types.remove(get.type(event.cards[1]));
                                    player.storage.bhxiuqi=types;
                                    player.lose(event.cards,ui.discardPile);
                                    player.$throw(event.cards,1000);
                                    game.log(event.cards,'进入了弃牌堆');
                                }
                            },
                            group:'bhxiuqi_damage',
                            subSkill:{
                                damage:{
                                    sub:true,
                                    frequent:true,
                                    trigger:{
                                        global:'damageEnd',
                                    },
                                    filter:function(event,player){
                                        return event.player==player||(player.storage.bhshenguan_name&&player.storage.bhshenguan_name.contains(event.player));
                                    },
                                    content:function(){
                                        'step 0'
                                        if(player!=_status.currentPhase&&player.storage.bhxiuqi.length>0){
                                            event.card = get.cardPile2(function (card) {
                                                return player.storage.bhxiuqi.contains(get.type(card));
                                            });
                                        } else {
                                            event.card=get.cards()[0];
                                        }
                                        player.gain(event.card,'gain2');
                                        'step 1'
                                        game.log(player,'将',event.card,'放到了武将牌上');
                                        player.loseToSpecial([event.card],'bhshenguan').visible=true;
                                    },
                                },
                            },
                        },
                        bhhuixian:{
                            dutySkill:true,
                            init:function(player){
                                if(!player.storage.bhhuixian_done){
                                    var list=['bhbaiyezhishi','bhwuduxunyu','bhchiling','bhshizhilvzhe','bhcxunyu','bhyuelun','bhyunmodanxin','bhhua'];
                                    var targets;
                                    targets=game.filterPlayer(function(target){
                                        return list.contains(target.name);
                                    });
                                    player.storage.bhhuixian_name=targets;
                                    player.storage.bhshenguan_name.addArray(targets);
                                }
                            },
                            onremove:function(player){
                                player.storage.bhhuixian_done=true;
                                delete player.storage.bhhuixian_name;
                            },
                            trigger:{
                                global:'roundStart',
                            },
                            silent:true,
                            forced:true,
                            priority:2,
                            filter:function(event,player){
                                var list=[];
                                return game.hasPlayer(function(target){
                                    return list.contains(target.name)&&!player.storage.bhhuixian_name.contains(target);
                                })
                            },
                            content:function(){
                                var list=[],targets;
                                targets=game.filterPlayer(function(target){
                                    return list.contains(target.name);
                                });
                                for(let i of targets){
                                    if(!player.storage.bhshenguan_name.contains(i)) player.storage.bhshenguan_name.push(i);
                                    if(!player.storage.bhhuixian_name.contains(i)) player.storage.bhhuixian_name.push(i);
                                }
                            },
                            group:["bhhuixian_achieve","bhhuixian_fail"],
                            subSkill:{
                                achieve:{
                                    skillAnimation:true,
                                    animationColor:"fire",
                                    trigger:{
                                        player:"phaseZhunbei",
                                    },
                                    forced:true,
                                    filter:function (event, player) {
                                        var targets=game.filterPlayer(function(target){
                                            return player.storage.bhhuixian_name.contains(target);
                                        });
                                        var num=0;
                                        for(let i of targets){
                                            if(i.storage.bhshenguan_use) num+=i.storage.bhshenguan_use;
                                        }
                                        return num>=4;
                                    },
                                    content:function () {
                                        'step 0'
                                        game.log(player, '成功完成使命');
                                        player.awakenSkill('bhhuixian');
                                        'step 1'
                                        player.storage.bhshenguan_name.removeArray(player.storage.bhhuixian_name);
                                        player.gainMaxHp();
                                        player.recover();
                                        player.storage.bhzheyue[2]=true;
                                        game.log(player,'的星门【β-1】已解锁');
                                    },
                                },
                                fail:{
                                    skillAnimation:true,
                                    animationColor:"gray",
                                    trigger:{
                                        player:"phaseUseBegin",
                                    },
                                    forced:true,
                                    filter:function (event, player) {
                                        return !game.hasPlayer(function(target){
                                            return player.storage.bhhuixian_name.contains(target);
                                        });
                                    },
                                    content:function () {
                                        'step 0'
                                        game.log(player, '使命失败');
                                        player.awakenSkill('bhhuixian');
                                        if(player.countCards('h',{color:'red'})&&player.countCards('h',{color:'black'})){
                                            player.chooseToDiscard('h',function(card){
                                                return get.color(card)=='red';
                                            },true);
                                            player.chooseToDiscard('h',function(card){
                                                return get.color(card)=='black';
                                            },true);
                                        } else player.loseHp();
                                        'step 1'
                                        player.storage.bhshenguan_name.removeArray(player.storage.bhhuixian_name);
                                        if(!player.hasSkill('bhzhuinian_canbian')) player.addSkill('bhzhuinian_canbian');
                                        player.storage.bhzhuinian_count[1]++;
                                        player.syncStorage('bhzhuinian_count');
                                        player.markSkill('bhzhuinian_canbian');
                                        player.storage.bhzheyue[3]=true;
                                        game.log(player,'的星门【β-2】已解锁');
                                    },
                                }
                            },
                        },
                        bhshenghai:{
                            init:function(player){
                                if(!player.storage.bhshenghai_name) player.storage.bhshenghai_name=["bhqianjieyicheng","bhdizuiqilei","bhwanwuxiumian","bhheiyuanbaihua","bhtianhuoshengcai","bhyuduchen","bhyidianzhixing","bhxuanyuanjian","bhyoudadeshiyue","bhdizangyuhun"];
                                player.storage.bhshenghai=0;
                            },
                            keylist:{
                                "bhqianjieyicheng":["_in"],
                                "bhdizuiqilei":["_in"],
                                "bhdisi":[],
                                "bhwanwuxiumian":[],
                                "bhheiyuanbaihua":["_in","_heiyuan","_baihua"],
                                "bhtianhuoshengcai":["_in","_dajian"],
                                "bhyuduchen":[],
                                "bhyidianzhixing":["_in","_zhixing"],
                                "bhxuanyuanjian":[],
                                "bhyoudadeshiyue":[],
                                "bhdizangyuhun":["_in","_dizang"],
                            },
                            enable:'phaseUse',
                            filter:function(event,player){
                                return player.countCards('hes',function(card){
                                    if(card.name.search('bhxukongwanzang')!=-1) return false;
                                    for(let i of player.storage.bhshenghai_name){
                                        if(card.name.search(i)!=-1) return true;
                                    }
                                    return false;
                                })>0;
                            },
                            position:'hes',
                            selectCard:1,
                            filterCard:function(card,player,target){
                                if(card.name.search('bhxukongwanzang')!=-1) return false;
                                for(let i of player.storage.bhshenghai_name){
                                    if(card.name.search(i)!=-1) return true;
                                }
                                return false;
                            },
                            content:function(){
                                'step 0'
                                var name=cards[0].name.slice(0,cards[0].name.search('_'));
                                player.storage.bhshenghai_name.remove(name);
                                var list=[];
                                for(let i of lib.skill.bhshenghai.keylist[name]){
                                    list.push(['equip','',name+i]);
                                }
                                player.chooseButton(['请选择一种形态的技能',[list,'vcard']],true);
                                'step 1'
                                player.storage.bhshenghai++;
                                event.name=result.links[0][2];
                                event.skills = lib.card[event.name].skills || [];
                                //game.log(event.skills,'?');
                                for(let i of event.skills){
                                    if(i.search('_chonggou')==-1) player.addSkill(i);
                                }
                                player.loseMaxHp();
                            },
                        },
                        bhhunzuo:{
                            trigger:{
                                player:"dyingBegin",
                            },
                            forced:true,
                            content:function(){
                                'step 0'
                                var str1='失去1点上限并回复体力至1点',str2='增加1点体力上限';
                                player.chooseControlList([str1,str2]).set('prompt','魂座：请选择一项').set('ai',function(){
                                    if(player.countCards('hs',{name:['tao','jiu','bhbenghuaijiejing']})||(player.hasSkill('bhheiyuanbaihua_in_skill2')&&!player.hasSkill('bhheiyuanbaihua_in_skill2_im'))) return 1;
                                    else return 0;
                                });
                                'step 1'
                                if(result.index==0){
                                    player.loseMaxHp();
                                    player.recover(1-player.hp);
                                } else {
                                    player.gainMaxHp();
                                }
                            },
                        },
                        bhshenmian:{
                            skillAnimation:false,
                            animationColor:"gray",
                            juexingji:true,
                            unique:true,
                            forced:true,
                            trigger:{
                                player:"phaseUseBegin",
                            },
                            filter:function(event,player){
                                return !player.countCards('hes',function(card){
                                    return card.name.search('bhxukongwanzang')!=-1;
                                });
                            },
                            content:function(){
                                'step 0'
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                                'step 1'
                                var card=get.cardPile(function(card){
                                    return card.name.search('bhxukongwanzang')!=-1;
                                },'field');
                                if(card){
                                    player.gain(card,'gain2','log');
                                }
                                player.addSkill('bhyaokong');
                                player.loseMaxHp();
                            },
                        },
                        bhtianqi:{
                            skillAnimation:false,
                            animationColor:"metal",
                            juexingji:true,
                            unique:true,
                            forced:true,
                            trigger:{
                                player:"phaseJieshu",
                            },
                            filter:function(event,player){
                                return player.storage.bhshenghai&&player.storage.bhshenghai>=3;
                            },
                            content:function(){
                                'step 0'
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                                if(player.group=='bhbenghuai'&&!player.storage.bhzhuinian_count[0]){
                                    player.storage.bhzheyue[4]=true;
                                    game.log(player,'的星门【γ-1】已解锁');
                                } else {
                                    player.storage.bhzheyue[5]=true;
                                    game.log(player,'的星门【γ-2】已解锁');
                                }
                            },
                        },
                        bhzhibao:{
                            trigger:{
                                player:"phaseJieshu",
                            },
                            filter:function(event,player){
                                return player.storage.bhzhuinian_count&&player.storage.bhzhuinian_count[1]>0;
                            },
                            content:function(){
                                'step 0'
                                event.num=Math.min(player.maxHp-2-player.countCards('h'),8);
                                if(event.num<0) event.num=0;
                                if(event.num>0) player.draw(event.num);
                                if(event.num<=player.storage.bhzhuinian_count[1]&&(player.maxHp-player.hp)>=player.hp){
                                    player.chooseControl('回血','摸牌').set('ai',function(){
                                        if(player.hp<3) return '回血';
                                        return '摸牌';
                                    });
                                } else event.finish();
                                'step 1'
                                if(result.control=='回血') player.recover();
                                else player.draw();
                            },
                        },
                        bhxushen:{
                            trigger:{
                                player:"damageEnd",
                            },
                            filter:function(event,player){
                                return player.storage.bhzhuinian_count&&player.storage.bhzhuinian_count[1]>0;
                            },
                            content:function(){
                                'step 0'
                                event.num=Math.min(player.storage.bhzhuinian_count[1],2);
                                player.chooseTarget('令一名角色摸牌并翻面',function(card,player,target){
                                    return target!=player;
                                }).set('ai',function(target){
                                    var att=get.attitude(player,target);
                                    if(att<0) return -att+(target.countCards('h')>6?-1:1)+(target.isTurnedOver()?-10:0);
                                    else return att+((target.countCards('h')<2&&target.hp<2)?2:-1)+(target.isTurnedOver()?10:0);
                                });
                                'step 1'
                                if(result.bool){
                                    event.target=result.targets[0];
                                    player.line(event.target);
                                    event.target.draw(3,player);
                                    event.target.turnOver();
                                    player.discardPlayerCard('he',event.target,event.num).set('ai',function(card){
                                        var att=get.attitude(player,event.target);
                                        if(att>0) return -2;
                                        else return get.value(card);
                                    });
                                }
                            },
                        },
                        bhchuanzhou:{
                            enable:'phaseUse',
                            content:function(){
                                'step 0'
                                if(player.group!='bhtianming') player.group='bhtianming';
                                var list, lines = [];
                                if(!player.storage.bhzhuinian_count[0]){
                                    if(!player.storage.bhzhuinian_count[1]){
                                        list=[2];
                                    } else {
                                        list=[4];
                                    }
                                } else {
                                    if(!player.storage.bhzhuinian_count[1]){
                                        list=[3];
                                    } else {
                                        list=[1,2,3,4,5];
                                    }
                                }
                                for (var i = 0; i < list.length; i++) {
                                    var name = 'bhzhuinian_line' + list[i];
                                    var nametranslate;
                                    switch(list[i]){
                                        case 1:
                                            nametranslate='α线';
                                            break;
                                        case 2:
                                            nametranslate='δ线';
                                            break;
                                        case 3:
                                            nametranslate='SG线';
                                            break;
                                        case 4:
                                            nametranslate='β线';
                                            break;
                                        case 5:
                                            nametranslate='γ线';
                                            break;
                                        default:
                                            nametranslate='Ω线';
                                    }
                                    if (!lib.card[name]) {
                                        var info = {
                                            fullimage: true,
                                            type: "世界线",
                                            image: 'ext:崩崩崩/image/' + name + '.png',
                                            suit:null,
                                            number:null,
                                        }
                                        lib.card[name] = info;
                                        lib.translate[name] = nametranslate;
                                        lib.translate[name + '_info'] = lib.skill.bhzheyue.linestranslate[name];
                                    }
                                    lines.push(game.createCard(name,' ',0));
                                }
                                player.chooseButton(['请选择一条世界线',lines],true);
                                'step 1'
                                switch(player.storage.bhzhuinian_line){
                                    case 0:
                                        event.skills=[];
                                        break;
                                    case 1:
                                        event.skills=['bhfengqi','bhxuedu','bhzhunqiong','bhzhengxing'];
                                        break;
                                    case 2:
                                        event.skills=['bhbengxin','bhweinian','bhshuhai'];
                                        break;
                                    case 3:
                                        event.skills=['bhnishi','bhlingxing','bhzhongwang','bhzhengguo'];
                                        break;
                                    case 4:
                                        event.skills=['bhshenguan','bhxiuqi','bhhuixian'];
                                        break;
                                    case 5:
                                        event.skills=['bhshenghai','bhhunzuo','bhshenmian','bhtianqi'];
                                        break;
                                    default:
                                        event.skills=['bhzhibao','bhxushen','bhchuanzhou'];
                                }
                                for(let i of event.skills){
                                    player.removeSkill(i);
                                }
                                var name=result.links[0].name;
                                event.index=parseInt(name.slice(15,16));
                                game.log(player,'已前往世界线：'+lib.translate[name]);
                                switch(event.index){
                                    case 1:
                                        event.skills=['bhfengqi','bhxuedu','bhzhunqiong','bhzhengxing']
                                        break;
                                    case 2:
                                        event.skills=['bhbengxin','bhweinian','bhshuhai'];
                                        break;
                                    case 3:
                                        event.skills=['bhnishi','bhlingxing','bhzhongwang','bhzhengguo'];
                                        break;
                                    case 4:
                                        event.skills=['bhshenguan','bhxiuqi','bhhuixian'];
                                        break;
                                    case 5:
                                        event.skills=['bhshenghai','bhhunzuo','bhshenmian','bhtianqi'];
                                        break;
                                    default:
                                        event.skills=['bhzhibao','bhxushen','bhchuanzhou'];
                                }
                                player.storage.bhzhuinian_line=event.index;
                                player.node.avatar.setBackgroundImage('extension/崩崩崩/image/'+name+'.png');
                                if(!player.storage.bhzhuinian_lined.contains(event.index)) player.storage.bhzhuinian_lined.push(event.index);
                                for(let i of event.skills){
                                    player.addSkill(i);
                                }
                            },
                        },
                        bhzhengguo:{
                            trigger:{
                                player:"bhzhongwang",
                            },
                            filter:function(event,player){
                                if(player.hasSkill('bhzhengguo_im')) return false;
                                return game.hasPlayer(function(target){
                                    return target!=player&&target.storage.bhnishi_banlv&&target.storage.bhnishi_banlv>0;
                                });
                            },
                            content:function(){
                                'step 0'
                                event.targets=game.filterPlayer(function(target){
                                    return target!=player&&target.storage.bhnishi_banlv&&target.storage.bhnishi_banlv>0;
                                });
                                player.chooseTarget('请选择一名有“伴侣”的其他角色令其摸牌',function(card,player,target){
                                    return event.targets.contains(target);
                                }).set('ai',function(target){
                                    return get.attitude(player,target);
                                });
                                'step 1'
                                if(result.bool){
                                    player.line(result.targets[0]);
                                    player.addTempSkill('bhzhengguo_im','roundStart');
                                    result.targets[0].draw();
                                }
                            },
                            group:"bhzhengguo_use",
                            subSkill:{
                                use:{
                                    sub:true,
                                    trigger:{
                                        global:"bhzhongwang",
                                    },
                                    filter:function(event,player){
                                        if(player.hasSkill('bhzhengguo_lm')||event.player==player) return false;
                                        return event.player.storage.bhnishi_banlv&&event.player.storage.bhnishi_banlv>0;
                                    },
                                    frequent:true,
                                    silent:true,
                                    content:function(){
                                        'step 0'
                                        trigger.player.chooseBool('你可以令'+get.translation(player)+'摸一张牌').set('ai',function(){
                                            return get.attitude(trigger.player,player)>0;
                                        });
                                        'step 1'
                                        if(result.bool){
                                            trigger.player.line(player);
                                            player.logSkill('bhzhengguo',trigger.player);
                                            player.addTempSkill('bhzhengguo_lm','roundStart');
                                            player.draw();
                                        }
                                    },
                                },
                                im:{
                                    sub:true,
                                    charlotte:true,
                                },
                                lm:{
                                    sub:true,
                                    charlotte:true,
                                },
                            },
                        },
                        bhzhongwang:{
                            enable:'phaseUse',
                            filter:function(event,player){
                                var list=['bhfengqi','bhshenguan','bhshenghai','bhbengxin'];
                                if(!player.storage.bhzhuinian_count||!player.storage.bhzhuinian_count[0]) return false;
                                return game.hasPlayer(function(target){
                                    if(target==player||(target.storage.bhnishi_banlv&&target.storage.bhnishi_banlv>0)){
                                        for(let i of list){
                                            if(!target.hasSkill(i)) return true;
                                        }
                                        return false;
                                    }
                                    return false;
                                });
                            },
                            selectCard:-1,
                            filterCard:false,
                            filterTarget:function(card,player,target){
                                var list=['bhfengqi','bhshenguan','bhshenghai','bhbengxin'];
                                if(target==player||(target.storage.bhnishi_banlv&&target.storage.bhnishi_banlv>0)){
                                    for(let i of list){
                                        if(!target.hasSkill(i)) return true;
                                    }
                                    return false;
                                }
                                return false;
                            },
                            content:function(){
                                'step 0'
                                player.loseMaxHp();
                                var list=['bhfengqi','bhshenguan','bhshenghai','bhbengxin'],list2=[];
                                for(let i of list){
                                    if(!target.hasSkill(i)) list2.push(i);
                                }
                                player.chooseControl(list2).set('prompt','选择一个技能令'+get.translation(target)+'获得').set('ai',function(){
                                    return list2.randomGet();
                                });
                                'step 1'
                                event.name=result.control;
                                target.addSkill(event.name);
                            },
                        },
                        bhlingxing:{
                            trigger:{
                                global:'phaseDiscardEnd',
                            },
                            filter:function(event,player){
                                if(!event.player.storage.bhnishi_banlv) return false;
                                return player.storage.bhzhuinian_count&&player.storage.bhzhuinian_count[0]>0;
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.player;
                                var str1='令'+get.translation(event.target)+'执行一个额外的出牌阶段';
                                var str2='摸一张牌并执行一个额外的结束阶段';
                                player.chooseControlList([str1, str2], function () {
                                    return _status.event.choice;
                                }, true).set('ai', function () {
                                    if(get.attitude(player,event.target)>0) return 0;
                                    else return 1;
                                });
                                'step 1'
                                if(result.index==0){
                                    player.line(event.target);
                                    var next = event.target.phaseUse();
                                    event.next.remove(next);
                                    trigger.next.push(next);
                                } else {
                                    player.draw();
                                    var next = player.phaseJieshu();
                                    event.next.remove(next);
                                    trigger.next.push(next);
                                }
                            },
                        },
                        bhnishi:{
                            enable:"phaseUse",
                            intro:{
                                content:"limited",
                            },
                            unique:true,
                            limited:true,
                            skillAnimation:false,
                            animationStr:"逆世",
                            animationColor:"metal",
                            filterTarget:function (card, player, target) {
                                return target != player&&player.storage.bhzhuinian_name.contains(target.name);
                            },
                            filter:function (event, player) {
                                return player.storage.bhzhuinian_count&&player.storage.bhzhuinian_count[0]>0;
                            },
                            filterCard:false,
                            selectCard:-1,
                            content:function(){
                                'step 0'
                                player.awakenSkill('bhnishi');
                                player.storage.bhnishi = true;
                                event.target = targets[0];
                                'step 1'
                                event.target.storage.bhnishi_banlv=1;
                                event.target.syncStorage('bhnishi_banlv');
                                event.target.markSkill('bhnishi_banlv');
                            },
                            subSkill:{
                                banlv:{
                                    sub:true,
                                    charlotte:true,
                                    marktext:"伴侣",
                                    intro:{
                                        content:function(storage,player){
                                            if(player.storage.bhnishi_banlv>0) return '奥托大人，要坚强啊！';
                                            return '?';
                                        },
                                        markcount:function(){
                                            return 0;
                                        },
                                    },
                                },
                            },
                        },
                        bhjiandian:{
                            trigger:{
                                player:"damageBegin4",
                            },
                            priority:1,
                            forced:true,
                            content:function(){
                                event.num=trigger.num;
                                trigger.cancel();
                                player.loseHp(event.num);
                            },
                        },
                        bhzhuinian:{
                            forced:true,
                            trigger:{
                                player:["gianMaxHpBegin","loseMaxHpBegin"],
                                source:"damageBegin",
                            },
                            init:function(player){
                                player.addSkill('bhzhuinian_im');
                                //卡莲名单
                                player.storage.bhzhuinian_name=["bhdiliuyexiangqu","bhkalian","bhyuanzuilieren","bhjinyang"];
                                //靓变、惨变标记
                                player.storage.bhzhuinian_count=[0,0];
                                //当前世界线
                                player.storage.bhzhuinian_line=0;
                                //已开启过的世界线
                                player.storage.bhzhuinian_lined=[];
                            },
                            content:function(){
                                trigger.cancel();
                            },
                            dutySkill:true,
                            derivation:['bhzheyue','bhfengqi','bhxuedu','bhzhunqiong','bhzhengxing','bhjiandian','bhbengxin','bhweinian','bhshuhai','bhnishi','bhlingxing','bhzhongwang','bhzhengguo','bhshenguan','bhxiuqi','bhhuixian','bhshenghai','bhhunzuo','bhshenmian','bhtianqi','bhyaokong','bhzhibao','bhxushen','bhchuanzhou'],
                            group:["bhzhuinian_achieve","bhzhuinian_fail","bhzhuinian_damage"],
                            subSkill:{
                                liangbian:{
                                    sub:true,
                                    marktext:"靓变",
                                    forced:true,
                                    charlotte:true,
                                    intro:{
                                        name:'靓变',
                                        content:function(storage,player){
                                            return '共有'+player.storage.bhzhuinian_count[0]+'个标记';
                                        },
                                        markcount:function(storage,player){
                                            return player.storage.bhzhuinian_count[0];
                                        },
                                    },
                                },
                                canbian:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    marktext:"惨变",
                                    intro:{
                                        name:"惨变",
                                        content:function(storage,player){
                                            return '共有'+player.storage.bhzhuinian_count[1]+'个标记';
                                        },
                                        markcount:function(storage,player){
                                            return player.storage.bhzhuinian_count[1];
                                        },
                                    },
                                },
                                im:{
                                    priority:4,
                                    sub:true,
                                    charlotte:true,
                                    silent:true,
                                    forced:true,
                                    trigger:{
                                        global:'roundStart',
                                    },
                                    content:function(){
                                        if(!player.storage.bhzhuinian_im) player.storage.bhzhuinian_im=0;
                                        player.storage.bhzhuinian_im++;
                                        if(player.storage.bhzhuinian_im==2) player.removeSkill('bhzhuinian_im');
                                    },
                                },
                                damage:{
                                    trigger:{
                                        player:["damageAfter","loseHpAfter","recoverAfter","changeHpAfter"],
                                    },
                                    forced:true,
                                    sub:true,
                                    filter:function(event,player){
                                        return player.hp!=4;
                                    },
                                    content:function(){
                                        if(player.hp>4) player.loseHp(player.hp-4);
                                        if(player.hp<4) player.recover(4-player.hp);
                                    },
                                    // ai:{
                                    //     effect:{
                                    //         target:function (card, player, target, current) {
                                    //             if (get.tag(card, 'damage')) return 'zerotarget';
                                    //         },
                                    //     },
                                    // },
                                },
                                achieve:{
                                    // audio: "ext:崩崩崩/audio:1",
                                    skillAnimation:true,
                                    animationColor:"gray",
                                    trigger:{
                                        global:'roundStart',
                                    },
                                    priority:1,
                                    forced:true,
                                    filter:function (event, player) {
                                        var list=['bhdiliuyexiangqu','bhjinyang','bhyuanzuilieren','bhkalian'];
                                        var bool=game.hasPlayer(function(current){
                                            return list.contains(current.name);
                                        });
                                        return !player.hasSkill('bhzhuinian_im')&&bool;
                                    },
                                    content:function () {
                                        'step 0'
                                        game.log(player, '成功完成使命');
                                        player.awakenSkill('bhzhuinian');
                                        'step 1'
                                        player.addSkill('bhzheyue');
                                        var list = [1,2], lines = [];
                                        for (var i = 0; i < list.length; i++) {
                                            var name = 'bhzhuinian_line' + list[i];
                                            var nametranslate;
                                            switch(list[i]){
                                                case 1:
                                                    nametranslate='α线';
                                                    break;
                                                case 2:
                                                    nametranslate='δ线';
                                                    break;
                                                case 3:
                                                    nametranslate='SG线';
                                                    break;
                                                case 4:
                                                    nametranslate='β线';
                                                    break;
                                                case 5:
                                                    nametranslate='γ线';
                                                    break;
                                                default:
                                                    nametranslate='Ω线';
                                            }
                                            if (!lib.card[name]) {
                                                var info = {
                                                    fullimage: true,
                                                    type: "世界线",
                                                    image: 'ext:崩崩崩/image/' + name + '.png',
                                                    suit:null,
                                                    number:null,
                                                }
                                                lib.card[name] = info;
                                                lib.translate[name] = nametranslate;
                                                lib.translate[name + '_info'] = lib.skill.bhzheyue.linestranslate[name];
                                            }
                                            lines.push(game.createCard(name,' ',0));
                                        }
                                        player.chooseButton(['请选择一条世界线',lines],true);
                                        'step 2'
                                        switch(player.storage.bhzhuinian_line){
                                            case 0:
                                                event.skills=[];
                                                break;
                                            case 1:
                                                event.skills=['bhfengqi','bhxuedu','bhzhunqiong','bhzhengxing'];
                                                break;
                                            case 2:
                                                event.skills=['bhbengxin','bhweinian','bhshuhai'];
                                                break;
                                            case 3:
                                                event.skills=['bhnishi','bhlingxing','bhzhongwang','bhzhengguo'];
                                                break;
                                            case 4:
                                                event.skills=['bhshenguan','bhxiuqi','bhhuixian'];
                                                break;
                                            case 5:
                                                event.skills=['bhshenghai','bhhunzuo','bhshenmian','bhtianqi'];
                                                break;
                                            default:
                                                event.skills=['bhzhibao','bhxushen','bhchuanzhou'];
                                        }
                                        for(let i of event.skills){
                                            player.removeSkill(i);
                                        }
                                        var name=result.links[0].name;
                                        event.index=parseInt(name.slice(15,16));
                                        game.log(player,'已前往世界线：'+lib.translate[name]);
                                        switch(event.index){
                                            case 1:
                                                event.skills=['bhfengqi','bhxuedu','bhzhunqiong','bhzhengxing']
                                                break;
                                            case 2:
                                                event.skills=['bhbengxin','bhweinian','bhshuhai'];
                                                break;
                                            case 3:
                                                event.skills=['bhnishi','bhlingxing','bhzhongwang','bhzhengguo'];
                                                break;
                                            case 4:
                                                event.skills=['bhshenguan','bhxiuqi','bhhuixian'];
                                                break;
                                            case 5:
                                                event.skills=['bhshenghai','bhhunzuo','bhshenmian','bhtianqi'];
                                                break;
                                            default:
                                                event.skills=['bhzhibao','bhxushen','bhchuanzhou'];
                                        }
                                        player.storage.bhzhuinian_line=event.index;
                                        player.node.avatar.setBackgroundImage('extension/崩崩崩/image/'+name+'.png');
                                        if(!player.storage.bhzhuinian_lined.contains(event.index)) player.storage.bhzhuinian_lined.push(event.index);
                                        for(let i of event.skills){
                                            player.addSkill(i);
                                        }
                                    },
                                    sub:true,
                                },
                                fail:{
                                    //audio: "ext:崩崩崩/audio:1",
                                    skillAnimation:true,
                                    animationColor:"fire",
                                    trigger:{
                                        global:'roundStart',
                                    },
                                    priority:1,
                                    forced:true,
                                    filter:function (event, player) {
                                        var list=['bhdiliuyexiangqu','bhjinyang','bhyuanzuilieren','bhkalian'];
                                        var bool=game.hasPlayer(function(current){
                                            return list.contains(current.name);
                                        });
                                        return !player.hasSkill('bhzhuinian_im')&&!bool;
                                    },
                                    content:function () {
                                        'step 0'
                                        game.log(player, '使命失败');
                                        player.awakenSkill('bhzhuinian');
                                        'step 1'
                                        player.addSkill('bhzheyue');
                                        var list = [4,5], lines = [];
                                        for (var i = 0; i < list.length; i++) {
                                            var name = 'bhzhuinian_line' + list[i];
                                            var nametranslate;
                                            switch(list[i]){
                                                case 1:
                                                    nametranslate='α线';
                                                    break;
                                                case 2:
                                                    nametranslate='δ线';
                                                    break;
                                                case 3:
                                                    nametranslate='SG线';
                                                    break;
                                                case 4:
                                                    nametranslate='β线';
                                                    break;
                                                case 5:
                                                    nametranslate='γ线';
                                                    break;
                                                default:
                                                    nametranslate='Ω线';
                                            }
                                            if (!lib.card[name]) {
                                                var info = {
                                                    fullimage: true,
                                                    type: "世界线",
                                                    image: 'ext:崩崩崩/image/' + name + '.png',
                                                    suit:null,
                                                    number:null,
                                                }
                                                lib.card[name] = info;
                                                lib.translate[name] = nametranslate;
                                                lib.translate[name + '_info'] = lib.skill.bhzheyue.linestranslate[name];
                                            }
                                            lines.push(game.createCard(name,' ',0));
                                        }
                                        player.chooseButton(['请选择一条世界线',lines],true);
                                        'step 2'
                                        switch(player.storage.bhzhuinian_line){
                                            case 0:
                                                event.skills=[];
                                                break;
                                            case 1:
                                                event.skills=['bhfengqi','bhxuedu','bhzhunqiong','bhzhengxing'];
                                                break;
                                            case 2:
                                                event.skills=['bhbengxin','bhweinian','bhshuhai'];
                                                break;
                                            case 3:
                                                event.skills=['bhnishi','bhlingxing','bhzhongwang','bhzhengguo'];
                                                break;
                                            case 4:
                                                event.skills=['bhshenguan','bhxiuqi','bhhuixian'];
                                                break;
                                            case 5:
                                                event.skills=['bhshenghai','bhhunzuo','bhshenmian','bhtianqi'];
                                                break;
                                            default:
                                                event.skills=['bhzhibao','bhxushen','bhchuanzhou'];
                                        }
                                        for(let i of event.skills){
                                            player.removeSkill(i);
                                        }
                                        var name=result.links[0].name;
                                        event.index=parseInt(name.slice(15,16));
                                        game.log(player,'已前往世界线：'+lib.translate[name]);
                                        switch(event.index){
                                            case 1:
                                                event.skills=['bhfengqi','bhxuedu','bhzhunqiong','bhzhengxing']
                                                break;
                                            case 2:
                                                event.skills=['bhbengxin','bhweinian','bhshuhai'];
                                                break;
                                            case 3:
                                                event.skills=['bhnishi','bhlingxing','bhzhongwang','bhzhengguo'];
                                                break;
                                            case 4:
                                                event.skills=['bhshenguan','bhxiuqi','bhhuixian'];
                                                break;
                                            case 5:
                                                event.skills=['bhshenghai','bhhunzuo','bhshenmian','bhtianqi'];
                                                break;
                                            default:
                                                event.skills=['bhzhibao','bhxushen','bhchuanzhou'];
                                        }
                                        player.storage.bhzhuinian_line=event.index;
                                        player.node.avatar.setBackgroundImage('extension/崩崩崩/image/'+name+'.png');
                                        if(!player.storage.bhzhuinian_lined.contains(event.index)) player.storage.bhzhuinian_lined.push(event.index);
                                        for(let i of event.skills){
                                            player.addSkill(i);
                                        }
                                    },
                                    sub:true,
                                },
                            },
                        },
                        bhzheyue:{
                            init:function(player){
                                //星门解锁
                                player.storage.bhzheyue=[false,false,false,false,false,false];
                            },
                            linestranslate: {
                                "bhzhuinian_line1": "卡莲存活的世界线<br>发明家",
                                "bhzhuinian_line2": "卡莲存活的世界线<br>Not Found",
                                "bhzhuinian_line3": "卡莲存活的世界线<br>欺骗世界的IF",
                                "bhzhuinian_line4": "卡莲不在的世界线<br>罗刹人",
                                "bhzhuinian_line5": "卡莲不在的世界线<br>小丑",
                                "bhzhuinian_line6": "卡莲不在的世界线<br>伪神",
                                "bhzheyue_door1":"该星门可以选择前往β线、δ线或Ω线",
                                "bhzheyue_door2":"该星门固定前往γ线",
                                "bhzheyue_door3":"该星门可以选择前往γ线或Ω线",
                                "bhzheyue_door4":"该星门固定前往γ线",
                                "bhzheyue_door5":"该星门固定前往α线",
                                "bhzheyue_door6":"该星门可以选择前往δ线或Ω线",
                            },
                            enable: "phaseUse",
                            usable:1,
                            filter:function(event,player){
                                if(!player.storage.bhzheyue) return false;
                                var bool=false,list=[];
                                for(var i=0;i<player.storage.bhzheyue.length;i++){
                                    bool=(bool||player.storage.bhzheyue[i]);
                                    if(player.storage.bhzheyue[i]){
                                        if(i<2&&!list.contains(1)) list.push(1);
                                        if(i>1&&i<4&&!list.contains(4)) list.push(4);
                                        if(i>3&&!list.contains(5)) list.push(5);
                                    }
                                }
                                return bool&&list.contains(player.storage.bhzhuinian_line);
                            },
                            unique:true,
                            content: function () {
                                'step 0'
                                var list = [1,2,3,4,5,6],list2=[], lines = [];
                                for(var i=0;i<player.storage.bhzheyue.length;i++){
                                    if(player.storage.bhzheyue[i]) list2.push(i+1);
                                }
                                for (var i = 0; i < list.length; i++) {
                                    var name = 'bhzheyue_door' + list[i];
                                    var nametranslate;
                                    switch(list[i]){
                                        case 1:
                                            nametranslate='α-1';
                                            break;
                                        case 2:
                                            nametranslate='α-2';
                                            break;
                                        case 3:
                                            nametranslate='β-1';
                                            break;
                                        case 4:
                                            nametranslate='β-2';
                                            break;
                                        case 5:
                                            nametranslate='γ-1';
                                            break;
                                        default:
                                            nametranslate='γ-2';
                                    }
                                    if (!lib.card[name]) {
                                        var info = {
                                            fullimage: true,
                                            type: "星门",
                                            image: 'ext:崩崩崩/card/' + name + '.png',
                                            suit:null,
                                            number:null,
                                        }
                                        lib.card[name] = info;
                                        lib.translate[name] = nametranslate;
                                        lib.translate[name + '_info'] = lib.skill.bhzheyue.linestranslate[name];
                                    }
                                    lines.push(game.createCard(name,' ',0));
                                }
                                player.chooseButton(['请选择一扇星门',lines],true).set('filterButton',function(button){
                                    var index=parseInt(button.link.name.slice(13,14));
                                    var num=1;
                                    if(index<3) num=1;
                                    else if(index>4) num=5;
                                    else num=4;
                                    return list2.contains(index)&&player.storage.bhzhuinian_line==num;
                                });
                                'step 1'
                                var list=[],lines=[];
                                var name=result.links[0].name;
                                event.index=parseInt(name.slice(13,14));
                                switch(event.index){
                                    case 0:
                                        break;
                                    case 1:
                                        list=[2,4,6];
                                        break;
                                    case 2:
                                        list=[5];
                                        break;
                                    case 3:
                                        list=[5,6];
                                        break;
                                    case 4:
                                        list=[5];
                                        break;
                                    case 5:
                                        list=[1];
                                        break;
                                    default:
                                        list=[2,6];
                                }
                                for (var i = 0; i < list.length; i++) {
                                    var name = 'bhzhuinian_line' + list[i];
                                    var nametranslate;
                                    switch(list[i]){
                                        case 1:
                                            nametranslate='α线';
                                            break;
                                        case 2:
                                            nametranslate='δ线';
                                            break;
                                        case 3:
                                            nametranslate='SG线';
                                            break;
                                        case 4:
                                            nametranslate='β线';
                                            break;
                                        case 5:
                                            nametranslate='γ线';
                                            break;
                                        default:
                                            nametranslate='Ω线';
                                    }
                                    if (!lib.card[name]) {
                                        var info = {
                                            fullimage: true,
                                            type: "世界线",
                                            image: 'ext:崩崩崩/image/' + name + '.png',
                                            suit:null,
                                            number:null,
                                        }
                                        lib.card[name] = info;
                                        lib.translate[name] = nametranslate;
                                        lib.translate[name + '_info'] = lib.skill.bhzheyue.linestranslate[name];
                                    }/*  */
                                    lines.push(game.createCard(name,' ',0));
                                }
                                player.chooseButton(['请选择一条世界线',lines],true);
                                'step 2'
                                switch(player.storage.bhzhuinian_line){
                                    case 0:
                                        event.skills=[];
                                        break;
                                    case 1:
                                        event.skills=['bhfengqi','bhxuedu','bhzhunqiong','bhzhengxing'];
                                        break;
                                    case 2:
                                        event.skills=['bhbengxin','bhweinian','bhshuhai'];
                                        break;
                                    case 3:
                                        event.skills=['bhnishi','bhlingxing','bhzhongwang','bhzhengguo'];
                                        break;
                                    case 4:
                                        event.skills=['bhshenguan','bhxiuqi','bhhuixian'];
                                        break;
                                    case 5:
                                        event.skills=['bhshenghai','bhhunzuo','bhshenmian','bhtianqi'];
                                        break;
                                    default:
                                        event.skills=['bhzhibao','bhxushen','bhchuanzhou'];
                                }
                                for(let i of event.skills){
                                    player.removeSkill(i);
                                }
                                var name=result.links[0].name;
                                event.index=parseInt(name.slice(15,16));
                                game.log(player,'已前往世界线：'+lib.translate[name]);
                                switch(event.index){
                                    case 1:
                                        event.skills=['bhfengqi','bhxuedu','bhzhunqiong','bhzhengxing']
                                        break;
                                    case 2:
                                        event.skills=['bhbengxin','bhweinian','bhshuhai'];
                                        break;
                                    case 3:
                                        event.skills=['bhnishi','bhlingxing','bhzhongwang','bhzhengguo'];
                                        break;
                                    case 4:
                                        event.skills=['bhshenguan','bhxiuqi','bhhuixian'];
                                        break;
                                    case 5:
                                        event.skills=['bhshenghai','bhhunzuo','bhshenmian','bhtianqi'];
                                        break;
                                    default:
                                        event.skills=['bhzhibao','bhxushen','bhchuanzhou'];
                                }
                                player.storage.bhzhuinian_line=event.index;
                                player.node.avatar.setBackgroundImage('extension/崩崩崩/image/'+name+'.png');
                                if(!player.storage.bhzhuinian_lined.contains(event.index)) player.storage.bhzhuinian_lined.push(event.index);
                                for(let i of event.skills){
                                    player.addSkill(i);
                                }
                            },
                        },
                        bhfengqi:{
                            enable:'phaseUse',
                            filter:function(event,player){
                                if(!player.storage.bhfengqi_im&&player.countCards('h')) return true;
                                if(player.storage.bhfengqi_im&&player.storage.bhfengqi_im.length==4) return false;
                                return player.countCards('h',function(card){
                                    return !player.storage.bhfengqi_im.contains(get.suit(card));
                                });
                            },
                            filterTarget:false,
                            selectCard:1,
                            position:'h',
                            filterCard:function(card,player,target){
                                return !player.storage.bhfengqi_im||!player.storage.bhfengqi_im.contains(get.suit(card));
                            },
                            intro:{
                                content:function(storage,player){
                                    return '本回合已使用'+get.translation(player.storage.bhfengqi_im)+'手牌发动过此技能';
                                },
                            },
                            content:function(){
                                'step 0'
                                event.suit=get.suit(cards[0]);
                                event.num=get.number(cards[0]);
                                player.addTempSkill('bhfengqi_im','phaseUseEnd');
                                player.storage.bhfengqi_im.push(event.suit);
                                player.syncStorage('bhfengqi_im');
                                player.markSkill('bhfengqi');
                                'step 1'
                                var name='bhxinyao_'+event.suit;
                                var card=game.createCard(name,event.suit,event.num);
                                player.gain(card,'gain2');
                                'step 2'
                                if(player.hasCard(function(card){
                                    return card.name.search('bhxinyao')!=-1;
                                })){
                                    player.chooseCard('你可以将一张【新药】交给一名其他角色','hs',function(card){
                                        return card.name.search('bhxinyao')!=-1;
                                    }).set('ai',function(card){
                                        if(game.hasPlayer(function(target){
                                            return get.attitude(player,target)>0;
                                        })){
                                            return player.countCards('h')+player.hp>4?get.value(card):0;
                                        } else return -2;
                                    });
                                } else event.finish();
                                'step 3'
                                if(result.bool&&result.cards){
                                    event.card=result.cards[0];
                                    player.chooseTarget('请选择获得【新药】的角色',function(card,player,target){
                                        return target!=player;
                                    },true).set('ai',function(target){
                                        return get.attitude(player,target);
                                    });
                                } else event.finish();
                                'step 4'
                                event.target=result.targets[0];
                                player.line(event.target);
                                event.target.gain(event.card,player,'give');
                            },
                            ai:{
                                order:9,
                                result:{
                                    player:2,
                                },
                            },
                            group:"bhxinyao_destory",
                            subSkill:{
                                im:{
                                    sub:true,
                                    charlotte:true,
                                    init:function(player){
                                        player.storage.bhfengqi_im=[];
                                    },
                                    onremove:function(player){
                                        delete player.storage.bhfengqi_im;
                                        player.unmarkSkill('bhfengqi');
                                    },
                                },
                            },
                        },
                        bhxuedu:{
                            trigger:{
                                global:'gainAfter',
                            },
                            filter:function(event,player){
                                if(event.player==player) return false;
                                if(!event.source||event.source!=player) return false;
                                for(let i of event.cards){
                                    if(i.name.search('bhxinyao')!=-1) return true;
                                }
                                return false;
                            },
                            silent:true,
                            content:function(){
                                'step 0'
                                event.target=trigger.player;
                                'step 1'
                                var num=20+player.hp*15;
                                if(num>100) num=100;
                                player.chooseBool('是否尝试将【新药】换成【假药】？（成功率：'+num+'%)').set('ai',function(){
                                    return get.attitude(player,event.target)<0;
                                });
                                'step 2'
                                if(result.bool){
                                    var num = Math.ceil(Math.random() * 100);
                                    var bool = (num <= (20+player.hp*15));
                                    if(bool){
                                        for(let i of trigger.cards){
                                            if(i.name.search('bhxinyao')!=-1){
                                                //cards[0].init(game.createCard({ name: 'bhxinyao_fake1', suit: get.suit(i), number: get.number(i)}))
                                                if(i.name.search('diamond')!=-1) i.init(game.createCard({ name: 'bhxinyao_fake1', suit: get.suit(i), number: get.number(i)}));
                                                else if(i.name.search('club')!=-1) i.init(game.createCard({ name: 'bhxinyao_fake2', suit: get.suit(i), number: get.number(i)}));
                                                else if(i.name.search('heart')!=-1) i.init(game.createCard({ name: 'bhxinyao_fake3', suit: get.suit(i), number: get.number(i)}));
                                                else i.init(game.createCard({ name: 'bhxinyao_fake4', suit: get.suit(i), number: get.number(i)}));
                                            }
                                        }
                                    }
                                } else event.finish();
                            },
                        },
                        bhzhunqiong:{
                            trigger:{
                                player:'damageEnd',
                            },
                            direct:true,
                            filter:function(event,player){
                                if(!event.source||event.source==player||!event.source.isAlive()) return false;
                                return player.countCards('hs',function(card){
                                    return card.name.search('bhxinyao')!=-1;
                                });
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.source;
                                event.target.chooseBool('是否随机获得'+get.translation(player)+'手中的一瓶【新药】？').set('ai',function(){
                                    var att=get.attitude(event.target,player);
                                    if(att>0) return player.countCards('h')>4;
                                    else return player.hp<3||player.countCards('h')<4;
                                });
                                'step 1'
                                if(result.bool){
                                    player.logSkill('bhzhunqiong',event.target);
                                    var cards=player.getCards('hs',function(card){
                                        return card.name.search('bhxinyao')!=-1;
                                    });
                                    if(cards.length){
                                        event.card=cards.randomGet();
                                        event.target.gain(event.card,player,'gain2');
                                    }
                                }
                            },
                            group:"bhzhunqiong_use",
                            subSkill:{
                                use:{
                                    sub:true,
                                    trigger:{
                                        global:"useCard",
                                    },
                                    frequent:true,
                                    silent:true,
                                    filter:function(event,player){
                                        if(event.card.name.search('bhxinyao')==-1) return false;
                                        return player.storage.bhzhuinian_name&&player.storage.bhzhuinian_name.contains(event.player.name);
                                    },
                                    content:function(){
                                        'step 0'
                                        if(!player.storage.bhzhunqiong) player.storage.bhzhunqiong=0;
                                        player.storage.bhzhunqiong++;
                                        'step 1'
                                        if(player.storage.bhzhunqiong>=3&&!trigger.player.hasSkill('bhjiandian')){
                                            player.logSkill('bhzhunqiong');
                                            if(!player.hasSkill('bhzhuinian_liangbian')) player.addSkill('bhzhuinian_liangbian');
                                            player.storage.bhzhuinian_count[0]++;
                                            player.markSkill('bhzhuinian_liangbian');
                                            player.loseMaxHp();
                                            player.removeSkill('bhzhunqiong_use');
                                        }
                                    },
                                },
                            },
                            mod: {
                                ignoredHandcard: function (card, player) {
                                    if (card.name.search('bhxinyao') != -1) {
                                        return true;
                                    }
                                },
                                cardDiscardable: function (card, player, name) {
                                    if (name == 'phaseDiscard' && card.name.search('bhxinyao') != -1) return false;
                                },
                            },
                        },
                        bhzhengxing:{
                            forced:true,
                            trigger:{
                                player:"phaseZhunbei",
                            },
                            priority:2,
                            content:function(){
                                'step 0'
                                event.targets=game.filterPlayer(function(target){
                                    return player.storage.bhzhuinian_name.contains(target.name)&&!target.hasSkill('bhdongzheng');
                                });
                                if(event.targets.length>0){
                                    player.chooseTarget('请选择一名【卡莲】角色获得【东征】',function(card,player,target){
                                        return event.targets.contains(target);
                                    },true).set('ai',function(target){
                                        var att=get.attitude(player,target);
                                        if(att>0) return target.hp>2?2:-2;
                                        else return 3;
                                    });
                                } else event.goto(2);
                                'step 1'
                                event.target=result.targets[0];
                                player.line(event.target);
                                event.target.loseHp();
                                event.target.addSkill('bhdongzheng');
                                event.finish();
                                'step 2'
                                if(!player.hasSkill('bhdongzheng')){
                                    player.chooseControl('获得【东征】','摸牌').set('ai',function(){
                                        if(player.countCards('h')>2) return '获得【东征】';
                                        return '摸牌';
                                    });
                                } else {
                                    player.draw();
                                    event.finish();
                                }
                                'step 3'
                                if(result.control=='摸牌'){
                                    player.draw();
                                } else {
                                    player.addSkill('bhdongzheng');
                                }
                            },
                            dutySkill:true,
                            derivation:[],
                            group:["bhzhengxing_achieve","bhzhengxing_fail"],
                            subSkill:{
                                achieve:{
                                    // audio: "ext:崩崩崩/audio:1",
                                    skillAnimation:true,
                                    animationColor:"gray",
                                    priority:4,
                                    trigger:{
                                        player:'phaseZhunbei',
                                    },
                                    forced:true,
                                    filter:function (event, player) {
                                        var list=['bhdiliuyexiangqu','bhjinyang','bhyuanzuilieren','bhkalian'];
                                        var bool=game.hasPlayer(function(current){
                                            return list.contains(current.name);
                                        });
                                        return bool&&player.storage.bhzhuinian_count[0]>0&&player.storage.bhzhuinian_count[1]==0;
                                    },
                                    content:function(){
                                        game.log(player, '成功完成使命');
                                        player.awakenSkill('bhzhengxing');
                                        player.storage.bhzheyue[0]=true;
                                        game.log(player,'的星门【α-1】已解锁');
                                        player.syncStorage('bhzheyue');
                                    },
                                    sub:true,
                                },
                                fail:{
                                    //audio: "ext:崩崩崩/audio:1",
                                    skillAnimation:true,
                                    animationColor:"fire",
                                    trigger:{
                                        player:'phaseZhunbei',
                                    },
                                    priority:4,
                                    forced:true,
                                    filter:function (event, player) {
                                        var list=['bhdiliuyexiangqu','bhjinyang','bhyuanzuilieren','bhkalian'];
                                        var bool=game.hasPlayer(function(current){
                                            return list.contains(current.name);
                                        });
                                        return !bool;
                                    },
                                    content:function(){
                                        'step 0'
                                        game.log(player, '使命失败');
                                        player.awakenSkill('bhzhengxing');
                                        if(player.countCards('h',{color:'red'})&&player.countCards('h',{color:'black'})){
                                            player.chooseToDiscard('h',function(card){
                                                return get.color(card)=='red';
                                            },true);
                                            player.chooseToDiscard('h',function(card){
                                                return get.color(card)=='black';
                                            },true);
                                        } else player.loseHp();
                                        'step 1'
                                        if(!player.hasSkill('bhzhuinian_canbian')) player.addSkill('bhzhuinian_canbian');
                                        player.storage.bhzhuinian_count[1]++;
                                        player.syncStorage('bhzhuinian_count');
                                        player.markSkill('bhzhuinian_canbian');
                                        player.storage.bhzheyue[1]=true;
                                        game.log(player,'的星门【α-2】已解锁');
                                    },
                                    sub:true,
                                },
                            },
                        },
                        bhbengxin:{
                            trigger:{
                                player:'damageEnd',
                            },
                            intro:{
                                content:"mark",
                            },
                            check:function(event,player){
                                var targets=game.filterPlayer(function(target){
                                    return target.countMark('bhbengxin')>0;
                                });
                                var num=0;
                                for(let i of targets){
                                    num+=i.countMark('bhbengxin');
                                }
                                return num<player.hp-1;
                            },
                            content:function(){
                                'step 0'
                                event.num=trigger.num;
                                player.chooseTarget('令一名角色执行效果并获得“崩心”',function(card,player,target){
                                    return target!=player;
                                },true).set('ai',function(target){
                                    var att=get.attitude(player,target);
                                    if(att>0) return target.hp<4?2:-2;
                                    else return 1;
                                });
                                'step 1'
                                event.target=result.targets[0];
                                var str1='回复'+event.num+'点体力';
                                var str2='增加'+event.num+'点体力上限';
                                event.str=str1;
                                player.chooseControl(str1,str2).set('prompt','令'+get.translation(event.target)+'执行一项').set('ai',function(){
                                    var att=get.attitude(player,event.target);
                                    if(att>0) return event.target.hp<3?str1:str2;
                                    else return (event.target.hp+event.num)>event.target.maxHp?str1:str2;
                                });
                                'step 2'
                                player.line(event.target);
                                if(result.control==event.str){
                                    event.target.recover(event.num);
                                } else {
                                    event.target.gainMaxHp(event.num);
                                }
                                event.target.addMark('bhbengxin',event.num);
                                event.target.syncStorage('bhbengxin');
                                event.target.markSkill('bhbengxin');
                            },
                            group:"bhbengxin_recover",
                            subSkill:{
                                recover:{
                                    sub:true,
                                    frequent:true,
                                    trigger:{
                                        player:'recoverAfter',
                                    },
                                    filter:function(event,player){
                                        return game.hasPlayer(function(target){
                                            return target.countMark('bhbengxin')>0;
                                        });
                                    },
                                    content:function(){
                                        'step 0'
                                        event.num=trigger.num;
                                        'step 1'
                                        player.chooseTarget('请选择一名有“崩心”的其他角色',function(card,player,target){
                                            return target.countMark('bhbengxin')&&target!=player;
                                        },true).set('ai',function(target){
                                            return -get.attitude(player,target);
                                        });
                                        'step 2'
                                        event.target=result.targets[0];
                                        player.chooseControl('体力','体力上限').set('prompt','请选择一项令'+get.translation(event.target)+'失去').set('ai',function(){
                                            if(event.target.hp>3||event.target.hp==event.target.maxHp) return '体力上限';
                                            else return '体力';
                                        });
                                        'step 3'
                                        player.line(event.target);
                                        if(result.control=='体力') event.target.loseHp();
                                        else event.target.loseMaxHp();
                                        event.target.removeMark('bhbengxin');
                                        event.target.syncStorage('bhbengxin');
                                        if(!event.target.countMark('bhbengxin')) event.target.unmarkSkill('bhbengxin');
                                        'step 4'
                                        event.num--;
                                        if(event.num>0&&game.hasPlayer(function(target){
                                            return target.countMark('bhbengxin')>0&&target!=player;
                                        })) event.goto(1);
                                    },
                                },
                            },
                        },
                        bhweinian:{
                            enable:"phaseUse",
                            filter:function(event,player){
                                return player.countCards('h',{color:'red'})==1&&player.countCards('h',{color:'black'})==1;
                            },
                            selectCard:-1,
                            filterCard:true,
                            position:'h',
                            filterTarget:function(card,player,target){
                                return target!=player;
                            },
                            content:function(){
                                'step 0'
                                player.recover();
                                'step 1'
                                if(!target.storage.bhweinian_damage) target.storage.bhweinian_damage=[];
                                target.storage.bhweinian_damage.push(player);
                                target.addTempSkill('bhweinian_damage');
                                target.line(player);
                                player.damage(1,target);
                                game.delayx();
                            },
                            subSkill:{
                                damage:{
                                    sub:true,
                                    silent:true,
                                    forced:true,
                                    charlotte:true,
                                    trigger:{
                                        source:"damageEnd",
                                        global:'loseHudunAfter',
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhweinian_damage&&player.storage.bhweinian_damage.length>0;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.targets=player.storage.bhweinian_damage;
                                        for(let i of event.targets){
                                            i.line(player);
                                            player.damage(i);
                                        }
                                        'step 1'
                                        player.removeSkill('bhweinian_damage');
                                    },
                                },
                            },
                        },
                        bhshuhai:{
                            enable:"phaseUse",
                            usable:1,
                            filter:function(event,player){
                                var targets=game.filterPlayer(function(target){
                                    return target.countMark('bhbengxin')>0;
                                });
                                var num=0;
                                for(let i of targets){
                                    num+=i.countMark('bhbengxin');
                                }
                                return num<=player.hp;
                            },
                            content:function(){
                                'step 0'
                                var targets=game.filterPlayer(function(target){
                                    return target.countMark('bhbengxin')>0;
                                });
                                var num=0;
                                for(let i of targets){
                                    num+=i.countMark('bhbengxin');
                                }
                                player.loseHp(num);
                                var cards=player.getCards('hej');
                                player.discard(cards);
                                'step 1'
                                var list = [1,4,5,6], lines = [];
                                var indexs=list,index;
                                if(player.storage.bhzhuinian_lined.length>0){
                                    for(let i of player.storage.bhzhuinian_lined){
                                        indexs.remove(i);
                                    }
                                }
                                if(indexs.length>0) index=indexs.randomGet();
                                else index=1;
                                for (var i = 0; i < list.length; i++) {
                                    var name = 'bhzhuinian_line' + list[i];
                                    var nametranslate;
                                    switch(list[i]){
                                        case 1:
                                            nametranslate='α线';
                                            break;
                                        case 2:
                                            nametranslate='δ线';
                                            break;
                                        case 3:
                                            nametranslate='SG线';
                                            break;
                                        case 4:
                                            nametranslate='β线';
                                            break;
                                        case 5:
                                            nametranslate='γ线';
                                            break;
                                        default:
                                            nametranslate='Ω线';
                                    }
                                    if (!lib.card[name]) {
                                        var info = {
                                            fullimage: true,
                                            type: "世界线",
                                            image: 'ext:崩崩崩/image/' + name + '.png',
                                            suit:null,
                                            number:null,
                                        }
                                        lib.card[name] = info;
                                        lib.translate[name] = nametranslate;
                                        lib.translate[name + '_info'] = lib.skill.bhzheyue.linestranslate[name];
                                    }
                                    lines.push(game.createCard(name,' ',0));
                                }
                                player.chooseButton(['世界线已经变动',lines],true).set('filterButton',function(button){
                                    return button.link.name.search(index)!=-1;
                                });
                                'step 2'
                                switch(player.storage.bhzhuinian_line){
                                    case 0:
                                        event.skills=[];
                                        break;
                                    case 1:
                                        event.skills=['bhfengqi','bhxuedu','bhzhunqiong','bhzhengxing'];
                                        break;
                                    case 2:
                                        event.skills=['bhbengxin','bhweinian','bhshuhai'];
                                        break;
                                    case 3:
                                        event.skills=['bhnishi','bhlingxing','bhzhongwang','bhzhengguo'];
                                        break;
                                    case 4:
                                        event.skills=['bhshenguan','bhxiuqi','bhhuixian'];
                                        break;
                                    case 5:
                                        event.skills=['bhshenghai','bhhunzuo','bhshenmian','bhtianqi'];
                                        break;
                                    default:
                                        event.skills=['bhzhibao','bhxushen','bhchuanzhou'];
                                }
                                for(let i of event.skills){
                                    player.removeSkill(i);
                                }
                                var name=result.links[0].name;
                                event.index=parseInt(name.slice(15,16));
                                game.log(player,'已前往世界线：'+lib.translate[name]);
                                switch(event.index){
                                    case 1:
                                        event.skills=['bhfengqi','bhxuedu','bhzhunqiong','bhzhengxing']
                                        break;
                                    case 2:
                                        event.skills=['bhbengxin','bhweinian','bhshuhai'];
                                        break;
                                    case 3:
                                        event.skills=['bhnishi','bhlingxing','bhzhongwang','bhzhengguo'];
                                        break;
                                    case 4:
                                        event.skills=['bhshenguan','bhxiuqi','bhhuixian'];
                                        break;
                                    case 5:
                                        event.skills=['bhshenghai','bhhunzuo','bhshenmian','bhtianqi'];
                                        break;
                                    default:
                                        event.skills=['bhzhibao','bhxushen','bhchuanzhou'];
                                }
                                player.storage.bhzhuinian_line=event.index;
                                player.node.avatar.setBackgroundImage('extension/崩崩崩/image/'+name+'.png');
                                if(!player.storage.bhzhuinian_lined.contains(event.index)) player.storage.bhzhuinian_lined.push(event.index);
                                for(let i of event.skills){
                                    player.addSkill(i);
                                }
                            },
                        },
                        bhxueyong:{
                            unique:true,
                            mark:true,
                            derivation:["bhjuanshu"],
                            limited:true,
                            skillAnimation:false,
                            animationStr:"血拥",
                            animationColor:"fire",
                            init:function (player) {
                                player.storage.bhxueyong = false;
                            },
                            trigger:{
                                source:"recoverAfter",
                            },
                            filter:function (event, player) {
                                if(event.player.hasSkill('bhjuanshu')) return false;
                                if(event.player==player) return false;
                                return true;
                            },
                            check:function(event,player){
                                var att=get.attitude(player,event.player);
                                if(att>0) return true;
                                if(att<0&&player.hp<2) return true;
                                if(player.identity=='fan'&&event.player.identity=='zhu') return true;
                                return false;
                            },
                            content:function () {
                                'step 0'
                                player.awakenSkill('bhxueyong');
                                player.storage.bhxueyong = true;
                                event.target=trigger.player;
                                player.line(event.target);
                                if (!event.target.storage.bhjuanshu) event.target.storage.bhjuanshu = [];
                                event.target.storage.bhjuanshu.push(player);
                                event.target.addSkill('bhjuanshu');
                            },
                            intro:{
                                content:"limited",
                            },
                        },
                        bhjuanzu:{
                            trigger:{
                                player:"recoverBegin",
                            },
                            check:function(event,player){
                                if(player.hp<=2) return false;
                                return game.hasPlayer(function(target){
                                    var val=get.attitude(player,target);
                                    if(val<0||target.hp==target.maxHp) return false;
                                    if(target.hasSkill('bhjuanshu')&&target.storage.bhjuanshu&&target.storage.bhjuanshu.contains(player)) val+=4;
                                    return val>0;
                                });
                            },
                            filter:function(event,player){
                                return !player.isDying();
                            },
                            usable:1,
                            content:function(){
                                'step 0'
                                event.num=trigger.num;
                                trigger.cancel();
                                player.chooseTarget('令一名其他角色回复体力',function(card,player,target){
                                    return target!=player;
                                },true).set('ai',function(target){
                                    var val=get.attitude(player,target);
                                    if(val<0||target.hp==target.maxHp) return -10;
                                    if(target.hasSkill('bhjuanshu')&&target.storage.bhjuanshu&&target.storage.bhjuanshu.contains(player)) val+=4;
                                    return val;
                                });
                                'step 1'
                                event.target=result.targets[0];
                                player.line(event.target);
                                event.target.recover(event.num);
                                player.draw();
                                event.target.chooseCard('你可以交给'+get.translation(player)+'一张手牌','h').set('ai',function(card){
                                    return 8-get.value(card)+(event.target.countCards('h')>player.countCards('h')?2:-8)+player.getUseValue(card);
                                });
                                'step 2'
                                if(result.bool&&result.cards){
                                    player.gain(result.cards[0],event.target,'give');
                                }
                            },
                        },
                        bhtiewan:{
                            hiddenCard:function(player,name){
                                if(!game.hasPlayer(function(target){
                                    var cards=target.getCards('ej',{color:"black"});
                                    return cards.length>0;
                                })) return false;
                                if((name=='sha'||name=='wuxie')) return true;
                                return false;
                            },
                            prompt:"将场上的一张黑色牌当做【杀】或【无懈可击】使用",
                            enable:["chooseToUse"],
                            filter:function(event,player){
                                if(game.hasPlayer(function(current){
                                    return current.getCards('ej',{color:"black"}).length>0;
                                })&&(event.filterCard({
                                    name:'sha',
                                },player,event)||event.filterCard({
                                    name:'wuxie',
                                },player,event))) return true;
                                return false;
                            },
                            chooseButton:{
                                dialog:function(event,player){
                                    var list=[];
                                    if(event.filterCard({
                                        name:'sha',
                                    },player,event)) list.push(['基本','','sha']);
                                    if(event.filterCard({
                                        name:'wuxie',
                                    },player,event)) list.push(['锦囊','','wuxie']);
                                    return ui.create.dialog('铁腕',[list,'vcard']);
                                },
                                check:function(button){
                                    var player=_status.event.player;
                                    var evt=_status.event.getParent();
                                    if(evt.dying) return get.attitude(player,evt.dying);
                                    return 1;
                                },
                                backup:function(links,player){
                                    return {
                                        viewAs:{
                                            name:links[0][2],
                                        },
                                        filterCard:()=>false,
                                        selectCard:-1,
                                        prompt:"选择场上的一张黑色牌，当做【杀】或【无懈可击】使用",
                                        precontent:function(){
                                            'step 0'
                                            player.chooseTarget('请选择转化底牌的来源区域',function(card,player,target){
                                                return target.getCards('ej',{color:"black"}).length>0;
                                            },true).set('ai',function(target){
                                                return -get.attitude(player,target);
                                            });
                                            'step 1'
                                            var owner=result.targets[0];
                                            if(!owner.storage.bhtiewan_discard) owner.storage.bhtiewan_discard=[];
                                            owner.storage.bhtiewan_discard.push(player);
                                            owner.addTempSkill('bhtiewan_discard');
                                            player.choosePlayerCard('请选择转化底牌','ej',owner,true).set('filterButton',function(button){
                                                return get.color(button.link)=='black';
                                            });
                                            'step 2'
                                            var card=result.cards[0];
                                            event.result.cards.push(card);
                                        },
                                    };
                                },
                                ai:{
                                    hasSha:true,
                                    hasShan:true,
                                    skillTagFilter:function(player,tag){
                                        return game.hasPlayer(function(target){
                                            return target.getCards('ej',{color:"black"});
                                        });
                                    },
                                },
                            },
                            ai:{
                                order:8,
                                result:{
                                    player:1,
                                },
                            },
                            subSkill:{
                                discard:{
                                    trigger:{
                                        global:"useCardAfter",
                                    },
                                    frequent:true,
                                    filter:function(event,player){
                                        if(!player.storage.bhtiewan_discard||player.storage.bhtiewan_discard.length==0) return false;
                                        for(let i of player.storage.bhtiewan_discard){
                                            if(event.player==i) return true;
                                        }
                                        return false;
                                    },
                                    silent:true,
                                    content:function(){
                                        'step 0'
                                        var str="铁腕：是否弃置"+get.translation(trigger.player)+"一张牌";
                                        player.chooseBool(str).set('ai',function(){
                                            return get.attitude(player,trigger.player)<0;
                                        });
                                        'step 1'
                                        if(result.bool){
                                            player.discardPlayerCard(trigger.player,'he',true);
                                        }
                                        player.removeSkill('bhtiewan_discard');
                                    },
                                    sub:true,
                                },
                            },
                        },
                        bhqiangquan:{
                            enable:"phaseUse",
                            usable:1,
                            filterTarget(card,player,target){
                                return player!=target&&target.hp<=player.hp;
                            },
                            selectCard:-1,
                            filterCard:false,
                            content:function(){
                                'step 0'
                                event.num=player.countCards('h');
                                player.swapHandcards(targets[0]);
                                'step 1'
                                if(player.countCards('h')>event.num) player.loseHp();
                            },
                        },
                        bhyingyao:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:'useCard',
                            },
                            prompt:"是否发动【英耀】将杀转移给自己",
                            check:function(event,player){
                                for(let i of event.targets){
                                    if(player.inRange(i)&&i.hp<=player.hp) return get.attitude(player,i)>0;
                                }
                                return false;
                            },
                            filter:function(event,player){
                                if(event.card.name!='sha') return false;
                                if(!event.targets||!event.targets.length) return false;
                                //if(player==_status.currentPhase||event.targets.contains(_status.currentPhase)) return false;
                                for(let i of event.targets){
                                    if(player.inRange(i)&&i.hp<=player.hp&&i!=player) return !player.hasSkill('bhyingyao_im');
                                }
                                return false;
                            },
                            content:function(){
                                'step 0'
                                player.addTempSkill('bhyingyao_im','roundStart');
                                if(trigger.targets.length==1){
                                    event.target=trigger.targets[0];
                                    event.goto(2);
                                } else {
                                    player.chooseTarget('请选择【英耀】的目标',function(card,player,target){
                                        return player.inRange(target)&&target.hp<=player.hp;
                                    },true).set('ai',function(target){
                                        return get.attitude(player,target);
                                    })
                                }
                                'step 1'
                                event.target=result.targets[0];
                                'step 2'
                                player.line(event.target);
                                game.broadcastAll(function(target1,target2){
                                    game.swapSeat(target1,target2);
                                },player,event.target);
                                trigger.targets=[player];
                                'step 3'
                                var cards = player.getCards('e');
                                var bool=true;
                                if (cards.length) {
                                    for (var i = 0; i < cards.length; i++) {
                                        if (cards[i].name.search('bhkelixina') != -1) bool=false;
                                    }
                                }
                                if(bool){
                                    var name='bhkelixina_in';
                                    var card=game.createCard(name,'spade',13);
                                    player.$gain2(card,false);
                                    game.delayx();
                                    player.equip(card);
                                }
                            },
                            group:"bhyingyao_sha",
                            subSkill:{
                                im:{
                                    sub:true,
                                    charlotte:true,
                                },
                                sha:{
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger:{
                                        player:'useCardToTargeted',
                                    },
                                    filter:function(event,player){
                                        return event.card.name=='sha'&&event.target.countCards('h');
                                    },
                                    prompt:function(event,player){
                                        return '是否对'+get.translation(event.target)+'发动【英耀】';
                                    },
                                    check:function(event,player){
                                        return get.attitude(player,event.target)<0;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.target=trigger.target;
                                        player.choosePlayerCard(event.target,'h',true);
                                        'step 1'
                                        event.card=result.cards[0];
                                        player.showCards(event.card);
                                        if(!trigger.card.suit||trigger.card.suit!=event.card.suit) event.target.discard(event.card);
                                        else {
                                            player.gain(event.card,event.target,'giveAuto');
                                            trigger.directHit.add(event.target);
                                        }
                                    },
                                    sub:true,
                                },
                            },
                            ai:{
                                threaten:2.6,
                            },
                        },
                        bhzhengcheng:{
                            audio: "ext:崩崩崩/audio:2",
                            init:function (player) {
                                player.storage.bhzhengcheng_use=[0,0];
                            },
                            check:function (event, player) {
                                if (get.attitude(player, event.player) < 0) return false;
                                if(player.storage.bhzhengcheng_use&&player.storage.bhzhengcheng_use[0]-player.storage.bhzhengcheng_use[1]>1&&get.attitude(player, event.player)<9) return false;
                                return true;
                            },
                            trigger:{
                                global:"dying",
                            },
                            prompt:"你可以弃置一张红色牌以发动【圣护】",
                            filter:function (event, player) {
                                if(!player.countCards('he',{color:'red'})) return false;
                                if (player.hp > (1 - event.player.hp)) return true;
                                if ((Math.max(player.countCards('e'), event.player.countCards('e')) - (1 - event.player.hp)) >= 0) return true;
                                if ((player.countCards('he', { color: 'red' })-1) >= ((1 - event.player.hp) - Math.max(player.countCards('e'), event.player.countCards('e')))) return true;
                                return false;
                            },
                            content:function () {
                                "step 0"
                                player.chooseToDiscard("请弃置一张红色牌",'he',function(card){
                                    return get.color(card)=='red';
                                },true).set('ai',function(card){
                                    return 20-get.value(card);
                                });
                                player.draw();
                                player.storage.bhzhengcheng_use[0]++;
                                if (trigger.player != player) {
                                    var str1 = '弃置' + get.translation(player) + '的装备牌';
                                    var str2 = '弃置' + get.translation(trigger.player) + '的装备牌';
                                    player.chooseControl(str1, str2, function (event, player) {
                                        return _status.event.choice;
                                    }).set('ai', function () {
                                        var cards1 = player.getCards('e');
                                        var value1 = 0;
                                        var num1 = player.countCards('e');
                                        var cards2 = trigger.player.getCards('e');
                                        var value2 = 0;
                                        var num2 = trigger.player.countCards('e');
                                        for (var i = 0; i < cards1.length; i++) {
                                            value1 += get.value(cards1[i]);
                                        }
                                        for (var i = 0; i < cards2.length; i++) {
                                            value2 += get.value(cards2[i]);
                                        }
                                        if (value1 > value2 && num1 < num2) return str2;
                                        if (value2 > value1 && num1 > num2) return str1;
                                        return num1 > num2 ? str1 : str2;
                                    });
                                    event.str = str1;
                                    // if (player.hp > (1 - trigger.player.hp)) {
                                        
                                    // } else if (player.countCards('e') < (1 - trigger.player.hp)) {
                                    //     result.control = str2;
                                    // } else {
                                    //     result.control = str1;
                                    // }
                                } else {
                                    event.num = player.countCards('e');
                                    event.cards = player.getCards('e');
                                    player.discard(event.cards);
                                    event.goto(2);
                                }
                                "step 1"
                                player.line(trigger.player);
                                if (result.control == event.str) {
                                    event.num = player.countCards('e');
                                    event.cards = player.getCards('e');
                                    player.discard(event.cards);
                                } else {
                                    event.num = trigger.player.countCards('e');
                                    event.cards = trigger.player.getCards('e');
                                    trigger.player.discard(event.cards);
                                }
                                "step 2"
                                var x = event.num;
                                event.num = 1 - trigger.player.hp;
                                trigger.player.recover(event.num);
                                var y = event.num;
                                var str1 = '弃置' + get.cnNumber(y - x) + '张红色牌';
                                var str2 = '失去' + get.cnNumber(y) + '点体力';
                                var str3 = '摸' + get.cnNumber(x - y) + '张牌';
                                event.num1 = x;
                                event.num2 = y;
                                if (x < y) {
                                    if (player.countCards('he', { color: 'red' }) >= y - x && player.hp >= y) {
                                        player.chooseControlList([str1, str2], function () {
                                            return _status.event.choice;
                                        }, true).set('ai', function () {
                                            return 0;
                                        });
                                    } else if (player.hp < y) {
                                        player.chooseToDiscard('he', (y - x), true, '弃置' + get.cnNumber(y - x) + '张红色牌', function (card) {
                                            return get.color(card) == 'red';
                                        });
                                        event.trigger('bhzhengcheng');
                                        event.finish();
                                    } else {
                                        player.loseHp(y);
                                        event.trigger('bhzhengcheng');
                                        event.finish();
                                    }
                                } else if (x > y) {
                                    player.chooseControlList([str2, str3], function () {
                                        return _status.event.choice;
                                    }, true).set('ai', function () {
                                        return 1;
                                    });
                                    event.goto(4);
                                } else {
                                    event.trigger('bhzhengcheng');
                                    event.finish();
                                }
                                "step 3"
                                event.index = result.index;
                                if (event.index == 0) {
                                    player.chooseToDiscard('he', (event.num2 - event.num1), true, '弃置' + get.cnNumber(event.num2 - event.num1) + '张红色牌', function (card) {
                                        return get.color(card) == 'red';
                                    });
                                } else {
                                    player.loseHp(event.num2);
                                }
                                event.trigger('bhzhengcheng');
                                event.finish();
                                "step 4"
                                event.index = result.index;
                                if (event.index == 1) {
                                    player.draw(event.num1 - event.num2);
                                } else {
                                    player.loseHp(event.num2);
                                }
                                event.trigger('bhzhengcheng');
                                event.finish();
                            },
                            dutySkill:true,
                            derivation:["bhshenghu","bhjiushi","bhshengxue","bhzhileng","bhyingyao"],
                            group:["bhzhengcheng_achieve","bhzhengcheng_fail","bhzhengcheng_jiushi","bhzhengcheng_count"],
                            subSkill:{
                                jiushi:{
                                    audio: "bhzhengcheng",
                                    init:function (player) {
                                        player.storage.bhjiushi = 0;
                                        player.markSkill('bhjiushi');
                                    },
                                    prompt:"你可以弃置一张黑色牌以发动【救世】",
                                    enable:"phaseUse",
                                    filter:function (event, player) {
                                        if(!player.countCards('he',{color:'black'})) return false;
                                        if(player.countCards('hs')<3) return false;
                                        if (player.hasSkill('bhjiushi_im')) return false;
                                        return player.countCards('hes') >= 4;
                                    },
                                    selectCard:1,
                                    filterCard:function(card,player,target){
                                        if(get.color(card)!='black') return false;
                                        if(player.countCards('hs')<=3){
                                            var cards=player.getCards('e');
                                            return cards.contains(card);
                                        }
                                        return true;
                                    },
                                    position:"he",
                                    delay:false,
                                    filterTarget:function (card, player, target) {
                                        return target != player && player.canUse('sha', target);
                                    },
                                    content:function () {
                                        'step 0'
                                        player.draw();
                                        player.chooseCard('请选择三张牌以发动【救世】','hs',3,true).set('ai',function(card){
                                            return 20-get.value(card);
                                        });
                                        'step 1'
                                        var cards=result.cards;
                                        player.storage.bhzhengcheng_use[1]++;
                                        player.addTempSkill('bhjiushi_dam', 'useCardAfter');
                                        player.useCard({ name: 'sha', nature: 'ice' }, cards, target, false).viewAs = true;
                                        'step 2'
                                        player.storage.bhjiushi++;
                                        player.syncStorage('bhjiushi');
                                        if (!player.hasHistory('sourceDamage', function (evt) {
                                            var card = evt.card;
                                            if (!card || card.name != 'sha') return false;
                                            var evtx = evt.getParent('useCard');
                                            return evtx.card == card && evtx.getParent() == event;
                                        })) {
                                            player.draw(2);
                                        } else {
                                            player.addTempSkill('bhjiushi_im', 'phaseUseEnd');
                                        }
                                        event.trigger('bhzhengcheng');
                                    },
                                    ai:{
                                        order:function (item, player) {
                                            if(player.storage.bhzhengcheng_use&&player.storage.bhzhengcheng_use[1]<2) return 8.5;
                                            return get.order({ name: 'sha' }, player) + 1;
                                        },
                                        result:{
                                            player:function(player,target){
                                                if(!player.storage.bhzhengcheng_use) return 1;
                                                else {
                                                    if(player.storage.bhzhengcheng_use[0]<=player.storage.bhzhengcheng_use[1]) return -1;
                                                    else return player.storage.bhzhengcheng_use[1]<2?2.5:1.5;
                                                }
                                            },
                                            target:function (player, target) {
                                                return get.effect(target, { name: 'sha', nature: 'ice' }, player, target);
                                            },
                                        },
                                    },
                                },
                                count:{
                                    sub:true,
                                    silent:true,
                                    charlotte:true,
                                    forced:true,
                                    trigger:{
                                        source:"recoverBegin",
                                    },
                                    filter:function(event,player){
                                        return event.player!=player&&event.player.isDying();
                                    },
                                    content:function(){
                                        trigger.bhzhengcheng=true;
                                    },
                                },
                                achieve:{
                                    audio: "ext:崩崩崩/audio:1",
                                    skillAnimation:true,
                                    animationColor:"gray",
                                    trigger:{
                                        source:['dieAfter','recoverAfter'],
                                    },
                                    forced:true,
                                    filter:function (event, player) {
                                        if(event.player==player) return false;
                                        var bool=player.storage.bhzhengcheng_use[0]==player.storage.bhzhengcheng_use[1]&&player.storage.bhzhengcheng_use[0]>1;
                                        if(event.name=='dieAfter') return bool;
                                        else return !event.player.isDying()&&bool&&event.bhzhengcheng;
                                    },
                                    content:function () {
                                        'step 0'
                                        game.log(player, '成功完成使命');
                                        player.awakenSkill('bhzhengcheng');
                                        'step 1'
                                        var name='bhkelixina_in';
                                        var card=game.createCard(name,'spade',13);
                                        player.$gain2(card,false);
                                        game.delayx();
                                        player.equip(card);
                                        if(player.countCards('h')<player.maxHp) player.draw(player.maxHp-player.countCards('h'));
                                        if(player.hp<player.maxHp) player.recover(player.maxHp-player.hp);
                                        player.addSkill('bhyingyao');
                                    },
                                    sub:true,
                                },
                                fail:{
                                    audio: "ext:崩崩崩/audio:1",
                                    skillAnimation:true,
                                    animationColor:"fire",
                                    trigger:{
                                        player:"bhzhengcheng",
                                    },
                                    forced:true,
                                    filter:function (event, player) {
                                        return Math.abs(player.storage.bhzhengcheng_use[0]-player.storage.bhzhengcheng_use[1])>2;
                                    },
                                    content:function () {
                                        'step 0'
                                        game.log(player, '使命失败');
                                        player.awakenSkill('bhzhengcheng');
                                        'step 1'
                                        if(player.storage.bhzhengcheng_use[0]>player.storage.bhzhengcheng_use[1]){
                                            player.addSkill('bhshengxue');
                                            if(player.hp>1) player.loseHp(player.hp-1);
                                        } else {
                                            player.addSkill('bhzhileng');
                                            var cards=player.getCards('h');
                                            if(cards) player.discard(cards);
                                        }
                                    },
                                    sub:true,
                                },
                            },
                            ai:{
                                threaten:2.3,
                            },
                        },
                        bhenfan:{
                            trigger:{
                                global:"recoverAfter",
                            },
                            filter:function(event,player){
                                return event.player.hp-event.num<2&&event.player.hp>1;
                            },
                            direct:true,
                            content:function(){
                                'step 0'
                                event.target=trigger.player;
                                event.target.chooseBool('是否令与你同属的一名角色以及'+get.translation(player)+'各摸一张牌？').set('ai',function(){
                                    var att=get.attitude(event.target,player);
                                    return att>0;
                                    // var bool=game.hasPlayer(function(target){
                                    //     return get.attitude(event.target,target)>0&&target.group==event.target.group;
                                    // });
                                    // var bool2=game.hasPlayer(function(target){
                                    //     return target.group==event.target.group;
                                    // });
                                    // if(bool&&att>0) return true;
                                    // return !bool2&&att>0;
                                });
                                'step 1'
                                if(result.bool){
                                    player.logSkill('bhenfan');
                                    if(game.hasPlayer(function(target){
                                        return target.group==event.target.group;
                                    })){
                                        event.target.chooseTarget('请选择一名与你同属的角色',function(card,player,target){
                                            return target.group==event.target.group;
                                        },true).set('ai',function(target){
                                            return get.attitude(event.target,target);
                                        });
                                    } else {
                                        event.target.line(player);
                                        player.draw();
                                        event.finish();
                                    }
                                } else {
                                    event.finish();
                                }
                                'step 2'
                                event.target.line([result.targets[0],player]);
                                result.targets[0].draw();
                                player.draw();
                            },
                        },
                        bhjiukun:{
                            trigger:{
                                global:['damageEnd','loseHpAfter','changeHpAfter'],
                            },
                            check:function(event,player){
                                return get.attitude(player,event.player)>0;
                            },
                            usable:1,
                            filter:function(event,player){
                                return event.player.hp<3&&event.player.isAlive()&&game.hasPlayer(function(current){
                                    return current.countCards('he')&&(current==player||current.group==event.player.group)&&current!=event.player;
                                });
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.player;
                                event.sources=game.filterPlayer(function(current){
                                    return current.countCards('he')&&(current==player||current.group==trigger.player.group)&&current!=trigger.player;
                                });
                                event.num=0;
                                'step 1'
                                event.sources[event.num].chooseCard('你可以交给'+get.translation(event.target)+'一张牌','he').set('ai',function(card){
                                    var att=get.attitude(event.sources[event.num],event.target);
                                    if(att<0) return -10;
                                    else return event.sources[event.num].countCards('he')-event.sources[event.num].hp>0||event.sources[event.num].hp>2||event.sources[event.num].countCards('he')>2;
                                });
                                'step 2'
                                if(result.bool){
                                    event.sources[event.num].line(event.target);
                                    event.target.gain(result.cards[0],event.sources[event.num],'give');
                                }
                                'step 3'
                                event.num++;
                                if(event.num<event.sources.length) event.goto(1);
                            },
                        },
                        bhjinyu: {
                            usable: 1,
                            trigger: {
                                global: 'damageEnd',
                            },
                            filter: function (event, player) {
                                if (!event.player.isAlive()) return false;
                                if (get.distance(player, event.player) > 1 && event.player != player) return false;
                                return true;
                            },
                            check: function (event, player) {
                                var bool1 = false, bool2 = false;
                                if (event.source) bool1 = get.attitude(player, event.source) > 0;
                                bool2 = get.attitude(player, event.player) > 0;
                                return bool1 || bool2;
                            },
                            content: function () {
                                "step 0"
                                event.target=trigger.player;
                                if(trigger.source) event.chooseP=trigger.source;
                                else event.chooseP=trigger.player;
                                player.line(event.chooseP);
                                if(event.chooseP!=event.target) event.chooseP.line(event.target);
                                event.cards = get.cards(4);
                                game.cardsGotoOrdering(event.cards);
                                event.videoId = lib.status.videoId++;
                                game.broadcastAll(function (player, id, cards) {
                                    var str;
                                    if (player == game.me && !_status.auto) {
                                        str = '金鱼：分配花色相同的牌给受伤角色';
                                    }
                                    else {
                                        str = '金鱼：分配花色相同的牌给受伤角色';
                                    }
                                    var dialog = ui.create.dialog(str, cards);
                                    dialog.videoId = id;
                                }, player, event.videoId, event.cards);
                                event.time = get.utc();
                                game.addVideo('showCards', player, ['金鱼', get.cardsInfo(event.cards)]);
                                game.addVideo('delay', null, 2);
                                "step 1"
                                var next = event.chooseP.chooseButton([0, 4], true);
                                next.set('dialog', event.videoId);
                                next.set('filterButton', function (button) {
                                    for (var i = 0; i < ui.selected.buttons.length; i++) {
                                        if (get.suit(ui.selected.buttons[i].link) != get.suit(button.link)) return false;
                                    }
                                    return true;
                                });
                                next.set('ai', function (button) {
                                    var att1=get.attitude(event.chooseP,event.target);
                                    var att2=get.attitude(event.chooseP,player);
                                    if(att1>0){
                                        if(att2>0&&player.countCards('hes')<event.target.countCards('hes')) return get.value(button.link, _status.event.player)-(2*ui.selected.buttons.length)-2;
                                        else return get.value(button.link, _status.event.player);
                                    } else {
                                        return 7-get.value(button.link, _status.event.player);
                                    }
                                });
                                "step 2"
                                if (result.bool && result.links) {
                                    event.cards2 = result.links;
                                    event.cards.removeArray(event.cards2)
                                }
                                else {
                                    event.finish();
                                }
                                var time = 1000 - (get.utc() - event.time);
                                if (time > 0) {
                                    game.delay(0, time);
                                }
                                "step 3"
                                game.broadcastAll('closeDialog', event.videoId);
                                var cards2 = event.cards2
                                if(cards2&&cards2.length) trigger.player.gain(cards2, 'log', 'gain2')
                                "step 3"
                                // var cards = [];
                                // for(let i of event.cards){
                                //     if(!event.cards2.contains(i)) cards.push(card);
                                // }
                                var cards=event.cards;
                                if(cards&&cards.length) player.gain(cards, 'log', 'gain2');

                            },
                        },
                        bhsanjie: {
                            skillAnimation: true,
                            animationColor: "gray",
                            juexingji: true,
                            unique: true,
                            forced:true,
                            trigger:{
                                player:'phaseZhunbei',
                            },
                            filter:function(event,player){
                                return game.hasPlayer(function(current){
                                    return current.countCards('h')-current.maxHp>=3;
                                });
                            },
                            content:function(){
                                'step 0'
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                                'step 1'
                                player.removeSkill('bhjinyu');
                                player.gainMaxHp(6);
                                player.recover(3);
                            },
                        },
                        bhxuelang: {
                            trigger: {
                                player: 'damageBegin4',
                            },
                            derivation: 'bhxuelang2',
                            filter: function (event, player) {
                                return event.nature && event.nature == 'ice';
                            },
                            forced: true,
                            content: function () {
                                trigger.num--;
                            },
                            ai:{
                                effect: {
                                    target: function (card, player, target, current) {
                                        if (get.tag(card, 'iceDamage')) return -0.5;
                                    }
                                },
                            },
                        },
                        "bhxuelang2": {
                            group: 'bhxuelang',
                            trigger: {
                                player: 'damageBegin3',
                            },
                            silent: true,
                            filter: function (event, player) {
                                return !event.nature;
                            },
                            forced: true,
                            content: function () {
                                trigger.nature = 'ice';
                            },
                            ai: {
                                effect: {
                                    target: function (card, player, target, current) {
                                        if (get.tag(card, 'iceDamage')) return -0.5;
                                        else if (get.tag(card, 'fireDamage')) return 0.5;
                                        else if (get.tag(card, 'thunderDamage')) return 0.5;
                                        else return -0.5
                                    }
                                },
                            },
                        },
                        "bhxuelang3": {
                            trigger: {
                                player: 'gainAfter',
                            },
                            filter: function (event, player) {
                                return player.countCards('h');
                            },
                            forced: true,
                            content: function () {
                                player.discard(player.getCards('h'));
                            },
                        },
                        bhbingxiong: {
                            enable: 'phaseUse',
                            intro: {
                                content: "limited",
                            },
                            unique: true,
                            limited: true,
                            skillAnimation: false,
                            animationStr: "冰熊",
                            animationColor: "gray",
                            filterTarget: function (card, player, target) {
                                return target != player;
                            },
                            filter: function (event, player) {
                                return player.countCards('h') > 0;
                            },
                            filterCard: true,
                            selectCard: -1,
                            position: 'h',
                            lose: false,
                            discard: false,
                            content: function () {
                                'step 0'
                                player.awakenSkill('bhbingxiong');
                                player.storage.bhbingxiong = true;
                                event.target = targets[0];
                                event.num = 0;
                                'step 1'
                                player.chooseToDiscard('h', true);
                                'step 2'
                                event.card = result.cards[0];
                                event.target.judge();
                                'step 3'
                                if (result.color != get.color(event.card)) event.num++;
                                if (player.countCards('h') > 0) event.goto(1);
                                'step 4'
                                event.target.damage(event.num);
                                player.removeSkill('bhxuelang');
                                player.addSkill('bhxuelang2');
                                player.addSkill('bhxuelang3');
                            },
                            ai: {
                                order: 5.5,
                                result: {
                                    player: 0.1,
                                    target: -4,
                                },
                            },
                        },
                        bhyuanjing: {
                            enable: 'phaseUse',
                            usable: 1,
                            line: false,
                            intro: {
                                markcount: function (storage) {
                                    if (!storage) return 0;
                                    return storage[0].length;
                                },
                                mark: function (dialog, storage, player) {
                                    if (!storage) return;
                                    dialog.addAuto(storage[0]);
                                    dialog.addText('所属：');
                                    dialog.addText(get.translation(storage[1]));
                                },
                            },
                            multitarget: true,
                            filter: function (event, player) {
                                return player.maxHp > player.hp;
                            },
                            selectTarget: [1, Infinity],
                            filterTarget: function (card, player, target) {
                                return ui.selected.targets.length < (player.maxHp - player.hp) && player != target && target.countCards('h');
                            },
                            filterCard: false,
                            selectCard: -1,
                            content: function () {
                                'step 0'
                                event.targets = targets;
                                player.line(event.targets);
                                event.num = 0;
                                'step 1'
                                event.target = event.targets[event.num];
                                player.choosePlayerCard(event.target, 'h', true);
                                'step 2'
                                var card = result.cards[0];
                                player.showCards(card);
                                if (!player.storage.bhyuanjing) player.storage.bhyuanjing = [[], []];
                                if (!player.storage.bhyuanjing[0].contains(card)) {
                                    player.storage.bhyuanjing[0].push(card);
                                    player.storage.bhyuanjing[1].push(event.target);
                                }
                                'step 3'
                                event.num++;
                                if (event.num < event.targets.length) event.goto(1);
                                else {
                                    player.syncStorage('bhyuanjing');
                                    player.markSkill('bhyuanjing');
                                    event.finish();
                                }
                            },
                            mod: {
                                maxHandcard: function (player, num) {
                                    if (!player.storage.bhbingxiong && player.storage.bhyuanjing && player.storage.bhyuanjing[0].length > 0) {
                                        var suits = [];
                                        for (var i = 0; i < player.storage.bhyuanjing[0].length; i++) {
                                            if (!suits.contains(get.suit(player.storage.bhyuanjing[0][i]))) suits.push(get.suit(player.storage.bhyuanjing[0][i]));
                                        }
                                        return num + suits.length;
                                    }
                                },
                            },
                            ai: {
                                order: 9.9,
                                result: {
                                    player: 2,
                                    target: -0.2,
                                },
                            },
                            group: ['bhyuanjing_lose', 'bhyuanjing_use', 'bhyuanjing_round'],
                            subSkill: {
                                lose: {
                                    sub: true,
                                    trigger: {
                                        global: ["loseAfter", "equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter", "addToExpansionAfter"],
                                    },
                                    silent: true,
                                    forced: true,
                                    charlotte: true,
                                    filter: function (event, player) {
                                        if(!event.cards) return false;
                                        if (!player.storage.bhyuanjing || player.storage.bhyuanjing[0].length == 0) return false;
                                        for (var i = 0; i < event.cards.length; i++) {
                                            if (player.storage.bhyuanjing[0].contains(event.cards[i])) return true;
                                        }
                                        return false;
                                    },
                                    content: function () {
                                        var card, target;
                                        for (var i = 0; i < trigger.cards.length; i++) {
                                            for (var j = 0; j < player.storage.bhyuanjing[0].length; j++) {
                                                if (player.storage.bhyuanjing[0][j] == trigger.cards[i]) {
                                                    card = trigger.cards[i];
                                                    target = player.storage.bhyuanjing[1][j];
                                                    player.storage.bhyuanjing[0].remove(card);
                                                    player.storage.bhyuanjing[1].remove(target);
                                                    player.syncStorage('bhyuanjing');
                                                }
                                            }
                                        }
                                        player.syncStorage('bhyuanjing');
                                        if (player.storage.bhyuanjing[0].length == 0) player.unmarkSkill('bhyuanjing');
                                    },
                                },
                                use: {
                                    prompt: "你可视为使用一张因“渊鲸”被明示的基本牌或普通锦囊",
                                    enable: 'chooseToUse',
                                    filter: function (event, player) {
                                        if (!player.storage.bhbingxiong) return false;
                                        if (!player.storage.bhyuanjing || player.storage.bhyuanjing[0].length == 0) return false;
                                        if (player.storage.bhyuanjing_use && player.storage.bhyuanjing_use >= (player.maxHp - player.hp)) return false;
                                        for (var i of player.storage.bhyuanjing[0]) {
                                            if (i.name == 'sha') {
                                                if (i.nature && event.filterCard({ name: i.name, nature: i.nature }, player, event)) return true;
                                            }
                                            if (['basic', 'trick'].contains(get.type(i)) && event.filterCard({ name: i.name }, player, event)) return true;
                                        }
                                        return false;
                                    },
                                    hiddenCard: function (player, name) {
                                        if (!player.storage.bhyuanjing || player.storage.bhyuanjing[0].length == 0) return false;
                                        if (['basic', 'trick'].contains(get.type(name))) {
                                            for (i of player.storage.bhyuanjing[0]) {
                                                if (i.name == name) return true;
                                            }
                                        }
                                        return false;
                                    },
                                    chooseButton: {
                                        dialog: function (event, player) {
                                            var vcards = [], s = player.storage.bhyuanjing[0];
                                            for (var i = 0; i < s.length; i++) {
                                                if (s[i].name == 'sha') {
                                                    if (vcards.contains(['基本', '', s[i].name, s[i].nature])) continue;
                                                    if (s[i].nature && event.filterCard({ name: s[i].name, nature: s[i].nature }, player, event)) vcards.push(['基本', '', s[i].name, s[i].nature]);
                                                }
                                                if (vcards.contains(['基本', '', s[i].name]) || vcards.contains(['锦囊', '', s[i].name])) continue;
                                                if (s[i].name != 'du' && !s[i].nature && get.type(s[i]) == 'basic' && event.filterCard({ name: s[i].name }, player, event)) vcards.push(['基本', '', s[i].name]);
                                                if (get.type(s[i]) == 'trick' && event.filterCard({ name: s[i].name }, player, event)) vcards.push(['锦囊', '', s[i].name]);
                                            }
                                            return ui.create.dialog('渊鲸', [vcards, 'vcard']);
                                        },
                                        check: function (button, player) {
                                            //if (_status.event.getParent().type != 'phase') return 1;
                                            return _status.event.player.getUseValue({ name: button.link[2], nature: button.link[3] });
                                        },
                                        backup: function (links, player) {
                                            return {
                                                popname: true,
                                                viewAs: { name: links[0][2], nature: links[0][3] },
                                                selectCard: -1,
                                                filterCard: false,
                                                position: 'h',
                                                precontent: function () {
                                                    if (!player.storage.bhyuanjing_use) player.storage.bhyuanjing_use = 0;
                                                    player.storage.bhyuanjing_use++;
                                                },
                                            }
                                        },
                                        prompt: function (links, player) {
                                            return '视为使用或打出了' + get.translation(links[0][2]);
                                        },
                                    },
                                    ai: {
                                        respondSha: true,
                                        respondShan: true,
                                        save: true,
                                        skillTagFilter: function (player) {
                                            return player.countCards('hes') > 0 && player.storage.bhyuanjing_use < (player.maxHp - player.hp);
                                        },
                                        order: 5,
                                        result: {
                                            player: function (player) {
                                                if (_status.event.dying) {
                                                    return get.attitude(player, _status.event.dying);
                                                }
                                                if (_status.event.type == 'respondShan') return 1;
                                                if (_status.event.type == 'respondSha') return 1;
                                                var cards = player.storage.bhyuanjing[0];
                                                if (!cards.length) return 0;
                                                var val = 0;
                                                for (var i of cards) {
                                                    val += player.getUseValue({ name: i.name });
                                                    return val;
                                                }
                                                return 0;
                                            },
                                        },
                                    },
                                },
                                round: {
                                    trigger: {
                                        global: 'roundStart',
                                    },
                                    silent: true,
                                    forced: true,
                                    charlotte: true,
                                    filter: function (event, player) {
                                        return player.storage.bhyuanjing_use > 0;
                                    },
                                    content: function () {
                                        player.storage.bhyuanjing_use = 0;
                                    },
                                },
                            },
                        },
                        bhqianxing: {
                            forced: true,
                            trigger: {
                                global: "phaseBegin",
                            },
                            intro: {
                                content: 'mark',
                            },
                            content: function () {
                                'step 0'
                                event.target = trigger.player;
                                trigger.player.chooseToDiscard('是否弃置一张牌令' + get.translation(player) + '获得1个“千星”', 'he').set('ai', function (card) {
                                    var att = get.attitude(event.target, player);
                                    if (att < 0) return -10;
                                    else return event.target.countCards('he') > 2 ? 8 - get.value(card) : 6 - get.value(card);
                                });
                                'step 1'
                                if (result.bool) { event.num = 2; event.target.line(player); }
                                else event.num = 1;
                                player.addMark('bhqianxing', event.num);
                                player.syncStorage('bhqianxing');
                                player.markSkill('bhqianxing');
                                var num = Math.max(parseInt((game.filterPlayer().length + 1) / 2), 2);
                                if (player.countMark('bhqianxing') >= num) {
                                    player.removeMark('bhqianxing', num);
                                    player.syncStorage('bhqianxing');
                                    if (!player.countMark('bhqianxing')) player.unmarkSkill('bhqianxing');
                                    if (!player.countCards('h')) {
                                        player.draw();
                                        event.finish();
                                    }
                                    else player.chooseControl('摸牌', '视为【杀】').set('ai', function () {
                                        var num1 = player.countCards('hs'), num2 = player.countCards('hs', { name: 'sha' });
                                        if (num2 * 2 > num1 || num1 <= 2 || (player.hp < 2 && !player.countCards('hs', { name: ['tao', 'jiu', 'bhbenghuaijiejing'] }))) return '摸牌';
                                        else '视为【杀】';
                                    }).set('prompt', '千星：请选择一项');
                                } else event.finish();
                                'step 2'
                                if (result.control == '摸牌') {
                                    player.draw();
                                    event.finish();
                                } else {
                                    player.chooseCard('请选择一张手牌视为【杀】', 'h', true).set('ai', function (card) {
                                        if (card.name == 'sha') return -2;
                                        else return 10 - get.value(card);
                                    });
                                }
                                'step 3'
                                event.card = result.cards[0];
                                if (!player.storage.bhqianxing_sha) player.storage.bhqianxing_sha = [];
                                player.storage.bhqianxing_sha.push(event.card);
                            },
                            group: 'bhqianxing_sha',
                            subSkill: {
                                sha: {
                                    sub: true,
                                    trigger: {
                                        player: ['loseAfter'],
                                        global: ["equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter", "addToExpansionAfter"],
                                    },
                                    silent: true,
                                    forced: true,
                                    charlotte: true,
                                    filter: function (event, player) {
                                        if (!player.storage.bhqianxing_sha || !event.cards || !event.cards.length) return false;
                                        for (var i = 0; i < event.cards.length; i++) {
                                            if (player.storage.bhqianxing_sha.contains(event.cards[i])) return true;
                                        }
                                        return false;
                                    },
                                    content: function () {
                                        for (var i = 0; i < trigger.cards.length; i++) {
                                            if (player.storage.bhqianxing_sha.contains(trigger.cards[i])) player.storage.bhqianxing_sha.remove(trigger.cards[i]);
                                        }
                                    },
                                },
                            },
                            mod: {
                                cardname: function (card, player, name) {
                                    if (player.storage.bhqianxing_sha && player.storage.bhqianxing_sha.contains(card)) return 'sha';
                                },
                            },
                        },
                        bhbaiye: {
                            trigger: {
                                player: "phaseDrawBegin1",
                            },
                            check: function (event, player) {
                                return player.storage.bhqianxing_sha && player.storage.bhqianxing_sha.length > 1 && game.hasPlayer(function (target) {
                                    return get.attitude(player, target) < 0 && player.canUse('sha', target, false);
                                });
                            },
                            filter: function (event, player) {
                                return !event.numFixed;
                            },
                            content: function () {
                                "step 0"
                                trigger.changeToZero();
                                "step 1"
                                player.draw();
                                player.Burst('phaseUseEnd');
                            },
                            mod: {
                                cardUsable: function (card, player, num) {
                                    if (card.name == 'sha' && player.isBurst()) return Infinity;
                                },
                                targetInRange: function (card, player) {
                                    if (card.name == 'sha' && player.isBurst()) return true;
                                },
                            },
                        },
                        bhbaima: {
                            trigger: {
                                player: 'damageEnd',
                            },
                            priority: 4,
                            filter: function (event, player) {
                                return event.nature && event.nature == 'ice';
                            },
                            forced: true,
                            content: function () {
                                player.chooseToDiscard('he', true);
                            },
                            mod: {
                                globalFrom: function (from, to, distance) {
                                    return distance - 1;
                                },
                            },
                            ai:{
                                effect: {
                                    target: function (card, player, target, current) {
                                        if (get.tag(card, 'iceDamage')) return 1;
                                    }
                                },
                            },
                        },
                        bhbaoxue: {
                            forced: true,
                            trigger: {
                                player: 'phaseUseBegin',
                            },
                            filter: function (event, player) {
                                return player.countCards('h');
                            },
                            content: function () {
                                'step 0'
                                player.chooseCard('请选择一张牌与牌堆拼点', 'h', true).set('ai', function (card) {
                                    return get.number(card);
                                });
                                'step 1'
                                event.card = result.cards[0];
                                var card = get.cards()[0];
                                game.log(player, '的拼点牌为', event.card);
                                game.log('牌堆的拼点牌为', card);
                                player.showCards([event.card, card]);
                                //game.log('1');
                                //player.showCards(card);
                                //game.log('2');
                                player.loseToDiscardpile(event.card);
                                //game.log('3');
                                game.cardsDiscard(card);
                                if (Math.max(get.number(event.card) - game.roundNumber, 1) > get.number(card)) {
                                    player.popup('赢');
                                    player.addTempSkill('bhbaoxue_dis');
                                    player.markSkill('bhbaoxue_dis');
                                } else {
                                    player.popup('没赢');
                                    player.damage('ice', 'nosource');
                                }
                            },
                            ai:{
                                threaten:function(player){
                                    if(game.roundNumber<4) return 2.1;
                                    else return 0.9;
                                },
                            },
                            subSkill: {
                                dis: {
                                    sub: true,
                                    forced: true,
                                    trigger: {
                                        player: "phaseDiscardBegin",
                                    },
                                    marktext: '暴雪',
                                    intro: {
                                        content: '跳过本回合弃牌阶段',
                                    },
                                    // mod:{
                                    //     maxHandcard:function(player,num){
                                    //         return num+4;
                                    //     },
                                    // },
                                    content: function () {
                                        trigger.cancel();
                                    },
                                },
                            },
                        },
                        bhranyou: {
                            trigger: {
                                player: "phaseDrawBegin2",
                            },
                            forced: true,
                            preHidden: true,
                            filter: function (event, player) {
                                return !event.numFixed;
                            },
                            content: function () {
                                event.num = Math.min(player.hp, 4) + Math.min(player.countCards('e'), 4);
                                if (player.storage.bhranyou_damage) event.num -= (player.storage.bhranyou_damage * Math.min(player.countCards('e'), 4));
                                if (event.num <= -2) event.num = -2;
                                trigger.num += (event.num);
                                player.storage.bhranyou_damage = 0;
                            },
                            group: ['bhranyou_damage', 'bhranyou_dam'],
                            subSkill: {
                                dam: {
                                    trigger: {
                                        player: 'damageBegin3',
                                    },
                                    priority: 2,
                                    filter: function (event, player) {
                                        return event.nature && event.nature == 'fire';
                                    },
                                    forced: true,
                                    content: function () {
                                        trigger.num += (Math.min(player.hp, 4) - 1);
                                    },
                                },
                                damage: {
                                    trigger: {
                                        player: 'damageEnd',
                                    },
                                    priority: 2,
                                    filter: function (event, player) {
                                        return event.nature && event.nature == 'ice';
                                    },
                                    forced: true,
                                    content: function () {
                                        if (!player.storage.bhranyou_damage) player.storage.bhranyou_damage = 0;
                                        player.storage.bhranyou_damage++;
                                    },
                                },
                            },
                            ai:{
                                effect: {
                                    target: function (card, player, target, current) {
                                        if (get.tag(card, 'fireDamage')) return target.hp;
                                        if (get.tag(card, 'iceDamage')) return 1;
                                    }
                                },
                            },
                        },
                        bhtubian:{
                            forced:true,
                            trigger:{
                                player:'phaseJieshu',
                            },
                            init:function(player){
                                player.storage.bhtubian=[];
                            },
                            intro:{
                                content:function(storage,player){
                                    return '已记录花色：'+get.translation(player.storage.bhtubian);
                                },
                                markcount:function(storage,player){
                                    return player.storage.bhtubian.length;
                                },
                            },
                            filter:function(event,player){
                                return player.storage.bhtubian.length<4;
                            },
                            content:function(){
                                'step 0'
                                var suits=['club','spade','heart','diamond'];
                                suits.removeArray(player.storage.bhtubian);
                                var suit=suits.randomGet();
                                player.storage.bhtubian.push(suit);
                                player.syncStorage('bhtubian');
                                player.markSkill('bhtubian');
                            },
                        },
                        bhyanhua: {
                            enable: 'phaseUse',
                            usable: 1,
                            position:'h',
                            filter: function (event, player) {
                                var cards = player.getCards('h');
                                var suits = [];
                                if(player.hasSkill('bhtubian')) suits.addArray(player.storage.bhtubian);
                                for (i of cards) {
                                    if (!suits.contains(get.suit(i))) suits.push(get.suit(i));
                                }
                                var bool = game.hasPlayer(function (current) {
                                    var skills1 = current.getSkills(null, false, false).filter(function (skill) {
                                        var info = lib.skill[skill];
                                        var _info = skill + '_info'
                                        if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                        return info && !info.limited && !info.juexingji;
                                    });
                                    var skills2 = current.getSkills(null, false, false).filter(function (skill) {
                                        var target = current;
                                        var info = lib.skill[skill];
                                        var _info = skill + '_info'
                                        if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                        if (!info) return false;
                                        if (info.limited && target.awakenedSkills.contains(skill)) return true;
                                        if (info.juexingji && target.awakenedSkills.contains(skill)) return true;
                                    });
                                    return skills1.length + skills2.length > 0;
                                });
                                return bool && suits.length>=4;
                            },
                            selectCard: function(){
                                var player=_status.currentPhase;
                                if(player.hasSkill('bhtubian')){
                                    return 4-player.storage.bhtubian.length;
                                } else {
                                    return 4;
                                }
                            },
                            filterCard: function (card) {
                                var player=_status.currentPhase;
                                var suit = get.suit(card);
                                var suits=[];
                                if(player.hasSkill('bhtubian')) suits.addArray(player.storage.bhtubian);
                                for(let i of ui.selected.cards){
                                    if(!suits.contains(get.suit(i))) suits.push(get.suit(i));
                                }
                                return !suits.contains(suit);
                            },
                            filterTarget: function (card, player, target) {
                                if (target == player) return false;
                                var skills1 = target.getSkills(null, false, false).filter(function (skill) {
                                    var info = lib.skill[skill];
                                    var _info = skill + '_info'
                                    if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                    return info && !info.limited && !info.juexingji;
                                });
                                var skills2 = target.getSkills(null, false, false).filter(function (skill) {
                                    var info = lib.skill[skill];
                                    var _info = skill + '_info'
                                    if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                    if (!info) return false;
                                    if (info.limited && target.awakenedSkills.contains(skill)) return true;
                                    if (info.juexingji && target.awakenedSkills.contains(skill)) return true;
                                });
                                return skills1.length + skills2.length > 0;
                            },
                            content: function () {
                                'step 0'
                                if(player.hasSkill('bhtubian')){
                                    player.storage.bhtubian=[];
                                    player.syncStorage('bhtubian');
                                    player.unmarkSkill('bhtubian');
                                }
                                event.target = target;
                                event.skills1 = target.getSkills(null, false, false).filter(function (skill) {
                                    var info = lib.skill[skill];
                                    var _info = skill + '_info'
                                    if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                    return info && !info.limited && !info.juexingji;
                                });
                                event.skills2 = target.getSkills(null, false, false).filter(function (skill) {
                                    var info = lib.skill[skill];
                                    var _info = skill + '_info'
                                    if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                    if (!info) return false;
                                    if (info.limited && event.target.awakenedSkills.contains(skill)) return true;
                                    if (info.juexingji && event.target.awakenedSkills.contains(skill)) return true;
                                });
                                if (event.skills1.length > 0 && event.skills2.length > 0) {
                                    var str1 = '失去一项非限定非觉醒技，然后增加一点体力上限并回复1点体力';
                                    var str2 = '重置一项已发动的限定技或觉醒技，并摸两张牌';
                                    var list = [str1, str2];
                                    target.chooseControlList('演化：请选择一项', list, true, function () {
                                        var namelist = ['benghuai', 'bhsbenghuai', 'ranshang', 'yaowu', 'lianhuo', 'chanyuan', 'bhxinsheng', 'bhgandian'];
                                        for (i of namelist) {
                                            if (event.skills1.contains(i)) return 0;
                                        }
                                        return 1;
                                    });
                                } else if (event.skills2.length == 0) event.goto(2);
                                else event.goto(4);
                                'step 1'
                                if (result.index == 1) event.goto(4);
                                'step 2'
                                target.chooseControl(event.skills1).set('prompt', '请选择一个技能失去').set('ai', function () {
                                    var namelist = ['benghuai', 'bhsbenghuai', 'ranshang', 'yaowu', 'lianhuo', 'chanyuan', 'bhxinsheng', 'bhgandian'];
                                    for (i of namelist) {
                                        if (event.skills1.contains(i)) return i;
                                    }
                                    return event.skills1.randomGet();
                                });
                                'step 3'
                                event.lskill = result.control;
                                game.log(target,'失去了技能','#g【'+get.translation(event.lskill)+'】');
                                target.removeSkill(event.lskill);
                                target.gainMaxHp();
                                target.recover();
                                event.finish();
                                'step 4'
                                target.chooseControl(event.skills2).set('prompt', '请选择一个技能重置').set('ai', function () {
                                    for (i of event.skills2) {
                                        if (lib.skill[i].limited) return i;
                                    }
                                    return event.skills2.randomGet();
                                });
                                'step 5'
                                event.lskill = result.control;
                                game.log(target,'重置了技能','#g【'+get.translation(event.lskill)+'】');
                                target.restoreSkill(event.lskill);
                                target.draw(2);
                            },
                            ai: {
                                threaten: 3.0,
                                order: 10,
                                result: {
                                    target: function (player, target) {
                                        var skills1 = target.getSkills(null, false, false).filter(function (skill) {
                                            var info = lib.skill[skill];
                                            var _info = skill + '_info'
                                            if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                            return info && !info.limited && !info.juexingji;
                                        });
                                        var skills2 = target.getSkills(null, false, false).filter(function (skill) {
                                            var info = lib.skill[skill];
                                            var _info = skill + '_info'
                                            if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                            if (!info) return false;
                                            if (info.limited && target.awakenedSkills.contains(skill)) return true;
                                            if (info.juexingji && target.awakenedSkills.contains(skill)) return true;
                                        });
                                        var bool = false;
                                        var namelist = ['benghuai', 'bhsbenghuai', 'ranshang', 'yaowu', 'lianhuo', 'chanyuan', 'bhxinsheng', 'bhgandian'];
                                        for (i of namelist) {
                                            if (skills1.contains(i)) bool = true;
                                        }
                                        if (skills2.length > 0) return 2;
                                        else if (bool) return 4;
                                        else return -4;
                                    },
                                },
                            },
                        },
                        bhlihuo: {
                            enable: ['chooseToUse', 'chooseToRespond'],
                            filter: function (event, player) {
                                var hs = player.getCards('hs', { type: 'basic' });
                                if (!hs.length) return false;
                                for (var i of hs) {
                                    if (game.checkMod(i, player, 'unchanged', 'cardEnabled2', player) === false) return false;
                                }
                                if (event.filterCard({ name: 'sha', nature: 'fire', cards: hs }, player, event)) return true;
                                if (event.filterCard({ name: 'huogong', cards: hs }, player, event)) return true;
                                return false;
                            },
                            hiddenCard: function (player, name) {
                                if (name == 'sha' && player.countCards('hs', { type: 'basic' }) > 0) return true;
                                if (name == 'huogong' && player.countCards('hs', { type: 'basic' }) > 0) return true;
                                return false;
                            },
                            chooseButton: {
                                dialog: function (event, player) {
                                    var vcards = [], hs = player.getCards('hs', { type: 'basic' });
                                    if (event.filterCard({ name: 'sha', nature: 'fire', cards: hs }, player, event)) vcards.push(['基本', '', 'sha', 'fire']);
                                    if (event.filterCard({ name: 'huogong', cards: hs }, player, event)) vcards.push(['锦囊', '', 'huogong']);
                                    return ui.create.dialog('构造', [vcards, 'vcard']);
                                },
                                check: function (button, player) {
                                    //if (_status.event.getParent().type != 'phase') return 1;
                                    return _status.event.player.getUseValue({ name: button.link[2], nature: button.link[3] }) + (button.link[2] == 'huogong' ? 2 : 0);
                                },
                                backup: function (links, player) {
                                    return {
                                        popname: true,
                                        viewAs: { name: links[0][2], nature: links[0][3] },
                                        filterCard: function (card) {
                                            return get.type(card) == 'basic';
                                        },
                                        selectCard: 1,
                                        position: 'hs',
                                        onuse: function (result, player) {
                                            var event = _status.event;
                                            if (links[0][2] == 'huogong') event.trigger('bhlihuo');
                                        },
                                    }
                                },
                                prompt: function (links, player) {
                                    return '将一张牌当做' + get.translation(links[0][2]) + "使用或打出";
                                },
                            },
                            ai: {
                                fireAttack: true,
                                skillTagFilter: function (player) {
                                    if (!player.countCards('hs', { type: 'basic' })) return false;
                                },
                                respondSha: true,
                                order: 8,
                                result: {
                                    player: 3,
                                },
                            },
                            group: 'bhlihuo_use',
                            subSkill: {
                                use: {
                                    trigger: {
                                        player: 'bhlihuo',
                                    },
                                    direct: true,
                                    sub: true,
                                    usable: 3,
                                    content: function () {
                                        player.draw();
                                    },
                                },
                            },
                        },
                        bhtianhai: {
                            trigger: {
                                player: 'useCard',
                            },
                            //usable:1,
                            // check:function(event,player){
                            //     var num=0;
                            //     for(var i=0;i<player.storage.bhtianhai_use[0].length;i++){
                            //         if(event.targets[0]==player.storage.bhtianhai_use[0][i]) num=player.storage.bhtianhai_use[1][i];
                            //     }
                            //     if(player.countCards('h')<3) return num>0;
                            //     else return num>1;
                            // },
                            priority: 2,
                            filter: function (event, player) {
                                if (!player.isPhaseUsing()) return false;
                                if (!event.targets || event.targets.length > 1 || event.targets.length == 0) return false;
                                return player.storage.bhtianhai_use[0].contains(event.targets[0]);
                            },
                            content: function () {
                                event.target = trigger.targets[0];
                                for (var i = 0; i < player.storage.bhtianhai_use[0].length; i++) {
                                    if (event.target == player.storage.bhtianhai_use[0][i]) event.num = Math.min(player.storage.bhtianhai_use[1][i], player.maxHp);
                                }
                                player.draw(event.num);
                                player.chooseToDiscard('he', event.num, true);
                            },
                            group: ["bhtianhai_use", "bhtianhai_jieshu"],
                            subSkill: {
                                jieshu: {
                                    forced: true,
                                    silent: true,
                                    trigger: {
                                        player: 'phaseUseEnd',
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhtianhai_use;
                                    },
                                    content: function () {
                                        var num = player.storage.bhtianhai_use[0].length;
                                        for (var i = 0; i < num; i++) {
                                            player.storage.bhtianhai_use[1][i] = 0;
                                        }
                                    },
                                },
                                use: {
                                    sub: true,
                                    trigger: {
                                        player: 'useCard',
                                    },
                                    priority: 4,
                                    silent: true,
                                    frequent: true,
                                    init: function (player) {
                                        var players = game.filterPlayer();
                                        var nums = []
                                        for (var i = 0; i < players.length; i++) {
                                            nums.push(0);
                                        }
                                        player.storage.bhtianhai_use = [players, nums];
                                    },
                                    filter: function (event, player) {
                                        return player.isPhaseUsing() && event.targets && event.targets.length > 0;
                                    },
                                    content: function () {
                                        for (j of trigger.targets) {
                                            if (player.storage.bhtianhai_use[0].contains(j)) {
                                                for (var i = 0; i < player.storage.bhtianhai_use[0].length; i++) {
                                                    if (j == player.storage.bhtianhai_use[0][i]) player.storage.bhtianhai_use[1][i]++;
                                                }
                                            } else {
                                                player.storage.bhtianhai_use[0].push(j);
                                                player.storage.bhtianhai_use[1].push(1);
                                            }
                                        }
                                        //game.log(player.storage.bhtianhai_use);
                                    },
                                },
                            },
                        },
                        bhqinyin: {
                            trigger: {
                                player: "phaseDiscardEnd",
                            },
                            direct: true,
                            filter: function (event, player) {
                                var cards = [];
                                player.getHistory('lose', function (evt) {
                                    if (evt.type == 'discard' && evt.getParent('phaseDiscard') == event) cards.addArray(evt.cards2);
                                });
                                return cards.length > 1;
                            },
                            content: function () {
                                "step 0"
                                event.forceDie = true;
                                if (typeof event.count != 'number') {
                                    // event.count=trigger.cards.length-1;
                                    event.count = 1;
                                }
                                var recover = 0, lose = 0, players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i].hp < players[i].maxHp) {
                                        if (get.attitude(player, players[i]) > 0) {
                                            if (players[i].hp < 2) {
                                                lose--;
                                                recover += 0.5;
                                            }
                                            lose--;
                                            recover++;
                                        }
                                        else if (get.attitude(player, players[i]) < 0) {
                                            if (players[i].hp < 2) {
                                                lose++;
                                                recover -= 0.5;
                                            }
                                            lose++;
                                            recover--;
                                        }
                                    }
                                    else {
                                        if (get.attitude(player, players[i]) > 0) {
                                            lose--;
                                        }
                                        else if (get.attitude(player, players[i]) < 0) {
                                            lose++;
                                        }
                                    }
                                }
                                var prompt = get.prompt('bhqinyin') + '（剩余' + get.cnNumber(event.count) + '次）';
                                player.chooseControl('失去体力', '回复体力', 'cancel2',
                                    ui.create.dialog(get.prompt('bhqinyin'), 'hidden')).ai = function () {
                                        if (lose > recover && lose > 0) return 0;
                                        if (lose < recover && recover > 0) return 1;
                                        return 2;
                                    }
                                "step 1"
                                if (result.control == 'cancel2') {
                                    event.finish();
                                }
                                else {
                                    player.logSkill('bhqinyin');
                                    event.bool = (result.control == '回复体力');
                                    event.num = 0;
                                    event.players = game.filterPlayer();
                                }
                                "step 2"
                                if (event.num < event.players.length) {
                                    var target = event.players[event.num];
                                    if (event.bool) {
                                        target.recover();
                                    }
                                    else {
                                        target.loseHp();
                                    }
                                    event.num++;
                                    event.redo();
                                }
                                "step 3"
                                if (event.count > 1) {
                                    event.count--;
                                    event.goto(0);
                                }
                            },
                            ai: {
                                expose: 0.1,
                                threaten: 2,
                            },
                        },
                        bhdutu: {
                            trigger: {
                                player: ['useCard', 'respond'],
                            },
                            filter: function (event, player) {
                                return player.getHandcardLimit() > 0;
                            },
                            init: function (player) {
                                player.storage.bhdutu = 0;
                            },
                            check: function (event, player) {
                                if (player.hp <= 1) return false;
                                var val = 2;
                                if (get.type(event.card) == 'equip') val -= 6;
                                if (get.type(event.card) == 'basic') val += 2;
                                if (player.countCards('h') - player.getHandcardLimit() > 3) val -= 1;
                                if (player.getHandcardLimit() < 2) val -= 2;
                                if (player.hp > 3) val += 2;
                                if (player.countCards('h') < player.hp || player.countCards('h') < 2) val += 3;
                                val += [-1, 1, 0, 2].randomGet();
                                return val > 0;
                            },
                            content: function () {
                                'step 0'
                                event.card = trigger.card;
                                event.card2 = get.cards()[0];
                                player.gain(event.card2, 'draw');
                                'step 1'
                                event.num = 0;
                                if (get.number(event.card) != get.number(event.card2)) event.num++;
                                if (get.suit(event.card) != get.suit(event.card2)) event.num++;
                                if (get.type(event.card) != get.type(event.card2)) event.num++;
                                if (event.num == 0) {
                                    player.draw();
                                } else if (event.num == 2) {
                                    player.storage.bhdutu++;
                                } else if (event.num == 3) {
                                    player.loseHp();
                                }
                            },
                            mod: {
                                maxHandcard: function (player, num) {
                                    return num - player.storage.bhdutu;
                                },
                            },
                            group: 'bhdutu_end',
                            subSkill: {
                                end: {
                                    sub: true,
                                    trigger: {
                                        global: "phaseAfter",
                                    },
                                    silent: true,
                                    content: function () {
                                        player.storage.bhdutu = 0;
                                    },
                                    forced: true,
                                    popup: false,
                                },
                            },
                        },
                        "bhlingshou2": {
                            enable: "phaseUse",
                            discard: false,
                            lose: false,
                            delay: false,
                            line: true,
                            direct: true,
                            clearTime: true,
                            log: false,
                            visible: true,
                            prompt: '去买点东西？',
                            prepare: function (cards, player, targets) {
                                targets[0].logSkill('bhlingshou');
                            },
                            filter: function (event, player) {
                                if (!player.countCards('he')) return false;
                                return game.hasPlayer(function (target) {
                                    return target != player && target.hasSkill('bhlingshou') && !target.hasSkill('bhlingshou_im') && target.getExpansions('bhlueji').length > 0;
                                });
                            },
                            filterTarget: function (card, player, target) {
                                return target != player && target.hasSkill('bhlingshou') && !target.hasSkill('bhlingshou_im') && target.getExpansions('bhlueji').length > 0;
                            },
                            content: function () {
                                'step 0'
                                event.target = target;
                                event.renum = 0;
                                target.chooseBool(get.translation(player) + '想逛逛你的商店，是否同意？').set('ai', function () {
                                    return get.attitude(target, player) > 0;
                                });
                                'step 1'
                                if (result.bool) {
                                    target.say('欢迎光临！');
                                } else {
                                    target.say('这里不欢迎你喵！');
                                    target.addTempSkill('bhlingshou_im');
                                    event.finish();
                                }
                                'step 2'
                                /*
                                ,function(card,player,target){
                                    var cards=event.target.getExpansions('bhlueji');
                                    var val=0;
                                    for(var i=0;i<ui.selected.cards.length;i++){
                                        val+=(3+get.number(ui.selected.cards[i]));
                                    }
                                    val+=3;
                                    val+=get.number(card);
                                    for(let i of cards){
                                        if((3+get.number(i))<=val) return true;
                                    }
                                    return false;
                                }
                                */
                                player.chooseCard('请选择你的付款资金', 'he', [1, Infinity]).set('ai', function (card) {
                                    if (get.attitude(player, target) < 0) return 4 - get.value(card);
                                    if (player.countCards('he') - ui.selected.cards.length < player.hp - 1) return 5 - get.value(card);
                                    return 8 - get.value(card);
                                });
                                'step 3'
                                if (result.bool) {
                                    event.cards1 = result.cards;
                                } else {
                                    target.addTempSkill('bhlingshou_im');
                                    event.finish();
                                }
                                'step 4'
                                var cards = target.getExpansions('bhlueji');
                                event.value = 0;
                                for (i of event.cards1) {
                                    event.value += (3 + get.number(i));
                                }
                                player.chooseButton([1, Infinity], ['请选择你要购买的商品', cards], function (button) {
                                    return get.value(button.link);
                                }).set('filterButton', function (button) {
                                    if (!ui.selected.buttons.length) return get.number(button.link) + 3 <= event.value;
                                    var value = 0;
                                    for (var i = 0; i < ui.selected.buttons.length; i++) {
                                        var card = ui.selected.buttons[i].link;
                                        value += (3 + get.number(card));
                                    }
                                    return get.number(button.link) + 3 + value <= event.value;
                                });
                                'step 5'
                                if (result.bool) {
                                    event.cards2 = result.links;
                                    if (event.cards1.length) target.gain(event.cards1, player, 'give');
                                    if (event.cards2.length) player.gain(event.cards2, target, 'gain2');
                                    target.addTempSkill('bhlingshou_im');
                                    target.say(['老板，欢迎下次再来！', '多谢惠顾！'].randomGet());
                                } else {
                                    event.renum++;
                                    if (event.renum < 3) event.goto(2);
                                    else {
                                        target.addTempSkill('bhlingshou_im');
                                        target.say('下次想好再来逛喵！');
                                    }
                                }
                            },
                            ai: {
                                expose: 0.3,
                                order: 8,
                                result: {
                                    player: 1,
                                    target: 2,
                                },
                            },
                        },
                        bhlingshou: {
                            audio: "ext:崩崩崩/audio:2",
                            unique: true,
                            global: "bhlingshou2",
                            subSkill: {
                                im: {
                                    sub: true,
                                    charlotte: true,
                                },
                            },
                            ai: {
                                threaten: 3.1,
                            },
                        },
                        bhkongmeng:{
                            audio: "ext:崩崩崩/audio:2",
                            locked:true,
                            forced:true,
                            trigger:{
                                player:'changeHp',
                            },
                            filter:function(event,player){
                                return player.hp <= 0 && event.num < 0 && event.player == player;
                            },
                            content:function(){
                                'step 0'
                                delete player.nodying;
                                if(Math.abs(player.hp) < 13){
                                    player.nodying = true;
                                } else {
                                    player.dying();
                                }
                            },
                            group:['bhkongmeng_use'],
                            subSkill:{
                                use:{
                                    locked:true,
                                    forced:true,
                                    audio:"bhkongmeng",
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    filter:function(event,player){
                                        if(player.hasHistory('sourceDamage', function (evt) {
                                            var card = evt.card;
                                            if (!card) return false;
                                            return event.card == card;
                                        })) return player.hp <= 0;
                                        return false;
                                    },
                                    content:function(){
                                        'step 0'
                                        delete player.nodying
                                        if(player.hp <= 0){
                                            player.dying();
                                        }
                                        'step 1'
                                        player.nodying = true;
                                    },
                                },
                            },
                        },
                        bhqiongji:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:'useCard1',
                            },
                            filter:function(event,player){
                                return !player.hasSkill('bhqiongji_lm');
                            },
                            content:function(){
                                'step 0'
                                var stat=player.stat[player.stat.length-1].card;
                                if(stat[trigger.card.name]){
                                    stat[trigger.card.name]--;
                                }
                                'step 1'
                                event.targets = trigger.targets;
                                var card = {
                                    name: 'shunshou',
                                    cards: trigger.cards, 
                                    suit: get.suit(trigger.card),
                                    number: get.number(trigger.card)
                                }
                                trigger.card = get.autoViewAs(card);
                                'step 2'
                                if(event.targets.length != 1) {
                                    trigger.targets = [];
                                    player.addTempSkill('bhqiongji_get');
                                }
                                
                                let directTargets = [];
                                for(let i of trigger.targets){
                                    if(get.distance(player, i) > 1 && !player.canUse('shunshou', i)) directTargets.push(i);
                                }
                                trigger.directHit.addArray(directTargets);
                                'step 3'
                                player.addTempSkill('bhqiongji_lm');
                            },
                            check:function(event,player){
                                if(event.targets.length > 1) return false;
                                else if(event.targets.length == 0) {
                                    if(event.card.name == 'shan' && player.hp > -9) return true;
                                    else return [0,0,1].randomGet() > 0;
                                } else {
                                    if(event.targets[0] == player && player.countCards('e',{name:'baiyin'}) && player.hp < player.maxHp) return true;
                                    else if(get.attitude(player, event.targets[0]) < 0 && get.effect(event.targets[0], event.card, player, player) >= get.effect(event.targets[0], {name:'shunshou'}, player, player)) return true;
                                    else if(get.attitude(player, event.targets[0] > 0 && event.targets[0].countCards('j', {name:['lebu','bingliang']}))) return true;
                                    else if(get.attitude(player, event.targets[0]) < 0 && event.targets[0].countCards('e',{number:[1,13,Math.abs(player.hp)]})) return true;
                                    else return false;
                                }
                            },
                            subSkill:{
                                lm:{
                                    sub:true,
                                    charlotte:true,
                                    locked:true,
                                },
                                get:{
                                    sub:true,
                                    direct:true,
                                    charlotte:true,
                                    locked:true,
                                    forced:true,
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    filter:function(event,player){
                                        return event.card.name == 'shunshou';
                                    },
                                    content:function(){
                                        'step 0'
                                        var cards = get.cards(Math.min(ui.cardPile.childNodes.length, 20));
                                        event.card = cards.randomGet();
                                        player.gain(event.card, 'draw');
                                        'step 1'
                                        player.removeSkill('bhqiongji_get');
                                    },
                                },
                            },
                        },
                        bhweizang:{
                            audio: "ext:崩崩崩/audio:2",
                            locked:true,
                            forced:true,
                            trigger:{
                                player:'gainAfter',
                            },
                            filter:function(event,player){
                                for(let i of event.cards){
                                    if([1, 13, Math.abs(player.hp)].contains(get.number(i))) return true;
                                }
                                return false;
                            },
                            content:function(){
                                if(player.hasSkill('bhqiongji') && player.hasSkill('bhqiongji_lm')){
                                    player.removeSkill('bhqiongji_lm');
                                }
                            },
                            mod:{
                                ignoredHandcard:function(card,player){
                                    if([1, 13, Math.abs(player.hp)].contains(get.number(card))){
                                        return true;
                                    }
                                },
                                cardDiscardable:function(card,player,name){
                                    if(name=='phaseDiscard' && [1, 13, Math.abs(player.hp)].contains(get.number(card))){
                                        return false;
                                    }
                                },
                            },
                        },
                        bhbingying: {
                            trigger: {
                                player: "useCardAfter",
                            },
                            filter: function (event, player) {
                                if (!player.isPhaseUsing()) return false;
                                return get.type(event.card) != 'basic';
                            },
                            content: function () {
                                'step 0'
                                player.judge();
                                'step 1'
                                if (result.color == 'red') {
                                    if (player.hasSkill('bhbingying_used')) {
                                        event.goto(3);
                                    } else {
                                        player.addTempSkill('bhbingying_used');
                                        player.chooseBool('冰影：是否改为回复1点体力？').set('ai', function () {
                                            return player.hp < player.maxHp;
                                        });
                                    }
                                } else {
                                    event.goto(4);
                                }
                                'step 2'
                                if (result.bool) {
                                    player.recover();
                                    event.finish();
                                }
                                'step 3'
                                player.draw();
                                player.chooseToDiscard('he', true);
                                event.finish();
                                'step 4'
                                if (player.hasSkill('bhbingying_used')) {
                                    event.goto(7);
                                } else {
                                    player.addTempSkill('bhbingying_used');
                                    player.chooseBool('冰影：是否改为对攻击范围内一名其他角色造成一点冰冻伤害？').set('ai', function () {
                                        return game.hasPlayer(function (target) {
                                            return player.inRange(target) && get.attitude(player, target) < 0;
                                        });
                                    });
                                }
                                'step 5'
                                if (result.bool) {
                                    player.chooseTarget('对攻击范围内一名其他角色造成一点冰冻伤害', function (card, player, target) {
                                        return player.inRange(target) && target != player;
                                    }, true).set('ai', function (target) {
                                        return -get.attitude(player, target);
                                    });
                                } else event.goto(7);
                                'step 6'
                                player.line(result.targets[0]);
                                result.targets[0].damage('ice');
                                result.targets[0].draw();
                                event.finish();
                                'step 7'
                                player.chooseToDiscard('h', true);
                                player.draw(2);
                            },
                            subSkill: {
                                used: {
                                    sub: true,
                                    charlotte: true,
                                },
                            },
                        },
                        bhzhixu: {
                            trigger: {
                                player: 'discardPlayerCardAfter',
                            },
                            filter: function (event, player) {
                                return player.hp < player.maxHp&&event.cards.length>0;
                            },
                            content: function () {
                                'step 0'
                                event.num = Math.min(player.maxHp - player.hp, 5);
                                event.cards = trigger.cards;
                                player.chooseCardButton('秩序：你可以获得其中至多' + get.cnNumber(event.num) + '张牌', [1, event.num], event.cards).set('ai', function (button) {
                                    return get.value(button.link);
                                });
                                'step 1'
                                if (result.bool) {
                                    player.gain(result.links, 'gain2');
                                }
                            },
                        },
                        bhyaojing: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "useCardAfter",
                            },
                            filter: function (event, player) {
                                if (!player.isPhaseUsing()) return false;
                                if (player.storage.bhyaojing_im >= player.hp) return false;
                                var suit = get.suit(event.card);
                                var num = get.number(event.card);
                                return game.hasPlayer(function (target) {
                                    return target.countCards('he', function (card) {
                                        return get.suit(card) != suit && get.number(card) != num;
                                    });
                                });
                            },
                            content: function () {
                                'step 0'
                                var suit = get.suit(trigger.card);
                                var num = get.number(trigger.card);
                                player.chooseTarget('妖精：令一名角色重铸牌', function (card, player, target) {
                                    return target.countCards('he', function (card) {
                                        return get.suit(card) != suit && get.number(card) != num;
                                    });
                                }, true).set('ai', function (target) {
                                    var att = get.attitude(player, target);
                                    if (att < 0) return -10;
                                    else return target == player ? att + 1 : att;
                                });
                                'step 1'
                                if (result.bool) {
                                    if (!player.storage.bhyaojing_im) player.storage.bhyaojing_im = 0;
                                    player.storage.bhyaojing_im++;
                                    var suit = get.suit(trigger.card);
                                    var num = get.number(trigger.card);
                                    event.target = result.targets[0];
                                    player.line(event.target);
                                    event.target.chooseToDiscard('he', function (card) {
                                        return get.suit(card) != suit && get.number(card) != num;
                                    }, true).set('ai', function (card) {
                                        return 20 - get.value(card);
                                    });
                                } else event.finish();
                                'step 2'
                                event.target.draw();
                            },
                            group: 'bhyaojing_use',
                            subSkill: {
                                use: {
                                    sub: true,
                                    trigger: {
                                        player: "phaseUseEnd",
                                    },
                                    forced: true,
                                    silent: true,
                                    filter: function (event, player) {
                                        return player.storage.bhyaojing_im && player.storage.bhyaojing_im > 0;
                                    },
                                    content: function () {
                                        player.storage.bhyaojing_im = 0;
                                    },
                                },
                            },
                        },
                        bhsushi: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: 'useCard',
                            },
                            filter: function (event, player) {
                                if (event.card.name != 'sha') return false;
                                if (!event.targets || event.targets.length == 0) return false;
                                if (!event.targets.contains(player)) return false;
                                return event.player.hp >= player.hp || event.player.maxHp >= player.maxHp;
                            },
                            content: function () {
                                'step 0'
                                event.target = trigger.player;
                                event.card = trigger.card;
                                var str1, str2;
                                str1 = '令' + get.translation(player) + '获得此【杀】';
                                str2 = '无效此【杀】';
                                var list = [str1, str2];
                                event.target.chooseControlList('请选择一项', list, true, function () {
                                    var att = get.attitude(event.target, player);
                                    if (att > 0) {
                                        return 1;
                                    } else {
                                        if (!trigger.cards || !trigger.cards.length) return 0;
                                        if (trigger.cards && trigger.cards.length > 2) return [1, 1, 0].randomGet();
                                        if (event.card.baseDamage && event.card.baseDamage > 1) return 0;
                                        else return (player.countCards('h') > 5 && player.hp > 2) ? 1 : 0;
                                    }
                                });
                                'step 1'
                                if (result.index == 0) {
                                    var list = [];
                                    for (var i = 0; i < trigger.cards.length; i++) {
                                        if (get.position(trigger.cards[i], true) == 'o') list.push(trigger.cards[i]);
                                    }
                                    if (list.length) player.gain(list, 'gain2', 'log');
                                } else {
                                    trigger.cancel();
                                }
                            },
                        },
                        bhqianye: {
                            juexingji: true,
                            skillAnimation: true,
                            animationColor: "gray",
                            unique: true,
                            forced: true,
                            trigger: {
                                player: ['loseHpAfter', 'damage', 'changeHpAfter', 'recoverAfter'],
                            },
                            filter: function (event, player) {
                                return player.hp == 1 && !_status.dying.length;
                            },
                            content: function () {
                                'step 0'
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                                var cards = Array.from(ui.ordering.childNodes);
                                while (cards.length) {
                                    cards.shift().discard();
                                }
                                'step 1'
                                var evt = _status.event.getParent('phase');
                                if (evt) {
                                    game.resetSkills();
                                    _status.event = evt;
                                    _status.event.finish();
                                    _status.event.untrigger(true);
                                }
                                player.draw(4);
                                player.addSkill('bhqianye_sha');
                                player.insertPhase();
                            },
                            subSkill: {
                                sha: {
                                    sub: true,
                                    trigger: {
                                        player: 'phaseEnd',
                                    },
                                    forced: true,
                                    silent: true,
                                    content: function () {
                                        player.removeSkill('bhqianye_sha');
                                        player.removeSkill('bhdizhu');
                                    },
                                    mod: {
                                        cardUsable: function (card, player, num) {
                                            if (card.name == 'sha') return Infinity;
                                        },
                                    },
                                },
                            },
                        },
                        bhdizhu: {
                            trigger: {
                                player: 'phaseZhunbei',
                            },
                            filter: function (event, player) {
                                return game.hasPlayer(function (target) {
                                    return get.distance(player, target) <= 1 && target != player && target.countCards('h');
                                });
                            },
                            check: function (event, player) {
                                return game.hasPlayer(function (target) {
                                    return get.distance(player, target) <= 1 && target != player && target.countCards('h') && get.attitude(player, target) < 0;
                                });
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('地主：请选择一名其他角色', function (card, player, target) {
                                    //return true;
                                    //var player=_status.currentPhase;
                                    if (get.distance(player, target) > 1) return false;
                                    return target != player && target.countCards('h');
                                }).set('ai', function (target) {
                                    return -get.attitude(player, target);
                                });
                                'step 1'
                                if (result.bool) {
                                    event.target = result.targets[0];
                                    player.line(event.target);
                                    player.gainPlayerCard('h', event.target, true);
                                }
                            },
                        },
                        bhbujin: {
                            trigger: {
                                player: 'drawAfter',
                            },
                            filter: function (event, player) {
                                return !player.hasSkill('bhbujin_im') && player.storage.bhbujin;
                            },
                            check: function (event, player) {
                                return event.num > 1;
                            },
                            init: function (player) {
                                player.storage.bhbujin = true;
                            },
                            content: function () {
                                'step 0'
                                player.storage.bhbujin = false;
                                event.num = trigger.num;
                                'step 1'
                                event.num2 = parseInt(event.num / 2);
                                if (event.num2 > 0) player.draw(event.num2);
                                else {
                                    player.addTempSkill('bhbujin_im', 'roundStart');
                                    player.storage.bhbujin = true;
                                    event.finish();
                                }
                                'step 2'
                                event.num = event.num2;
                                event.goto(1);
                            },
                            subSkill: {
                                im: {
                                    sub: true,
                                    charlotte: true,
                                },
                            },
                        },
                        bhbuji: {
                            trigger: {
                                global: 'useCard',
                            },
                            check: function (event, player) {
                                return get.attitude(player, event.player) < 0;
                            },
                            filter: function (event, player) {
                                return !player.hasSkill('bhbuji_im') && event.player != player && event.targets && event.targets.length > 0 && event.targets.contains(player);
                            },
                            content: function () {
                                'step 0'
                                event.target = trigger.player;
                                event.card = trigger.card;
                                'step 1'
                                event.target.chooseToDiscard('不及：是否弃置一张手牌', 'h').set('ai', function (card) {
                                    var num = 5;
                                    if (['shunshou', 'nanman', 'wanjian', 'bhbenghuaibaofa'].contains(event.card.name)) num += 3;
                                    if (event.card.baseDamage && event.card.baseDamage > 1) num += 3;
                                    return num - get.value(card);
                                });
                                'step 2'
                                if (result.bool) {
                                    event.goto(3);
                                } else event.goto(5);
                                'step 3'
                                player.chooseToDiscard('不及：是否弃置一张手牌', 'h').set('ai', function (card) {
                                    var num = 5;
                                    if (['shunshou', 'nanman', 'wanjian', 'bhbenghuaibaofa'].contains(event.card.name)) num += 3;
                                    if (event.card.baseDamage && event.card.baseDamage > 1) num += 3;
                                    return num - get.value(card);
                                });
                                'step 4'
                                if (result.bool) {
                                    event.goto(1);
                                } else event.finish();
                                'step 5'
                                if (!event.target.storage.bhbuji_dis) event.target.storage.bhbuji_dis = [];
                                event.target.storage.bhbuji_dis.push(player);
                                event.target.addTempSkill('bhbuji_dis');
                                event.target.markSkill('bhbuji_dis');
                                event.targets=trigger.targets;
                                trigger.targets.remove(player);
                                'step 6'
                                for(let i of event.targets){
                                    i.update();
                                }
                                player.addTempSkill('bhbuji_im', 'roundStart');
                            },
                            subSkill: {
                                im: {
                                    sub: true,
                                    charlotte: true,
                                },
                                dis: {
                                    sub: true,
                                    intro: {
                                        name: "不及",
                                        content: function (storage, player) {
                                            var str = '本回合到';
                                            if (player.storage.bhbuji_dis) str += get.translation(player.storage.bhbuji_dis);
                                            else return '无效果';
                                            str += '的距离+3';
                                            return str;
                                        },
                                        markcount: function () {
                                            return 0;
                                        },
                                    },
                                    onremove: function (player) {
                                        player.storage.bhbuji_dis = [];
                                    },
                                    mod: {
                                        globalFrom: function (from, to, distance) {
                                            if (from.storage.bhbuji_dis && from.storage.bhbuji_dis.contains(to)) return distance + 3;
                                        },
                                    },
                                },
                            },
                        },
                        bhbudong: {
                            trigger: {
                                player: 'damageBegin4',
                            },
                            priority: 1,
                            init: function (player) {
                                player.storage.bhbudong = true;
                            },
                            filter: function (event, player) {
                                return !player.hasSkill('bhbudong_im') && player.storage.bhbudong;
                            },
                            check: function (event, player) {
                                return event.num > 1 || event.num >= player.hp;
                            },
                            content: function () {
                                'step 0'
                                trigger.cancel();
                                //game.log(trigger.source,'/',trigger.nature);
                                player.storage.bhbudong = false;
                                event.bool = [false, false];
                                event.num = trigger.num;
                                if (trigger.source != undefined) {
                                    event.target = trigger.source;
                                    event.bool[0] = true;
                                }
                                if (trigger.nature != undefined) {
                                    event.nature = trigger.nature;
                                    event.bool[1] = true;
                                }
                                'step 1'
                                event.num2 = parseInt(event.num / 2);
                                if (event.num2 > 0) {
                                    if (event.bool[0]) {
                                        if (event.bool[1]) player.damage(event.num2, event.target, event.nature);
                                        else player.damage(event.num2, event.target);
                                    } else {
                                        if (event.bool[1]) player.damage(event.num2, 'nosource', event.nature);
                                        else player.damage(event.num2, 'nosource');
                                    }
                                } else {
                                    player.addTempSkill('bhbudong_im', 'roundStart');
                                    player.storage.bhbudong = true;
                                    event.finish();
                                }
                                'step 2'
                                event.num = event.num2;
                                event.goto(1);
                            },
                            subSkill: {
                                im: {
                                    sub: true,
                                    charlotte: true,
                                },
                            },
                        },
                        bhshuangcheng: {
                            forced: true,
                            trigger: {
                                global: "phaseBefore",
                                player: "enterGame",
                            },
                            filter: function (event, player) {
                                if (!(event.name != 'phase' || game.phaseNumber == 0)) return false;
                                return true;
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('双城：选择一名其他角色令其获得标记', function (card, player, target) {
                                    return player != target;
                                }, true).set('ai', function (target) {
                                    var att = get.attitude(player, target);
                                    if (att < 0) return -2;
                                    else return att;
                                });
                                'step 1'
                                event.target = result.targets[0];
                                player.chooseControl('伦敦', '巴黎').set('prompt', '请选择一个标记给出').set('ai', function () {
                                    //var namelist=[];
                                    //if(namelist.contains(event.target.name)) return '';
                                    return '巴黎';
                                });
                                'step 2'
                                player.line(event.target);
                                if (result.control == '伦敦') event.index = 1;
                                else event.index = 0;
                                event.target.storage.bhshuangcheng = [event.index];
                                player.storage.bhshuangcheng = [1 - event.index];
                                event.target.addSkill('bhshuangcheng_get');
                                player.addSkill('bhshuangcheng_get');
                                event.target.markSkill('bhshuangcheng_get');
                                player.markSkill('bhshuangcheng_get');
                            },
                            subSkill: {
                                get: {
                                    intro: {
                                        content: function (storage, player) {
                                            var str;
                                            if (player.storage.bhshuangcheng[0] == 1) str = '伦敦：【巴黎】角色受到1点伤害时，获得1点SP';
                                            else str = '巴黎：【伦敦】角色失去1点体力时，获得1点SP';
                                            return str;
                                        },
                                    },
                                    trigger: {
                                        global: ['loseHpAfter', 'damage'],
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (event.name == 'damage') {
                                            if (!player.storage.bhshuangcheng || player.storage.bhshuangcheng[0] == 0) return false;
                                            return event.player.storage.bhshuangcheng && event.player.storage.bhshuangcheng[0] == 0;
                                        } else {
                                            if (!player.storage.bhshuangcheng || player.storage.bhshuangcheng[0] == 1) return false;
                                            return event.player.storage.bhshuangcheng && event.player.storage.bhshuangcheng[0] == 1;
                                        }
                                    },
                                    content: function () {
                                        trigger.player.line(player);
                                        player.gainSP(trigger.num,trigger.player);
                                        // if (!player.storage.bhsp) player.storage.bhsp = 0;
                                        // player.storage.bhsp += trigger.num;
                                        // player.syncStorage('bhsp');
                                        // player.markSkill('bhsp');
                                    },
                                },
                            },
                        },
                        bhdawei: {
                            trigger: {
                                player: 'useCard',
                            },
                            init: function (player) {
                                if (!player.storage.bhdawei) player.storage.bhdawei = 0;
                                if (!player.storage.bhsp) player.storage.bhsp = 0;
                            },
                            direct: true,
                            silent: true,
                            filter: function (event, player) {
                                if (!player.isPhaseUsing()) return false;
                                return player.countCards('he');
                            },
                            check: function (event, player) {
                                return player.hp * 2 + player.countCards('he') > 3;
                            },
                            content: function () {
                                'step 0'
                                player.storage.bhdawei++;
                                player.syncStorage('bhdawei');
                                'step 1'
                                if (player.storage.bhdawei >= 3) {
                                    player.storage.bhdawei -= 3;
                                    player.syncStorage('bhdawei');
                                    player.chooseToDiscard('大卫：你可以弃置一张牌并获得2点SP', 'he').set('ai', function (card) {
                                        return 6.5 - get.value(card);
                                    });

                                } else event.finish();
                                'step 2'
                                if (result.bool) {
                                    player.logSkill('bhdawei');
                                    player.gainSP(2);
                                    // player.storage.bhsp += 2;
                                    // player.syncStorage('bhsp');
                                    // player.markSkill('bhsp');
                                }
                            },
                            ai: {
                                threaten: 2.9,
                            },
                            group: 'bhdawei_draw',
                            subSkill: {
                                draw: {
                                    forced: true,
                                    sub: true,
                                    trigger: {
                                        player: "phaseDrawBegin2",
                                    },
                                    filter: function (event, player) {
                                        if (!player.countSP()) return false;
                                        return !event.numFixed;
                                    },
                                    content: function () {
                                        event.num = player.countSP();
                                        player.loseSP(event.num);
                                        // player.storage.bhsp = 0;
                                        // player.syncStorage('bhsp');
                                        // player.unmarkSkill('bhsp');
                                        trigger.num += event.num;
                                    },
                                },
                            },
                        },
                        bhwudu: {
                            skillAnimation: true,
                            animationColor: "gray",
                            forced: true,
                            trigger: {
                                global: 'roundStart',
                            },
                            filter: function (event, player) {
                                return game.roundNumber % 3 == 0;
                            },
                            content: function () {
                                'step 0'
                                event.targets = game.filterPlayer();
                                event.num = 0;
                                player.line(event.targets);
                                'step 1'
                                event.target = event.targets[event.num];
                                if (event.target.countSP()> 0) {
                                    event.target.chooseControl('失去SP', '失去体力').set('prompt', '雾都：请选择一项').set('ai', function () {
                                        if (player.hasSkill('zhaxiang') || player.hasSkill('bhhuanshe')) return '失去体力';
                                        else return '失去SP';
                                    })
                                } else {
                                    event.target.loseHp();
                                    event.goto(3);
                                }
                                'step 2'
                                if (result.control == '失去体力') {
                                    event.target.loseHp();
                                } else {
                                    event.target.loseSP(1,player);
                                    // event.target.storage.bhsp--;
                                    // event.target.syncStorage('bhsp');
                                    // if (event.target.storage.bhsp == 0) event.target.unmarkSkill('bhsp');
                                }
                                'step 3'
                                event.num++;
                                if (event.num < event.targets.length) {
                                    event.goto(1);
                                }
                            },
                            ai: {
                                threaten: 1.9,
                            },
                        },
                        bhhuaniao: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: 'useCard',
                            },
                            forced: true,
                            filter: function (event, player) {
                                if (!player.storage.bhhuaniao || !player.storage.bhhuaniao.length) return false;
                                return event.card.suit == player.storage.bhhuaniao[0] || get.number(event.card) == player.storage.bhhuaniao[1];
                            },
                            intro: {
                                content: function (storage, player) {
                                    if (!player.storage.bhhuaniao || !player.storage.bhhuaniao.length) return '无记录';
                                    var str = '使用花色为';
                                    str += get.translation(player.storage.bhhuaniao[0]);
                                    str += '或点数为';
                                    str += player.storage.bhhuaniao[1];
                                    str += '的牌后，摸一张牌';
                                    return str;
                                },
                                markcount: function () {
                                    return 0;
                                },
                            },
                            content: function () {
                                player.draw();
                            },
                        },
                        bhzhenwo: {
                            derivation: ['bhhuaniao', 'bhsbenghuai'],
                            hookTrigger: {
                                block: function (event, player, name, skill) {
                                    if (skill.indexOf('_') == 0) return false;
                                    if (!lib.translate[skill] || lib.translate[skill].length == 0) {
                                        return false;
                                    }
                                    //if(lib.skill[skill].silent) return false;
                                    if (!lib.translate[skill + '_info'] || lib.translate[skill + '_info'].length == 0) {//
                                        return false;
                                    }
                                    var players = game.filterPlayer();
                                    var skills = [];
                                    for (i of players) {
                                        if (i.storage.bhzhenwo && i.storage.bhzhenwo.length > 0) {
                                            skills.add(i.storage.bhzhenwo[0]);
                                        }
                                    }
                                    if (!skills.contains(skill)) return false;
                                    game.removeGlobalSkill('bhzhenwo_trigger');
                                    var global = lib.skill.bhzhenwo_trigger.trigger.global;
                                    global.add(skill + 'Before');
                                    game.addGlobalSkill('bhzhenwo_trigger');
                                    return false;
                                },
                            },
                            inits: function (player) {
                                if (!player._hookTrigger) {
                                    player._hookTrigger = [];
                                }
                                player._hookTrigger.add('bhzhenwo');
                            },
                            init: function (player) {
                                player.storage.bhzhenwo_record = [];
                                for (var i = 0; i < game.players.length; i++) {
                                    lib.skill.bhzhenwo.inits(game.players[i]);
                                }
                                if (!lib.element.player.inits) {
                                    lib.element.player.inits = [];
                                }
                                lib.element.player.inits.add(lib.skill.bhzhenwo.inits);
                            },
                            mark: true,
                            intro: {
                                name: "刻印",
                                content: function (storage, player) {
                                    var str = '';
                                    if (player.storage.bhzhenwo && player.storage.bhzhenwo.length > 0) {
                                        str += '发动【';
                                        str += get.translation(player.storage.bhzhenwo[0]);
                                        str += '】后';
                                        if (player.storage.bhzhenwo[1] == 0) str += '弃一张牌';
                                        else str += '摸一张牌<br>';
                                    }
                                    if (!player.storage.bhzhenwo_record) return str;
                                    if (player.storage.bhzhenwo_record.length == 0) str += '<br><li>未发动过“真我”';
                                    else {
                                        str += '<br><li>已对';
                                        str += get.translation(player.storage.bhzhenwo_record);
                                        str += '发动过“真我”';
                                    }
                                    return str;
                                },
                                markcount: function () {
                                    return 0;
                                },
                            },
                            unique: true,
                            global: "bhzhenwo_trigger",
                            subSkill: {
                                trigger: {
                                    audio: 'bhzhenwo',
                                    trigger: {
                                        global: [],
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return game.hasPlayer(function (target) {
                                            return target.storage.bhzhenwo && target.storage.bhzhenwo.length > 0;
                                        }) && player == event.player&&event.player.storage.bhzhenwo&&event.player.storage.bhzhenwo.length>0;
                                    },
                                    unique: true,
                                    content: function () {
                                        if (trigger.player.storage.bhzhenwo[1] == 1) trigger.player.draw();
                                        else trigger.player.chooseToDiscard('he', true).set('ai',function(card){
                                            return 8-get.value(card);
                                        });
                                    },
                                }
                            },
                            audio: "ext:崩崩崩/audio:2",
                            enable: 'phaseUse',
                            position: 'h',
                            filter: function (event, player) {
                                return player.countCards('h') && game.hasPlayer(function (target) {
                                    return !player.storage.bhzhenwo_record.contains(target);
                                });
                            },
                            filterTarget: function (card, player, target) {
                                return !player.storage.bhzhenwo_record.contains(target);
                            },
                            filterCard: true,
                            content: function () {
                                'step 0'
                                event.card = cards[0];
                                event.target = targets[0];
                                player.storage.bhzhenwo_record.push(event.target);
                                var str1, str2, str3, str4;
                                str1 = '选择' + get.translation(event.target) + '的一项有触发时机的技能，令其增加效果“此技能发动时，你弃一张牌”';
                                str2 = '选择' + get.translation(event.target) + '的一项有触发时机的技能，令其增加效果“此技能发动时，你摸一张牌”';
                                str3 = '令' + get.translation(event.target) + '获得技能“花鸟”，然后其记录你以此法弃置的牌';
                                str4 = '令' + get.translation(event.target) + '获得技能“崩坏”，然后其获得你以此法弃置的牌';
                                var skills = [];
                                skills.addArray(event.target.getSkills(null, false, false).filter(function (skill) {
                                    var info = lib.skill[skill];
                                    var _info = skill + '_info'
                                    if (skill == 'benghuai' && player.hasSkill('bhsbenghuai')) return false;
                                    if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                    return info && info.trigger && !skills.contains(skill);// !info.juexingji && !info.limited && !info.zhuSkill
                                }));
                                event.skills = skills;
                                var list;
                                if (skills.length > 0) {
                                    list = [str1, str2, str3, str4];
                                    event.bool = true;
                                } else {
                                    list = [str3, str4];
                                    event.bool = false;
                                }
                                player.chooseControlList('请选择一项', list, true, function () {
                                    var att = get.attitude(player, event.target);
                                    if (att > 0) {
                                        if (list.length > 2) return 1;
                                        else return 0;
                                    } else {
                                        if (list.length > 2) return 0;
                                        else return 1;
                                    }
                                });
                                'step 1'
                                if (event.bool) {
                                    if (result.index == 0 || result.index == 1) {
                                        event.index = result.index;
                                        player.chooseControl(event.skills).set('prompt', '请选择一个技能为其附加效果').set('ai', function () {
                                            if (event.target == player && player.hasSkill('bhyaojing')) return 'bhyaojing';
                                            var choose = event.skills;
                                            var info;
                                            for (i of choose) {
                                                info = lib.skill[i];
                                                if (info.juexingji || info.limited || info.zhuSkill) choose.remove(i);
                                            }
                                            return choose.randomGet();
                                        });
                                    } else if (result.index == 2) {
                                        event.goto(3);
                                    } else {
                                        event.goto(4);
                                    }
                                } else {
                                    if (result.index == 0) {
                                        event.goto(3);
                                    } else {
                                        event.goto(4);
                                    }
                                }
                                'step 2'
                                event.skillname = result.control;
                                event.target.storage.bhzhenwo = [event.skillname, event.index];
                                event.target.markSkill('bhzhenwo');
                                event.target.syncStorage('bhzhenwo');
                                event.finish();
                                'step 3'
                                event.target.addSkill('bhhuaniao');
                                event.target.storage.bhhuaniao = [get.suit(event.card), get.number(event.card)];
                                event.target.syncStorage('bhhuaniao');
                                event.target.markSkill('bhhuaniao');
                                event.finish();
                                'step 4'
                                event.target.addSkill('bhsbenghuai');
                                event.target.gain(event.card, 'gain2');
                            },
                            ai: {
                                order: 7,
                                result: {
                                    player: function (player, target) {
                                        if (target == player) return 10;
                                        if (player.getCards('h').length < 3) return 0;
                                        else return 2;
                                    },
                                },
                            },
                        },
                        bhyinyue: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: 'useCard',
                            },
                            filter: function (event, player) {
                                if (get.type(event.card) != 'trick' || event.card.name == 'wuxie') return false;
                                if (!event.targets || !event.targets.length || event.targets.length > 1) return false;
                                return player != event.targets[0];
                            },
                            content: function () {
                                'step 0'
                                event.card = trigger.card;
                                event.target = trigger.targets[0];
                                var cards = event.target.getCards('he');
                                var num = 0;
                                for (i of cards) {
                                    if (get.color(i) == get.color(event.card)) num++;
                                }
                                if (num < 2) event.goto(3);
                                else {
                                    var str1 = '交给' + get.translation(player) + '两张' + get.translation(get.color(event.card)) + '牌并于结算后获得' + get.translation(event.card);
                                    var str2 = '令' + get.translation(player) + '摸一张牌并令其“神机”获得一次强化';
                                    event.target.chooseControlList('请选择一项', str1, str2, true, function () {
                                        var att = get.attitude(event.target, player);
                                        var bool = event.target.hasCard(function (card) {
                                            return get.value(card) < parseInt(get.value(event.card) / 4) && get.color(card) == get.color(event.card);
                                        });
                                        if (att > 0) return (get.value(event.card) < 6.5 && event.target.countCards('hs') > 2) ? 1 : 0;
                                        else return bool ? 0 : 1;
                                    });
                                }
                                'step 1'
                                if (result.index == 0) {
                                    event.target.chooseCard('请选择两张' + get.translation(get.color(event.card)) + '牌', 2, function (card) {
                                        return get.color(card) == get.color(event.card);
                                    }, true).set('ai', function (card) {
                                        if (get.attitude(event.target, player) > 0) return get.value(card);
                                        else return 6 - get.value(card);
                                    });
                                } else event.goto(3);
                                'step 2'
                                player.gain(result.cards, event.target, 'give');
                                player.storage.bhyinyue_gain = [event.card, event.target];
                                player.addTempSkill('bhyinyue_gain');
                                event.finish();
                                'step 3'
                                player.draw();
                                if (!player.hasSkill('bhshenjib_a')) player.addTempSkill('bhshenjib_a', 'bhshenjib');
                            },
                            subSkill: {
                                gain: {
                                    trigger: {
                                        player: 'useCardAfter',
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhyinyue_gain && event.card == player.storage.bhyinyue_gain[0];
                                    },
                                    forced: true,
                                    silent: true,
                                    content: function () {
                                        var target = player.storage.bhyinyue_gain[1];
                                        var cards = Array.from(ui.ordering.childNodes);
                                        if (cards.length > 0) {
                                            var i = 0;
                                            while (cards[i] != trigger.card && i < cards.length - 1) i++;
                                            event.card = cards[i];
                                        }
                                        target.gain(event.card, 'gain2');
                                        player.storage.bhyinyue_gain = [];
                                        player.removeSkill('bhyinyue_gain');
                                    },
                                },
                            },
                        },
                        bhbinglao: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                source: 'damageEnd',
                            },
                            filter: function (event, player) {
                                if (!event.player.isAlive()) return false;
                                if (!event.card || event.card.name != 'sha') return false;
                                return true;
                            },
                            check: function (event, player) {
                                var att = get.attitude(player, event.player);
                                if (att > 0 && event.player.isTurnedOver()) return true;
                                if (att < 0 && !event.player.isTurnedOver()) return true;
                                return false;
                            },
                            content: function () {
                                trigger.player.draw(Math.min(5, trigger.player.maxHp - trigger.player.hp));
                                trigger.player.turnOver();
                            },
                            // ai:{
                            //     effect:{
                            //         player:function(card,player,target){
                            //             if(card.name=='sha'&&target.isTurnedOver()&&get.attitude(player,target)>0) return player.getUseValue({name:'sha'})+1;
                            //         },
                            //     },
                            // },
                        },
                        bhshenjib: {
                            audio: "ext:崩崩崩/audio:2",
                            init: function (player) {
                                player.storage.bhshenjib = 0;
                            },
                            group: 'bhshenjib_start',
                            subSkill: {
                                a: {
                                    init: function (player) {
                                        player.storage.bhshenjib_a = false;
                                    },
                                    enable: 'chooseToUse',
                                    viewAs: {
                                        name: 'sha',
                                    },
                                    filterCard: true,
                                    discard: false,
                                    filter: function (event, player) {
                                        return player.countCards('he') && player.storage.bhshenjib_a;
                                    },
                                    position: 'he',
                                    ai: {
                                        respondSha: true,
                                        skillTagFilter: function (player) {
                                            if (!player.countCards('he')) return false;
                                        },
                                    },
                                },
                                start: {
                                    silent: true,
                                    forced: true,
                                    trigger: {
                                        player: 'phaseJieshuEnd',
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhshenjib > 0;
                                    },
                                    content: function () {
                                        player.storage.bhshenjib = 0;
                                    },
                                },
                            },
                            trigger: {
                                player: "useCardToPlayered",
                            },
                            silent: true,
                            filter: function (event, player) {
                                if (get.type(event.card) != 'trick' && get.type(event.card) != 'delay') return false;
                                return event.target != player && player.canUse('sha', event.target, false) && player.countCards('hs') > 0;
                            },
                            frequent: true,
                            content: function () {
                                'step 0'
                                player.storage.bhshenjib_a = true;
                                player.chooseToUse({ name: 'sha' }, '神机：是否对' + get.translation(trigger.target) + '使用一张杀？', trigger.target, -1);
                                'step 1'
                                if (result.bool) {
                                    player.logSkill('bhshenjib');
                                    event.trigger('bhshenjib');
                                    player.storage.bhshenjib++;
                                }
                                player.storage.bhshenjib_a = false;
                                // player.chooseCard('神机：是否对'+get.translation(trigger.target)+'使用一张【杀】？',function(card){
                                //     return card.name=='sha';
                                // },'hs').set('ai',function(){
                                //     var att=get.attitude(player,trigger.target);
                                //     return -att-7+player.countCards('hs',{name:'sha'});
                                // });
                                // 'step 1'
                                // if(result.bool&&result.cards){
                                //     event.card=result.cards[0];
                                // player.useCard(event.card,trigger.target,false);
                                // }
                            },
                            mod: {
                                cardUsable: function (card, player, num) {
                                    if (card.name == 'sha') {
                                        return num + player.storage.bhshenjib;
                                    }
                                },
                            },
                        },
                        bhchana: {
                            audio: "ext:崩崩崩/audio:2",
                            enable:['chooseToUse'],
                            filter: function (event, player) {
                                if(player.hasSkill('bhchana_lm')) return false;
                                return true;
                            },
                            content: function () {
                                'step 0'
                                for(let i of game.filterPlayer()){
                                    i.addTempSkill('bhchana_phase','phaseUseEnd');
                                    if(i!=player) i.addTempSkill('fengyin','phaseUseEnd');
                                }
                                player.addTempSkill('bhchana_lm','roundStart')
                                'step 1'
                                let next = player['phaseUse']();
                                event.next.remove(next);
                                _status.event.next.push(next);
                            },
                            subSkill:{
                                lm:{
                                    sub:true,
                                    forced:true,
                                    locked:true,
                                    charlotte:true,
                                    unique:true,
                                },
                                phase:{
                                    sub:true,
                                    forced:true,
                                    locked:true,
                                    charlotte:true,
                                    unique:true,
                                    silent:true,
                                    trigger:{
                                        player:'useCard',
                                    },
                                    init:function(player){
                                        player.storage.bhchana_count = 0;
                                    },
                                    onremove:function(player){
                                        delete player.storage.bhchana_count;
                                    },
                                    content:function(){
                                        player.storage.bhchana_count++;
                                    },
                                    mod:{
                                        cardUsable: function (card, player) {
                                            return Infinity;
                                        },
                                        targetInRange: function (card, player) {
                                            return true;
                                        },
                                        "cardEnabled":function(card,player){
                                            let num = 0;
                                            for(let i of game.filterPlayer()){
                                                if(i.storage.bhchana_count) num += i.storage.bhchana_count;
                                            }
                                            if(num>=3) return false;
                                        },
                                    },
                                },
                            },
                            hiddenCard:function(player,name){
                                if(!player.hasSkill('bhchana_lm')) return true;
                            },
                            ai:{
                                skillTagFilter:function(player){
                                    if(player.hasSkill('bhchana_lm')) return false;
                                },
                                order:1.1,
                                result:{
                                    player:function(player){
                                        if(player.hp>2 && player.countCards('hes')<=2) return 1-player.countCards('he')+player.hp;
                                        else if (player.hp<=0) return 10;
                                        else return player.countCards('hse') - player.hp;
                                    },
                                },
                                tag:{
                                    respond:1,
                                    respondShan:1,
                                    damage:function(card){
                                        if(game.hasNature(card,'poison')) return;
                                        return 1;
                                    },
                                },
                            },
                        },
                        bhfengshuang:{
                            audio: "ext:崩崩崩/audio:2",
                            enable:'chooseToUse',
                            viewAs:{
                                name:'sha',
                                nature:'ice',
                            },
                            filter:function(event,player){
                                return true;
                            },
                            position:'hs',
                            selectCard:0,
                            filterCard:function(card){
                                return false;
                            },
                            precontent:function(){
                                'step 0'
                                player.chooseControl(['造成伤害','弃置牌']).set('prompt','请选择该冰【杀】的效果').set('ai',function(){
                                    if(player.countCards('h')<=1) return '造成伤害';
                                    else if(player.hp<=1) return '弃置牌';
                                    return ['造成伤害','弃置牌'].randomGet();
                                });
                                'step 1'
                                if(result.control == '弃置牌'){
                                    lib.skill['icesha_skill'].direct=true;
                                    player.addTempSkill('bhfengshuang_end1');
                                } else {
                                    lib.skill['icesha_skill'].filter=function(){return false};
                                    player.addTempSkill('bhfengshuang_end2');
                                }
                            },
                            subSkill:{
                                end1:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    locked:true,
                                    log:false,
                                    unique:true,
                                    silent:true,
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    filter:function(event,player){
                                        return event.card.name=='sha'&&event.card.nature&&event.card.nature=='ice';
                                    },
                                    content:function(){
                                        'step 0'
                                        lib.skill['icesha_skill'].direct=false;
                                        lib.skill['icesha_skill'].filter=function(event){
                                            return false;
                                        };
                                        event.responded = false;
                                        'step 1'
                                        for(let i of trigger.targets){
                                            if(i.hasHistory('useCard', function (evt) {
                                                if(!evt.respondTo || evt.respondTo[0] != player) return false;
                                                let card = evt.respondTo[1];
                                                return card == player.getLastUsed().card;
                                            })) event.responded = true;

                                            if(i.hasHistory('respond', function (evt) {
                                                if(!evt.respondTo || evt.respondTo[0] != player) return false;
                                                let card = evt.respondTo[1];
                                                return card == player.getLastUsed().card;
                                            })) event.responded = true;
                                        }
                                        'step 2'
                                        if(!event.responded){
                                            player.damage('ice');
                                        }
                                        'step 3'
                                        lib.skill['icesha_skill'].filter=function(event){
                                            return event.nature=='ice'&&event.notLink()&&event.player.getCards('he').length>0;
                                        };
                                        player.removeSkill('bhfengshuang_end1');
                                    },
                                },
                                end2:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    locked:true,
                                    unique:true,
                                    silent:true,
                                    log:false,
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    filter:function(event,player){
                                        return event.card.name=='sha'&&event.card.nature&&event.card.nature=='ice';
                                    },
                                    content:function(){
                                        'step 0'
                                        lib.skill['icesha_skill'].filter=function(event){
                                            return event.nature=='ice'&&event.notLink()&&event.player.getCards('he').length>0;
                                        };
                                        event.responded = false;
                                        'step 1'
                                        for(let i of trigger.targets){
                                            if(i.hasHistory('useCard', function (evt) {
                                                if(!evt.respondTo || evt.respondTo[0] != player) return false;
                                                let card = evt.respondTo[1];
                                                return card == player.getLastUsed().card;
                                            })) event.responded = true;

                                            if(i.hasHistory('respond', function (evt) {
                                                if(!evt.respondTo || evt.respondTo[0] != player) return false;
                                                let card = evt.respondTo[1];
                                                return card == player.getLastUsed().card;
                                            })) event.responded = true;
                                        }
                                        'step 2'
                                        if(!event.responded){
                                            if(player.countDiscardableCards(player,'he')){
                                                player.discardPlayerCard('he',player,true);
                                            }
                                        } else event.goto(4);
                                        'step 3'
                                        if(player.countDiscardableCards(player,'he')){
                                            player.discardPlayerCard('he',player,true);
                                        }
                                        'step 4'
                                        player.removeSkill('bhfengshuang_end2');
                                    },
                                },
                            },
                            ai:{
                                skillTagFilter:function(player){
                                    if(player.hp<=1) return false;
                                },
                                yingbian:function(card,player,targets,viewer){
                                    if(get.attitude(viewer,player)<=0) return 0;
                                    var base=0,hit=false;
                                    if(get.cardtag(card,'yingbian_hit')){
                                        hit=true;
                                        if(targets.filter(function(target){
                                            return target.hasShan()&&get.attitude(viewer,target)<0&&get.damageEffect(target,player,viewer,get.nature(card))>0;
                                        })) base+=5;
                                    }
                                    if(get.cardtag(card,'yingbian_all')){
                                        if(game.hasPlayer(function(current){
                                            return !targets.contains(current)&&lib.filter.targetEnabled2(card,player,current)&&get.effect(current,card,player,player)>0;
                                        })) base+=5;
                                    }
                                    if(get.cardtag(card,'yingbian_damage')){
                                        if(targets.filter(function(target){
                                            return get.attitude(player,target)<0&&(hit||!target.mayHaveShan()||player.hasSkillTag('directHit_ai',true,{
                                            target:target,
                                            card:card,
                                            },true))&&!target.hasSkillTag('filterDamage',null,{
                                                player:player,
                                                card:card,
                                                jiu:true,
                                            })
                                        })) base+=5;
                                    }
                                    return base;
                                },
                                canLink:function(player,target,card){
                                    if(!target.isLinked()&&!player.hasSkill('wutiesuolian_skill')) return false;
                                    if(target.mayHaveShan()&&!player.hasSkillTag('directHit_ai',true,{
                                        target:target,
                                        card:card,
                                    },true)) return false;
                                    if(player.hasSkill('jueqing')||player.hasSkill('gangzhi')||target.hasSkill('gangzhi')) return false;
                                    return true;
                                },
                                basic:{
                                    useful:[5,3,1],
                                    value:[5,3,1],
                                },
                                order:function(item,player){
                                    if(player.hasSkillTag('presha',true,null,true)) return 10;
                                    if(game.hasNature(item,'linked')){
                                        if(game.hasPlayer(function(current){
                                            return current!=player&&current.isLinked()&&player.canUse(item,current,null,true)&&get.effect(current,item,player,player)>0&&lib.card.sha.ai.canLink(player,current,item);
                                        })&&game.countPlayer(function(current){
                                            return current.isLinked()&&get.damageEffect(current,player,player,get.nature(item))>0;
                                        })>1) return 3.1;
                                        return 3;
                                    }
                                    return 3.05;
                                },
                                result:{
                                    player:function(player,target){
                                        if(player.countCards('he')<2 || player.hp> 3) return 0.1;
                                        else if(player.hp <= 2 || !player.countCards('he',function(card){
                                            return get.value(card) < 8;
                                        })) return -1;
                                        else return -0.5;
                                    },
                                    target:function(player,target,card,isLink){
                                        var eff=function(){
                                            if(!isLink&&player.hasSkill('jiu')){
                                                if(!target.hasSkillTag('filterDamage',null,{
                                                    player:player,
                                                    card:card,
                                                    jiu:true,
                                                })){
                                                    if(get.attitude(player,target)>0){
                                                        return -7;
                                                    }
                                                    else{
                                                        return -4;
                                                    }
                                                }
                                                return -0.5;
                                            }
                                            return -1.5;
                                        }();
                                        if(!isLink&&target.mayHaveShan()&&!player.hasSkillTag('directHit_ai',true,{
                                            target:target,
                                            card:card,
                                        },true)) return eff/1.2;
                                        return eff;
                                    },
                                },
                                tag:{
                                    respond:1,
                                    respondShan:1,
                                    damage:function(card){
                                        if(game.hasNature(card,'poison')) return;
                                        return 1;
                                    },
                                    natureDamage:function(card){
                                        if(game.hasNature(card)) return 1;
                                    },
                                    fireDamage:function(card,nature){
                                        if(game.hasNature(card,'fire')) return 1;
                                    },
                                    thunderDamage:function(card,nature){
                                        if(game.hasNature(card,'thunder')) return 1;
                                    },
                                    poisonDamage:function(card,nature){
                                        if(game.hasNature(card,'poison')) return 1;
                                    },
                                },
                            },
                        },
                        bhtongde: {
                            forced: true,
                            trigger: {
                                global: "recoverAfter",
                            },
                            priority: 1,
                            filter: function (event, player) {
                                return event.source && event.source == player && event.player.name.search('qigefei') != -1;
                            },
                            content: function () {
                                player.line(trigger.player);
                                trigger.player.gainSP(1,player);
                                // if (!trigger.player.storage.bhsp) trigger.player.storage.bhsp = 0;
                                // trigger.player.storage.bhsp++;
                                // trigger.player.syncStorage('bhsp');
                                // trigger.player.markSkill('bhsp');
                            },
                        },
                        bhchuangsheng: {
                            group: ['bhheiyuanbaihua_in_skill1', 'bhheiyuanbaihua_in_skill2'],
                            init: function (player) {
                                player.addAdditionalSkill('bhchuangsheng', ['bhheiyuan', 'bhbaihua']);
                            },
                            trigger: {
                                player: 'phaseJieshu',
                            },
                            forced: true,
                            content: function () {
                                'step 0'
                                player.chooseTarget('将【创圣之键】交给一名角色').set('ai', function (target) {
                                    return get.attitude(player, target);
                                });
                                'step 1'
                                if (result.bool) {
                                    event.target = result.targets[0];
                                    player.line(event.target);
                                    event.card = get.cardPile2(function (card) {
                                        return card.name.search('heiyuanbaihua') != -1;
                                    });
                                } else event.finish();
                                'step 2'
                                if (event.card) event.target.gain(event.card, 'give');
                                else event.finish();
                                'step 3'
                                event.card = get.cardPile2(function (card) {
                                    return card.name.search('heiyuanbaihua') != -1;
                                });
                                event.goto(2);
                            },
                        },
                        bhheiyuan: {
                            group: 'bhheiyuanbaihua_heiyuan_skill',
                            trigger: {
                                player: "useCardToPlayered",
                            },
                            forced: true,
                            filter: function (event, player) {
                                return event.card.name == 'sha' && !event.getParent().directHit.contains(event.target);
                            },
                            logTarget: "target",
                            content: function () {
                                var id = trigger.target.playerid;
                                var map = trigger.getParent().customArgs;
                                if (!map[id]) map[id] = {};
                                if (typeof map[id].shanRequired == 'number') {
                                    map[id].shanRequired++;
                                }
                                else {
                                    map[id].shanRequired = 2;
                                }
                            },
                            ai: {
                                "directHit_ai": true,
                                skillTagFilter: function (player, tag, arg) {
                                    if (arg.card.name != 'sha' || arg.target.countCards('h', 'shan') > 1) return false;
                                },
                            },
                        },
                        bhbaihua: {
                            group: 'bhheiyuanbaihua_baihua_skill',
                            forced: true,
                            priority: 2,
                            trigger: {
                                global: 'recoverAfter',
                            },
                            filter: function (event, player) {
                                return event.player != player && event.source && event.source == player;
                            },
                            content: function () {
                                player.draw();
                            },
                        },
                        bhshuangxing: {
                            derivation: ['bhchuangsheng', 'bhheiyuan', 'bhbaihua'],
                            forced: true,
                            trigger: {
                                player: 'phaseZhunbei',
                            },
                            content: function () {
                                'step 0'
                                player.removeSkill('bhchuangsheng');
                                player.judge();
                                'step 1'
                                if (result.color == 'red') player.addSkill('bhbaihua');
                                else player.addSkill('bhheiyuan');
                                'step 2'
                                if (player.hasSkill('bhbaihua') && player.hasSkill('bhheiyuan')) {
                                    player.removeSkill('bhheiyuan');
                                    player.removeSkill('bhbaihua');
                                    player.addSkill('bhchuangsheng');
                                }
                            },
                        },
                        bhtongxin: {
                            forced: true,
                            trigger: {
                                player: ['loseHpAfter', 'loseMaxHp'],
                            },
                            init:function(player){
                                if (!player.storage.bhsp) player.storage.bhsp = 0;
                            },
                            content: function () {
                                player.gainSP(trigger.num);
                                // player.storage.bhsp += trigger.num;
                                // player.syncStorage('bhsp');
                                // player.markSkill('bhsp');
                            },
                            group: ['bhtongxin_recover', 'bhtongxin_die', 'bhtongxin_begin'],
                            subSkill: {
                                recover: {
                                    sub: true,
                                    trigger: {
                                        player: 'recoverAfter',
                                    },
                                    forced: true,
                                    silent: true,
                                    filter: function (event, player) {
                                        return event.source && event.source.name.search('saixiliya') != -1;
                                    },
                                    content: function () {
                                        'step 0'
                                        event.target = trigger.source;
                                        player.chooseBool('同心：你可以与' + get.translation(event.target) + '各摸一张牌').set('ai', function () {
                                            return get.attitude(player, event.target) > 0;
                                        });
                                        'step 1'
                                        if (result.bool) {
                                            player.logSkill('bhtongxin');
                                            player.draw();
                                            player.line(event.target);
                                            event.target.draw();
                                        }
                                    },
                                },
                                begin: {
                                    sub: true,
                                    forced: true,
                                    silent: true,
                                    trigger: {
                                        global: "phaseBefore",
                                        player: "enterGame",
                                    },
                                    filter: function (event, player) {
                                        if (!(event.name != 'phase' || game.phaseNumber == 0)) return false;
                                        return game.hasPlayer(function (target) {
                                            return target.name.search('saixiliya') != -1;
                                        });
                                    },
                                    content: function () {
                                        player.group = 'bhtianming';
                                    },
                                },
                                die: {
                                    sub: true,
                                    forced: true,
                                    silent: true,
                                    trigger: {
                                        global: 'dieAfter',
                                    },
                                    filter: function (event, player) {
                                        return event.player.name.search('saixiliya') != -1;
                                    },
                                    content: function () {
                                        player.group = 'bhzhongyingjie';
                                    },
                                },
                            },
                        },
                        bhshengcai: {
                            trigger: {
                                source: 'damageBegin2',
                            },
                            priority: 2,
                            check: function (event, player) {
                                return get.attitude(player, event.player) < 0 && event.player.hp >= event.num;
                            },
                            filter: function (event, player) {
                                if (!event.nature || event.nature != 'fire') return false;
                                if (!player.countSP()) return false;
                                return player.countCards('he') >= Math.min(3, player.countSP());
                            },
                            content: function () {
                                'step 0'
                                event.num = Math.min(3, player.countSP());
                                player.chooseToDiscard('he', event.num, true).set('ai', function (card) {
                                    return 8 - get.value(card);
                                });
                                'step 1'
                                if (result.bool) {
                                    player.loseSP(event.num);
                                    // player.storage.bhsp -= event.num;
                                    // player.syncStorage('bhsp');
                                    trigger.num += event.num;
                                }
                            },
                        },
                        bhlangzi: {
                            enable: "phaseUse",
                            usable: 1,
                            position: "h",
                            selectCard: 2,
                            complexCard: true,
                            filter: function (event, player) {
                                if (player.countCards('h', { suit: 'spade' }) >= 2) return true;
                                if (player.countCards('h', { suit: 'heart' }) >= 2) return true;
                                if (player.countCards('h', { suit: 'club' }) >= 2) return true;
                                if (player.countCards('h', { suit: 'diamond' }) >= 2) return true;
                                return false;
                            },
                            filterCard: function (card, player) {
                                if (ui.selected.cards.length) {
                                    return get.suit(card) == get.suit(ui.selected.cards[0]);
                                }
                                var cards = player.getCards('hs');
                                for (var i = 0; i < cards.length; i++) {
                                    if (card != cards[i]) {
                                        if (get.suit(card) == get.suit(cards[i])) return true;
                                    }
                                }
                                return false;
                            },
                            filterTarget: function (card, player, target) {
                                return target != player && player.inRange(target);
                            },
                            content: function () {
                                'step 0'
                                player.addTempSkill('bhlangzi_dam');
                                target.damage(player, 'fire');
                                'step 1'
                                player.removeSkill('bhlangzi_dam');
                            },
                            subSkill: {
                                dam: {
                                    sub: true,
                                    forced: true,
                                    trigger: {
                                        source: 'damageEnd',
                                    },
                                    filter: function (event, player) {
                                        return event.num > 1;
                                    },
                                    content: function () {
                                        player.loseHp(parseInt(trigger.num / 2));
                                    },
                                },
                            },
                            ai: {
                                order: 5,
                                result: {
                                    target: -2,
                                },
                            },
                        },
                        bhshimo: {
                            audio: "ext:崩崩崩/audio:2",
                            derivation:['bhkuanggu','bhsbenghuai'],
                            group:['bhshimo1','bhshimo2'],
                        },
                        bhshimo1:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                source:"damageSource",
                            },
                            filter:function(event,player){
                                return player.isPhaseUsing() && event.num>0;
                            },
                            priority:10,
                            direct:true,
                            preHidden:true,
                            content:function(){
                                'step 0'
                                event.num=trigger.num;
                                'step 1'
                                var choice;
                                if(player.isDamaged()&&get.recoverEffect(player)>0&&(player.countCards('hs',function(card){
                                        return card.name=='sha'&&player.hasValueTarget(card);
                                    })>=player.getCardUsable('sha'))){
                                    choice='recover_hp';
                                }
                                else{
                                    choice='draw_card';
                                }
                                var next=player.chooseDrawRecover(get.prompt(event.name)).set('logSkill',event.name).set('prompt2','摸一张牌或回复1点体力');
                                next.set('choice',choice);
                                next.set('ai',function(){
                                    return _status.event.getParent().choice;
                                });
                                next.setHiddenSkill('bhkuanggu');
                                'step 2'
                                if(result.control!='cancel2'){
                                    event.num--;
                                    if(event.num>0){
                                        event.goto(1);
                                    }
                                }
                            },
                        },
                        bhshimo2:{
                            audio:"ext:崩崩崩/audio:2",
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            forced: true,
                            priority:10,
                            check: function () {
                                return false;
                            },
                            filter: function (event, player) {
                                return !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                            },
                            content: function () {
                                "step 0"
                                player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                    if (player.hp == player.maxHp) return 'baonue_hp';
                                    if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                    return 'baonue_hp';
                                }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                "step 1"
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                            ai: {
                                threaten: 0.5,
                                neg: true,
                            },
                        },
                        bhxuguang: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:'damageBegin3',
                            },
                            init:function(player){
                                player.storage.bhxuguang = 0;
                            },
                            check:function(event,player){
                                if(player.isPhaseUsing() && player.hasCard('hs',function(card){
                                    return get.tag(card,'damage') && card.name != 'sha';
                                })) return true;
                                return get.attitude(player, event.player) > 2 || (get.attitude(player, event.player) > 0 && player.hp > 1);
                            },
                            filter:function(event,player){
                                if(event.player == player) return false;
                                return event.num >= event.player.hp && !player.hasSkill('bhxuguang_lm');
                            },
                            content:function(){
                                'step 0'
                                player.addTempSkill('bhxuguang_lm');
                                event.target = trigger.source;
                                trigger.cancel();
                                'step 1'
                                let name = 'bhshimo_' + player.storage.bhxuguang;
                                let info = {
                                    audio: "bhshimo",
                                    derivation:['bhkuanggu', 'bhsbenghuai'],
                                    group:[name+'1', name+'2'],
                                };
                                let translate = '噬魔', description = '锁定技，此技能于出牌阶段/结束阶段视为无距离/体力限制的〖狂骨〗/〖崩坏〗。';

                                let skillPriority = 11 + player.storage.bhxuguang;
                                let name1 = name+'1';
                                let info1 = {
                                    audio:'bhshimo1',
                                    trigger:{
                                        source:"damageSource",
                                    },
                                    filter:function(event,player){
                                        return player.isPhaseUsing() && event.num>0;
                                    },
                                    priority: skillPriority,
                                    direct:true,
                                    preHidden:true,
                                    content:function(){
                                        'step 0'
                                        event.num=trigger.num;
                                        'step 1'
                                        var choice;
                                        if(player.isDamaged()&&get.recoverEffect(player)>0&&(player.countCards('hs',function(card){
                                                return card.name=='sha'&&player.hasValueTarget(card);
                                            })>=player.getCardUsable('sha'))){
                                            choice='recover_hp';
                                        }
                                        else{
                                            choice='draw_card';
                                        }
                                        var next=player.chooseDrawRecover(get.prompt(event.name)).set('logSkill',event.name).set('prompt2','摸一张牌或回复1点体力');
                                        next.set('choice',choice);
                                        next.set('ai',function(){
                                            return _status.event.getParent().choice;
                                        });
                                        next.setHiddenSkill('bhkuanggu');
                                        'step 2'
                                        if(result.control!='cancel2'){
                                            event.num--;
                                            if(event.num>0){
                                                event.goto(1);
                                            }
                                        }
                                    },
                                };
                                let translate1 = '噬魔';
                                let name2 = name+'2';
                                let info2 = {
                                    audio:'bhshimo2',
                                    trigger: {
                                        player: "phaseJieshuBegin",
                                    },
                                    forced: true,
                                    priority: skillPriority,
                                    check: function () {
                                        return false;
                                    },
                                    filter: function (event, player) {
                                        return !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                                    },
                                    content: function () {
                                        "step 0"
                                        player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                            if (player.hp == player.maxHp) return 'baonue_hp';
                                            if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                            return 'baonue_hp';
                                        }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                        "step 1"
                                        if (result.control == 'baonue_hp') {
                                            player.loseHp();
                                        }
                                        else {
                                            player.loseMaxHp(true);
                                        }
                                    },
                                    ai: {
                                        threaten: 0.5,
                                        neg: true,
                                    },
                                };
                                let translate2 = '噬魔';

                                game.addSkill(name1, info1, translate1);
                                game.addSkill(name2, info2, translate2);
                                game.addSkill(name, info, translate, description);
                                player.addSkill(name);
                                player.storage.bhxuguang++;
                                'step 2'
                                if(event.target){
                                    player.damage(event.target,'nocard');
                                    event.target.damage(player,'nocard');
                                }
                            },
                            subSkill:{
                                lm:{
                                    sub:true,
                                    forced:true,
                                    locked:true,
                                    charlotte:true,
                                },
                            },
                        },
                        bhyuji: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "useCardAfter",
                            },
                            filter: function (event, player) {
                                if (player != _status.currentPhase) return false;
                                return player.storage.bhyuji && player.countCards('hej') == player.storage.bhyuji[0];
                            },
                            content: function () {
                                'step 0'
                                player.judge();
                                'step 1'
                                event.card = result.card;
                                if (game.hasPlayer(function (target) {
                                    return player.canUse(event.card, target);
                                })) {
                                    player.chooseUseTarget(event.card, true);
                                    // player.chooseTarget('请选择'+get.translation(event.card)+'的目标',function(card,player,target){
                                    //     return player.canUse(event.card,target);
                                    // },true).set('ai',function(target){
                                    //     return get.effect(target, event.card, player, player);
                                    // });
                                } else {
                                    player.gain(event.card, 'gain2');
                                    event.finish();
                                }
                                // 'step 2'
                                // player.useCard(event.card,result.targets[0]);
                            },
                            group: 'bhyuji_use',
                            subSkill: {
                                use: {
                                    trigger: {
                                        player: 'useCardBegin',
                                    },
                                    forced: true,
                                    silent: true,
                                    sub: true,
                                    content: function () {
                                        if (!player.storage.bhyuji) player.storage.bhyuji = [0];
                                        player.storage.bhyuji[0] = player.countCards('hej');
                                        //game.log(player.storage.bhyuji[0]);
                                    },
                                },
                            },
                        },
                        bhyinyi: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: 'phaseJieshu',
                            },
                            filter: function (event, player) {
                                return player.countCards('hes', { type: 'equip' });
                            },
                            content: function () {
                                'step 0'
                                var bool1 = player.countCards('hs', { type: 'equip' }) > 0;
                                var bool2 = player.countCards('e') > 0;
                                if (bool1 && bool2) {
                                    player.chooseControl('收回装备', '使用装备').set('prompt', '银翼：请选择一项').set('ai', function () {
                                        var str;
                                        for (var i = 1; i < 6; i++) {
                                            str = 'equip' + i;
                                            if (player.isEmpty(i) && player.countCards('hs', { subtype: str })) return '使用装备';
                                        }
                                        var cards = player.getCards('e');
                                        for (i of cards) {
                                            if (i.name == 'bhdizangyuhun_in' && !player.hasSkill('bhzhileng') && !player.hasSkill('bhninghan') && player.countCards('hs', { subtype: 'equip5' })) return '使用装备';
                                        }
                                        if (player.hp > 1) return '收回装备';
                                        return '使用装备';
                                    });
                                } else if (bool1 && !bool2) {
                                    event.goto(2);
                                } else {
                                    event.goto(4);
                                }
                                'step 1'
                                if (result.control == '使用装备') event.goto(2);
                                else event.goto(4);
                                'step 2'
                                player.chooseCard('请选择一张装备使用', 'hs', function (card) {
                                    return get.type(card) == 'equip';
                                }, true).set('ai', function (card) {
                                    return get.value(card);
                                });
                                'step 3'
                                player.useCard(result.cards[0], player);
                                event.finish();
                                'step 4'
                                var list = [];
                                if (player.countCards('e', { subtype: 'equip1' })) list.push('武器');
                                if (player.countCards('e', { subtype: 'equip2' })) list.push('防具');
                                if (player.countCards('e', { subtype: 'equip3' })) list.push('防御马');
                                if (player.countCards('e', { subtype: 'equip4' })) list.push('进攻马');
                                if (player.countCards('e', { subtype: 'equip5' })) list.push('宝物');
                                if (player.countCards('e', { subtype: 'equip6' })) list.push('坐骑');
                                if (player.countCards('e', { subtype: 'equip7' })) list.push('其他');
                                player.chooseControl(list).set('prompt', '请选择一种装备收回').set('ai', function () {
                                    if (list.contains('进攻马')) return '进攻马';
                                    if (list.contains('武器')) return '武器';
                                    if (list.contains('其他')) return '其他';
                                    if (list.contains('防御马')) return '防御马';
                                    if (list.contains('坐骑')) return '坐骑';
                                    if (list.contains('宝物')) return '宝物';
                                    if (list.contains('防具')) return '防具';
                                    return list.randomGet();
                                });
                                'step 5'
                                if (result.control == '武器') event.card = player.getCards('e', { subtype: 'equip1' })[0];
                                else if (result.control == '防具') event.card = player.getCards('e', { subtype: 'equip2' })[0];
                                else if (result.control == '防御马') event.card = player.getCards('e', { subtype: 'equip3' })[0];
                                else if (result.control == '进攻马') event.card = player.getCards('e', { subtype: 'equip4' })[0];
                                else if (result.control == '宝物') event.card = player.getCards('e', { subtype: 'equip5' })[0];
                                else if (result.control == '坐骑') event.card = player.getCards('e', { subtype: 'equip6' })[0];
                                else event.card = player.getCards('e', { subtype: 'equip7' })[0];
                                player.gain(event.card, player, 'gain2');
                            },
                            mod: {
                                globalFrom: function (from, to, distance) {
                                    if (!from.countCards('e', { subtype: ['equip3', 'equip4'] })) return distance - 1;
                                },
                            },
                        },
                        bhjielv: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:'damageBegin2',
                            },
                            filter:function(event,player){
                                return event.source&&event.source == player;
                            },
                            content:function(){
                                trigger.num--;
                            },
                            init: function (player) {
                                player.storage.bhjielv = 1;
                            },
                            onremove:function(player){
                                delete player.storage.bhjielv;
                            },
                            forced: true,
                            locked:true,
                            mod: {
                                globalTo: function (from, to, distance) {
                                    if (to.storage.bhjielv) return distance + to.storage.bhjielv;
                                },
                                globalFrom: function (from, to, distance) {
                                    if (from.storage.bhjielv) return distance + from.storage.bhjielv;
                                },
                            },
                            subSkill:{
                                lose:{
                                    trigger: {
                                        player:'dying',
                                        source:'dying'
                                    },
                                    forced:true,
                                    locked:true,
                                    sub:true,
                                    charlotte:true,
                                    filter: function (event, player) {
                                        if (!player.storage.bhjielv) return false;
                                        return true;
                                    },
                                    content: function () {
                                        player.removeSkill('bhjielv');
                                    },
                                },
                            },
                        },
                        bhzhongzhao: {
                            audio: "ext:崩崩崩/audio:1",
                            skillAnimation: true,
                            animationColor: "gray",
                            forced: true,
                            locked:true,
                            silent:true,
                            log:false,
                            init:function(player){
                                player.storage.bhzhongzhao = [1 , 2];
                            },
                            trigger: {
                                global: 'washCard',
                            },
                            filter:function(event,player){
                                return player.storage.bhzhongzhao&&player.storage.bhzhongzhao[0]>0;
                            },
                            content: function () {
                                'step 0'
                                player.storage.bhzhongzhao[0] --;
                                'step 1'
                                if(player.storage.bhzhongzhao[0] == 0){
                                    player.logSkill('bhluanwu');
                                    event.current=player.next;
                                    event.currented=[];
                                } else event.finish();
                                'step 2'
                                event.currented.push(event.current);
                                event.current.animate('target');
                                event.current.chooseToUse('乱武：使用一张杀或失去一点体力',function(card){
                                    if(get.name(card)!='sha') return false;
                                    return lib.filter.cardEnabled.apply(this,arguments)
                                },function(card,player,target){
                                    if(player==target) return false;
                                    var dist=get.distance(player,target);
                                    if(dist>1){
                                        if(game.hasPlayer(function(current){
                                            return current!=player&&get.distance(player,current)<dist;
                                        })){
                                            return false;
                                        }
                                    }
                                    return lib.filter.filterTarget.apply(this,arguments);
                                }).set('ai2',function(){
                                    return get.effect_use.apply(this,arguments)+0.01;
                                }).set('addCount',false);
                                'step 3'
                                if(result.bool==false) event.current.loseHp();
                                event.current=event.current.next;
                                if(event.current!=player&&!event.currented.contains(event.current)){
                                    game.delay(0.5);
                                    event.goto(2);
                                }
                                'step 4'
                                let targets = game.filterPlayer(function (target) {
                                    return target.hasSkill('bhjielv');
                                });
                                for (let i of targets) {
                                    player.line(i);
                                    i.storage.bhjielv *= 2;
                                }
                            },
                            group:['bhzhongzhao_dying'],
                            subSkill:{
                                dying:{
                                    audio: "ext:崩崩崩/audio:1",
                                    trigger:{
                                        player:'dyingBegin',
                                    },
                                    silent:true,
                                    log:false,
                                    filter:function(event,player){
                                        return player.storage.bhzhongzhao&&player.storage.bhzhongzhao[1]>0;
                                    },
                                    locked:true,
                                    forced:true,
                                    content:function(){
                                        'step 0'
                                        player.storage.bhzhongzhao[1] --;
                                        'step 1'
                                        if(player.storage.bhzhongzhao[1] == 0){
                                            player.logSkill('bhzhongzhao');
                                            event.targets = [player];
                                        } else event.finish();
                                        'step 2'
                                        player.chooseCardTarget({
                                            selectCard:[event.targets.length<game.filterPlayer().length?1:player.countCards('he'), player.countCards('he')],
                                            filterCard:true,
                                            position:'he',
                                            filterTarget: function (card, player, target) {
                                                return !event.targets.contains(target);
                                            },
                                            ai1: function (card) {
                                                if(game.hasPlayer(function(target){
                                                    return get.attitude(player,target)>0&&target.hp<=2;
                                                })) return ui.selected.cards.length<2?9-get.value(card):7-get.value(card);
                                                if(ui.selected.cards.length>=2) return -0.1;
                                                else return 8-get.value(card);
                                            },
                                            ai2: function (target) {
                                                var att = get.attitude(player, target);
                                                if(att<0) return -10;
                                                if(target.hasSkillTag('maixue')&&target.hp>1) return 0.5;
                                                return target.hp<=2?att+4:att;
                                            },
                                            prompt: '〖终兆〗',
                                            prompt2:'请选择牌并分配给未以此法分配过的角色',
                                        }).set('forced',true);
                                        'step 3'
                                        event.target = result.targets[0];
                                        event.targets.push(event.target);
                                        event.target.gain(result.cards,player,'give');
                                        'step 4'
                                        if(player.countCards('he')>0) event.goto(2);
                                        'step 5'
                                        let targets = game.filterPlayer(function (target) {
                                            return target.hasSkill('bhjielv');
                                        });
                                        for (let i of targets) {
                                            player.line(i);
                                            i.storage.bhjielv /= 2;
                                        }
                                    },
                                },
                            },
                        },
                        bhyujian: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            init:function(player){
                                player.storage.bhyujian_use = []
                            },
                            filter: function (event, player) {
                                if (!event.filterCard({ name: 'tao' }, player, event) && !event.filterCard({ name: 'wuzhong' }, player, event)) return false;
                                for(let i of player.getCards('hs')){
                                    let targets = [];
                                    for(let j of game.filterPlayer()){
                                        if(player.canUse(i, j)&&player.getCardUsable(i)>0) targets.push(j);
                                    }
                                    if(targets.length==0) return true;
                                }
                                return false;
                            },
                            filterCard:function(card,player,target){
                                let targets = [];
                                for(let j of game.filterPlayer()){
                                    if(player.canUse(card, j)&&player.getCardUsable(card)>0) targets.push(j);
                                }
                                if(targets.length==0) return true;
                                return false;
                            },
                            lose:false,
                            discard:false,
                            filterTarget:function(card,player,target){
                                if(player.storage.bhyujian_use.contains(target)) return false;
                                return player.inRange(target) || player == target;
                            },
                            selectCard:1,
                            position:'hs',
                            content:function(){
                                'step 0'
                                event.target = targets[0];
                                event.card = cards[0];
                                player.chooseControl(['桃','无中生有']).set('prompt','请选择要使用的牌名').set('ai',function(){
                                    let att = get.attitude(player, event.target);
                                    if(att>0){
                                        if((event.target.hp<event.target.countCards('hes')||event.target.hp<=1)&&event.target.hp<event.target.maxHp) return '桃';
                                        else return '无中生有';
                                    } else {
                                        if(event.target.hp==event.target.maxHp || (event.countCards('hes')<2 && event.target.hp>=3)) return '桃';
                                        else return '无中生有';
                                    }
                                });
                                'step 1'
                                if(result.control=='桃') event.cardname = 'tao';
                                else event.cardname = 'wuzhong';
                                player.useCard({name:event.cardname,isCard:false,cards:[event.card]},[event.card],event.target).viewAs=true;
                                'step 2'
                                event.target.addSkill('bhjielv');
                                event.target.addSkill('bhjielv_lose');
                                player.storage.bhyujian_use.push(event.target);

                                if(player.storage.bhzhongzhao && player.storage.bhzhongzhao[0]<=0) event.target.storage.bhjielv *= 2;
                                if(player.storage.bhzhongzhao && player.storage.bhzhongzhao[1]<=0) event.target.storage.bhjielv /= 2;
                            },
                            group:['bhyujian_phase'],
                            subSkill:{
                                phase:{
                                    forced:true,
                                    direct:true,
                                    charlotte:true,
                                    sub:true,
                                    trigger:{
                                        player:'phaseUseBegin',
                                    },
                                    content:function(){
                                        player.storage.bhyujian_use = [];
                                    },
                                },
                            },
                            ai:{
                                order:3,
                                result:{
                                    target:function(player,target){
                                        if(get.attitude(player, target)<0&&target.hp==target.maxHp) return 4;
                                        else if(get.attitude(player, target)<0) return -4;
                                        else if(target.hp<target.maxHp && game.hasPlayer(function(current){
                                            return get.attitude(player, current)<0 && current.hp <= 2 && !target.inRange(current);
                                        })) return 10;
                                        else if(target.countCards('e',{subtype:'equip1'})>0) return 5;
                                        else if(target.hp <= 1) return 12;
                                        else return 2;
                                    }
                                },
                            },
                        },
                        bhluanwu:{
                            audio: "ext:崩崩崩/audio:2",
                            unique:true,
                            enable:"phaseUse",
                            limited:true,
                            skillAnimation:false,
                            animationColor:"thunder",
                            filterTarget:function(card,player,target){
                                return target!=player;
                            },
                            selectTarget:-1,
                            multitarget:true,
                            multiline:true,
                            content:function(){
                                "step 0"
                                player.awakenSkill('luanwu');
                                event.current=player.next;
                                event.currented=[];
                                "step 1"
                                event.currented.push(event.current);
                                event.current.animate('target');
                                event.current.chooseToUse('乱武：使用一张杀或失去一点体力',function(card){
                                    if(get.name(card)!='sha') return false;
                                    return lib.filter.cardEnabled.apply(this,arguments)
                                },function(card,player,target){
                                    if(player==target) return false;
                                    var dist=get.distance(player,target);
                                    if(dist>1){
                                        if(game.hasPlayer(function(current){
                                            return current!=player&&get.distance(player,current)<dist;
                                        })){
                                            return false;
                                        }
                                    }
                                    return lib.filter.filterTarget.apply(this,arguments);
                                }).set('ai2',function(){
                                    return get.effect_use.apply(this,arguments)+0.01;
                                }).set('addCount',false);
                                "step 2"
                                if(result.bool==false) event.current.loseHp();
                                event.current=event.current.next;
                                if(event.current!=player&&!event.currented.contains(event.current)){
                                    game.delay(0.5);
                                    event.goto(1);
                                }
                            },
                            ai:{
                                order:1,
                                result:{
                                    player:function(player){
                                        if(lib.config.mode=='identity'&&game.zhu.isZhu&&player.identity=='fan'){
                                            if(game.zhu.hp==1&&game.zhu.countCards('h')<=2) return 1;
                                        }
                                        var num=0;
                                        var players=game.filterPlayer();
                                        for(var i=0;i<players.length;i++){
                                            var att=get.attitude(player,players[i]);
                                            if(att>0) att=1;
                                            if(att<0) att=-1;
                                            if(players[i]!=player&&players[i].hp<=3){
                                                if(players[i].countCards('h')==0) num+=att/players[i].hp;
                                                else if(players[i].countCards('h')==1) num+=att/2/players[i].hp;
                                                else if(players[i].countCards('h')==2) num+=att/4/players[i].hp;
                                            }
                                            if(players[i].hp==1) num+=att*1.5;
                                        }
                                        if(player.hp==1){
                                            return -num;
                                        }
                                        if(player.hp==2){
                                            return -game.players.length/4-num;
                                        }
                                        return -game.players.length/3-num;
                                    },
                                },
                            },
                            mark:true,
                            intro:{
                                content:"limited",
                            },
                            init:(player,skill)=>player.storage[skill]=false,
                            "_priority":0,
                        },
                        bhfanxing: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: 'useCard',
                            },
                            check: function (event, player) {
                                if (['tao', 'bhbenghuaijiejing', 'taoyuan'].contains(event.card.name)) return false;
                                if (player.countCards('j') && ['shunshou', 'guohe'].contains(event.card.name) && get.attitude(player, event.player) > 0) return false;
                                return game.hasPlayer(function (current) {
                                    return get.attitude(player, current) > 0;
                                });
                            },
                            filter: function (event, player) {
                                if (!event.targets || event.targets.length > 1) return false;
                                var cards = player.getCards('hs');
                                var bool = false;
                                for (i of cards) {
                                    if (i.name.search('bhhuajuan_') != -1) bool = true;
                                }
                                return event.player != player && event.targets[0] == player && bool && game.hasPlayer(function (current) {
                                    return current != player && current != event.player;
                                });
                            },
                            content: function () {
                                'step 0'
                                event.fromplayer = trigger.player;
                                player.chooseCard('繁星：将一张【画卷】赠与一名其他角色并转移' + get.translation(trigger.card) + '的目标', 'h', function (card) {
                                    return card.name.search('bhhuajuan') != -1;
                                }).set('ai', function (card) {
                                    if (game.hasPlayer(function (current) {
                                        return get.attitude(player, current) > 0;
                                    })) return [1, 2, 3].randomGet();
                                    return -2;
                                });
                                'step 1'
                                if (result.bool) {
                                    event.card = result.cards[0];
                                    player.chooseTarget('将' + get.translation(event.card) + '赠与一名其他角色', function (card, player, target) {
                                        return player != target && target != event.fromplayer;
                                    }, true).set('ai', function (target) {
                                        var att = get.attitude(player, target);
                                        if (att < 0) return -2;
                                        return att + 2 * target.hp + target.countCards('hes');
                                    })
                                } else event.finish();
                                'step 2'
                                event.target = result.targets[0];
                                player.line(event.target);
                                result.targets[0].gain(event.card, player, 'give');
                                trigger.targets = [result.targets[0]];
                                'step 3'
                                event.target.chooseBool('是否令' + get.translation(player) + '摸一张牌？').set('ai', function () {
                                    return get.attitude(event.target, player) > 0;
                                });
                                'step 4'
                                if (result.bool) player.draw();
                            },
                        },
                        bhbaijuan: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: 'bhbaijuan',
                            },
                            forced: true,
                            filter: function (event, player) {
                                for (i of player.storage.bhbaijuan_count[1]) {
                                    if (i >= 3) return true;
                                }
                                return false;
                            },
                            content: function () {
                                for (var i = 0; i < player.storage.bhbaijuan_count[1].length; i++) {
                                    if (player.storage.bhbaijuan_count[1][i] >= 3) {
                                        event.index = i;
                                        player.storage.bhbaijuan_count[1][i] = 0;
                                    }
                                }
                                player.draw();
                                player.storage.bhbaijuan.push(player.storage.bhbaijuan_count[0][event.index]);
                                player.syncStorage('bhbaijuan');
                                player.markSkill('bhbaijuan');
                            },
                            init: function (player) {
                                player.storage.bhbaijuan = [];
                            },
                            marktext: '白卷',
                            intro: {
                                content: 'players',
                                markcount: function () {
                                    return 0;
                                },
                            },
                            group: ['bhbaijuan_count', 'bhbaijuan_countd'],
                            subSkill: {
                                countd: {
                                    sub: true,
                                    forced: true,
                                    silent: true,
                                    trigger: {
                                        player: 'damageEnd',
                                    },
                                    filter: function (event, player) {
                                        return event.source && event.source != player;
                                    },
                                    content: function () {
                                        'step 0'
                                        event.target = trigger.source;
                                        event.index = -1;
                                        for (var i = 0; i < player.storage.bhbaijuan_count[0].length; i++) {
                                            if (player.storage.bhbaijuan_count[0][i] == event.target) event.index = i;
                                        }
                                        if (event.index == -1) {
                                            player.storage.bhbaijuan_count[0].push(event.target);
                                            player.storage.bhbaijuan_count[1].push(1);
                                        } else player.storage.bhbaijuan_count[1][event.index]++;
                                        player.syncStorage('bhbaijuan_count');
                                        'step 1'
                                        //game.log(player.storage.bhbaijuan_count[0], '/', player.storage.bhbaijuan_count[1])
                                        event.trigger('bhbaijuan');
                                    },
                                },
                                count: {
                                    sub: true,
                                    init: function (player) {
                                        var targets = game.filterPlayer(function (current) {
                                            return current != player;
                                        });
                                        var num = targets.length;
                                        player.storage.bhbaijuan_count = [targets, []];
                                        for (var i = 0; i < num; i++) player.storage.bhbaijuan_count[1].push(0);
                                    },
                                    trigger: {
                                        global: 'useCard',
                                    },
                                    forced: true,
                                    silent: true,
                                    filter: function (event, player) {
                                        //if(player.storage.bhbaijuan.length>0) return false;
                                        return event.targets && event.targets.contains(player) && event.player != player;
                                    },
                                    content: function () {
                                        'step 0'
                                        event.index = -1;
                                        for (var i = 0; i < player.storage.bhbaijuan_count[0].length; i++) {
                                            if (player.storage.bhbaijuan_count[0][i] == trigger.player) event.index = i;
                                        }
                                        if (event.index == -1) {
                                            player.storage.bhbaijuan_count[0].push(trigger.player);
                                            player.storage.bhbaijuan_count[1].push(1);
                                        } else player.storage.bhbaijuan_count[1][event.index]++;
                                        player.syncStorage('bhbaijuan_count');
                                        'step 1'
                                        //game.log(player.storage.bhbaijuan_count[0], '/', player.storage.bhbaijuan_count[1])
                                        event.trigger('bhbaijuan');
                                    },
                                },
                            },
                            mod: {
                                ignoredHandcard: function (card, player) {
                                    if (card.name.search('bhhuajuan') != -1) {
                                        return true;
                                    }
                                },
                                cardDiscardable: function (card, player, name) {
                                    if (name == 'phaseDiscard' && card.name.search('bhhuajuan') != -1) return false;
                                },
                            },
                        },
                        "bhhuajuan_remove": {
                            trigger: { player: ['useSkillAfter', 'useCardAfter', 'respondAfter', 'triggerAfter', 'skillAfter'] },
                            hookTrigger: {
                                after: function (event, player) {
                                    if (lib.skill[event.skill].silent) return false;
                                    var targets = game.filterPlayer(function (target) {
                                        return target != player;
                                    });
                                    for (i of targets) {
                                        if (lib.character[i.name][3].contains(event.skill)) return true;
                                    }
                                    if (_status.characterlist) {
                                        for (var i = 0; i < _status.characterlist.length; i++) {
                                            var name = _status.characterlist[i];
                                            if (lib.character[name][3].contains(event.skill)) {
                                                return true;
                                            }
                                        }
                                    } else if (_status.connectMode) {
                                        var tlist = [];
                                        tlist = get.charactersOL(function (i) {
                                            return lib.character[i][3].contains(event.skill);
                                        });
                                        return tlist.length > 0;
                                    } else {
                                        var tlist = [];
                                        tlist = get.gainableCharacters(function (info) {
                                            return info[3].contains(event.skill);
                                        });
                                        return tlist.length > 0;
                                    }
                                    //if(event._direct&&!player.storage.gzhuashen_removing.contains(event.skill)) return false;
                                    return false;
                                }
                            },
                            silent: true,
                            filter: function (event, player) {
                                return event.skill;
                            },
                            content: function () {
                                var str;
                                event.skillname = trigger.skill;
                                var targets = game.filterPlayer(function (target) {
                                    return target != player;
                                });
                                for (i of targets) {
                                    if (lib.character[i.name][3].contains(event.skillname)) {
                                        str = 'bhhuajuan_' + i.name;
                                        game.log(str);
                                        event.trigger(str);
                                    }
                                }
                                if (_status.characterlist) {
                                    for (var i = 0; i < _status.characterlist.length; i++) {
                                        var name = _status.characterlist[i];
                                        if (lib.character[name][3].contains(event.skillname)) {
                                            str = 'bhhuajuan_' + name;
                                            game.log(str);
                                            event.trigger(str);
                                        }
                                    }
                                } else if (_status.connectMode) {
                                    var tlist = [];
                                    tlist = get.charactersOL(function (i) {
                                        return lib.character[i][3].contains(event.skillname);
                                    });
                                    for (i of tlist) {
                                        str = 'bhhuajuan_' + i;
                                        event.trigger(str);
                                    }
                                } else {
                                    var tlist = [];
                                    tlist = get.gainableCharacters(function (info) {
                                        return info[3].contains(event.skillname);
                                    });
                                    for (i of tlist) {
                                        str = 'bhhuajuan_' + i;
                                        event.trigger(str);
                                    }
                                }
                            },
                        },
                        bhhuishi: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: 'phaseUse',
                            filter: function (event, player) {
                                return !player.hasSkill('bhhuishi_im');
                            },
                            content: function () {
                                'step 0'
                                if (player.storage.bhbaijuan && player.storage.bhbaijuan.length > 0) {
                                    var target = player.storage.bhbaijuan[0];
                                    event.name = player.storage.bhbaijuan[0].name;
                                    player.storage.bhbaijuan.remove(target);
                                    player.syncStorage('bhbaijuan');
                                    if (!player.storage.bhbaijuan.length) player.unmarkSkill('bhbaijuan');
                                } else {
                                    player.addTempSkill('bhhuishi_im');
                                    var names = [];
                                    if (_status.characterlist) {
                                        for (var i = 0; i < _status.characterlist.length; i++) {
                                            var name = _status.characterlist[i];
                                            if (lib.character[name][1].search('bh') != -1) names.push(name);
                                        }
                                    } else if (_status.connectMode) {
                                        names = get.charactersOL(function (i) {
                                            return lib.character[i][1].search('bh') != -1;
                                        });
                                    } else {
                                        names = get.gainableCharacters(function (info) {
                                            return info[1].search('bh') != -1;
                                        });
                                    }
                                    event.name = names.randomGet();
                                }
                                //game.log(event.name);
                                var name2 = 'bhhuajuan_' + event.name;
                                event.card = get.cardPile(function (card) {
                                    return card.name.search('bhhuajuan') != -1 && card.name.search(event.name) != -1;
                                });
                                var imagestr = 'ext:崩崩崩/image/' + event.name + '.jpg';
                                if (!event.card) {
                                    var info = {
                                        derivation: player,
                                        enable: true,
                                        type: 'trick',
                                        fullimage: true,
                                        selectTarget: -1,
                                        toself: true,
                                        filterTarget: function (card, player, target) {
                                            return target == player;
                                        },
                                        modTarget: true,
                                        content: function () {
                                            'step 0'
                                            event.name = card.name.slice(card.name.search('bhhuajuan_') + 10);
                                            game.log(event.name);
                                            var str = 'bhhuajuan_' + event.name;
                                            event.target = target;
                                            event.target.addSkill('bhhuajuan_remove');
                                            //player.storage.bhhuajuan_remove=event.name;
                                            for (i of lib.character[event.name][3]) {
                                                event.target.addTempSkill(i, str);
                                            }
                                        },
                                        image: imagestr,
                                        legend: true,
                                        ai: {
                                            order: 10,
                                            useful: 8,
                                            value: 8,
                                            result: {
                                                player: function (player) {
                                                    if (player.hasSkill('bhhuishi') || player.hasSkill('bhfanxing')) {
                                                        var cards = player.getCards('hs');
                                                        var num = 0;
                                                        for (i of cards) {
                                                            if (i.name.search('bhhuajuan_') != -1) num++;
                                                        }
                                                        if (cards.length > 3) return num - 1;
                                                        else return num - 2;
                                                    }
                                                    else return 1;
                                                },
                                            },
                                        },
                                    }
                                    lib.card[name2] = info;
                                    lib.translate[name2] = '画卷•' + get.translation(event.name);
                                    var str = "出牌阶段，对自己使用，获得一次可以在合适的时机发动<span style=\"color: yellow\">";
                                    str += get.translation(event.name);
                                    str += "</span>的一个技能的机会。"
                                    lib.translate[name2 + '_info'] = str;
                                    event.card = game.createCard({ name: name2, suit: lib.suit.randomGet(), number: 13 });
                                }
                                player.gain(event.card, 'gain2');
                            },
                            subSkill: {
                                im: {
                                    charlotte: true,
                                },
                            },
                            ai: {
                                order: 10,
                                result: {
                                    player: 4,
                                },
                            },
                        },
                        bhshanghen: {
                            trigger: {
                                player: 'dyingBegin',
                            },
                            init: function (player) {
                                player.storage.bhshanghen = false;
                            },
                            intro: {
                                content: "limited",
                            },
                            charlotte: true,
                            unique: true,
                            limited: true,
                            skillAnimation: true,
                            animationStr: "伤痕",
                            animationColor: "gray",
                            //filter:function(event,player){},
                            check: function (event, player) {
                                if (player.countCards('hs', { name: ['tao', 'jiu', 'bhbenghuaijiejing'] }) && game.dead.length < 2) return false;
                                return true;
                            },
                            content: function () {
                                'step 0'
                                player.awakenSkill('bhshanghen');
                                player.storage.bhshanghen = true;
                                event.targets = [];
                                if (trigger.source) event.targets.push(trigger.source);
                                event.targets.addArray(game.dead);
                                'step 1'
                                var skills = [];
                                var list = event.targets;
                                var bannedList = [
                                    'bhjinhua', 'bifa', 'buqu', 'bhbuqu', 'songci', 'funan', 'xinfu_guhuo', 'reguhuo', 'huashen', 'rehuashen', 'old_guhuo', 'shouxi', 'xinpojun', 'taoluan', 'xintaoluan', 'yinbing', 'xinfu_yingshi', 'zhenwei', 'zhengnan', 'xinzhengnan', 'zhoufu',
                                ];
                                for (var i of event.targets) {
                                    skills.addArray(i.getSkills(null, false, false).filter(function (skill) {
                                        var info = lib.skill[skill];
                                        var _info = skill + '_info'
                                        if (skill == 'benghuai' && player.hasSkill('bhsbenghuai')) return false;
                                        if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                        if (bannedList.contains(skill)) return false;
                                        return info && !info.juexingji && !info.limited && !info.zhuSkill && !skills.contains(skill);
                                    }));
                                }
                                //game.log(skills);
                                if (!event.targets.length || !skills.length) {
                                    event.finish();
                                    return;
                                }
                                player.chooseButton([0, 4], ['请选择至多四个技能', [skills, "vcard"]], true, function (button) {
                                    if(!ui.selected.buttons.length) return 1;
                                    else if(ui.selected.buttons.length<2) return Math.random();
                                    else return -0.5;
                                });
                                'step 2'
                                event.num = 5 - result.links.length;
                                if (result.links.length) {
                                    for (var i of result.links) player.addSkill(i);
                                }
                                'step 3'
                                player.reinit('bhmalixuelai', 'bhfulankensitan', event.num);
                                'step 4'
                                if (player.hp < player.maxHp) player.recover(player.maxHp - player.hp);
                            },
                            ai: {
                                threaten: 1.9,
                            },
                        },
                        bhyouguo: {
                            forced: true,
                            trigger: {
                                player: 'damageBegin4',
                            },
                            priority: 1,
                            filter: function (event, player) {
                                return event.num > player.hp;
                            },
                            content: function () {
                                trigger.nature = 'fire';
                            },
                            group:'bhyouguo_die',
                            subSkill:{
                                die:{
                                    sub:true,
                                    forced:true,
                                    trigger:{
                                        player:'dieBegin',
                                    },
                                    filter:function(event,player){
                                        return player.countCards('he')&&game.hasPlayer(function(current){
                                            return current.isLinked()&&current!=player;
                                        });
                                    },
                                    content:function(){
                                        'step 0'
                                        player.chooseCardTarget({
                                            selectCard:[1,player.countCards('he')],
                                            filterCard:true,
                                            position:'he',
                                            filterTarget: function (card, player, target) {
                                                return target!=player&&target.isLinked();
                                            },
                                            ai1: function (card) {
                                                if(!game.hasPlayer(function(current){
                                                    return get.attitude(player,current)>0;
                                                })) return -20;

                                                if(!ui.selected.cards.length) return get.value(card)+[-1,0,1].randomGet();
                                                else if(ui.selected.cards.length>=2&&game.filterPlayer(function(current){
                                                    return get.attitude(player,current)>0;
                                                }).length>1) return -1;
                                                else return get.value(card)+[-2,,-1.1,0,1.1,2].randomGet();
                                            },
                                            ai2: function (player,target) {
                                                var att = get.attitude(player, target);
                                                if(att<0) return -10;
                                                return target.hp<3||target.countCards('h')<3?att+2:att;
                                            },
                                            prompt2: '你可以将任意张牌分配给一名横置角色',
                                        });
                                        'step 1'
                                        if(result.bool) {
                                            result.targets[0].gain(result.cards,player,'give');
                                            if(player.countCards('he')) event.goto(0);
                                        }
                                    },
                                },
                            },
                        },
                        bhzhuangyi: {
                            enable: "phaseUse",
                            usable: 1,
                            filterTarget: function (card, player, target) {
                                return target != player && !game.hasPlayer(function (current) {
                                    return current.countCards('h') > target.countCards('h');
                                });
                            },
                            selectCard: -1,
                            filterCard: false,
                            content: function () {
                                player.link();
                                player.addTempSkill('bhzhuangyi_com');
                                player.addTempSkill('bhzhuangyi_res');
                                player.storage.bhzhuangyi_com = targets[0];
                                player.storage.bhzhuangyi_res = [0, false];
                            },
                            subSkill: {
                                res: {
                                    sub: true,
                                    forced: true,
                                    silent: true,
                                    charlotte:true,
                                    trigger: {
                                        player: 'phaseUseEnd',
                                    },
                                    content: function () {
                                        'step 0'
                                        event.target = player.storage.bhzhuangyi_com;
                                        event.num=player.storage.bhzhuangyi_res[0];
                                        event.bool=true;
                                        if (event.num>0 && !player.storage.bhzhuangyi_res[1] ) {
                                            player.logSkill('bhzhuangyi');
                                            event.target.chooseBool('是否视为对'+get.translation(player)+'使用一张伤害值为'+event.num+'的【决斗】？').set('ai',function(){
                                                var att=get.attitude(event.target,player);
                                                if(att>0||get.effect(player,{name:'juedou',isCard:true},event.target,event.target)<0) return false;
                                                if(!event.target.countCards('hs',{name:'sha'})&&(player.countCards('hs',{name:'sha'})>0&&[0,1,1].randomGet()>0)) return false;
                                                return true;
                                            })
                                        } else event.bool=false;
                                        'step 1'
                                        if(!event.bool||!result.bool) event.goto(3);
                                        'step 2'
                                        event.target.useCard({name:'juedou',isCard:true},player).baseDamage=event.num;
                                        'step 3'
                                        player.removeSkill('bhzhuangyi_com');
                                        player.removeSkill('bhzhuangyi_res');
                                        delete player.storage.bhzhuangyi_com;
                                        delete player.storage.bhzhuangyi_res;
                                    },
                                },
                                com: {
                                    enable: 'phaseUse',
                                    prompt: function (player) {
                                        var player = _status.currentPhase;
                                        return '你可以与' + get.translation(player.storage.bhzhuangyi_com) + '拼点';
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhzhuangyi_com.isAlive() && player.canCompare(player.storage.bhzhuangyi_com);
                                    },
                                    content: function () {
                                        'step 0'
                                        event.target = player.storage.bhzhuangyi_com;
                                        player.line(event.target);
                                        player.chooseToCompare(event.target);
                                        player.storage.bhzhuangyi_res[0] ++;
                                        'step 1'
                                        if (result.bool) {
                                            player.storage.bhzhuangyi_res[1] = true;
                                        } else event.finish();
                                        'step 2'
                                        event.cards = event.target.getCards('h');
                                        event.targets = game.filterPlayer(function (current) {
                                            return current != event.target;
                                        });
                                        event.targets.sortBySeat();
                                        'step 3'
                                        var r =  event.target.getCards('h').length / event.targets.length;
                                        if (r >= 1) {
                                            event.index = 0;
                                            event.num = parseInt(r);
                                        } else event.goto(7);
                                        'step 4'
                                        player.chooseCardButton('壮义：请将' + get.cnNumber(event.num) + '张牌分配给' + get.translation(event.targets[event.index]), event.num, event.target.getCards('h'), true).set('ai', function (button) {
                                            if (get.attitude(player, event.targets[event.index]) > 0) return get.value(button.link);
                                            else return 20 - get.value(button.link);
                                        });
                                        'step 5'
                                        player.line(event.targets[event.index]);
                                        event.targets[event.index].gain(result.links, event.target, 'gain2');
                                        if(!event.targets[event.index].isLinked()) event.targets[event.index].link();
                                        'step 6'
                                        event.index++;
                                        if (event.index < event.targets.length) event.goto(4);
                                        'step 7'
                                        if ( event.target.getCards('h').length > 0) {
                                            player.chooseTarget('请选择参与分配剩余牌的角色',  event.target.getCards('h').length, function (card, player, target) {
                                                return target != event.target;
                                            }, true).set('ai', function (target) {
                                                return get.attitude(player, target);
                                            });
                                        } else event.finish();
                                        'step 8'
                                        event.targets = result.targets;
                                        event.targets.sortBySeat();
                                        event.index = 0;
                                        'step 9'
                                        player.chooseCardButton('壮义：请将一张牌分配给' + get.translation(event.targets[event.index]), event.target.getCards('h'), true).set('ai', function (button) {
                                            if (get.attitude(player, event.targets[event.index]) > 0) return get.value(button.link);
                                            else return 20 - get.value(button.link);
                                        });
                                        'step 10'
                                        player.line(event.targets[event.index]);
                                        event.targets[event.index].gain(result.links, event.target, 'gain2');
                                        if(!event.targets[event.index].isLinked()) event.targets[event.index].link();
                                        'step 11'
                                        event.index++;
                                        if (event.index < event.targets.length) event.goto(9);
                                    },
                                    ai: {
                                        order: 5.9,
                                        result: {
                                            player: function(player,target){
                                                var bf= player.countCards('h',{number:[9,10,11,12,13]});
                                                if(!player.storage.bhzhuangyi_res[0]) return bf?2.1:0.8;
                                                else if(player.storage.bhzhuangyi_res[1]) return 1.9;
                                                else if(player.storage.bhzhuangyi_res[0]<player.hp+1||bf) return 0.9;
                                                else return -1.2;
                                            },
                                        },
                                    },
                                },
                            },
                            ai: {
                                order: 9.7,
                                result: {
                                    target: -8,
                                },
                            },
                        },
                        bhziran: {
                            mark: true,
                            locked: true,
                            zhuanhuanji: true,
                            marktext: "自然",
                            intro: {
                                content: function (storage, player, skill) {
                                    if (player.storage.bhziran) return '若你至少拥有3个“阴”状态的转换技，你可以将你的所有技能转换为“阳”';
                                    return '若你至少拥有3个“阳”状态的转换技，你可以将你的所有技能转换为“阴”';
                                },
                            },
                            enable: 'phaseUse',
                            usable: 1,
                            filter: function (event, player) {
                                var list = player.getSkills(null, false, false).filter(function (skill) {
                                    var info = lib.skill[skill];
                                    var _info = skill + '_info'
                                    if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                    //if (bannedList.contains(skill)) return false;
                                    return info && info.zhuanhuanji;
                                });
                                var num = 0;
                                if (list.length < 3) return false;
                                for (i of list) {
                                    if (!player.storage.bhziran && !player.storage[i]) num++;
                                    else if (player.storage.bhziran && player.storage[i]) num++;
                                }
                                return num >= 3;
                            },
                            content: function () {
                                var list = player.getSkills(null, false, false).filter(function (skill) {
                                    var info = lib.skill[skill];
                                    var _info = skill + '_info'
                                    if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                    //if (bannedList.contains(skill)) return false;
                                    return info && info.zhuanhuanji;
                                });
                                var bool = player.storage.bhziran;
                                for (i of list) {
                                    if (!bool) player.storage[i] = true;
                                    else if (bool) player.storage[i] = false;
                                    player.syncStorage(i);
                                }
                            },
                            ai: {
                                order: 4,
                                result: {
                                    player: 1,
                                },
                            },
                        },
                        bhwuwei: {
                            forced: true,
                            mark: true,
                            locked: true,
                            zhuanhuanji: true,
                            marktext: "无为",
                            intro: {
                                content: function (storage, player, skill) {
                                    if (player.storage.bhwuwei) return '一名角色的回合开始时，你本回合造成的伤害-1';
                                    return '一名角色的回合开始时，你的防具牌失效直到本回合结束';
                                },
                            },
                            trigger: {
                                global: 'phaseBegin',
                            },
                            content: function () {
                                'step 0'
                                if (player.storage.bhwuwei) player.addTempSkill('bhwuwei_damage');
                                else player.addTempSkill('qinggang2');
                                'step 1'
                                var bool = player.storage.bhwuwei;
                                player.storage.bhwuwei = !bool;
                                player.syncStorage('bhwuwei');
                            },
                            subSkill: {
                                damage: {
                                    sub: true,
                                    trigger: {
                                        source: 'damageBegin1',
                                    },
                                    forced: true,
                                    content: function () {
                                        trigger.num--;
                                    },
                                }
                            },
                        },
                        bhningjing: {
                            forced: true,
                            silent: true,
                            mark: true,
                            locked: true,
                            zhuanhuanji: true,
                            marktext: "宁静",
                            intro: {
                                content: function (storage, player, skill) {
                                    if (player.storage.bhningjing) return '当你受到一次伤害后，你弃置所有手牌';
                                    return '你的手牌数变化后，你立即将其补至你的体力上限（至多补至5张）';
                                },
                            },
                            trigger: {
                                player: 'bhningjing',
                            },
                            content: function () {
                                var bool = player.storage.bhningjing;
                                player.storage.bhningjing = !bool;
                                player.syncStorage('bhningjing');
                            },
                            group: ['bhningjing_damage', 'bhningjing_card'],
                            subSkill: {
                                card: {
                                    sub: true,
                                    forced: true,
                                    trigger: {
                                        player: ['loseAfter', 'gainAfter', 'addToExpansionAfter'],
                                    },
                                    filter: function (event, player) {
                                        return !player.storage.bhningjing && player.countCards('h') < player.maxHp;
                                    },
                                    content: function () {
                                        event.trigger('bhningjing');
                                        player.draw(Math.min(player.maxHp, 5) - player.countCards('h'));
                                    },
                                },
                                damage: {
                                    sub: true,
                                    forced: true,
                                    trigger: {
                                        player: 'damageEnd',
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhningjing && player.countCards('h');
                                    },
                                    content: function () {
                                        event.trigger('bhningjing');
                                        player.discard(player.getCards('h'));
                                    },
                                },
                            },
                        },
                        bhyouwu: {
                            mark: true,
                            locked: true,
                            zhuanhuanji: true,
                            marktext: "有无",
                            intro: {
                                content: function (storage, player, skill) {
                                    if (player.storage.bhyouwu) return '出牌阶段限一次，你可以将所有手牌（至少两张）当作一张【无中生有】使用';
                                    return '出牌阶段限一次，你可以将一张牌当作【无中生有】使用';
                                },
                            },
                            enable: 'phaseUse',
                            usable: 1,
                            filter: function (event, player) {
                                if (player.storage.bhyouwu) return player.countCards('h') >= 2;
                                else return player.countCards('hes');
                            },
                            prompt: function (player) {
                                var player = _status.currentPhase;
                                if (player.storage.bhyouwu) return '出牌阶段限一次，你可以将所有手牌（至少两张）当作一张【无中生有】使用';
                                return '出牌阶段限一次，你可以将一张牌当作【无中生有】使用';
                            },
                            content: function () {
                                'step 0'
                                if (!player.storage.bhyouwu) {
                                    player.chooseCard('请选择一张牌当做【无中生有】使用', 'hes', true).set('ai', function (card) {
                                        return 10 - get.value(card);
                                    });
                                } else {
                                    event.cards = player.getCards('h');
                                    event.goto(2);
                                }
                                'step 1'
                                event.cards = result.cards;
                                'step 2'
                                player.useCard({ name: 'wuzhong', isCard: false }, event.cards, player, false).viewAs = true;
                                var bool = player.storage.bhyouwu;
                                player.storage.bhyouwu = !bool;
                                player.syncStorage('bhyouwu');
                            },
                            ai: {
                                order: function (item, player) {
                                    if (!player.storage.bhyouwu) return 8;
                                    else return 1;
                                },
                                result: {
                                    player: function (player, target) {
                                        if (!player.storage.bhyouwu) return 2;
                                        else return player.countCards('h') > 4 ? -2 : 1;
                                    },
                                }
                            },
                        },
                        bhgangrou: {
                            forced: true,
                            silent: true,
                            mark: true,
                            locked: true,
                            zhuanhuanji: true,
                            marktext: "刚柔",
                            intro: {
                                content: function (storage, player, skill) {
                                    if (player.storage.bhgangrou) return '弃牌阶段结束时，你可以将你本阶段内弃置的牌交给一名其他角色';
                                    return '当你使用一张基本牌或普通锦囊牌时，你可以令其不可被响应';
                                },
                            },
                            trigger: {
                                player: 'bhgangrou',
                            },
                            content: function () {
                                var bool = player.storage.bhgangrou;
                                player.storage.bhgangrou = !bool;
                                player.syncStorage('bhgangrou');
                            },
                            group: ['bhgangrou_gang', 'bhgangrou_rou'],
                            subSkill: {
                                gang: {
                                    sub: true,
                                    trigger: {
                                        player: 'useCard',
                                    },
                                    prompt: '当你使用一张基本牌或普通锦囊牌时，你可以令其不可被响应',
                                    filter: function (event, player) {
                                        if (player.storage.bhgangrou) return false;
                                        if (['trick', 'basic'].contains(get.type(event.card))) return true;
                                        return false;
                                    },
                                    content: function () {
                                        trigger.directHit.addArray(game.filterPlayer());
                                        event.trigger('bhgangrou');
                                    },
                                },
                                rou: {
                                    trigger: {
                                        player: 'phaseDiscardEnd',
                                    },
                                    check: function (event, player) {
                                        return game.hasPlayer(function (current) {
                                            return get.attitude(player, current) > 0;
                                        });
                                    },
                                    prompt: '弃牌阶段结束时，你可以将你本阶段内弃置的牌交给一名其他角色',
                                    filter: function (event, player) {
                                        if (!player.storage.bhgangrou) return false;
                                        return player.hasHistory('lose', function (evt) {
                                            return evt.type == 'discard' && evt.cards2.filterInD('d').length > 0 && evt.getParent('phaseDiscard') == event;
                                        });
                                    },
                                    content: function () {
                                        'step 0'
                                        var cards = [];
                                        player.getHistory('lose', function (evt) {
                                            if (evt.type == 'discard' && evt.getParent('phaseDiscard') == trigger) cards.addArray(evt.cards2.filterInD('d'));
                                        });
                                        event.cards = cards;
                                        player.chooseTarget('刚柔：将' + get.translation(cards) + '交给一名其他角色', function (card, player, target) {
                                            return player != target;
                                        }).set('ai', function (target) {
                                            var att = get.attitude(player, target);
                                            if (att < 0) return -20;
                                            return 30 + att - target.countCards('hes');
                                        });
                                        'step 1'
                                        if (result.bool) {
                                            player.logSkill('bhgangrou');
                                            event.target = result.targets[0];
                                            player.line(event.target);
                                            event.target.gain(event.cards, 'gain2');
                                            event.trigger('bhgangrou');
                                        }
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhhongyu: {
                            trigger: {
                                player: 'dyingBegin',
                            },
                            silent: true,
                            frequent: true,
                            filter: function (event, player) {
                                return game.hasPlayer(function (target) {
                                    return target.hasSex('female') && player.canUse({ name: 'sha' }, target, false);
                                });
                            },
                            content: function () {
                                'step 0'
                                player.addTempSkill('bhhongyu_damage', 'useCardAfter');
                                player.chooseToUse(function (card, player, event) {
                                    if (get.name(card) != 'sha') return false;
                                    return lib.filter.filterCard.apply(this, arguments);
                                }, '红浴：是否对一名女性其他角色使用一张杀？').set('logSkill', 'bhhongyu').set('complexSelect', true).set('filterTarget', function (card, player, target) {
                                    if (!target.hasSex('female')) return false;
                                    if (target == player) return false;
                                    return lib.filter.targetEnabled.apply(this, arguments);
                                }).set('ai', function (card, player, target) {
                                    return get.attitude(player, target) < 0;
                                });
                                'step 1'
                                if (result.bool) {
                                    player.recover();
                                } else {
                                    player.removeSkill('bhhongyu_damage', 'useCardAfter');
                                    event.finish();
                                }
                                'step 2'
                                player.loseHp();
                            },
                            subSkill: {
                                damage: {
                                    sub: true,
                                    forced: true,
                                    silent: true,
                                    trigger: {
                                        source: 'damage',
                                    },
                                    content: function () {
                                        player.gainMaxHp();
                                        player.recover();
                                        player.removeSkill('bhhongyu_damage');
                                    },
                                },
                            },
                        },
                        bhyehuang: {
                            trigger: {
                                global: "damageBegin",
                            },
                            filter: function (event, player) {
                                return event.source && event.source != player && player.countCards('he');
                            },
                            check: function (event, player) {
                                if (get.attitude(player, event.source) > 0 && get.attitude(player, event.player) < 0) return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                event.target = trigger.source;
                                player.chooseCard('请选择一张牌交给' + get.translation(event.target), 'he').set('ai', function (card) {
                                    return 7 - get.value(card);
                                });
                                'step 1'
                                if (result.bool) {
                                    player.line(event.target);
                                    event.target.gain(result.cards[0], player, 'give');
                                    trigger.source = player;
                                }
                            },
                        },
                        bhmimeng: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            trigger: {
                                player: ['damage', 'recoverAfter', 'loseHp'],
                            },
                            filter: function (event, player) {
                                return event.num > player.countCards('h');
                            },
                            content: function () {
                                player.draw(trigger.num - player.countCards('h'));
                            },
                        },
                        bhweiguang: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: 'dyingBegin',
                            },
                            frequent: true,
                            content: function () {
                                'step 0'
                                var namelist = ['bhcishengyinyi', 'bhzhanche', 'bhshanchui', 'bhxuedijuji', 'bhciyuan', 'bhhuixingqudong', 'bhyinlangdeliming', 'bhyiduheiheqinshi', 'bhmichenghaitu', 'bhlizhilvzhe', 'heixi', 'baixi', 'bhyanyexingyuan', 'bhlanmeitegong', 'bhyingtaozhadan', 'bhkuangrelandiao', 'bhhuanhaimengdie', 'bhkekeliya'];
                                var targets = game.filterPlayer(function (current) {
                                    return namelist.contains(current.name);
                                });
                                var num = parseInt((targets.length + 1) / 2);
                                player.draw(num);
                                'step 1'
                                player.chooseCard('请选择至少一张手牌交给一名其他角色', 'h', [1, Infinity], true).set('ai', function (card) {
                                    var num2 = 10;
                                    if (player.hasSkill('bhmimeng') || player.hasSkill('shangshi')) num2 += 3;
                                    return num2 - get.value(card) + (get.color(card) == 'black' ? 4 : 0);
                                });
                                'step 2'
                                event.cards = result.cards;
                                player.showCards(event.cards);
                                event.num = 0;
                                for (i of event.cards) {
                                    if (get.color(i) == 'black') event.num++;
                                }
                                player.chooseTarget('将' + get.translation(event.cards) + '交给一名其他角色', function (card, player, target) {
                                    return player != target;
                                }, true).set('ai', function (target) {
                                    return get.attitude(player, target);
                                });
                                'step 3'
                                event.target = result.targets[0];
                                player.line(event.target);
                                event.target.gain(event.cards, player, 'give');
                                'step 4'
                                player.recover(event.num);
                            },
                            ai: {
                                threaten: 0.7,
                            },
                        },
                        bhwuhai: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            trigger: {
                                player: 'phaseJieshu',
                            },
                            content: function () {
                                'step 0'
                                //player.gainMaxHp();
                                player.loseHp(player.hp);
                                'step 1'
                                player.chooseTarget("雾海：你可以令一名其他角色失去一点体力", function (card, player, target) {
                                    return player != target;
                                }).set('ai', function (target) {
                                    return -get.attitude(player, target);
                                });
                                'step 2'
                                if (result.bool) {
                                    player.line(result.targets[0]);
                                    result.targets[0].loseHp();
                                }
                            },
                        },
                        bhluoxuan: {
                            forced: true,
                            mark: true,
                            locked: true,
                            zhuanhuanji: true,
                            marktext: "螺旋",
                            intro: {
                                content: function (storage, player, skill) {
                                    if (player.storage.bhluoxuan) return '锁定技，当有装备牌离开你的装备区时，你摸一张牌，然后失去“魔术”并获得“巧工”。';
                                    return '锁定技，当有装备牌进入你的装备区时，你摸一张牌，然后失去“巧工”并获得“魔术”';
                                },
                            },
                            group: ['bhluoxuan_gain', 'bhluoxuan_lose'],
                            subSkill: {
                                gain: {
                                    audio: "ext:崩崩崩/audio:1",
                                    sub: true,
                                    forced: true,
                                    trigger: {
                                        player: "equipAfter",
                                    },
                                    filter: function (event, player) {
                                        return !player.storage.bhluoxuan;
                                    },
                                    content: function () {
                                        if (player.hasSkill('bhqiaogong')) player.removeSkill('bhqiaogong');
                                        player.addSkill('bhmoshu');
                                        event.trigger('bhluoxuan');
                                    },
                                },
                                lose: {
                                    audio: "ext:崩崩崩/audio:1",
                                    sub: true,
                                    forced: true,
                                    trigger: {
                                        player: "loseAfter",
                                        global: ["equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter", "addToExpansionAfter"],
                                    },
                                    filter: function (event, player) {
                                        if (!player.storage.bhluoxuan) return false;
                                        var evt = event.getl(player);
                                        return evt && evt.player == player && evt.es && evt.es.length > 0;
                                    },
                                    content: function () {
                                        if (player.hasSkill('bhmoshu')) player.removeSkill('bhmoshu');
                                        player.addSkill('bhqiaogong');
                                        event.trigger('bhluoxuan');
                                    },
                                }
                            },
                            trigger: {
                                player: 'bhluoxuan',
                            },
                            silent: true,
                            content: function () {
                                var bool = player.storage.bhluoxuan;
                                player.storage.bhluoxuan = !bool;
                                player.syncStorage('bhluoxuan');
                                player.draw();
                            },
                        },
                        bhqiaogong: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: 'drawBegin',
                            },
                            filter: function (event, player) {
                                return event.num >= 2;
                            },
                            check: function (event, player) {
                                if (event.num > 2) return false;
                                return player.storage.bhqudong && player.storage.bhqudong[0].length > 2 && player.countCards('hs') > 2;
                            },
                            content: function () {
                                'step 0'
                                trigger.cancel();
                                event.card = get.cardPile2(function (card) {
                                    return get.type(card) == 'equip';
                                });
                                if (event.card) player.gain(event.card, 'gain2');
                                else {
                                    player.say('找不到装备了！');
                                    event.finish();
                                }
                                'step 1'
                                event.card2 = get.cardPile2(function (card) {
                                    return get.type(card) == 'trick';
                                });
                                if (event.card2) player.gain(event.card2, 'gain2');
                                else {
                                    player.say('找不到锦囊了！');
                                }
                                event.cards = player.getExpansions('bhqudong');
                                if (event.cards.length == 0) {
                                    player.useCard(event.card, player);
                                    event.finish();
                                } else {
                                    player.chooseControl('使用装备', '改变“硬直”').set('ai', function () {
                                        if (player == _status.currentPhase) return '使用装备';
                                        if (player.countCards('e', { subtype: get.subtype(event.card) }) == 0) return '使用装备';
                                        return '改变“硬直”';
                                    });
                                }
                                'step 2'
                                if (result.control == '使用装备') {
                                    player.useCard(event.card, player);
                                    event.finish();
                                } else {
                                    player.chooseCardButton('选择任意张“驱动”牌，改变其“硬直”', [1, Infinity], event.cards, true).set('ai', function (button) {
                                        return player.getUseValue(button.link) > 3 && get.number(button.link) > 8;
                                    });
                                }
                                'step 3'
                                event.cards2 = result.links;
                                player.chooseControl('减2', '加2').set('ai', function () {
                                    return '减2';
                                }).set('prompt', '请选择改变“硬直”的操作');
                                'step 4'
                                var change;
                                if (result.control == '减2') change = -2;
                                else change = 2;
                                var num = cards.length - 1;
                                var index = [];
                                for (var j = 0; j < event.cards2.length; j++) {
                                    for (var i = 0; i < cards.length; i++) {
                                        if (cards[i] == event.cards2[j]) index.push(num - i);
                                    }
                                }
                                for (var i = 0; i < index.length; i++) {
                                    //game.log(player.storage.bhqudong[1][index[i]],'/',change);
                                    player.storage.bhqudong[1][index[i]] += change;
                                }
                                player.syncStorage('bhqudong');
                                'step 5'
                                event.trigger('bhqudong');
                            },
                        },
                        bhmoshu: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: 'phaseUse',
                            usable: 1,
                            delay: 0,
                            filterTarget(card, player, target) {
                                return target != player && player.inRange(target);
                            },
                            content: function () {
                                'step 0'
                                event.num = player.countCards('e');
                                player.swapEquip(targets[0]);
                                'step 1'
                                game.delayx();
                                var num = player.countCards('e');
                                if (num > event.num) event.finish();
                                'step 2'
                                event.cards = player.getExpansions('bhqudong');
                                if (event.cards.length == 0) {
                                    player.draw(2);
                                    event.finish();
                                } else {
                                    player.chooseControl('摸牌', '归零“硬直”').set('ai', function () {
                                        for (i of event.cards) {
                                            if (player.getUseValue(i) > 6) return '归零“硬直”';
                                        }
                                        return '摸牌';
                                    });
                                }
                                'step 3'
                                if (result.control == '摸牌') {
                                    player.draw(2);
                                    event.finish();
                                } else {
                                    player.chooseCardButton('选择一张“驱动”牌，将其“硬直”归零', event.cards, true).set('ai', function (button) {
                                        return player.getUseValue(button.link);
                                    });
                                }
                                'step 4'
                                var num = cards.length - 1;
                                var index;
                                for (var i = 0; i < cards.length; i++) {
                                    if (cards[i] == result.links[0]) index = num - i;
                                }
                                player.storage.bhqudong[1][index] = 0;
                                player.syncStorage('bhqudong');
                                'step 5'
                                event.trigger('bhqudong');
                            },
                            ai: {
                                order: 10,
                                expose: 0.2,
                                result: {
                                    target: function (player, target) {
                                        var target2 = player;
                                        var eff_target = (get.value(target2.getCards('e'), target) - get.value(target.getCards('e'), target));
                                        if (get.sgn(eff_target) == get.sgn(-get.value(target2.getCards('e'), target2))) return 0;
                                        return eff_target;
                                    },
                                },
                            },
                        },
                        bhqudong: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            filter: function (event, player) {
                                return player.countCards('hs', { type: 'trick' }) > 0 && player.countCards('hs', { type: 'trick' }) > player.countCards('hs', { name: 'wuxie' });
                            },
                            filterCard: function (card) {
                                return get.type(card) == 'trick' && card.name != 'wuxie';
                            },
                            position: 'hs',
                            discard: false,
                            marktext: "驱动",
                            delay: false,
                            content: function () {
                                event.card = cards[0];
                                player.addToExpansion(event.card, player, 'giveAuto').gaintag.add('bhqudong');
                                if (!player.storage.bhqudong) player.storage.bhqudong = [[], []];
                                player.storage.bhqudong[0].push(event.card);
                                player.storage.bhqudong[1].push(get.number(event.card));
                                player.markSkill('bhqudong');
                            },
                            onremove: function (player, skill) {
                                var cards = player.getExpansions(skill);
                                if (cards.length) player.loseToDiscardpile(cards);
                                delete player.storage[skill];
                            },
                            intro: {
                                markcount: function (storage) {
                                    if (!storage) return 0;
                                    return storage[0].length;
                                },
                                mark: function (dialog, storage, player) {
                                    if (!storage) return;
                                    dialog.addAuto(storage[0]);
                                    dialog.addText('硬直：');
                                    dialog.addText(storage[1]);
                                },
                                onunmark: function (storage, player) {
                                    player.storage.bhqudong = [[], []];
                                },
                            },
                            mod: {
                                cardEnabled: function (card, player) {
                                    if (get.type(card) == 'trick' && card.name != 'wuxie' && !player.storage.bhqudong_use) return false;
                                },
                            },
                            ai: {
                                order: 10,
                                result: {
                                    player: 2,
                                },
                            },
                            group: ['bhqudong_use', 'bhqudong_begin'],
                            subSkill: {
                                begin: {
                                    silent: true,
                                    sub: true,
                                    trigger: {
                                        global: 'phaseBegin',
                                    },
                                    frequent: true,
                                    filter: function (event, player) {
                                        return player.getExpansions('bhqudong').length > 0;
                                    },
                                    content: function () {
                                        'step 0'
                                        for (var i = 0; i < player.storage.bhqudong[1].length; i++) {
                                            player.storage.bhqudong[1][i]--;
                                        }
                                        'step 1'
                                        player.syncStorage('bhqudong');
                                        event.trigger('bhqudong');
                                    },
                                },
                                use: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: 'bhqudong',
                                    },
                                    sub: true,
                                    forced: true,
                                    init: function (player) {
                                        player.storage.bhqudong_use = false;
                                    },
                                    filter: function (event, player) {
                                        var cards = player.getExpansions('bhqudong');
                                        var use = [];
                                        if (cards.length == 0) return false;
                                        for (var i = cards.length - 1; i >= 0; i--) {
                                            if (player.storage.bhqudong[1][i] <= 0) use.push(i);
                                        }
                                        return use.length > 0;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.storage.bhqudong_use = true;
                                        var cards = player.getExpansions('bhqudong');
                                        event.canuse = [];
                                        if (cards.length == 0) return false;
                                        for (var i = cards.length - 1; i >= 0; i--) {
                                            if (player.storage.bhqudong[1][i] <= 0) event.canuse.push(i);
                                        }
                                        event.num = 0;
                                        'step 1'
                                        var index = event.canuse[event.num];
                                        var num = player.getExpansions('bhqudong').length - 1;
                                        event.card = player.getExpansions('bhqudong')[num - index];
                                        //game.log(player.storage.bhqudong[0][index],'/',player.storage.bhqudong[1][index]);
                                        player.storage.bhqudong[0].remove(player.storage.bhqudong[0][index]);
                                        player.storage.bhqudong[1].remove(player.storage.bhqudong[1][index]);
                                        player.syncStorage('bhqudong');
                                        'step 2'
                                        if (game.hasPlayer(function (target) {
                                            return player.canUse(event.card, target);
                                        })) {
                                            player.chooseUseTarget(event.card, true, false);
                                        } else player.gain(event.card, 'giveAuto');
                                        'step 3'
                                        event.num++;
                                        if (event.num < event.canuse.length) event.goto(1);
                                        'step 4'
                                        player.storage.bhqudong_use = false;
                                    },
                                },
                                dis: {
                                    enable: 'phaseUse',
                                    content: function () {
                                        'step 0'
                                        var num = player.getExpansions('bhqudong').length - 1;
                                        for (var i = 0; i < player.storage.bhqudong[1].length; i++) {
                                            game.log(player.getExpansions('bhqudong')[num - i], '/', player.storage.bhqudong[0][i], '/', player.storage.bhqudong[1][i]);
                                            player.storage.bhqudong[1][i]--;
                                        }
                                        'step 1'
                                        player.syncStorage('bhqudong');
                                        event.trigger('bhqudong');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhshizui: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: ['rewriteDiscardResult', 'rewriteGainResult'],
                            },
                            filter: function (event, player) {
                                if (event.player == player || event.target != player) return false;
                                return player.getExpansions('bhreyuedu').length > 0;
                            },
                            content: function () {
                                'step 0'
                                var cards = player.getExpansions('bhreyuedu');
                                player.chooseCardButton(1, '选择一张“分身”移去', cards).ai = function (button) {
                                    var suits = [0, 0, 0, 0];
                                    for (i of cards) {
                                        if (get.suit(i) == 'heart') suits[0]++;
                                        if (get.suit(i) == 'spade') suits[1]++;
                                        if (get.suit(i) == 'club') suits[2]++;
                                        if (get.suit(i) == 'diamond') suits[3]++;
                                    }
                                    if (suits[0] > 1) return get.suit(button.link) == 'heart' ? 10 : -2;
                                    if (suits[1] > 1) return get.suit(button.link) == 'spade' ? 10 : -2;
                                    if (suits[2] > 1) return get.suit(button.link) == 'club' ? 10 : -2;
                                    if (suits[3] > 1) return get.suit(button.link) == 'diamond' ? 10 : -2;
                                    return 12 - get.value(button.link);
                                };
                                'step 1'
                                if (result.bool) {
                                    player.loseToDiscardpile(result.links);
                                    player.draw();
                                    trigger.cancel();
                                }
                            },
                        },
                        bhcaiduan: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: 'phaseUse',
                            usable: 1,
                            filter: function (event, player) {
                                var cards = player.getExpansions('bhreyuedu');
                                if (cards.length < 4) return false;
                                var suits = [];
                                for (i of cards)
                                    if (!suits.contains(get.suit(i))) suits.push(get.suit(i));
                                if (suits.length == 4) return true;
                                return false;
                            },
                            selectCard: -1,
                            filterCard: false,
                            selectTarget: 1,
                            filterTarget: function (card, player, target) {
                                return player.inRange(target) && player != target;
                            },
                            content: function () {
                                'step 0'
                                var cards = player.getExpansions('bhreyuedu');
                                player.chooseButton(true, 4, ['请选择四种花色的“分身”各一张移去', cards]).set('filterButton', function (button) {
                                    if (!ui.selected.buttons.length) return true;
                                    else {
                                        for (i of ui.selected.buttons)
                                            if (get.suit(i.link) == get.suit(button.link)) return false;
                                        return true;
                                    }
                                });
                                'step 1'
                                player.loseToDiscardpile(result.links);
                                targets[0].damage(2);
                            },
                        },
                        bhreyuedu: {
                            audio: "ext:崩崩崩/audio:2",
                            marktext: "分身",
                            intro: {
                                name: '分身',
                                content: 'expansion',
                                markcount: 'expansion',
                            },
                            onremove: function (player, skill) {
                                var cards = player.getExpansions(skill);
                                if (cards.length) player.loseToDiscardpile(cards);
                            },
                            trigger: {
                                player: ['useCardAfter', 'respondAfter'],
                            },
                            direct: true,
                            filter: function (event, player) {
                                if (event.cards.length != 1) return false;
                                if (player.getExpansions('bhreyuedu').length >= 8) return false;
                                if (event.card.name == 'wuxie') return true;
                                if (get.color(event.card) == 'red' && event.card.name == 'shan') return true;
                                if (get.color(event.card) == 'black' && event.card.name == 'sha') return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                event.card = trigger.card;
                                player.chooseBool('月读：是否将' + get.translation(event.card) + '置于角色卡上作为“分身”？').set('ai', function () {
                                    // var cards=player.getExpansions('bhreyuedu');
                                    // if(cards.length<3) return true;
                                    // var suits=[];
                                    // for(let i of cards){
                                    //     if(!suits.contains(get.suit(i))) suit.push(get.suit(i));
                                    // }
                                    // if(player.hasCard(function(card){
                                    //     if(suits.contains(get.suit(card))) return false;
                                    //     if(card.name=='wuxie') return true;
                                    //     if(get.color(card)=='red'&&card.name=='shan') return true;
                                    //     if(get.color(card)=='black'&&card.name=='sha') return true;
                                    //     return false;
                                    // })&&suits.contains(get.suit(event.card))) return false;
                                    return true;
                                });
                                'step 1'
                                if (result.bool) {
                                    player.logSkill('bhreyuedu');
                                    player.markSkill('bhreyuedu');
                                    var cards = Array.from(ui.ordering.childNodes);
                                    if (cards.length > 0) {
                                        var i = 0;
                                        while ((cards[i].name != event.card.name || get.suit(cards[i]) != get.suit(event.card) || get.number(cards[i]) != get.number(event.card)) && i < cards.length - 1) i++;
                                        event.card = cards[i];
                                    }
                                    //player.gain(event.card,'gain2');
                                    player.addToExpansion(event.card, 'gain2').gaintag.add('bhreyuedu');
                                    player.draw();
                                }
                            },
                        },
                        bhchuiai: {
                            trigger: {
                                global: 'phaseBegin',
                            },
                            frequent: true,
                            silent: true,
                            filter: function (event, player) {
                                return event.player.identity == 'zhu' && event.player != player;
                            },
                            content: function () {
                                'step 0'
                                event.target = trigger.player;
                                event.target.chooseBool('垂爱：是否令' + get.translation(player) + '摸一张牌？').set('ai', function () {
                                    return get.attitude(event.target, player) > 0;
                                });
                                'step 1'
                                if (result.bool) {
                                    player.logSkill('bhchuiai');
                                    event.target.line(player);
                                    player.draw(event.target);
                                }
                            },
                        },
                        bhlangke: {
                            enable: 'phaseUse',
                            group: ['bhlangke_use', 'bhlangke_begin'],
                            subSkill: {
                                begin: {
                                    silent: true,
                                    forced: true,
                                    trigger: {
                                        player: 'phaseUseEnd',
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhlangke_use;
                                    },
                                    content: function () {
                                        player.storage.bhlangke_use = 0;
                                    },
                                },
                                sha: {
                                    charlotte: true,
                                },
                                use: {
                                    sub: true,
                                    trigger: {
                                        player: "useCard2",
                                    },
                                    init: function (player) {
                                        player.storage.bhlangke_use = 0;
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.isPhaseUsing() && ['trick', 'delay'].contains(get.type(event.card));
                                    },
                                    content: function () {
                                        player.storage.bhlangke_use++;
                                    },
                                    mod: {
                                        globalFrom: function (from, to, distance) {
                                            if (_status.currentPhase == from) {
                                                return distance - from.storage.bhlangke_use;
                                            }
                                        },
                                    },
                                },
                            },
                            usable: 1,
                            filter: function (event, player) {
                                return !game.hasPlayer(function (current) {
                                    return get.distance(player, current) > 1;
                                });
                            },
                            content: function () {
                                player.draw(2);
                                player.addTempSkill('bhlangke_sha');
                            },
                            mod: {
                                cardUsable: function (card, player, num) {
                                    if (card.name == 'sha') {
                                        if (player.hasSkill('bhlangke_sha')) return num + 1;
                                        return num;
                                    }
                                },
                            },
                            ai: {
                                order: 10,
                                result: {
                                    player: 4,
                                },
                            },
                        },
                        bhshoufeng: {
                            juexingji: true,
                            skillAnimation: true,
                            animationColor: "wood",
                            unique: true,
                            forced: true,
                            trigger: {
                                player: "recoverAfter",
                            },
                            filter: function (event, player) {
                                return event.source.group == 'bhtianming';
                            },
                            content: function () {
                                'step 0'
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                                player.gainMaxHp();
                                player.group = 'bhtianming';
                                'step 1'
                                player.removeSkill('bhlangke');
                                player.addSkill('bhjiaojian');
                                game.log(player, '获得了技能', '#g【斠剑】');
                                player.recover();
                            },
                        },
                        bhyingsha: {
                            enable: 'phaseUse',
                            filter: function (event, player) {
                                if (player.storage.bhshoufeng && player.hasSkill('bhyingsha_im')) return false;
                                return player.countCards('hs', { color: 'black' });
                            },
                            filterCard: function (card) {
                                return get.color(card) == 'black';
                            },
                            position: 'h',
                            viewAs: {
                                name: "sha",
                                nature: "stab",
                            },
                            precontent: function () {
                                if (!player.hasSkill('bhyingsha_im')) player.addTempSkill('bhyingsha_im');
                            },
                            prompt: "将一张黑色手牌当【刺杀】使用",
                            ai: {
                                respondSha: true,
                                skillTagFilter: function (player) {
                                    if (!player.countCards('hes', { color: 'black' })) return false;
                                },
                                yingbian: function (card, player, targets, viewer) {
                                    if (get.attitude(viewer, player) <= 0) return 0;
                                    var base = 0, hit = false;
                                    if (get.cardtag(card, 'yingbian_hit')) {
                                        hit = true;
                                        if (targets.filter(function (target) {
                                            return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                        })) base += 5;
                                    }
                                    if (get.cardtag(card, 'yingbian_all')) {
                                        if (game.hasPlayer(function (current) {
                                            return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                        })) base += 5;
                                    }
                                    if (get.cardtag(card, 'yingbian_damage')) {
                                        if (targets.filter(function (target) {
                                            return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                                target: target,
                                                card: card,
                                            }, true)) && !target.hasSkillTag('filterDamage', null, {
                                                player: player,
                                                card: card,
                                                jiu: true,
                                            })
                                        })) base += 5;
                                    }
                                    return base;
                                },
                                canLink: function (player, target, card) {
                                    if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                    if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                        target: target,
                                        card: card,
                                    }, true)) return false;
                                    if (player.hasSkill('jueqing') || target.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                    return true;
                                },
                                basic: {
                                    useful: [5, 1.5],
                                    value: [5, 1.5],
                                },
                                order: function (item, player) {
                                    if (player.hasSkillTag('presha', true, null, true)) return 10;
                                    if (lib.linked.contains(get.nature(item))) {
                                        if (game.hasPlayer(function (current) {
                                            return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                        }) && game.countPlayer(function (current) {
                                            return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                        }) > 1) return 3.1;
                                        return 3;
                                    }
                                    return 3.05;
                                },
                                result: {
                                    target: function (player, target, card, isLink) {
                                        var eff = function () {
                                            if (!isLink && player.hasSkill('jiu')) {
                                                if (!target.hasSkillTag('filterDamage', null, {
                                                    player: player,
                                                    card: card,
                                                    jiu: true,
                                                })) {
                                                    if (get.attitude(player, target) > 0) {
                                                        return -7;
                                                    }
                                                    else {
                                                        return -4;
                                                    }
                                                }
                                                return -0.5;
                                            }
                                            return -1.5;
                                        }();
                                        if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) return eff / 1.2;
                                        return eff;
                                    },
                                },
                                tag: {
                                    respond: 1,
                                    respondShan: 1,
                                    damage: function (card) {
                                        if (card.nature == 'poison') return;
                                        return 1;
                                    },
                                    natureDamage: function (card) {
                                        if (card.nature) return 1;
                                    },
                                    fireDamage: function (card, nature) {
                                        if (card.nature == 'fire') return 1;
                                    },
                                    thunderDamage: function (card, nature) {
                                        if (card.nature == 'thunder') return 1;
                                    },
                                    poisonDamage: function (card, nature) {
                                        if (card.nature == 'poison') return 1;
                                    },
                                },
                            },
                            subSkill: {
                                im: {
                                    charlotte: true,
                                },
                            },
                        },
                        bhmingwang: {
                            trigger: {
                                global: 'useCardToPlayered',
                            },
                            filter: function (event, player) {
                                if (event.card.name != 'sha') return false;
                                if (event.player == player && !event.target.countCards('hej')) return false;
                                return event.player == player || event.target == player;
                            },
                            check: function (event, player) {
                                if (event.player == player) return get.attitude(player, event.target) < 0;
                                else return true;
                            },
                            content: function () {
                                'step 0'
                                event.bool = true;
                                event.bool2 = false;
                                if (trigger.player.hp > player.hp || trigger.target.hp > player.hp) event.bool2 = true;
                                player.judge(function (card) {
                                    if (get.suit(card) == 'heart') return -2;
                                    return 2;
                                }).judge2 = function (result) {
                                    return result.bool;
                                };
                                'step 1'
                                if (result.suit == 'heart') event.bool = false;
                                'step 2'
                                if (event.bool) {
                                    if (trigger.player == player) event.goto(4);
                                } else event.finish();
                                'step 3'
                                if (event.bool2) player.draw(2);
                                else player.draw();
                                event.finish();
                                'step 4'
                                if (event.bool2) player.discardPlayerCard(trigger.target, 'hej', 2, true);
                                else player.discardPlayerCard(trigger.target, 'hej', true);
                            },
                            ai: {
                                unequip: true,
                                unequip_ai: true,
                            }
                        },
                        bhduzhan: {
                            group: ['bhduzhan_draw', 'bhduzhan_discard'],
                            subSkill: {
                                discard: {
                                    trigger: {
                                        player: "phaseDiscardBefore",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        var players = game.filterPlayer(function (target) {
                                            return target.identity == player.identity;
                                        });
                                        if (players.length > 1) return false;
                                        return true;
                                    },
                                    content: function () {
                                        trigger.cancel();
                                    },
                                    ai: {
                                        threaten: 1.9,
                                    },
                                },
                                draw: {
                                    sub: true,
                                    trigger: {
                                        player: 'phaseDrawBegin2',
                                    },
                                    forced: true,
                                    preHidden: true,
                                    filter: function (event, player) {
                                        var players = game.filterPlayer(function (target) {
                                            return target.identity == player.identity;
                                        });
                                        if (players.length > 3) return false;
                                        return !event.numFixed;
                                    },
                                    content: function () {
                                        // var players=game.filterPlayer(function(target){
                                        //     return target.identity==player.identity;
                                        // });
                                        // event.num=players.length;
                                        // trigger.num+=(4-event.num);
                                        trigger.num++;
                                    },
                                },
                            },
                            trigger: {
                                player: 'phaseZhunbei',
                            },
                            filter: function (event, player) {
                                var players = game.filterPlayer(function (target) {
                                    return target.identity == player.identity;
                                });
                                return players.length < 6;
                            },
                            forced: true,
                            content: function () {
                                "step 0"
                                var players = game.filterPlayer(function (target) {
                                    return target.identity == player.identity;
                                });
                                event.num = players.length;
                                player.chooseTarget("独战：令一名其他角色摸牌或弃牌", function (card, player, target) {
                                    return player != target;
                                }, true).set('ai', function (target) {
                                    if (event.num == 1 && target.countCards('he') == 0) {
                                        return 0;
                                    }
                                    if (get.attitude(_status.event.player, target) > 0) {
                                        return 10 + get.attitude(_status.event.player, target);
                                    }
                                    if (event.num == 1) {
                                        return -1;
                                    }
                                    return 1;
                                });
                                "step 1"
                                event.target = result.targets[0];
                                player.line(event.target);
                                if (event.num == 1) {
                                    event.directcontrol = true;
                                }
                                else {
                                    var str1 = '摸' + get.cnNumber(event.num, true) + '弃一';
                                    var str2 = '摸一弃' + get.cnNumber(event.num, true);
                                    player.chooseControl(str1, str2, function (event, player) {
                                        return _status.event.choice;
                                    }).set('choice', get.attitude(player, event.target) > 0 ? str1 : str2);
                                    event.str = str1;
                                }
                                "step 2"
                                if (event.directcontrol || result.control == event.str) {
                                    event.target.draw(event.num);
                                    event.target.chooseToDiscard(true, 'he');
                                }
                                else {
                                    event.target.draw();
                                    event.target.chooseToDiscard(event.num, true, 'he');
                                }
                            },
                        },
                        bhweicheng: {
                            trigger: {
                                player: 'useCardToPlayered',
                            },
                            filter: function (event, player) {
                                if (event.card.name != 'sha') return false;
                                return event.target.countCards('e') || player.countCards('h') > event.target.countCards('h');
                            },
                            content: function () {
                                'step 0'
                                event.target = trigger.target;
                                event.target.chooseToDiscard('围城：请弃置一张装备牌或令' + get.translation(player) + '摸两张牌', 'hes', function (card, player, target) {
                                    return get.type(card) == 'equip';
                                }).set('ai', function (card) {
                                    var att = get.attitude(event.target, player);
                                    if (att > 0) return -20;
                                    return 8 - get.value(card);
                                });
                                'step 1'
                                if (!result.bool) player.draw(2);
                            },
                        },
                        bhtieti: {
                            enable: ['chooseToUse', 'chooseToRespond'],
                            filter: function (event, player) {
                                return player.countCards('hes') > 2;
                            },
                            viewAs: {
                                name: 'sha',
                            },
                            selectCard: 2,
                            position: "hes",
                            filterCard: true,
                            prompt: '将两张牌当做杀使用或打出',
                            ai: {
                                respondSha: true,
                                skillTagFilter: function (player, tag) {
                                    if (player.countCards('hes') < 2) return false;
                                },
                            },
                            group: 'bhtieti_sha',
                            subSkill: {
                                sha: {
                                    silent: true,
                                    forced: true,
                                    trigger: {
                                        player: "useCard",
                                    },
                                    filter: function (event, player) {
                                        return event.card && event.card.name == 'sha' && event.cards && event.cards.length > 1;
                                    },
                                    content: function () {
                                        'step 0'
                                        trigger.directHit.addArray(game.filterPlayer());
                                    },
                                    ai: {
                                        "directHit_ai": true,
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhhandu: {
                            trigger: {
                                global: 'damageBegin4',
                            },
                            filter: function (event, player) {
                                return get.distance(event.player, player) <= 1 || get.distance(player, event.player) <= 1;
                            },
                            check: function (event, player) {
                                var att = get.attitude(player, event.player);
                                if (att < 0) return event.num == 1 && player.hasCard(function (card) {
                                    return get.value(card) < 3;
                                });
                                return true;
                            },
                            content: function () {
                                'step 0'
                                event.target = trigger.player;
                                event.num = trigger.num;
                                player.draw();
                                if (event.target == player) event.goto(2);
                                else {
                                    player.chooseCard('寒都：请选择一张牌交给' + get.translation(event.target), 'he', true).set('ai', function (card) {
                                        var att = get.attitude(player, event.target);
                                        if (att < 0) return 6 - get.value(card);
                                        return 10 - get.value(card) + (card.name == 'jiu' && event.target.hp == 1 ? 4 : 0);
                                    });
                                }
                                'step 1'
                                player.line(event.target);
                                event.target.gain(result.cards, player, 'give');
                                'step 2'
                                if (trigger.num > 1) trigger.num = 1;
                            },
                        },
                        bhguixiang: {
                            juexingji: true,
                            derivation: ["bhhandu"],
                            skillAnimation: true,
                            animationColor: "gray",
                            unique: true,
                            forced: true,
                            trigger: {
                                source: "dieAfter",
                            },
                            content: function () {
                                'step 0'
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                                player.loseMaxHp();
                                'step 1'
                                player.addSkill('bhhandu');
                                game.log(player, '获得了技能', '#g【寒都】');
                            },
                        },
                        bhlingzhu: {
                            trigger: {
                                global: 'roundStart',
                            },
                            init: function (player) {
                                player.storage.bhlingzhu = [true];
                                player.unmarkSkill('bhlingzhu');
                                player.storage.bhlingzhu_markcount = 0;
                            },
                            marktext: '灵祝',
                            intro: {
                                content: '“灵祝”失效中',
                                markcount: 0,
                            },
                            forced: true,
                            content: function () {
                                'step 0'
                                if (player.storage.bhlingzhu[0]) {
                                    event.card = get.cardPile(function (card) {
                                        return card.suit == 'spade' && card.number == 11;
                                    });
                                    if (event.card) player.gain(event.card, 'gain2');
                                } else {
                                    player.unmarkSkill('bhlingzhu');
                                    player.storage.bhlingzhu[0] = true;
                                    event.finish();
                                }
                                'step 1'
                                event.card = get.cardPile(function (card) {
                                    return card.suit == 'spade' && card.number == 11;
                                });
                                if (event.card) player.gain(event.card, 'gain2');
                                player.storage.bhlingzhu[0] = false;
                                player.markSkill('bhlingzhu');
                            },
                            group: 'bhlingzhu_im',
                            subSkill: {
                                lm: {
                                    charlotte: true,
                                },
                                im: {
                                    silent: true,
                                    charlotte: true,
                                    forced: true,
                                    trigger: {
                                        global: 'roundStart',
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhlingzhu && player.storage.bhlingzhu[0] == false;
                                    },
                                    content: function () {
                                        player.removeSkill('bhlingzhu_lm');
                                    },
                                },
                            },
                        },
                        bhhuangting: {
                            enable: "chooseToUse",
                            filter: function (event, player) {
                                if (!event.filterCard({ name: 'sha' }, player, event) && !event.filterCard({ name: 'juedou' }, player, event)) return false;
                                return player.hasCard(function (card) {
                                    return get.suit(card) == 'spade' || get.number(card) == 11;
                                });
                            },
                            hiddenCard: function (player, name) {
                                if (name == 'sha' && player.hasCard(function (card) {
                                    return get.suit(card) == 'spade' || get.number(card) == 11;
                                })) return true;
                                if (name == 'juedou' && player.hasCard(function (card) {
                                    return get.suit(card) == 'spade' || get.number(card) == 11;
                                })) return true;
                                return false;
                            },
                            chooseButton: {
                                dialog: function (player) {
                                    var list = [];
                                    list.push(['锦囊', '', 'juedou']);
                                    list.push(['基本', '', 'sha']);
                                    return ui.create.dialog(get.translation('bhhuangting'), [list, 'vcard']);
                                },
                                filter: function (button, player) {
                                    return lib.filter.filterCard({ name: 'sha' }, player, _status.event.getParent()) || lib.filter.filterCard({ name: 'juedou' }, player, _status.event.getParent());
                                },
                                check: function (button) {
                                    return _status.event.player.getUseValue({ name: button.link[2] }) + (button.link[2] == 'sha' ? 3 : 0);
                                },
                                backup: function (links, player) {
                                    return {
                                        filterCard: function (card) {
                                            return get.suit(card) == 'spade' || get.number(card) == 11;
                                        },
                                        onuse: function (result, player) {
                                            if (links[0][2] == 'sha') player.draw();
                                        },
                                        selectCard: 1,
                                        position: 'hes',
                                        popname: true,
                                        viewAs: { name: links[0][2] },
                                    }
                                },
                                prompt: function (links, player) {
                                    return '将一张♠牌或J牌当作' + get.translation(links[0][2]) + '使用';
                                },
                            },
                            ai: {
                                respondSha: true,
                                skillTagFilter: function (player) {
                                    if (!player.hasCard(function (card) {
                                        return get.suit(card) == 'spade' || get.number(card) == 11;
                                    })) return false;
                                },
                                order: function (item, player) {
                                    return get.order({ name: 'sha' }, player) + 0.5;
                                },
                                result: {
                                    player: 1,
                                },
                            },
                        },
                        bhliedi: {
                            trigger: {
                                global: 'roundStart',
                            },
                            init: function (player) {
                                player.storage.bhliedi = [true];
                                player.unmarkSkill('bhliedi');
                                player.storage.bhliedi_markcount = 0;
                            },
                            marktext: '烈帝',
                            intro: {
                                content: '“烈帝”失效中',
                                markcount: 0,
                            },
                            forced: true,
                            content: function () {
                                'step 0'
                                if (player.storage.bhliedi[0]) {
                                    event.card = get.cardPile(function (card) {
                                        return card.suit == 'heart' && card.number == 13;
                                    });
                                    if (event.card) player.gain(event.card, 'gain2');
                                } else {
                                    player.unmarkSkill('bhliedi');
                                    player.storage.bhliedi[0] = true;
                                    event.finish();
                                }
                                'step 1'
                                event.card = get.cardPile(function (card) {
                                    return card.suit == 'heart' && card.number == 13;
                                });
                                if (event.card) player.gain(event.card, 'gain2');
                                player.storage.bhliedi[0] = false;
                                player.markSkill('bhliedi');
                            },
                            group: 'bhliedi_im',
                            subSkill: {
                                lm: {
                                    charlotte: true,
                                },
                                im: {
                                    silent: true,
                                    charlotte: true,
                                    forced: true,
                                    trigger: {
                                        global: 'roundStart',
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhliedi && player.storage.bhliedi[0] == false;
                                    },
                                    content: function () {
                                        player.removeSkill('bhliedi_lm');
                                    },
                                },
                            },
                        },
                        bhwutong: {
                            enable: "chooseToUse",
                            filter: function (event, player) {
                                if (!event.filterCard({ name: 'jiu' }, player, event)&&!event.filterCard({ name: 'juedou' }, player, event)) return false;
                                return player.hasCard(function (card) {
                                    return get.suit(card) == 'heart' || get.number(card) == 13;
                                });
                            },
                            hiddenCard: function (player, name) {
                                if (name == 'jiu' && player.hasCard(function (card) {
                                    return get.suit(card) == 'heart' || get.number(card) == 13;
                                })) return true;
                                if (name == 'juedou' && player.hasCard(function (card) {
                                    return get.suit(card) == 'heart' || get.number(card) == 13;
                                })) return true;
                                return false;
                            },
                            chooseButton: {
                                dialog: function (player) {
                                    var list = [];
                                    list.push(['基本', '', 'jiu']);
                                    return ui.create.dialog(get.translation('bhhuangting'), [list, 'vcard']);
                                },
                                filter: function (button, player) {
                                    return lib.filter.filterCard({ name: 'jiu' }, player, _status.event.getParent())||lib.filter.filterCard({ name: 'juedou' }, player, _status.event.getParent());
                                },
                                check: function (button) {
                                    return _status.event.player.getUseValue({ name: button.link[2] });
                                },
                                backup: function (links, player) {
                                    return {
                                        filterCard: function (card) {
                                            return get.suit(card) == 'heart' || get.number(card) == 13;
                                        },
                                        selectCard: 1,
                                        position: 'hes',
                                        popname: true,
                                        viewAs: { name: links[0][2] },
                                    }
                                },
                                prompt: function (links, player) {
                                    return '将一张♥牌或K牌当作' + get.translation(links[0][2]) + '使用';
                                },
                            },
                            ai: {
                                order: function () {
                                    return get.order({ name: 'sha' }) + 0.2;
                                },
                                result: {
                                    player: function (player, target) {
                                        if (player && !player.hasCard(function (card) {
                                            return card.suit == 'heart' || card.number == 13;
                                        })) return 0;
                                        var shas = player.getCards('hs', 'sha');
                                        if (shas.length == 1 && (get.suit(shas[0]) == 'heart' || get.number(shas[0]) == 13)) return 0;
                                        if (shas.length > 1 && (player.getCardUsable('sha') > 1 || player.countCards('hs', 'zhuge'))) {
                                            return 0;
                                        }
                                        shas.sort(function (a, b) {
                                            return get.order(b) - get.order(a);
                                        })
                                        var card;
                                        if (shas.length) {
                                            for (var i = 0; i < shas.length; i++) {
                                                if (lib.filter.filterCard(shas[i], player)) {
                                                    card = shas[i]; break;
                                                }
                                            }
                                        }
                                        else if (player.hasSha() && player.needsToDiscard()) {
                                            if (player.countCards('h', 'hufu') != 1) {
                                                card = { name: 'sha' };
                                            }
                                        }
                                        if (card) {
                                            if (game.hasPlayer(function (current) {
                                                return (get.attitude(player, current) < 0 &&
                                                    player.canUse(card, current, true, true) &&
                                                    !current.hasSkillTag('filterDamage', null, {
                                                        player: player,
                                                        card: card,
                                                        jiu: true,
                                                    }) &&
                                                    get.effect(current, card, player) > 0);
                                            })) {
                                                return 1;
                                            }
                                        }
                                        return 0;
                                    },
                                },
                            },
                        },
                        bhshengjian: {
                            mod: {
                                cardUsable: function (card, player) {
                                    var num=7;
                                    if(player.hasSkill('bhxinghai')&&player.storage.bhxinghai){
                                        num=13-player.storage.bhxinghai[1];
                                    }
                                    if(player.hasSkill('bhtiangong')&&player.storage.bhhuangxing[1].length){
                                        num=player.storage.bhhuangxing[1][0].number;
                                        for(let i of player.storage.bhhuangxing[1]){
                                            if(i.number<num) num=i.number;
                                        }
                                    }
                                    if (get.number(card) > num) return Infinity;
                                },
                                targetInRange: function (card, player) {
                                    var num=7;
                                    if(player.hasSkill('bhxinghai')&&player.storage.bhxinghai){
                                        num=player.storage.bhxinghai[1];
                                    }
                                    if(player.hasSkill('bhtiangong')&&player.storage.bhhuangxing[1].length){
                                        num=player.storage.bhhuangxing[1][0].number;
                                        for(let i of player.storage.bhhuangxing[1]){
                                            if(i.number>num) num=i.number;
                                        }
                                    }
                                    if (get.number(card) <= num) return true;
                                },
                            },
                        },
                        bhshishi: {
                            trigger: {
                                player: 'phaseDrawBegin',
                                global: 'damage',
                            },
                            check: function (event, player) {
                                return game.hasPlayer(function (target) {
                                    return get.attitude(player, target) > 0;
                                });
                            },
                            filter: function (event, player) {
                                if (event.name == 'phaseDraw') return true;
                                return event.getParent(3) && event.getParent(3).name == 'bhfuchou';
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('史诗：你可以令一名角色摸一张牌').set('ai', function (target) {
                                    var att = get.attitude(player, target);
                                    if (att < 0) return -10;
                                    var namelist = ['bhzaiyan', 'bhhundian', 'bhronghe'];
                                    for (var i of namelist) {
                                        if (target.hasSkill(i)) return att + 10;
                                    }
                                    return att;
                                });
                                'step 1'
                                if (result.bool) {
                                    if (result.targets[0] != player) player.line(result.targets[0]);
                                    result.targets[0].draw();
                                    if (!result.targets[0].isBurst()) result.targets[0].Burst();
                                }
                            },
                        },
                        bhfuchou: {
                            trigger: {
                                global: 'damageEnd',
                            },
                            filter: function (event, player) {
                                return event.player && event.source;
                            },
                            frequent: true,
                            silent: true,
                            content: function () {
                                'step 0'
                                event.target1 = trigger.player;
                                event.target2 = trigger.source;
                                event.target1.chooseCard('复仇：你可以向' + get.translation(event.target2) + '使用一张【决斗】', 'hes', function (card, player, target) {
                                    return get.color(card) == 'black' || card.name == 'juedou';
                                }).set('ai', function (card) {
                                    var att = get.attitude(event.target1, event.target2);
                                    if (att > 0) return -10;
                                    else if (event.target1.countCards('hes', { color: 'black' }) < (event.target2.countCards('hs') / 2) + event.target2.countCards('e', { name: 'black' })) return event.target1.countCards('hes', { color: 'black' }) + 2 * event.target1.hp - att - 20;
                                    else return 10 - get.value(card);
                                });
                                'step 1'
                                if (result.bool && result.cards) {
                                    player.logSkill([event.target1, event.target2]);
                                    event.target1.addTempSkill('bhfuchou_sha', 'useCardAfter');
                                    event.target2.addTempSkill('bhfuchou_sha', 'useCardAfter');
                                    event.target1.draw();
                                    event.target2.draw();
                                    event.cards = result.cards;
                                } else event.finish();
                                'step 2'
                                event.target1.useCard({ name: 'juedou' }, event.cards, event.target2, false).viewAs = true;
                            },
                            subSkill: {
                                sha: {
                                    enable: 'chooseToRespond',
                                    filter: function (event, player) {
                                        return player.countCards('hes', { color: 'black' });
                                    },
                                    selectCard: 1,
                                    filterCard: function (card, player) {
                                        return get.color(card) == 'black';
                                    },
                                    position: "hes",
                                    viewAs: { name: 'sha' },
                                    prompt: '复仇：将一张黑色牌当做【杀】打出',
                                    ai: {
                                        respondSha: true,
                                        skillTagFilter: function (player, tag) {
                                            return player.countCards('hes', { color: 'black' });
                                        },
                                    },
                                },
                            },
                        },
                        bhqishi: {
                            audio: "ext:崩崩崩/audio:2",
                            frequent: true,
                            trigger: {
                                player: 'phaseZhunbei',
                            },
                            filter: function (event, player) {
                                return player.countCards('hs') && player.hp < player.maxHp;
                            },
                            content: function () {
                                'step 0'
                                player.addTempSkill('bhqishi_add');
                                player.chooseToDiscard('启示：请弃置一张手牌', 'hs').set('ai', function (card) {
                                    var value = 4;
                                    value += ((player.maxHp - player.hp) * 2);
                                    return value - get.value(card);
                                });
                                'step 1'
                                if (result.bool) {
                                    event.cards = get.cards(player.maxHp - player.hp + 1);
                                    player.showCards(event.cards);
                                    var cards = [];
                                    for (var i of event.cards) {
                                        if (['trick', 'basic'].contains(get.type(i)) && !player.storage.bhgouzao.contains(i.name)) {
                                            player.storage.bhgouzao.push(i.name);
                                            player.syncStorage('bhgouzao');
                                            event.cards.remove(i);
                                            cards.push(i);
                                        }
                                    }
                                    player.gain(event.cards, 'gain2').gaintag.add('bhqishi');
                                    if (cards.length > 0) game.cardsDiscard(cards);
                                } else event.finish();
                            },
                            subSkill: {
                                add: {
                                    mod: {
                                        ignoredHandcard: function (card, player) {
                                            if (card.hasGaintag('bhqishi')) {
                                                return true;
                                            }
                                        },
                                        cardDiscardable: function (card, player, name) {
                                            if (name == 'phaseDiscard' && card.hasGaintag('bhqishi')) {
                                                return false;
                                            }
                                        },
                                    },
                                    onremove: function (player) {
                                        player.removeGaintag('bhqishi');
                                    },
                                    sub: true,
                                }
                            },
                        },
                        bhmengzhu: {
                            zhuSkill: true,
                            unique: true,
                            trigger: {
                                global: 'phaseUseBegin',
                            },
                            filter: function (event, player) {
                                if (event.player == player) return false;
                                if (event.player.group != 'bhnishang') return false;
                                if (player.identity != 'zhu') return false;
                                return event.player.countCards('hse');
                            },
                            silent: true,
                            frequent: true,
                            content: function () {
                                'step 0'
                                event.target = trigger.player;
                                event.target.chooseToDiscard('hes').set('ai', function (card) {
                                    var value = 0;
                                    var att = get.attitude(event.target, player);
                                    if (player.hasSkill('bhgouzao') && !player.storage.bhgouzao.contains(card.name)) value += get.value(card);
                                    else value -= get.value(card);
                                    if (player.countCards('h') < 2) value += 6;
                                    if (att > 0) return value;
                                    else return -10;
                                }).set('prompt','是否响应【盟主】？').set('prompt2','你可以弃置一张牌并令' + get.translation(player) + '摸一张牌');
                                'step 1'
                                if (result.bool) {
                                    event.card = result.cards[0];
                                    player.logSkill('bhmengzhu');
                                    event.target.line(player);
                                    player.draw();
                                    if (!player.storage.bhgouzao.contains(event.card.name) && ['basic', 'trick'].contains(get.type(event.card))) {
                                        player.storage.bhgouzao.push(event.card.name);
                                        player.syncStorage('bhgouzao');
                                    }
                                }
                            },
                        },
                        bhxinzhan: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                source: "damageSource",
                            },
                            check: function (event, player) {
                                if (player.countCards('hes', { name: 'zhuge' }) && player.countCards('hs', { name: 'sha' })) return false;
                                return event.card && event.card.name == 'sha' && event.card.nature == 'thunder';
                            },
                            content: function () {
                                "step 0"
                                player.draw('nodelay');
                                var cards = Array.from(ui.ordering.childNodes);
                                while (cards.length) {
                                    cards.shift().discard();
                                }
                                "step 1"
                                var evt = _status.event.getParent('phase');
                                if (evt) {
                                    game.resetSkills();
                                    _status.event = evt;
                                    _status.event.finish();
                                    _status.event.untrigger(true);
                                }
                            },
                            ai: {
                                jueqing: true,
                            },
                            group: 'bhxinzhan_sha',
                            subSkill: {
                                sha: {
                                    audio: "ext:崩崩崩/audio:2",
                                    prompt: '当你使用雷【杀】指定目标时，你可以令该【杀】不可响应。',
                                    trigger: {
                                        player: "useCard",
                                    },
                                    check: function (event, player) {
                                        if (!event.targets.length) return false;
                                        return get.attitude(player, event.targets[0]) < 0;
                                    },
                                    filter: function (event, player) {
                                        return event.card && event.card.name == 'sha' && event.card.nature == 'thunder';
                                    },
                                    content: function () {
                                        trigger.directHit.addArray(game.filterPlayer());
                                    },
                                    ai: {
                                        "directHit_ai": true,
                                        effect: {
                                            player: function (card, player) {
                                                if (card.name == 'sha' && card.nature == 'thunder') return get.value({ name: 'sha' }) + 1;
                                            }
                                        }
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhwange: {
                            audio: "ext:崩崩崩/audio:2",
                            derivation: ['bhxinzhan', 'bhlvzhe'],
                            init: function (player) {
                                player.storage.bhwange = false;
                            },
                            intro: {
                                content: "limited",
                            },
                            check: function (event, player) {
                                var att = get.attitude(player, event.player);
                                if (player.identity == 'fan' && event.player.identity == 'zhu') return false;
                                if (event.player.hp < 0 && att > -7) return true;
                                if (player.hp < 2 && att > -8) return true;
                                if (att < -2) return false;
                                return true;
                            },
                            limited: true,
                            skillAnimation: true,
                            animationColor: "thunder",
                            unique: true,
                            trigger: {
                                global: "dyingBegin",
                            },
                            filter: function (event, player) {
                                if (event.player == player) return false;
                                return !player.storage.bhwange_damage.contains(event.player);
                            },
                            content: function () {
                                'step 0'
                                trigger.player.recover();
                                player.awakenSkill('bhwange');
                                player.storage.bhwange = true;
                                player.gainMaxHp();
                                player.group = 'bhshijieshe';
                                'step 1'
                                player.addSkill('bhxinzhan');
                                player.addSkill('bhlvzhe');
                                game.log(player, '获得了技能', '#g【心斩】', '【律者】');
                            },
                            group: 'bhwange_damage',
                            subSkill: {
                                damage: {
                                    silent: true,
                                    forced: true,
                                    charlotte: true,
                                    init: function (player) {
                                        player.storage.bhwange_damage = [];
                                    },
                                    trigger: {
                                        source: 'damage',
                                    },
                                    filter: function (event, player) {
                                        if (event.player == player) return false;
                                        return !player.storage.bhwange_damage.contains(event.player);
                                    },
                                    content: function () {
                                        player.storage.bhwange_damage.push(trigger.player);
                                    },
                                }
                            },
                            ai: {
                                threaten: 1.8,
                                effect: {
                                    player: function (card, player) {
                                        if ((card.name == 'nanman' || card.name == 'wanjian') && !player.storage.bhwange) return [1, -2];
                                    }
                                }
                            },
                        },
                        bhqianniao: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: 'phaseUse',
                            usable: 1,
                            selectCard: -1,
                            filterCard: false,
                            position: "hs",
                            lose: false,
                            filterTarget: function (card, player, target) {
                                return target != player && player.canUse('sha', target, false);
                            },
                            content: function () {
                                'step 0'
                                player.draw();
                                event.num = get.distance(player, target);
                                if (event.num < 1) event.num = 1;
                                player.useCard({ name: 'sha', nature: 'thunder' }, target, false);
                                'step 1'
                                if (player.hasHistory('sourceDamage', function (evt) {
                                    var card = evt.card;
                                    if (!card || card.name != 'sha') return false;
                                    var evtx = evt.getParent('useCard');
                                    return evtx.card == card && evtx.getParent() == event;
                                })) {
                                    player.chooseToDiscard('he', event.num, true);
                                }
                            },
                            ai: {
                                order: function (item, player) {
                                    if (player.hasSkill('bhxinzhan')) return get.order({ name: 'sha' }, player) - 0.5;
                                    return get.order({ name: 'sha' }, player) + 0.1;
                                },
                                result: {
                                    player: function (player, target) {
                                        if (player.hasSkill('bhxinzhan')) return 2;
                                        return 5 - get.distance(player, target);
                                    },
                                    target: function (player, target) {
                                        return get.effect(target, { name: 'sha', nature: 'thunder' }, player, target);
                                    },
                                },
                            },
                            subSkill: {
                                im: { charlotte: true },
                                dam: {
                                    trigger: {
                                        source: 'damageBegin1',
                                    },
                                    forced: true,
                                    silent: true,
                                    filter: function (event, player) {
                                        return event.card && event.card.name == 'sha';
                                    },
                                    content: function () {
                                        trigger.num++;
                                        player.removeSkill('bhjiushi_dam');
                                    },
                                },
                            },
                        },
                        bhxinyang: {
                            forced:true,
                            trigger: {
                                player:['loseHpBegin','damageBegin'],
                            },
                            filter: function (event, player) {
                                return player==_status.currentPhase;
                            },
                            content: function () {
                                trigger.cancel();
                            },
                            group:'bhxinyang_recover',
                            subSkill:{
                                recover:{
                                    sub:true,
                                    forced:true,
                                    trigger:{
                                        global:'recoverBegin',
                                    },
                                    filter:function(event,player){
                                        if(player!=_status.currentPhase) return false;
                                        if(event.player==player) return false;
                                        if(event.player.isDying()) return false;
                                        return true;
                                    },
                                    content:function(){
                                        trigger.cancel();
                                    },
                                },
                            },
                        },
                        bhniuqu: {
                            group:'bhniuqu_draw',
                            subSkill:{
                                draw:{
                                    sub:true,
                                    forced:true,
                                    trigger:{
                                        player:"phaseEnd",
                                    },
                                    filter:function(event,player){
                                        return player.countCards('h')<player.maxHp;
                                    },
                                    content:function(){
                                        player.draw(player.maxHp-player.countCards('h'));
                                    },
                                },
                            },
                            trigger:{
                                player:['loseAfter','gainAfter'],
                                global: ["equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter", "addToExpansionAfter"],
                            },
                            init:function(player){
                                player.storage.bhniuqu=[];
                            },
                            forced:true,
                            silent:true,
                            filter:function(event,player){
                                return player.countCards('hs');
                            },
                            content:function(){
                                var hs=player.getCards('hs');
                                for(let i of player.storage.bhniuqu){
                                    if(!hs.contains(i)) player.storage.bhniuqu.remove(i);
                                }
                                player.storage.bhniuqu.remove(player.storage.bhniuqu.randomGet());
                                var num=player.countCards('hs');
                                event.num=Math.floor(1+Math.random()*(num-1))-player.storage.bhniuqu.length;
                                if(num>4&&event.num<3) event.num+=2;
                                if(event.num>0){
                                    var card;
                                    for(var i=0;i<event.num;i++){
                                        card=hs.randomGet();
                                        player.storage.bhniuqu.push(card);
                                        hs.remove(card);
                                    }
                                }
                            },
                            mod: {
                                cardname: function (card, player) {
                                    if(player.storage.bhniuqu&&player.storage.bhniuqu.contains(card)){
                                        var list = [];
                                        var name;
                                        for (var i = 0; i < lib.inpile.length; i++) {
                                            if (get.type(lib.inpile[i]) == 'trick' || get.type(lib.inpile[i]) == 'basic') list.push(lib.inpile[i]);
                                        }
                                        if (player == _status.currentPhase) {
                                            list.remove('wuxie');
                                            list.remove('shan');
                                        }
                                        name = list.randomGet();
                                        if (card.name != name) return name;
                                        else {
                                            list.remove(name);
                                            return list.randomGet();
                                        }
                                    }
                                },
                            },
                        },
                        bhyelv:{
                            // audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:'useCardBefore',
                            },
                            locked:true,
                            forced:true,
                            direct:true,
                            filter:function(event,player){
                                if(!player.isPhaseUsing()) return false;
                                return true;
                            },
                            content:function(){
                                'step 0'
                                event.card = trigger.card;
                                event.cardnumber = get.number(event.card);
                                event.fix = game.roundNumber > event.cardnumber;
                                player.chooseCardButton(player.getCards('hes'), '请选择两张牌与'+get.translation(event.card)+'组成和弦',2,true).set('filterButton',function(button){
                                    let card = button.link;
                                    let base = get.number(event.card);
                                    let num = get.number(card);
                                    if(num == game.roundNumber) return false;

                                    // 1
                                    if(event.fix && num>game.roundNumber) num--;
                                    if(!ui.selected.buttons.length){
                                        if([base+3, base+4, base+6, base+7, base+8].contains(num)) return true;
                                    } else {
                                        let plus = get.number(ui.selected.buttons[0].link);
                                        if(plus>game.roundNumber&&event.fix) plus--;
                                        
                                        if(plus - base == 3){
                                            if([base+7, base+6].contains(num)) return true;
                                        } else if(plus - base == 4){
                                            if([base+7, base+8].contains(num)) return true;
                                        } else if(plus - base == 6){
                                            if(num == base+3) return true;
                                        } else if(plus - base == 8){
                                            if(num == base+4) return true;
                                        } else if(plus - base == 7){
                                            if([base+3, base+4].contains(num)) return true;
                                        }
                                    }

                                    // 2
                                    num = get.number(card);
                                    if(event.fix && num>game.roundNumber) num--;
                                    if(num<game.roundNumber && base > game.roundNumber) num++;

                                    if(!ui.selected.buttons.length){
                                        if([base-3, base+3, base-4, base+4].contains(num)) return true;
                                    } else {
                                        let plus = get.number(ui.selected.buttons[0].link);

                                        if([3, 4].contains(base - plus - (base>game.roundNumber&&plus<game.roundNumber?1:0))){
                                            if([base+3, base+4].contains(num)) return true;
                                        } else if([3, 4].contains(plus - base - (plus>game.roundNumber&&base<game.roundNumber?1:0))){
                                            if([base-3, base-4].contains(num)) return true;
                                        }
                                    }

                                    // 3
                                    num = get.number(card);
                                    if(base>game.roundNumber && num < game.roundNumber) num++;

                                    if(!ui.selected.buttons.length){
                                        if([base-3, base-4, base-6, base-7, base-8].contains(num)) return true;
                                    } else {
                                        let plus = get.number(ui.selected.buttons[0].link);
                                        if(plus < game.roundNumber && base > game.roundNumber) plus++;

                                        if(base - plus == 3){
                                            if([base-6, base-7].contains(num)) return true;
                                        } else if(base - plus == 4){
                                            if([base-7, base-8].contains(num)) return true;
                                        } else if(base - plus == 7){
                                            if([base-3, base-4].contains(num)) return true;
                                        } else if(base - plus == 6){
                                            if(base-3 == num) return true;
                                        } else if(base - plus == 8){
                                            if(base-4 == num) return true;
                                        }
                                    }

                                    return false;
                                }).set('ai',function(card){
                                    return 10 + [0,1,-1,2,-2].randomGet() - get.value(card);
                                });
                                'step 1'
                                event.cards = result.links;
                                if(get.number(event.cards[0]) > get.number(event.cards[1])){
                                    let current = event.cards[0];
                                    event.cards[0] = event.cards[1];
                                    event.cards[1] = current;
                                }

                                trigger.cards.addArray(event.cards);
                                game.log(player,'以',event.card,'、',event.cards[0],'、',event.cards[1],'组成和弦');
                                'step 2'
                                trigger.card.number = undefined; 

                                let fix0 = get.number(event.cards[0]) > game.roundNumber && event.fix ? -1 : 0;
                                let fix1 = get.number(event.cards[1]) > game.roundNumber && event.fix ? -1 : 0;
                                if(get.number(event.cards[1]) - event.cardnumber + fix1 == 6) event.chordType = 4;
                                else if(get.number(event.cards[1]) - event.cardnumber + fix1 == 8) event.chordType = 3;
                                else {
                                    if(get.number(event.cards[0]) - event.cardnumber + fix0 == 4) event.chordType = 1;
                                    else event.chordType = 2;
                                }
                                
                                player.addTempSkill('bhyelv_chord'+event.chordType);
                            },
                            group:['bhyelv_die'],
                            subSkill:{
                                die:{
                                    audio: "ext:崩崩崩/audio:1",
                                    locked:true,
                                    forced:true,
                                    trigger:{
                                        global:"roundStart",
                                    },
                                    filter:function(event,player){
                                        return game.roundNumber > 13;
                                    },
                                    content:function(){
                                        player.die();
                                    },
                                },
                                chord1:{
                                    audio: "ext:崩崩崩/audio:2",
                                    locked:true,
                                    forced:true,
                                    sub:true,
                                    trigger:{
                                        player:'useCard',
                                    },
                                    filter:function(event,player){
                                        if(!event.cards || event.cards.length != 3) return false;
                                        let round = game.roundNumber;
                                        if([get.number(event.cards[0]), get.number(event.cards[1]), get.number(event.cards[2])].contains(round)) return false;
                                        let fixs = [get.number(event.cards[0])>round, get.number(event.cards[1])>round, get.number(event.cards[2])>round];

                                        let base = Math.min(get.number(event.cards[0]), get.number(event.cards[1]), get.number(event.cards[2]));
                                        let fix = base < round;
                                        let difs = [get.number(event.cards[0]) - base - (fix&&fixs[0]?1:0), get.number(event.cards[1]) - base - (fix&&fixs[1]?1:0), get.number(event.cards[2]) - base - (fix&&fixs[2]?1:0)];
                                        difs.remove(0);
                                        return Math.min(difs[0], difs[1]) == 4 && Math.max(difs[0], difs[1]) == 7;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.cards  = [];
                                        for(let i of trigger.cards){
                                            if(get.type(i) == 'basic') event.cards.push(i);
                                        }
                                        event.num = 0;

                                        if(event.cards.length == 0) event.goto(3);
                                        'step 1'
                                        player.chooseTarget('请选择'+get.translation(event.cards[event.num])+'的分配目标',function(card, player,target){
                                            return player != target;
                                        },true).set('ai',function(target){
                                            let att = get.attitude(player,target);
                                            if(att > 0){
                                                return 6 + att - target.countCards('hes');
                                            } else {
                                                return -2 + [0,1,-1].randomGet();
                                            }
                                        });
                                        'step 2'
                                        result.targets[0].gain(event.cards[event.num],'gain2');
                                        event.num++;
                                        if(event.num < event.cards.length) event.goto(1);
                                        'step 3'
                                        player.removeSkill('bhyelv_chord1');
                                    },
                                },
                                chord2:{
                                    audio: "ext:崩崩崩/audio:2",
                                    locked:true,
                                    forced:true,
                                    sub:true,
                                    trigger:{
                                        player:'useCard',
                                    },
                                    filter:function(event,player){
                                        if(!event.cards || event.cards.length != 3) return false;
                                        let round = game.roundNumber;
                                        if([get.number(event.cards[0]), get.number(event.cards[1]), get.number(event.cards[2])].contains(round)) return false;
                                        let fixs = [get.number(event.cards[0])>round, get.number(event.cards[1])>round, get.number(event.cards[2])>round];

                                        let base = Math.min(get.number(event.cards[0]), get.number(event.cards[1]), get.number(event.cards[2]));
                                        let fix = base < round;
                                        let difs = [get.number(event.cards[0]) - base - (fix&&fixs[0]?1:0), get.number(event.cards[1]) - base - (fix&&fixs[1]?1:0), get.number(event.cards[2]) - base - (fix&&fixs[2]?1:0)];
                                        difs.remove(0);
                                        return Math.min(difs[0], difs[1]) == 3 && Math.max(difs[0], difs[1]) == 7;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.num = 0;
                                        event.index = 0;
                                        for(let i of trigger.cards){
                                            if(get.color(i) == 'black') event.num++;
                                        }

                                        event.targets = trigger.targets;
                                        event.targets.sortBySeat();

                                        if(event.num <= 0) event.goto(3);
                                        'step 1'
                                        event.target = event.targets[event.index];
                                        player.discardPlayerCard('弃置'+get.translation(event.target)+get.cnNumber(event.num)+'张牌',event.target, event.num, true).set('ai',function(card){
                                            let att = get.attitude(player,event.target);
                                            if(att > 0) return 10-get.value(card, event.target);
                                            else return get.value(card, event.target);
                                        });
                                        'step 2'
                                        event.index++;
                                        if(event.index < event.targets.length) event.goto(1);
                                        'step 3'
                                        player.removeSkill('bhyelv_chord2');
                                    },
                                },
                                chord3:{
                                    audio: "ext:崩崩崩/audio:2",
                                    locked:true,
                                    forced:true,
                                    sub:true,
                                    trigger:{
                                        player:'useCard',
                                    },
                                    filter:function(event,player){
                                        if(!event.cards || event.cards.length != 3) return false;
                                        let round = game.roundNumber;
                                        if([get.number(event.cards[0]), get.number(event.cards[1]), get.number(event.cards[2])].contains(round)) return false;
                                        let fixs = [get.number(event.cards[0])>round, get.number(event.cards[1])>round, get.number(event.cards[2])>round];

                                        let base = Math.min(get.number(event.cards[0]), get.number(event.cards[1]), get.number(event.cards[2]));
                                        let fix = base < round;
                                        let difs = [get.number(event.cards[0]) - base - (fix&&fixs[0]?1:0), get.number(event.cards[1]) - base - (fix&&fixs[1]?1:0), get.number(event.cards[2]) - base - (fix&&fixs[2]?1:0)];
                                        difs.remove(0);
                                        return Math.min(difs[0], difs[1]) == 4 && Math.max(difs[0], difs[1]) == 8;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.num = 0;
                                        for(let i of trigger.cards){
                                            if(get.tag(i, 'damage')) event.num++;
                                        }
                                        'step 1'
                                        if(event.num>0 && game.hasPlayer(function(current){
                                            return !trigger.targets.contains(current)&&lib.filter.targetEnabled2(trigger.card, player, current);
                                        })) {
                                            player.chooseTarget('请为'+get.translation(trigger.card)+'额外指定'+get.cnNumber(event.num)+'个目标', function(card,player,target){
                                                var trigger=_status.event.getTrigger();
                                                return !trigger.targets.contains(target)&&lib.filter.targetEnabled2(trigger.card, player, target);
                                            }, event.num, true).set('ai',function(target){
                                                var trigger=_status.event.getTrigger();
                                                return get.effect(target,trigger.card,trigger.player,_status.event.player);
                                            });
                                        } else event.finish();
                                        'step 2'
                                        trigger.targets.addArray(result.targets);
                                        trigger.targets.sortBySeat();
                                        'step 3'
                                        player.removeSkill('bhyelv_chord3');
                                    },
                                },
                                chord4:{
                                    audio: "ext:崩崩崩/audio:2",
                                    locked:true,
                                    forced:true,
                                    sub:true,
                                    trigger:{
                                        player:'useCard',
                                    },
                                    filter:function(event,player){
                                        if(!event.cards || event.cards.length != 3) return false;
                                        let round = game.roundNumber;
                                        if([get.number(event.cards[0]), get.number(event.cards[1]), get.number(event.cards[2])].contains(round)) return false;
                                        let fixs = [get.number(event.cards[0])>round, get.number(event.cards[1])>round, get.number(event.cards[2])>round];

                                        let base = Math.min(get.number(event.cards[0]), get.number(event.cards[1]), get.number(event.cards[2]));
                                        let fix = base < round;
                                        let difs = [get.number(event.cards[0]) - base - (fix&&fixs[0]?1:0), get.number(event.cards[1]) - base - (fix&&fixs[1]?1:0), get.number(event.cards[2]) - base - (fix&&fixs[2]?1:0)];
                                        difs.remove(0);
                                        return Math.min(difs[0], difs[1]) == 3 && Math.max(difs[0], difs[1]) == 6;
                                    },
                                    content:function(){
                                        'step 0'
                                        var stat=player.stat[player.stat.length-1].card;
                                        if(stat[trigger.card.name]){
                                            stat[trigger.card.name]--;
                                        }
                                        
                                        trigger.cancel();
                                        'step 1'
                                        player.draw(3);
                                        player.removeSkill('bhyelv_chord4');
                                    },
                                },
                            },
                            mod:{
                                "cardEnabled":function(card,player){
                                    if(!player.isPhaseUsing()) return;

                                    let flag = false;
                                    if(get.number(card) == game.roundNumber) return false;
                                    // card作为Base
                                    let base = get.number(card);
                                    let fix3 = game.roundNumber < base || game.roundNumber > base + 3 ? 0:1;
                                    let fix4 = game.roundNumber < base || game.roundNumber > base + 4 ? 0:1;
                                    let fix6 = game.roundNumber < base || game.roundNumber > base + 6 ? 0:1;
                                    let fix7 = game.roundNumber < base || game.roundNumber > base + 7 ? 0:1;
                                    let fix8 = game.roundNumber < base || game.roundNumber > base + 8 ? 0:1;

                                    if(player.countCards('hes',function(card){return get.number(card) == base+4+fix4})>0){
                                        if(player.countCards('hes',function(card){return [base+7+fix7, base+8+fix8].contains(get.number(card))}) > 0) flag = true;
                                        // game.log(card, ' | ', player.getCards('hes',function(card){return get.number(card) == base+4+fix4}), ' | ', player.getCards('hes',function(card){return [base+7+fix7, base+8+fix8].contains(get.number(card))}), ' | ', base,',',base+4,',',base+7+fix7,base+8+fix8)
                                    }
                                    if(player.countCards('hes',function(card){return get.number(card) == base+3+fix3})>0){
                                        if(player.countCards('hes',function(card){return [base+7+fix7, base+6+fix6].contains(get.number(card))}) > 0) flag = true;
                                        // game.log(card, ' | ', player.getCards('hes',function(card){return get.number(card) == base+3+fix3}), ' | ', player.getCards('hes',function(card){return [base+7+fix7, base+6+fix6].contains(get.number(card))}))
                                    }

                                    // card作为第二张
                                    let mid = get.number(card);
                                    let fix21 = game.roundNumber < mid-4 || game.roundNumber > mid? 0:1;
                                    let fix22 = game.roundNumber < mid-3 || game.roundNumber > mid? 0:1;
                                    let fix23 = game.roundNumber < mid || game.roundNumber > mid+4? 0:1;
                                    let fix24 = game.roundNumber < mid || game.roundNumber > mid+3? 0:1;

                                    if(player.countCards('hes',function(card){return get.number(card) == mid-4-fix21})>0){
                                        if(player.countCards('hes',function(card){return [mid+3+fix24, mid+4+fix23].contains(get.number(card))}) > 0) flag = true;
                                    }
                                    if(player.countCards('hes',function(card){return get.number(card) == mid-3-fix22})>0){
                                        if(player.countCards('hes',function(card){return [mid+4+fix23, mid+3+fix24].contains(get.number(card))}) > 0) flag = true;
                                    }


                                    // card作为第三张
                                    let max = get.number(card);
                                    let fix31 = game.roundNumber < max-4 || game.roundNumber > max? 0:1;
                                    let fix32 = game.roundNumber < max-3 || game.roundNumber > max? 0:1;
                                    let fix37 = game.roundNumber < max-7 || game.roundNumber > max? 0:1;
                                    let fix38 = game.roundNumber < max-8 || game.roundNumber > max? 0:1;
                                    let fix36 = game.roundNumber < max-6 || game.roundNumber > max? 0:1;
                                    
                                    if(player.countCards('hes',function(card){return get.number(card) == max-4-fix31})>0){
                                        if(player.countCards('hes',function(card){return [max-7-fix37, max-8-fix38].contains(get.number(card))}) > 0) flag = true;
                                    }
                                    if(player.countCards('hes',function(card){return get.number(card) == max-3-fix32})>0){
                                        if(player.countCards('hes',function(card){return [max-7-fix37, max-6-fix36].contains(get.number(card))}) > 0) flag = true;
                                    }

                                    if(!flag) return false;
                                },
                            },
                        },
                        bhfuge:{
                            audio: "ext:崩崩崩/audio:2",
                            match:function(arr1, arr2){
                                if(arr1.length!=3 || arr2.length!=3) return false;
                                return arr2.contains(arr1[0]) && arr2.contains(arr1[1]) && arr2.contains(arr1[2]);
                            },
                            init:function(player){
                                player.storage.bhfuge = [];
                            },
                            forced:true,
                            locked:true,
                            charlotte:true,
                            priority:11,
                            trigger:{
                                player:'useCardAfter',
                            },
                            filter:function(event,player){
                                if(!event.cards||event.cards.length!=3) return false;
                                if(!player.isPhaseUsing()) return false;
                                let nums = [get.number(event.cards[0]), get.number(event.cards[1]), get.number(event.cards[2])];

                                for(let i of player.storage.bhfuge){
                                    if(lib.skill.bhfuge.match(i[0], nums)) return false;
                                }
                                return true;
                            },
                            content:function(){
                                'step 0'
                                for(let i of game.filterPlayer(function(current){
                                    return !current.hasSkill('bhfuge_use');
                                })){
                                    i.addSkill('bhfuge_use');
                                }
                                'step 1'
                                let nums = [get.number(trigger.cards[0]), get.number(trigger.cards[1]), get.number(trigger.cards[2])];
                                let chord = [nums, trigger.card.name];
                                player.storage.bhfuge.push(chord);

                                for(let i of game.filterPlayer(function(current){
                                    return current.hasSkill('bhfuge_use');
                                })){
                                    i.storage.bhfuge_use = player.storage.bhfuge;
                                    i.syncStorage('bhfuge_use');
                                }
                                // game.log(player.storage.bhfuge);
                            },
                            // group:['bhfuge_use'],
                            subSkill:{
                                after:{
                                    audio: "ext:崩崩崩/audio:2",
                                    locked:true,
                                    forced:true,
                                    charlotte:true,
                                    trigger:{
                                        player:"useCardAfter",
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhfuge_after;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.cardname = player.storage.bhfuge_after;
                                        delete player.storage.bhfuge_after;
                                        'step 1'
                                        player.chooseUseTarget('〖赋格〗：你可以视为使用'+get.translation(event.cardname),{name:event.cardname, isCard:true});
                                        'step 2'
                                        player.removeSkill('bhfuge_after');
                                    },
                                },
                                use:{
                                    locked:true,
                                    forced:true,
                                    charlotte:true,
                                    trigger:{
                                        player:'useCard',
                                    },
                                    priority:10,
                                    init:function(player){
                                        player.storage.bhfuge_use = [];
                                        player.storage.bhfuge_his = [];
                                    },
                                    intro:{
                                        name:'赋格',
                                        content:function(storage,player){
                                            let str = '<li>记录：<br>';
                                            if(player.storage.bhfuge_use.length == 0) return "暂无";

                                            for(let i of player.storage.bhfuge_use){
                                                str += '- '+i[0][0]+', '+i[0][1]+', '+i[0][2];
                                                str += ' | ' + get.translation(i[1]) + '<br>';
                                            }

                                            str += '<li>当前<br>- ';
                                            for(let i of player.storage.bhfuge_his){
                                                str +=  (i==undefined?'null':i);
                                                if(player.storage.bhfuge_his.indexOf(i) < player.storage.bhfuge_his.length) str+=', ';
                                            }

                                            return str;
                                        },
                                        markcount:function(){return 0;},
                                    },
                                    direct:true,
                                    content:function(){
                                        'step 0'
                                        event.cardname = undefined;
                                        if(player.storage.bhfuge_his.length<3){
                                            player.storage.bhfuge_his.push(get.number(trigger.card));
                                        } else {
                                            let tmp = player.storage.bhfuge_his[2];
                                            player.storage.bhfuge_his[2] = get.number(trigger.card);
                                            player.storage.bhfuge_his[0] = player.storage.bhfuge_his[1];
                                            player.storage.bhfuge_his[1] = tmp;
                                        }

                                        for(let i of game.filterPlayer(function(current){
                                            return current.hasSkill('bhfuge_use');
                                        })){
                                            i.unmarkSkill('bhfuge_use');
                                            i.storage.bhfuge_his = player.storage.bhfuge_his;
                                            i.syncStorage('bhfuge_use');
                                        }

                                        player.markSkill('bhfuge_use');
                                        'step 1'
                                        // game.log(player.storage.bhfuge_his);
                                        for(let i of player.storage.bhfuge_use){
                                            if(lib.skill.bhfuge.match(i[0], player.storage.bhfuge_his)){
                                                event.cardname = i[1];
                                            }
                                        }
                                        if(event.cardname == undefined) event.finish();
                                        'step 2'
                                        player.addTempSkill('bhfuge_after');
                                        player.storage.bhfuge_after = event.cardname;
                                    },
                                },
                            },
                        },
                        bhhuangjin: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:"phaseDrawBegin2"
                            },
                            locked:true,
                            forced:true,
                            filter:function(event,player){
                                return !event.numFixed;
                            },
                            content:function(){
                                trigger.num++;
                            },
                            group:['bhhuangjin_end'],
                            subSkill:{
                                end:{
                                    // audio:'bhhuangjin',
                                    locked:true,
                                    forced:true,
                                    direct:true,
                                    trigger:{
                                        global:"phaseDrawEnd",
                                    },
                                    filter:function(event,player){
                                        return event.player != player && event.player.countCards('he') > 0;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.target = trigger.player;
                                        event.target.chooseCard('请选择一张牌交给'+get.translation(player), 'he', true).set('ai',function(card){
                                            let att = get.attitude(event.target, player);
                                            if(att > 0){
                                                return (1 + get.value(card, player) - get.value(card, event.target) + [0,1,2].randomGet()) * get.value(card, player);
                                            } else {
                                                return 6 - get.value(card);
                                            }
                                        });
                                        'step 1'
                                        event.card = result.cards[0];
                                        player.gain(event.card, event.target, 'give').gaintag.add('bhhuangjin');;

                                    },
                                },
                            },
                            mod:{
                                ignoredHandcard:function(card,player){
                                    if(card.hasGaintag('bhhuangjin')){
                                        return true;
                                    }
                                },
                                cardDiscardable:function(card,player,name){
                                    if(name=='phaseDiscard'&&card.hasGaintag('bhhuangjin')){
                                        return false;
                                    }
                                },
                            },
                        },
                        bhtianxing: {
                            enable: ["chooseToUse", "chooseToRespond"],
                            filter: function (event, player) {
                                var cards = player.getCards('hs')
                                for (var i = 0; i < cards.length; i++) {
                                    if (event.filterCard({ name: cards[i].name }, player, event)) {
                                        return player.countCards('hs') >= 3
                                    }
                                }
                                return false;
                            },
                            chooseButton: {
                                dialog: function (event, player) {
                                    var list = [];
                                    var cards = player.getCards('hs')
                                    for (var i = 0; i < cards.length; i++) {
                                        if (event.filterCard({ name: cards[i].name }, player, event) && get.type(cards[i]) != 'equip' && get.type(cards[i]) != 'delay') {
                                            list.push(cards[i]);
                                        }
                                    }
                                    return ui.create.dialog('天星', [list, 'vcard'], 'hidden');
                                },
                                // check: function (button) {
                                //     var player = _status.event.player;
                                //     var card = { name: button.link[2], nature: button.link[3] };
                                //     if (_status.event.getParent().type != 'phase' || game.hasPlayer(function (current) {
                                //         return player.canUse(card, current) && get.effect(current, card, player, player) > 0;
                                //     })) {
                                //         switch (button.link[2]) {
                                //             case 'wuxie': return 4;
                                //             case 'shunshou': return 2.5;
                                //             case 'tao': case 'shan': return 5;
                                //             case 'jiu': {
                                //                 if (player.countCards('hs', { type: 'basic' }) > 2) return 3;
                                //             };
                                //             case 'sha':
                                //                 if (button.link[3] == 'fire') return 2.95;
                                //                 else if (button.link[3] == 'thunder' || button.link[3] == 'ice') return 2.92;
                                //                 else return 2.9;
                                //         }
                                //     }
                                //     return 0;
                                // },
                                backup: function (links, player) {
                                    return {
                                        filterCard: function (card, player, target) {
                                            if (!ui.selected.cards.length) return card == links[0];
                                            if (!ui.selected.cards.contains(links[0])) return false;
                                            for (var i = 0; i < ui.selected.cards.length; i++) {
                                                if (get.number(ui.selected.cards[i]) == card.number) return false;
                                            }
                                            return true;
                                        },
                                        complexCard: true,
                                        selectCard: [3, 5],
                                        check: function (card, player, target) {
                                            if (!ui.selected.cards.length && card == links[0]) return 10;
                                            var value = get.value(card);
                                            if (get.number(ui.selected.cards[0]) < 5) {
                                                if (card.number < 5) {
                                                    if (get.color(card) == 'red') return 8 - value;
                                                    else return 7 - value;
                                                } else return 4 - value;
                                            } else if (get.number(ui.selected.cards[0]) > 4 && get.number(ui.selected.cards[0]) < 9) {
                                                if (card.number < 9 && card.number > 4) return 6 - value;
                                                else return 4 - value;
                                            } else {
                                                if (card.number > 8) {
                                                    if (get.color(card) == 'black') return 8 - value;
                                                    else return 7 - value;
                                                } else return 4 - value;
                                            }
                                        },
                                        viewAs: { name: links[0].name, nature: links[0].nature, number: links[0].number, suit: links[0].suit },
                                        position: 'hs',
                                        popname: true,
                                        precontent: function () {
                                            'step 0'
                                            event.trigger('bhtianxing');
                                            //player.showCards(event.result.links[0]);
                                            event.bools = [false, false];
                                            event.numbers = [0, 0, 0];
                                            event.colors = [0, 0];
                                            event.cards = event.result.cards;
                                            for (var i = 0; i < event.cards.length; i++) {
                                                if (event.cards[i].number <= 4) event.numbers[0]++;
                                                else if (event.cards[i].number >= 9) event.numbers[2]++;
                                                else event.numbers[1]++;
                                                if (get.color(event.cards[i]) == 'red') event.colors[0]++;
                                                else event.colors[1]++;
                                            }
                                            //game.log(event.numbers,'/',event.colors);
                                            if (event.colors[0] >= 3) event.bools[0] = true;
                                            if (event.colors[1] >= 3) event.bools[1] = true;
                                            if (event.numbers[0] > event.numbers[1] && event.numbers[0] > event.numbers[2]) {
                                                if (event.bools[0]) event.trigger('bhtianxing_drawp');
                                                else event.trigger('bhtianxing_draw');
                                                player.chooseTarget('请选择一名角色，令其摸牌', true).set('ai', function (target) {
                                                    var att = get.attitude(player, target);
                                                    return target == player ? att + 3 : att;
                                                });
                                                //event.trigger('bhtianxing1');
                                                event.goto(1);
                                            } else if (event.numbers[1] > event.numbers[0] && event.numbers[1] > event.numbers[2]) {
                                                if (event.bools[0]) event.trigger('bhtianxing_gainp');
                                                else event.trigger('bhtianxing_gain');
                                                event.number = 0;
                                                event.goto(2);
                                            } else if (event.numbers[2] > event.numbers[0] && event.numbers[2] > event.numbers[1]) {
                                                if (event.bools[1]) event.trigger('bhtianxing_discardp');
                                                else event.trigger('bhtianxing_discard');
                                                player.chooseTarget('请选择一名其他角色，令其弃牌', function (card, player, target) {
                                                    return player != target;
                                                }, true).set('ai', function (target) {
                                                    var att = get.attitude(player, target);
                                                    return -att;
                                                });
                                                event.goto(6);
                                            } else {
                                                event.goto(7);
                                            }
                                            'step 1'
                                            if (result.targets[0] != player) player.line(result.targets[0]);
                                            if (event.bools[0]) result.targets[0].draw(2 * event.numbers[0]);
                                            else result.targets[0].draw(event.numbers[0]);
                                            event.goto(7);
                                            'step 2'
                                            player.chooseTarget('获得一名其他角色的一张牌，然后其摸一张牌。', function (card, player, target) {
                                                if (player == target) return false;
                                                return target.countGainableCards(player, 'he') > 0;
                                            }, true).set('ai', function (target) {
                                                if (event.bools[0]) return get.attitude(_status.event.player, target);
                                                return 10 - get.attitude(_status.event.player, target);
                                            });
                                            'step 3'
                                            event.target = result.targets[0];
                                            player.gainPlayerCard(result.targets[0], 'he', true);
                                            'step 4'
                                            if (event.bools[0]) event.target.draw(2);
                                            else event.target.draw();
                                            'step 5'
                                            event.number++;
                                            //game.log(event.number);
                                            if (event.number < event.numbers[1]) event.goto(2);
                                            else event.goto(7);
                                            'step 6'
                                            player.line(result.targets[0]);
                                            if (event.bools[1]) result.targets[0].chooseToDiscard('hes', 2 * event.numbers[2], true);
                                            else result.targets[0].chooseToDiscard('hes', event.numbers[2], true);
                                            event.goto(7);
                                            'step 7'
                                            if (event.numbers[0] > 0 && event.numbers[1] > 0 && event.numbers[2] > 0) player.moveCard();
                                            'step 8'
                                            if (event.colors[0] >= 2 && event.colors[1] >= 2) player.moveCard();
                                        },
                                    }
                                },
                                prompt: function (links, player) {
                                    return '选择两至四张手牌和<span style=\"color: red\">根音</span>' + get.translation(links[0]) + '组成<span style=\"color: yellow\">和弦</span>';
                                },
                                ai: {
                                    order: 9,
                                    result: {
                                        player: 2,
                                    },
                                    threaten: 2.6,
                                },
                            },
                            group: ['bhtianxing_draw', 'bhtianxing_drawp', 'bhtianxing_gain', 'bhtianxing_gainp', 'bhtianxing_discard', 'bhtianxing_discardp'],
                            subSkill: {
                                draw: {
                                    sub: true,
                                    audio: "ext:崩崩崩/audio:1",
                                    forced: true,
                                    trigger: {
                                        player: "bhtianxing_draw",
                                    },
                                    content: function () { },
                                },
                                drawp: {
                                    sub: true,
                                    audio: "ext:崩崩崩/audio:1",
                                    forced: true,
                                    trigger: {
                                        player: "bhtianxing_drawp",
                                    },
                                    content: function () { },
                                },
                                gain: {
                                    sub: true,
                                    audio: "ext:崩崩崩/audio:1",
                                    forced: true,
                                    trigger: {
                                        player: "bhtianxing_gain",
                                    },
                                    content: function () { },
                                },
                                gainp: {
                                    sub: true,
                                    audio: "ext:崩崩崩/audio:1",
                                    forced: true,
                                    trigger: {
                                        player: "bhtianxing_gainp",
                                    },
                                    content: function () { },
                                },
                                discard: {
                                    sub: true,
                                    audio: "ext:崩崩崩/audio:1",
                                    forced: true,
                                    trigger: {
                                        player: "bhtianxing_discard",
                                    },
                                    content: function () { },
                                },
                                discardp: {
                                    sub: true,
                                    audio: "ext:崩崩崩/audio:1",
                                    forced: true,
                                    trigger: {
                                        player: "bhtianxing_discardp",
                                    },
                                    content: function () { },
                                },
                            },
                            // ai: {
                            //     order: function () {
                            //         var player = _status.event.player;
                            //         var event = _status.event;
                            //         if (event.filterCard({ name: 'jiu' }, player, event) && get.effect(player, { name: 'jiu' }) > 0 && player.countCards('hs', { type: 'basic' }) > 2) {
                            //             return 3.3;
                            //         }
                            //         return 3.1;
                            //     },
                            //     skillTagFilter: function (player, tag, arg) {
                            //         //if (tag == 'fireAttack') return true;
                            //         if (player.countCards('hs') < 3) return false;
                            //         if (!player.hasCard(function (card) {
                            //             return get.type(card) == 'basic'||get.type(card)=='trick';
                            //         }, 'hs')) {
                            //             return false;
                            //         }
                            //     },
                            //     result: {
                            //         player: 1,
                            //     },
                            //     respondSha: true,
                            //     respondShan: true,
                            //     //fireAttack: true,
                            // },
                        },
                        bhjuexin: {
                            //zhuSkill: true,
                            juexingji: true,
                            derivation: ["bhzhileng", "bhjiushi", "bhguying"],
                            skillAnimation: true,
                            animationColor: "metal",
                            unique: true,
                            forced: true,
                            trigger: {
                                player: "phaseZhunbei",
                            },
                            filter: function (event, player) {
                                //if(player.identity!='zhu') return false;
                                if (!game.hasPlayer(function (target) {
                                    return target.identity == 'zhong';
                                })) return true;
                                if (!game.hasPlayer(function (target) {
                                    return target != player && target.group == 'bhshijieshe';
                                })) return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                                //player.removeSkill();
                                player.gainMaxHp();
                                player.recover();
                                game.log(player, '失去了技能', '#g【】');
                                'step 1'
                                player.addSkill('bhzhileng');
                                player.addSkill('bhjiushi');
                                player.addSkill('bhguying');
                                game.log(player, '获得了技能', '#g【滞冷】', '【救世】', '【孤影】');
                            },
                        },
                        bhwangjian: {
                            zhuSkill: true,
                            trigger: {
                                global: 'phaseUseEnd',
                            },
                            frequent: true,
                            silent: true,
                            filter: function (event, player) {
                                if (player.identity != 'zhu') return false;
                                if (event.player == player) return false;
                                if (event.player.group != 'bhshijieshe') return false;
                                var cards = event.player.getCards('hes');
                                if (cards) {
                                    for (var i = 0; i < cards.length; i++) {
                                        if (cards[i].name.search('bhtianhuoshengcai') != -1) return true;
                                    }
                                }
                                return false;
                            },
                            content: function () {
                                'step 0'
                                event.target = trigger.player;
                                event.target.chooseBool('是否将【破坏之键】置入' + get.translation(player) + '的装备区').set('ai', function () {
                                    return get.attitude(event.target, player) > 0;
                                });
                                'step 1'
                                if (result.bool) {
                                    player.logSkill('bhwangjian');
                                    event.cards = event.target.getCards('hes', function (card) {
                                        return card.name.search('bhtianhuoshengcai') != -1;
                                    });
                                    if (event.cards.length) event.card = event.cards[0];
                                    player.equip(event.card);
                                }
                            },
                        },
                        bhzhileng: {
                            forced: true,
                            trigger: {
                                player: 'phaseZhunbei',
                            },
                            filter: function (event, player) {
                                var cards = player.getCards('e');
                                if (cards.length) {
                                    for (var i = 0; i < cards.length; i++) {
                                        if (cards[i].name.search('bhtianhuoshengcai') != -1) return false;
                                    }
                                }
                                return game.hasPlayer(function (target) {
                                    return player != target && get.distance(target, player) <= 1;
                                });
                            },
                            content: function () {
                                'step 0'
                                event.targets = game.filterPlayer(function (target) {
                                    return player != target && get.distance(target, player) <= 1;
                                });
                                event.targets.sortBySeat();
                                event.num = 0;
                                'step 1'
                                event.target = event.targets[event.num];
                                player.line(event.target);
                                event.target.damage();
                                game.delayx();
                                'step 2'
                                event.num++;
                                if (event.num < event.targets.length) event.goto(1);
                            },
                            group: 'bhzhileng_lose',
                            subSkill: {
                                lose: {
                                    forced: true,
                                    trigger: {
                                        player: 'loseHpBegin',
                                    },
                                    filter: function (event, player) {
                                        return player == _status.currentPhase;
                                    },
                                    content: function () {
                                        trigger.cancel();
                                    },
                                },
                            },
                        },
                        "bhzhileng2": {
                            forced: true,
                            trigger: {
                                player: 'loseHpBegin',
                            },
                            content: function () {
                                trigger.cancel();
                            },
                        },
                        bhjiushi: {
                            init: function (player) {
                                player.storage.bhjiushi = 0;
                            },
                            //mark: true,
                            marktext: "救",
                            intro: {
                                content: function (storage, player) {
                                    return '已发动过' + get.cnNumber(player.storage.bhjiushi) + '次【救世】';
                                },
                            },
                            enable: 'phaseUse',
                            filter: function (event, player) {
                                if (player.hasSkill('bhjiushi_im')) return false;
                                return player.countCards('hs') >= 3;
                            },
                            selectCard: 3,
                            filterCard: true,
                            position: "hs",
                            lose: false,
                            delay: false,
                            filterTarget: function (card, player, target) {
                                return target != player && player.canUse('sha', target);
                            },
                            content: function () {
                                'step 0'
                                player.addTempSkill('bhjiushi_dam', 'useCardAfter');
                                player.useCard({ name: 'sha', nature: 'ice' }, cards, target, false).viewAs = true;
                                'step 1'
                                player.storage.bhjiushi++;
                                player.syncStorage('bhjiushi');
                                player.markSkill('bhjiushi');
                                if (!player.hasHistory('sourceDamage', function (evt) {
                                    var card = evt.card;
                                    if (!card || card.name != 'sha') return false;
                                    var evtx = evt.getParent('useCard');
                                    return evtx.card == card && evtx.getParent() == event;
                                })) {
                                    player.draw(2);
                                } else {
                                    player.addTempSkill('bhjiushi_im', 'phaseUseEnd');
                                }
                            },
                            ai: {
                                order: function (item, player) {
                                    return get.order({ name: 'sha' }, player) + 1;
                                },
                                result: {
                                    target: function (player, target) {
                                        return get.effect(target, { name: 'sha', nature: 'ice' }, player, target);
                                    },
                                },
                            },
                            subSkill: {
                                im: { charlotte: true },
                                dam: {
                                    trigger: {
                                        source: 'damageBegin1',
                                    },
                                    forced: true,
                                    silent: true,
                                    filter: function (event, player) {
                                        return event.card && event.card.name == 'sha';
                                    },
                                    content: function () {
                                        trigger.num++;
                                        player.removeSkill('bhjiushi_dam');
                                    },
                                },
                            },
                        },
                        bhguying: {
                            //audio:"ext:崩崩崩/audio:1",
                            juexingji: true,
                            skillAnimation: true,
                            animationColor: "metal",
                            unique: true,
                            forced: true,
                            trigger: {
                                player: "phaseJieshu",
                            },
                            filter: function (event, player) {
                                return player.storage.bhjiushi >= 3;
                            },
                            content: function () {
                                'step 0'
                                // if(ui.backgroundMusic) ui.backgroundMusic.pause();
                                // game.playAudio('..','extension','崩崩崩/audio/bhguying.mp3','bhguying');
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                                if (player.maxHp > player.countCards('h')) player.draw(player.maxHp - player.countCards('h'));
                                player.unmarkSkill('bhjiushi');
                                player.removeSkill('bhzhileng');
                                player.addSkill('bhzhileng2');
                                'step 1'
                                // player.$skill('<span style="text-align:center;display:block">' + '在燃尽的大地上</span>');
                                var card = get.cardPile(function (card) {
                                    return card.name.search('bhtianhuoshengcai') != -1;
                                });
                                if (card) player.gain(card, 'gain2');
                                // 'step 2'
                                // game.delay(4);
                                // player.$skill('<span style="text-align:center;display:block">' + '我向她 向所有人<br>许下承诺</span>');
                                // 'step 3'
                                // game.delay(4);
                                // player.$skill('<span style="text-align:center;display:block">' + '无论付出多少代价</span>');
                                // 'step 4'
                                // game.delay(4);
                                // player.$skill('<span style="text-align:center;display:block">' + '人类<br>一定会战胜崩坏！</span>');
                                // 'step 5'
                                // setTimeout(function(){
                                //     if(ui.backgroundMusic) ui.backgroundMusic.play();
                                // },17000);

                            },
                        },
                        bhshengxue: {
                            forced: true,
                            trigger: {
                                source: 'damageBegin',
                            },
                            filter: function (event, player) {
                                return event.player.group == 'bhbenghuai';
                            },
                            content: function () {
                                trigger.num++;
                            },
                            group: 'bhshengxue_use',
                            subSkill: {
                                use: {
                                    trigger: { target: 'useCardToBefore' },
                                    forced: true,
                                    priority: 15,
                                    filter: function (event, player) {
                                        return (event.card.name == 'bhbenghuaibaofa');
                                    },
                                    content: function () {
                                        trigger.cancel();
                                    },
                                },
                            },
                        },
                        jiexi: {
                            audio: "ext:崩坏:2",
                            trigger: {
                                player: "phaseZhunbeiBegin",
                            },
                            direct: true,
                            filter: function (event, player) {
                                return game.hasPlayer(function (current) {
                                    return current != player && current.countCards('he');
                                });
                            },
                            init: function (player, skill) {
                                if (!player.storage[skill]) player.storage[skill] = [];
                            },
                            content: function () {
                                'step 0'
                                player.storage.jiexi = [];
                                player.chooseTarget(get.prompt2('jiexi'), function (card, player, target) {
                                    return target != player && target.countCards('he');
                                }).set('ai', function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (att > 0) return Math.sqrt(att) / 10;
                                    return 5 - att;
                                });
                                'step 1'
                                if (result.bool) {
                                    var list = [
                                        '展示一张锦囊牌',
                                        '展示所有手牌',
                                    ]
                                    var target = result.targets[0], j = result.targets[0].countCards('h', { type: 'trick' });
                                    event.source = player
                                    event.target = target;
                                    player.logSkill('jiexi', target);
                                    if (j > 0) target.chooseControl().set('choiceList', list);
                                    else event._result = { index: 1 }
                                }
                                else {
                                    event.finish();
                                }
                                'step 2'
                                if (result.index == 0) {
                                    event.target.chooseCard('h', { type: 'trick' }, true, '解析：选择一张锦囊牌展示');
                                }
                                else {
                                    event.target.showHandcards();
                                    var cards = event.target.getCards('h')
                                    for (var i = 0; i < cards.length; i++) {
                                        if (get.type(cards[i]) == 'trick') player.markAuto('jiexi', [cards[i].name]);//player.storage.jiexi.push(cards[i].name)
                                    }
                                    event.finish();
                                }
                                'step 3'
                                event.target.showCards(result.cards)
                                player.markAuto('jiexi', [result.cards[0].name]);
                                //player.storage.jiexi = result.cards.name;
                            },
                            subSkill: {
                                respond: {
                                    onremove: true,
                                    sub: true,
                                },
                            },
                        },
                        zhizhe: {
                            group: "zhizhe_bottom",
                            subSkill: {
                                bottom: {
                                    trigger: {
                                        global: "drawBegin",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return event.getParent().name == 'zhizhe';
                                    },
                                    content: function () {
                                        trigger.bottom = true;
                                    },
                                    sub: true,
                                    "audioname2": {
                                        bhaotuo: "bhzhujiao",
                                    },
                                },
                            },
                            enable: "phaseUse",
                            usable: 1,
                            filter: function (event, player) {
                                var nh = player.countCards('h');
                                return nh;
                            },
                            content: function () {
                                'step 0'
                                player.chooseCard('将至多' + get.cnNumber(player.maxHp) + '张手牌以按顺序置于牌堆顶（先选择的在上）', [1, player.maxHp], true).set('ai', function (card) {
                                    return -get.value(card);
                                });
                                'step 1'
                                if (result.bool) {
                                    player.lose(result.cards, ui.special)._triggered = null;
                                    event.cards = result.cards.slice(0);
                                    event.num = event.cards.length;
                                }
                                else {
                                    event.finish();
                                }
                                'step 2'
                                if (player == game.me && _status.auto) {
                                    game.delay();
                                }
                                'step 3'
                                while (event.cards.length) {
                                    var current = event.cards.pop();
                                    current.fix();
                                    ui.cardPile.insertBefore(current, ui.cardPile.firstChild);
                                }
                                'step 4'
                                player.chooseTarget('请选择至多' + event.num + '名角色，令这些角色从牌堆底摸一张牌。', [1, event.num]).set('ai', function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    return att;
                                });
                                'step 5'
                                if (result.bool) {
                                    var targets = result.targets;
                                    player.logSkill('zhizhe', targets);
                                    game.asyncDraw(targets);
                                }
                            },
                            ai: {
                                order: 10,
                                result: {
                                    player: 1,
                                },
                            },
                            "audioname2": {
                                bhaotuo: "bhzhujiao",
                            },
                        },
                        fushen: {
                            trigger: {
                                global: "phaseBefore",
                            },
                            forced: true,
                            priority: 10,
                            audio: "zongzuo",
                            filter: function (event, player) {
                                return !player.storage.fushen;
                            },
                            content: function () {
                                'step 0'
                                player.storage.fushen = true;
                                var num = game.countGroup(), num2 = Math.ceil(num / 2);
                                player.gainMaxHp(num2);
                                event.num = num2;
                                'step 1'
                                player.recover(event.num);
                                //player.update();
                            },
                            group: "fushen_recover",
                            subSkill: {
                                recover: {
                                    trigger: {
                                        player: "dyingBegin",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.maxHp > 1;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.loseMaxHp();
                                        'step 1'
                                        player.recover(2);
                                    },
                                    sub: true,
                                    "audioname2": {
                                        bhaotuo: "bhzhujiao",
                                    },
                                },
                            },
                            "audioname2": {
                                bhaotuo: "bhzhujiao",
                            },
                        },
                        yemu: {
                            subSkill: {
                                limited: {
                                    sub: true,
                                },
                            },
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "useCardEnd",
                            },
                            check: function (event, player) {
                                return player.hp * 2 - player.countMark('k_xingluo') > 0;
                            },
                            filter: function (event, player) {
                                return player.isPhaseUsing() && !player.hasSkill('yemu_limited') && !player.hasSkill('k_xingluo_qinshi');
                            },
                            content: function () {
                                'step 0'
                                player.addTempSkill('yemu_limited')
                                player.draw();
                                'step 1'
                                player.chooseToDiscard('he', true).ai = get.disvalue;
                                event.trigger('yemu_count');
                                'step 2'
                                var bool = true;
                                if (result.cards) {
                                    for (var i = 0; i < result.cards.length; i++) {
                                        if (['basic'].contains(get.type(result.cards[i], 'trick', result.cards[i].original == 'h' ? player : false))) {
                                            bool = false; break;
                                        }
                                    }
                                }
                                if (bool) {
                                    player.chooseUseTarget({ name: 'sha' }, '是否视为使用一张【杀】？', false, 'nodistance');
                                }
                            },
                        },
                        "k_xingluo": {
                            audio: "ext:崩崩崩/audio:2",
                            subSkill: {
                                qinshi: {
                                    mark: true,
                                    intro: {
                                        content: "无法使用夜幕且不能使用或打出手牌",
                                    },
                                    charlotte: true,
                                    mod: {
                                        "cardEnabled2": function (card) {
                                            if (get.position(card) == 'h') return false;
                                        },
                                    },
                                    sub: true,
                                },
                            },
                            marktext: "沌",
                            intro: {
                                name: "侵蚀",
                                "name2": "沌",
                                content: "当前有#个“沌”",
                            },
                            trigger: {
                                player: "yemu_count",
                            },
                            forced: true,
                            content: function () {
                                'step 0'
                                player.removeSkill('yemu_limited')
                                player.addMark('k_xingluo', 1);
                                'step 1'
                                if (player.countMark('k_xingluo') >= 6) {
                                    player.removeMark('k_xingluo', player.countMark('k_xingluo'))
                                    player.addTempSkill('k_xingluo_qinshi', { player: "phaseZhunbeiBegin" })
                                }
                                else event.finish();
                                'step 2'
                                player.chooseTarget(get.prompt2('k_xingluo'), [1, 2], function (card, player, target) {
                                    return player != target;
                                }, function (target) {
                                    return get.attitude(_status.event.player, target);
                                })
                                "step 3"
                                if (result.bool) {
                                    var targets = result.targets;
                                    player.logSkill('k_xingluo', targets);
                                    game.asyncDraw(targets);
                                }
                            },
                        },
                        sanyi: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "useCardAfter",
                            },
                            silent: true,
                            filter: function (event, player) {
                                return event.card.name == 'sha' && !player.getHistory('sourceDamage', function (evt) {
                                    return evt.card == event.card;
                                }).length;
                            },
                            content: function () {
                                'step 0'
                                event.card = get.cards()[0];
                                game.cardsGotoOrdering(event.card);
                                player.showCards(event.card);
                                'step 1'
                                player.chooseTarget('令一名角色获得' + get.translation(card), true).set('ai', function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (_status.event.du) {
                                        if (target.hasSkillTag('nodu')) return 0;
                                        return -att;
                                    }
                                    if (att > 0) {
                                        if (target == player) att *= 0.6;
                                        return att + Math.sqrt(Math.max(0, 5 - target.countCards('h')));
                                    }
                                    return att;
                                }).set('du', card.name == 'du');
                                'step 2'
                                if (result && result.bool) {
                                    var target = result.targets[0];
                                    target.gain(card, 'gain2');
                                    delete player.storage.sanyi;
                                }
                            },
                            group: ["sanyi_remove"],
                            subSkill: {
                                remove: {
                                    trigger: {
                                        player: "phaseZhunbeiBegin",
                                    },
                                    silent: true,
                                    popup: false,
                                    filter: function (event, player) {
                                        return player.countMark('k_xingluo') >= 2;
                                    },
                                    content: function () {
                                        player.removeMark('k_xingluo', 2, false);
                                    },
                                    forced: true,
                                    sub: true,
                                },
                            },
                            forced: true,
                            popup: false,
                        },
                        bhjiexi: {
                            audio: "ext:崩崩崩/audio:2",
                            audioname: ["bhlizhilvzhe"],
                            forced: true,
                            trigger: {
                                global: 'phaseEnd',
                            },
                            filter: function (event, player) {
                                return !player.hasSkill('bhjiexi_im');
                            },
                            content: function () {
                                'step 0'
                                player.draw();
                                player.chooseToDiscard('解析：请弃置一张牌', 'hse', true).set('ai', function (card) {
                                    if (!player.hasSkill('bhgouzao')) return 20 - get.value(card);
                                    //if(get.type(card)=='equip') return 10;
                                    var value = 5;
                                    if (!player.storage.bhgouzao.contains(card.name) && ['trick', 'basic'].contains(get.type(card))) value += get.value(card);
                                    else value -= get.value(card);
                                    if (player.storage.bhgouzao_use && player.storage.bhgouzao_use[1] - player.storage.bhgouzao_use[0] <= 2) value = 20 - value;
                                    if (get.subtype(card) == 'equip2' && player.getCards('e').contains(card)) value -= 3;
                                    return value;
                                });
                                // player.logSkill('bhjiexi');
                                'step 1'
                                event.card = result.cards[0];
                                if (!player.storage.bhgouzao.contains(event.card.name) && ['trick', 'basic'].contains(get.type(event.card))) player.storage.bhgouzao.push(event.card.name);
                                else {
                                    player.storage.bhgouzao_use[1]++;
                                    player.storage.bhgouzao_use_markcount = player.storage.bhgouzao_use[1] - player.storage.bhgouzao_use[0];
                                }
                                player.syncStorage('bhgouzao');
                            },
                            group: 'bhjiexi_dam',
                            subSkill: {
                                im: {
                                    charlotte: true,
                                },
                                dam: {
                                    trigger: {
                                        player: 'damage',
                                    },
                                    charlotte: true,
                                    forced: true,
                                    silent: true,
                                    filter: function (event, player) {
                                        return !player.hasSkill('bhjiexi_im');
                                    },
                                    content: function () {
                                        player.addTempSkill('bhjiexi_im');
                                    },
                                },
                            },
                        },
                        bhgouzao: {
                            audio: "ext:崩崩崩/audio:2",
                            audioname: ["bhlizhilvzhe"],
                            group: ['bhgouzao_use','bhgouzao_start'],
                            subSkill: {
                                start: {
                                    silent: true,
                                    trigger: {
                                        global: "phaseEnd",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.storage.bhgouzao_used.length > 0;
                                    },
                                    content: function () {
                                        player.storage.bhgouzao_used = [];
                                    },
                                    sub: true,
                                    popup: false,
                                },
                                use: {
                                    sub: true,
                                    init: function (player) {
                                        if (!player.storage.bhgouzao_use) player.storage.bhgouzao_use = [0, 1];
                                        player.markSkill('bhgouzao_use');
                                        player.storage.bhgouzao_use_markcount = player.storage.bhgouzao_use[1] - player.storage.bhgouzao_use[0];
                                    },
                                    mark: true,
                                    marktext: '可用',
                                    intro: {
                                        content: function (storage, player) {
                                            var str = '已使用/可使用<br>';
                                            str += player.storage.bhgouzao_use[0];
                                            str += '/';
                                            str += player.storage.bhgouzao_use[1];
                                            str+='<br>'
                                            if (player.storage.bhgouzao_used.length == 0) str+= '本回合还未发动过';
                                            else if (player.storage.bhgouzao_used.length == 1) str+= '本回合已使用过' + get.translation(player.storage.bhgouzao_used[0]);
                                            else {
                                                str += '本回合已使用过';
                                                for (var i = 0; i < player.storage.bhgouzao_used.length - 1; i++) {
                                                    str += get.translation(player.storage.bhgouzao_used[i]);
                                                    str += '、';
                                                }
                                                str += get.translation(player.storage.bhgouzao_used[player.storage.bhgouzao_used.length - 1]);
                                            }
                                            return str;
                                        },
                                        //markcount:0,
                                    },
                                    trigger: {
                                        player: 'bhgouzao',
                                    },
                                    charlotte: true,
                                    forced: true,
                                    silent: true,
                                    content: function () {
                                        player.storage.bhgouzao_use[0]++;
                                        player.storage.bhgouzao_use_markcount = player.storage.bhgouzao_use[1] - player.storage.bhgouzao_use[0];
                                    },
                                },
                                round: {
                                    sub: true,
                                    trigger: {
                                        global: 'roundStart',
                                    },
                                    charlotte: true,
                                    forced: true,
                                    silent: true,
                                    content: function () {
                                        player.storage.bhgouzao_use = [0, 1];
                                    },
                                },
                            },
                            enable: ["chooseToUse", "chooseToRespond"],
                            init: function (player) {
                                if (!player.storage.bhgouzao) player.storage.bhgouzao = ['sha', 'shan'];
                                if(!player.storage.bhgouzao_used) player.storage.bhgouzao_used=[];
                            },
                            mark: true,
                            intro: {
                                name: "已记录牌名",
                                content: function (storage, player) {
                                    if (player.storage.bhgouzao.length == 0) return '无';
                                    else {
                                        var str = '';
                                        for (var i = 0; i < player.storage.bhgouzao.length - 1; i++) {
                                            str += get.translation(player.storage.bhgouzao[i]);
                                            str += '、';
                                        }
                                        str += get.translation(player.storage.bhgouzao[player.storage.bhgouzao.length - 1]);
                                        return str;
                                    }
                                },
                                markcount: function (storage, player) {
                                    return player.storage.bhgouzao.length;
                                },
                            },
                            filter: function (event, player) {
                                if (player.storage.bhgouzao_use[0] >= player.storage.bhgouzao_use[1]) return false;
                                if (player.storage.bhgouzao.length == 0) return false;
                                //if (event.type == 'wuxie') return false;
                                var hs = player.getCards('hse');
                                if (!hs.length) return false;
                                for (var i of hs) {
                                    if (game.checkMod(i, player, 'unchanged', 'cardEnabled2', player) === false) return false;
                                }
                                for (var i of lib.inpile) {
                                    if (i != 'du' && player.storage.bhgouzao.contains(i) && get.type(i) == 'basic' && event.filterCard({ name: i, cards: hs }, player, event)) return true;
                                    if (i == 'sha') {
                                        var list = ['fire', 'thunder', 'ice'];
                                        for (var j of list) {
                                            if (event.filterCard({ name: i, nature: j, cards: hs }, player, event)) return true;
                                        }
                                    }
                                }
                                for (var i of lib.inpile) {
                                    if (get.type(i) == 'trick' && player.storage.bhgouzao.contains(i) && event.filterCard({ name: i, cards: hs }, player, event)) return true;
                                }
                                return false;
                            },
                            hiddenCard: function (player, name) {
                                if (name != 'du' && get.type(name) == 'basic' && player.countCards('hse') > 0 && player.storage.bhgouzao.contains(name)) return true;
                                if (get.type(name) == 'trick' && player.countCards('hse') > 0 && player.storage.bhgouzao.contains(name)) return true;
                                return false;
                            },
                            chooseButton: {
                                dialog: function (event, player) {
                                    var vcards = [], hs = player.getCards('hse'), s = player.storage.bhgouzao;
                                    for (var i = 0; i < s.length; i++) {
                                        if (s[i] != 'du' && get.type(s[i]) == 'basic' && event.filterCard({ name: s[i], cards: hs }, player, event)&&(!player.storage.bhgouzao_used||!player.storage.bhgouzao_used.contains(s[i]))) vcards.push(['基本', '', s[i]]);
                                        if (s[i] == 'sha') {
                                            var list = ['fire', 'thunder', 'ice'];
                                            for (var j of list) {
                                                if (event.filterCard({ name: s[i], nature: j, cards: hs }, player, event)&&(!player.storage.bhgouzao_used||!player.storage.bhgouzao_used.contains(s[i]))) vcards.push(['基本', '', s[i], j]);
                                            }
                                        }
                                        if (get.type(s[i]) == 'trick' && event.filterCard({ name: s[i], cards: hs }, player, event)&&(!player.storage.bhgouzao_used||!player.storage.bhgouzao_used.contains(s[i]))) vcards.push(['锦囊', '', s[i]]);
                                    }
                                    return ui.create.dialog('构造', [vcards, 'vcard']);
                                },
                                check: function (button, player) {
                                    //if (_status.event.getParent().type != 'phase') return 1;
                                    return _status.event.player.getUseValue({ name: button.link[2], nature: button.link[3] });
                                },
                                backup: function (links, player) {
                                    return {
                                        audio: 'bhgouzao',
                                        popname: true,
                                        viewAs: { name: links[0][2], nature: links[0][3] },
                                        filterCard: true,
                                        selectCard: 1,
                                        position: 'hse',
                                        precontent: function () {
                                            event.trigger('bhgouzao');
                                        },
                                        onuse: function (result, player) {
                                            if (!player.storage.bhgouzao_used.contains(result.card.name)) player.storage.bhgouzao_used.push(result.card.name);
                                            player.syncStorage('bhgouzao_use');
                                        },
                                    }
                                },
                                prompt: function (links, player) {
                                    return '将一张牌当做' + get.translation(links[0][2]) + "使用或打出";
                                },
                            },
                            ai: {
                                threaten: function (player) {
                                    var value = 1;
                                    if (player.hasSkill('bhjiexi')) value += 0.6;
                                    if (player.hasSkill('bhqishi')) value += 0.3;
                                    if (player.storage.bhgouzao_use && player.storage.bhgouzao_use[1] - player.storage.bhgouzao_use[0] > 3) value += 0.5;
                                    return value;
                                },
                                respondSha: true,
                                respondShan: true,
                                save: true,
                                skillTagFilter: function (player) {
                                    return player.countCards('hes') > 0 && player.storage.bhgouzao_use[0] < player.storage.bhgouzao_use[1];
                                },
                                order: 5,
                                result: {
                                    player: function (player) {
                                        if (_status.event.dying) {
                                            return get.attitude(player, _status.event.dying);
                                        }
                                        if (_status.event.type == 'respondShan') return 1;
                                        if (_status.event.type == 'respondSha') return 1;
                                        var cards = player.storage.bhgouzao;
                                        if (!cards.length) return 0;
                                        var val = 0, hs = player.getCards('hse');
                                        for (var i of cards) {
                                            val += player.getUseValue({ name: i });
                                            for (var j of hs) {
                                                if (val > get.value(j, player)) return val;
                                            }
                                        }
                                        return 0;
                                    },
                                },
                            },
                        },
                        gouzhao: {
                            enable: ["chooseToUse", "chooseToRespond"],
                            usable: 3,
                            filter: function (event, player) {
                                if (event.type == 'wuxie') return false;
                                var hs = player.getCards('he');
                                if (!hs.length) return false;
                                for (var i of hs) {
                                    if (game.checkMod(i, player, 'unchanged', 'cardEnabled2', player) === false) return false;
                                }
                                for (var i of lib.inpile) {
                                    if (i != 'du' && get.type(i) == 'basic' && event.filterCard({ name: i, cards: hs }, player, event)) return true;
                                    if (i == 'sha') {
                                        var list = ['fire', 'thunder', 'ice'];
                                        for (var j of list) {
                                            if (event.filterCard({ name: i, nature: j, cards: hs }, player, event)) return true;
                                        }
                                    }
                                }
                                return false;
                            },
                            chooseButton: {
                                dialog: function (event, player) {
                                    var vcards = [], hs = player.getCards('he'), s = player.getStorage('jiexi');
                                    for (var i of lib.inpile) {
                                        if (i != 'du' && get.type(i) == 'basic' && event.filterCard({ name: i, cards: hs }, player, event)) vcards.push(['基本', '', i]);
                                        if (i == 'sha') {
                                            var list = ['fire', 'thunder', 'ice'];
                                            for (var j of list) {
                                                if (event.filterCard({ name: i, nature: j, cards: hs }, player, event)) vcards.push(['基本', '', i, j]);
                                            }
                                        }
                                        if (i == 'tiesuo') vcards.push(['锦囊', '', i]);
                                        if (s.contains(i)) vcards.push([get.type(i), '', i]);
                                    }
                                    return ui.create.dialog('构造', [vcards, 'vcard']);
                                },
                                check: function (button, player) {
                                    if (_status.event.getParent().type != 'phase') return 1;
                                    return _status.event.player.getUseValue({ name: button.link[2], nature: button.link[3] });
                                },
                                backup: function (links, player) {
                                    return {
                                        audio: 'gouzhao',
                                        popname: true,
                                        viewAs: { name: links[0][2], nature: links[0][3] },
                                        filterCard: true,
                                        selectCard: 2,
                                        position: 'he',
                                    }
                                },
                            },
                            hiddenCard: function (player, name) {
                                return name != 'du' && get.type(name) == 'basic' && player.countCards('he') > 0;
                            },
                            ai: {
                                respondSha: true,
                                respondShan: true,
                                skillTagFilter: function (player) {
                                    return player.countCards('he') > 0;
                                },
                                order: 0.5,
                                result: {
                                    player: function (player) {
                                        if (_status.event.dying) {
                                            return get.attitude(player, _status.event.dying);
                                        }
                                        if (_status.event.type == 'respondShan') return 1;
                                        var val = 0, hs = player.getCards('he'), max = 0;
                                        for (var i of hs) {
                                            val += get.value(i, player);
                                            if (get.type(i, player) == 'trick') max += 5;
                                        }
                                        if (player.hasSkill('zhenjue')) max += 7;
                                        return val <= max ? 1 : 0;
                                    },
                                },
                            },
                            group: "gouzhao_effect",
                            subSkill: {
                                effect: {
                                    trigger: {
                                        player: "useCard",
                                    },
                                    forced: true,
                                    charlotte: true,
                                    popup: false,
                                    filter: function (event, player) {
                                        if (event.skill != 'gouzhao_backup') return false;
                                        var color = get.color(event.cards[0]);
                                        for (var i = 1; i < event.cards.length; i++) {
                                            if (get.color(event.cards[i]) != color) return false;
                                        }
                                        return true;
                                    },
                                    content: function () {
                                        'step 0'
                                        if (get.color(trigger.cards[0]) == 'red') player.draw();
                                        else player.chooseTarget(get.prompt2('gouzhao'), function (card, player, target) {
                                            return target != player;
                                        }).set('ai', function (target) {
                                            return -get.attitude(_status.event.player, target);
                                        })
                                        'step 1'
                                        if (result.bool) {
                                            player.logSkill('gouzhao', result.targets);
                                            result.targets[0].chooseToDiscard('he', true)
                                        }
                                    },
                                    sub: true,
                                },
                                backup: {
                                    sub: true,
                                },
                            },
                        },
                        mengzhu: {
                            audio: "ext:崩崩崩/audio:2",
                            zhuSkill: true,
                            trigger: {
                                global: ["turnOverAfter", "linkAfter"],
                            },
                            filter: function (event, player) {
                                if (player.identity != "zhu") return false;
                                if (event.player.group != "bhnishang") return false;

                                if (event.name == 'link') return event.player.isLinked();
                                return !event.player.isTurnedOver();
                            },
                            check: function (event, player) {
                                return get.attitude(player, event.player) > 0;
                            },
                            logTarget: "player",
                            content: function () {
                                trigger.player.draw();
                            },
                            ai: {
                                expose: 0.2,
                            },
                        },
                        shuangsheng: {
                            silent: true,
                            mark: true,
                            locked: true,
                            marktext: "双",
                            intro: {
                                content: function (storage, player, skill) {
                                    if (player.storage.shuangsheng == true) return '里人格';
                                    return '表人格';
                                },
                            },
                            trigger: {
                                player: "phaseZhunbei",
                            },
                            forced: true,
                            content: function () {
                                'step 0'
                                if (player.storage.shuangsheng == true) {
                                    player.node.avatar.setBackgroundImage('extension/崩崩崩/image/baixi.jpg');
                                    player.removeSkill('ruyi');
                                    player.addSkill('lianli');
                                    //player.reinit("heixi","baixi",event.num);
                                    //player.init("baixi",true);
                                }
                                else {
                                    player.node.avatar.setBackgroundImage('extension/崩崩崩/image/heixi.jpg');
                                    player.removeSkill('lianli');
                                    player.addSkill('ruyi');
                                    //player.reinit("baixi","heixi",event.num);
                                }
                                'step 1'
                                if (player.storage.shuangsheng == true) {
                                    event.trigger('shuangsheng1');
                                    player.storage.shuangsheng = false;
                                }
                                else {
                                    event.trigger('shuangsheng2');
                                    player.storage.shuangsheng = true;
                                }
                            },
                            group: ['shuangsheng_bth', 'shuangsheng_htb'],
                            subSkill: {
                                bth: {
                                    trigger: {
                                        player: 'shuangsheng2',
                                    },
                                    forced: true,
                                    content: function () { },
                                    audio: "ext:崩崩崩/audio:1",
                                },
                                htb: {
                                    trigger: {
                                        player: 'shuangsheng1',
                                    },
                                    forced: true,
                                    content: function () { },
                                    audio: "ext:崩崩崩/audio:1",
                                },
                            },
                        },
                        lianli: {
                            group: ["lianli_lianli1", "lianli_lianli2", "lianli_lianli3"],
                            subSkill: {
                                "lianli1": {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: "useCardToPlayered",
                                    },
                                    check: function (event, player) {
                                        if (event.card.name == 'wuzhong') {
                                            if (player.countCards('hs', { name: 'tao' }) && player.maxHp - player.hp >= 2) {
                                                return false;
                                            } else {
                                                return true;
                                            }
                                        } else if (event.card.name == 'tao') {
                                            if (player.maxHp - player.hp >= 2) {
                                                return true;
                                            } else {
                                                return false;
                                            }
                                        } else if (event.card.name == 'tiesuo') {
                                            return false;
                                        } else if (event.card.name == 'jiu') {
                                            if (player.countCards('hs', { name: 'tao' }) && player.maxHp - player.hp >= 2) {
                                                return false;
                                            } else {
                                                return true;
                                            }
                                        } else if (event.card.name == 'wugu') {
                                            if (player.countCards('hs', { name: 'wuzhong' }) || (player.countCards('hs', { name: 'tao' }) && player.maxHp - player.hp >= 2)) {
                                                return false;
                                            } else {
                                                return true;
                                            }
                                        }
                                        return false;
                                    },
                                    filter: function (event, player) {
                                        if (player.hasSkill('lianli_im')) return false;
                                        if (player != _status.currentPhase) return false;
                                        if (event.getParent().triggeredTargets3.length > 1) return false;
                                        if (get.type(event.card) == 'equip' || get.type(event.card) == 'delay') return false;
                                        if (!player.getCards('h')) return false;
                                        if (event.targets.contains(player)) return true;
                                        if (event.card.name == "tao" && player.maxHp - player.hp == 1) return false;
                                        return false;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.addTempSkill('lianli_im');
                                        player.chooseToDiscard('h', true);
                                        'step 1'
                                        player.useCard({ name: trigger.card.name }, false, player);
                                    },
                                    sub: true,
                                },
                                "lianli2": {
                                    mod: {
                                        selectTarget: function (card, player, range) {
                                            if (card.name == 'sha') range[1] += 1;
                                        },
                                    },
                                    sub: true,
                                },
                                "lianli3": {
                                    audio: "ext:崩崩崩/audio:1",
                                    sub: true,
                                    trigger: {
                                        player: "phaseDrawBegin2",
                                    },
                                    frequent: true,
                                    filter: function (event, player) {
                                        return !event.numFixed;
                                    },
                                    content: function () {
                                        trigger.num++;
                                    },
                                },
                            },
                        },
                        ruyi: {
                            group: ["ruyi_ruyi1", "ruyi_ruyi2"],
                            subSkill: {
                                "ruyi1": {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: "useCardToTarget",
                                    },
                                    filter: function (event, player) {
                                        if (event.target == player) return false;
                                        if (player.hasSkill('ruyi_im')) return false;
                                        if (!player.getCards('h')) return false;
                                        if (event.card.name == "sha") return true;
                                        return false;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.addTempSkill('ruyi_im');
                                        player.chooseToDiscard('h', true);
                                        'step 1'
                                        player.useCard({ name: trigger.card.name }, false, trigger.target);
                                    },
                                    sub: true,
                                    check: function (event, player) {
                                        if (ai.get.attitude(player, event.target) < 0) {
                                            if (player.countCards('hs', { name: 'sha' }) > 1 && event.target.hp <= 2) {
                                                return false;
                                            } else {
                                                return true;
                                            }
                                        } else {
                                            return false;
                                        }
                                    },
                                },
                                "ruyi2": {
                                    mod: {
                                        globalFrom: function (from, to, distance) {
                                            return distance - 1;
                                        },
                                        cardUsable: function (card, player, num) {
                                            if (card.name == 'sha') return num + 1;
                                        },
                                    },
                                    sub: true,
                                },
                            },
                        },
                        laoyin: {
                            audio: "ext:崩崩崩/audio:2",
                            marktext: "印记",
                            group: ["laoyin_damage", "laoyin_draw", "laoyin_remove"],
                            trigger: {
                                player: "useCardToPlayered",
                            },
                            intro: {
                                content: function (storage, player, skill) {
                                    return '印记';
                                },
                            },
                            filter: function (event, player) {
                                if (player.hasSkill('laoyin_im')) return false;
                                if (event.target.countMark("laoyin") > 0) return false;
                                if (event.card.name == "sha") return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                trigger.target.addMark("laoyin");
                                'step 1'
                                player.addTempSkill('laoyin_im');
                            },
                            subSkill: {
                                damage: {
                                    audio: "ext:崩崩崩/audio:1",
                                    sub: true,
                                    forced: true,
                                    trigger: {
                                        global: "damageBegin1",
                                    },
                                    filter: function (event, player) {
                                        if (event.player.countMark("laoyin") > 0 && event.source == player) return true;
                                        return false;
                                    },
                                    content: function () {
                                        'step 0'
                                        trigger.num++;
                                        'step 1'
                                        trigger.player.removeMark("laoyin");
                                    },
                                },
                                draw: {
                                    audio: "ext:崩崩崩/audio:1",
                                    sub: true,
                                    forced: true,
                                    trigger: {
                                        global: "damageEnd",
                                    },
                                    filter: function (event, player) {
                                        if (event.player.countMark("laoyin") > 0 && event.source != player) return true;
                                        return false;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.draw();
                                    },
                                },
                                remove: {
                                    silent: true,
                                    sub: true,
                                    forced: true,
                                    trigger: {
                                        player: "phaseZhunbeiBegin",
                                    },
                                    filter: function (event, player) {
                                        var targets = game.filterPlayer();
                                        targets.remove(player);
                                        while (targets.length) {
                                            if (targets.shift().countMark('laoyin') > 0) {
                                                return true;
                                            }
                                        }
                                        // if(event.player.countMark("laoyin")>0) return true;
                                        return false;
                                    },
                                    content: function () {
                                        event.targets = game.filterPlayer();
                                        event.targets.remove(player);
                                        while (event.targets.length) {
                                            event.target = event.targets.shift();
                                            if (event.target.countMark('laoyin') > 0) {
                                                event.target.removeMark("laoyin");
                                            }
                                        }
                                        // trigger.player.removeMark("laoyin");
                                    },
                                },
                            },
                        },
                        "lianli_im": {
                            filter: function (event, player) {
                                return false;
                            },
                            content: function () {

                            },
                        },
                        "ruyi_im": {
                            filter: function (event, player) {
                                return false;
                            },
                            content: function () {

                            },
                        },
                        "laoyin_im": {
                            filter: function (event, player) {
                                return false;
                            },
                            content: function () {

                            },
                        },
                        huali: {
                            enable: "phaseUse",
                            usable: 1,
                            filterTarget: function (card, player, target) {
                                return target != player;
                                //return target!=player;
                            },
                            filter: function (event, player) {
                                return player.getDamagedHp() > 0
                            },
                            content: function () {
                                'step 0'
                                event.spade1 = [];
                                event.club1 = [];
                                event.diamond1 = [];
                                event.heart1 = [];
                                event.spade2 = [];
                                event.club2 = [];
                                event.diamond2 = [];
                                event.heart2 = [];
                                var dialog = ['化理：请选择展示双方共计' + get.cnNumber(player.getDamagedHp() * 2) + '牌'];
                                var ph = player.getCards('h'), th = target.getCards('h'), num1 = player.getDamagedHp() * 2;
                                if (num1 < 1) event.finish();
                                if (ph.length) {
                                    dialog.push('<div class="text center">你的手牌</div>');
                                    dialog.push(ph);
                                }
                                if (th.length) {
                                    dialog.push('<div class="text center">对方的手牌</div>');
                                    if (event.visible || target.isUnderControl(true) || player.hasSkillTag('viewHandcard', null, target, true)) {
                                        dialog.add(th)
                                    }
                                    else dialog.add([th, 'blank']);
                                }
                                var chooseButton = player.chooseButton([2, num1], dialog);
                                chooseButton.set('target', target);
                                chooseButton.set('ai', function (button) {
                                    var player = _status.event.player;
                                    var target = _status.event.target;
                                    var ps = [];
                                    var ts = [];
                                    for (var i = 0; i < ui.selected.buttons.length; i++) {
                                        var card = ui.selected.buttons[i].link;
                                        if (target.getCards('h').contains(card)) ts.push(card);
                                        else ps.push(card);
                                    }
                                    var card = button.link;
                                    var owner = get.owner(card);
                                    var val = get.value(card) || 1;
                                    if (owner == target) {
                                        if (ts.length > 1) return 0;
                                        if (ts.length == 0 || player.hp > 3) return val;
                                        return 2 * val;
                                    }
                                    return 7 - val;
                                });
                                chooseButton.set('filterButton', function (button) {
                                    var player = _status.event.player;
                                    var target = _status.event.target;
                                    var ps = [];
                                    var ts = [];
                                    for (var i = 0; i < ui.selected.buttons.length; i++) {
                                        var card = ui.selected.buttons[i].link;
                                        if (target.getCards('h').contains(card)) ts.push(card);
                                        else ps.push(card);
                                    }
                                    for (var i = 0; i < ui.selected.buttons.length; i++) {
                                        if (get.owner(button.link) == target && ps.length < 1) return false;
                                    };
                                    return true;
                                });
                                'step 1'
                                if (result.bool) {
                                    var list = result.links, show1 = [], show2 = [], suits = [];
                                    for (var i = 0; i < list.length; i++) {
                                        if (get.owner(list[i]) == player) {
                                            event[get.suit(list[i]) + 1].push(list[i]);
                                            show1.push(list[i]);
                                            if (!suits.contains(get.suit(list[i]))) suits.add(get.suit(list[i]))
                                        } else {
                                            event[get.suit(list[i]) + 2].push(list[i]);
                                            show2.push(list[i]);
                                            if (!suits.contains(get.suit(list[i]))) suits.add(get.suit(list[i]))
                                        };
                                    };
                                    event.showp = show1;
                                    event.showt = show2;
                                    player.showCards(show1);
                                    if (show2) target.showCards(show2);
                                    event.videoId = lib.status.videoId++;
                                    var func = function (suits, spade1, diamond1, club1, heart1, spade2, diamond2, club2, heart2, player, target, id) {
                                        var list = [
                                            '弃置其中四张花色的牌',
                                            '弃置PPP的SSS1和TTT的SSS2',
                                            '弃置PPP的DDD1和TTT的DDD2',
                                            '弃置PPP的CCC1和TTT的CCC2',
                                            '弃置PPP的HHH1和TTT的HHH2',
                                        ];
                                        var choiceList = ui.create.dialog('【化理】：请选择一至五项', 'forcebutton');
                                        choiceList.videoId = id;
                                        for (var i = 0; i < list.length; i++) {
                                            list[i] = list[i].replace(/PPP/g, player);
                                            list[i] = list[i].replace(/TTT/g, target);
                                            list[i] = list[i].replace(/SSS1/g, spade1);
                                            list[i] = list[i].replace(/SSS2/g, spade2);
                                            list[i] = list[i].replace(/DDD1/g, diamond1);
                                            list[i] = list[i].replace(/DDD2/g, diamond2);
                                            list[i] = list[i].replace(/CCC1/g, club1);
                                            list[i] = list[i].replace(/CCC2/g, club2);
                                            list[i] = list[i].replace(/HHH1/g, heart1);
                                            list[i] = list[i].replace(/HHH2/g, heart2);
                                            var str = '<div class="popup text" style="width:calc(100% - 10px);display:inline-block">';
                                            if (i == 0 && suits.length < 4) str += '<div style="opacity:0.5">';
                                            if (i == 1 && !suits.contains('spade')) str += '<div style="opacity:0.5">';
                                            if (i == 2 && !suits.contains('diamond')) str += '<div style="opacity:0.5">';
                                            if (i == 3 && !suits.contains('club')) str += '<div style="opacity:0.5">';
                                            if (i == 4 && !suits.contains('heart')) str += '<div style="opacity:0.5">';
                                            str += list[i];
                                            str += '</div>';
                                            var next = choiceList.add(str);
                                            next.firstChild.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', ui.click.button);
                                            next.firstChild.link = i;
                                            for (var j in lib.element.button) {
                                                next[j] = lib.element.button[j];
                                            }
                                            choiceList.buttons.add(next.firstChild);
                                        }
                                        return choiceList;
                                    };
                                    if (player.isOnline2()) {
                                        player.send(func, suits, get.translation(event.spade1), get.translation(event.diamond1), get.translation(event.club1), get.translation(event.heart1), get.translation(event.spade2), get.translation(event.diamond2), get.translation(event.club2), get.translation(event.heart2), get.translation(player), get.translation(target), event.videoId);
                                    }
                                    event.dialog = func(suits, get.translation(event.spade1), get.translation(event.diamond1), get.translation(event.club1), get.translation(event.heart1), get.translation(event.spade2), get.translation(event.diamond2), get.translation(event.club2), get.translation(event.heart2), get.translation(player), get.translation(target), event.videoId);
                                    if (player != game.me || _status.auto) {
                                        event.dialog.style.display = 'none';
                                    }
                                    var next = player.chooseButton();
                                    next.set('dialog', event.videoId);
                                    next.set('forced', true);
                                    next.set('selectButton', [1, 5]);
                                    next.set('filterButton', function (button) {
                                        if (button.link == 0) {
                                            return suits.length >= 4;
                                        };
                                        if (button.link == 1) {
                                            return suits.contains('spade');
                                        };
                                        if (button.link == 2) {
                                            return suits.contains('diamond');
                                        };
                                        if (button.link == 3) {
                                            return suits.contains('club');
                                        };
                                        if (button.link == 4) {
                                            return suits.contains('heart');
                                        };
                                        return true;
                                    });
                                    next.set('ai', function (button) {
                                        var player = _status.event.player;
                                        var event = _status.event.getTrigger();
                                        switch (button.link) {
                                            case 0: {
                                                return 1.6 + Math.random();
                                            }
                                            case 1: {
                                                return Math.random();
                                            }
                                            case 2: {
                                                return 0.5 + Math.random();
                                            }
                                            case 3: {
                                                return Math.random();
                                            }
                                            case 4: {
                                                return Math.random();
                                            }
                                        }
                                    });
                                }
                                "step 2"
                                event.links = result.links;
                                if (player.isOnline2()) {
                                    player.send('closeDialog', event.videoId);
                                }
                                event.dialog.close();
                                for (var i = 0; i < result.links.length; i++) {
                                    game.log(player, '选择了', '#g【化理】', '的', '#y选项' + get.cnNumber(result.links[i] + 1, true));

                                }
                                'step 3'
                                if (event.links.contains(0)) {
                                    event.dis1 = [];
                                    event.dis2 = [];
                                    var chooseButton = player.chooseButton(4, ['你的牌', event.showp, get.translation(target.name) + '的牌', event.showt]);
                                    chooseButton.set('target', target);
                                    chooseButton.set('ai', function (button) {
                                        var player = _status.event.player;
                                        var target = _status.event.target;
                                        var ps = [];
                                        var ts = [];
                                        for (var i = 0; i < ui.selected.buttons.length; i++) {
                                            var card = ui.selected.buttons[i].link;
                                            if (target.getCards('h').contains(card)) ts.push(card);
                                            else ps.push(card);
                                        }
                                        var card = button.link;
                                        var owner = get.owner(card);
                                        var val = get.value(card) || 1;
                                        if (owner == target) {
                                            if (ts.length > 1) return 0;
                                            if (ts.length == 0 || player.hp > 3) return val;
                                            return 2 * val;
                                        }
                                        return 7 - val;
                                    });
                                    chooseButton.set('filterButton', function (button) {
                                        for (var i = 0; i < ui.selected.buttons.length; i++) {
                                            if (get.suit(button.link) == get.suit(ui.selected.buttons[i].link)) return false;
                                        };
                                        return true;
                                    });
                                };
                                'step 4'
                                if (result.bool && event.links.contains(0)) {
                                    var list = result.links;
                                    for (var i = 0; i < list.length; i++) {
                                        if (get.owner(list[i]) == player) {
                                            event.dis1.push(list[i]);
                                            event[get.suit(list[i]) + 1].remove(list[i]);
                                        } else {
                                            event.dis2.push(list[i]);
                                            event[get.suit(list[i]) + 2].remove(list[i]);
                                        };
                                    };
                                    if (event.dis1.length && event.dis2.length) {
                                        target.discard(event.dis2).delay = false;
                                        player.discard(event.dis1);
                                    }
                                    else if (event.dis2.length) {
                                        target.discard(event.dis2);
                                    }
                                    else player.discard(event.dis1);
                                    target.addTempSkill('fengyin');
                                    target.damage();
                                };
                                'step 5'
                                if (event.links.contains(1) && (event.spade1.length || event.spade2.length)) {
                                    if (event.spade1.length) player.discard(event.spade1)
                                    if (event.spade2.length) target.discard(event.spade2);
                                    target.loseHp()
                                }
                                'step 6'
                                if (event.links.contains(2) && (event.diamond1.length || event.diamond2.length)) {
                                    if (event.diamond1.length) player.discard(event.diamond1);
                                    if (event.diamond2.length) target.discard(event.diamond2);
                                    player.draw()
                                }
                                'step 7'
                                if (event.links.contains(3) && (event.club1.length || event.club2.length)) {
                                    if (event.club1.length) player.discard(event.club1);
                                    if (event.club2.length) target.discard(event.club2);
                                    var clubdis = target.getCards('h', function (card) {
                                        return !event.showt.contains(card)
                                    })
                                    var dialog = ['化理：请选择对方一张手牌弃置'];
                                    if (clubdis.length) {
                                        dialog.push('<div class="text center">对方的手牌</div>');
                                        if (event.visible || target.isUnderControl(true) || player.hasSkillTag('viewHandcard', null, target, true)) {
                                            dialog.push(clubdis)
                                        }
                                        else dialog.add([clubdis, 'blank']);
                                    }
                                    var chooseButton = player.chooseButton([2, num1], dialog);
                                    chooseButton.set('target', target);
                                    chooseButton.set('ai', function (button) {
                                        var card = button.link;
                                        var val = get.value(card) || 1;
                                        return 7 - val;
                                    });
                                }
                                'step 8'
                                if (result.links) target.discard(result.links);
                                'step 9'
                                if (event.links.contains(4) && (event.heart1.length || event.heart2.length)) {
                                    if (event.heart1.length) player.discard(event.heart1);
                                    if (event.heart2.length) target.discard(event.heart2);
                                    player.recover()
                                }
                                'step 10'
                                if (event.showp.length < event.showt.length) player.discard(player.getCards('h'));
                                if (event.links.length >= 3) player.turnOver();
                            },
                            ai: {
                                "noDieAfter2": true,
                                order: 13,
                                result: {
                                    target: function (target, player) {
                                        return -1;
                                    },
                                },
                            },
                        },
                        zhoulv: {
                            trigger: {
                                global: "phaseZhunbeiBegin",
                            },
                            filter: function (event, player) {
                                if (event.player.hp == player.hp) return true;
                                if (player.countCards('h') == event.player.countCards('h')) return true;
                                // if (player.getAttackRange() == event.player.getAttackRange()) return true;
                                return false;
                            },
                            content: function () {
                                // var num = 0;
                                // // if (player.getAttackRange() == trigger.player.getAttackRange()) num++;
                                // if (player.hp == trigger.player.hp) num++;
                                // if (player.countCards('h') == trigger.player.countCards('h')) num++;
                                // if (num!=0) {
                                //     player.draw();
                                // }
                                player.draw();
                            },
                        },
                        tiandao: {
                            trigger: {
                                player: "damageEnd",
                            },
                            direct: true,
                            filter: function (event, player) {
                                return true;
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget(get.prompt2('tiandao'), function (card, player, target) {
                                    return target != player;//target.countCards('h') < Math.min(target.maxHp, 5);
                                }).set('ai', function (target) {
                                    var att = get.attitude(_status.event.player, target);
                                    if (target.hasSkillTag('nogain')) att /= 6;
                                    if (att > 2) {
                                        return Math.min(5, target.maxHp) - target.countCards('h');
                                    }
                                    return att / 3;
                                });
                                'step 1'
                                if (result.bool) {
                                    event.num = Math.min(player.maxHp - player.hp, 5);
                                    // if(player.countCards('e')>=player.hp){
                                    //     event.num=player.maxHp;
                                    // }
                                    player.logSkill('tiandao', result.targets);
                                    event.target = result.targets[0];
                                    if (event.num == 1) {
                                        event.directcontrol = true;
                                    }
                                    else {
                                        var str1 = '摸' + get.cnNumber(event.num, true) + '弃二';
                                        var str2 = '摸二弃' + get.cnNumber(event.num, true);
                                        player.chooseControl(str1, str2, function (event, player) {
                                            return _status.event.choice;
                                        }).set('choice', get.attitude(player, event.target) > 0 ? str1 : str2);
                                        event.str = str1;
                                    }
                                }
                                else {
                                    event.finish();
                                }
                                'step 2'
                                if (event.directcontrol || result.control == event.str) {
                                    event.target.draw(event.num);
                                    event.target.chooseToDiscard(2, true, 'he');
                                }
                                else {
                                    event.target.draw(2);
                                    event.target.chooseToDiscard(event.num, true, 'he');
                                }
                            },
                            ai: {
                                threaten: function (player, target) {
                                    if (target.hp == 1 || target.countCards('e') >= target.hp) return 2;
                                    if (target.hp == target.maxHp) return 0.5;
                                    if (target.hp == 2) return 1.5;
                                    return 0.5;
                                },
                                maixie: true,
                                effect: {
                                    target: function (card, player, target) {
                                        if (target.maxHp <= 3) return;
                                        if (get.tag(card, 'damage')) {
                                            if (target.hp == target.maxHp) return [0, 1];
                                        }
                                        if (get.tag(card, 'recover') && player.hp >= player.maxHp - 1) return [0, 0];
                                    },
                                },
                            },
                        },
                        bhyinneng:{
                            audio: "ext:崩崩崩/audio:2",
                            enable:"phaseUse",
                            filter:function(event,player){
                                if(player.countSP()>0) return true;
                                if(!player.isLinked()) return true;
                                return false;
                            },
                            selectTarget:1,
                            filterTarget:function(card,player,target){
                                return player != target;
                            },
                            check:function(card,player,target){
                                var att = get.attitude(player,target);
                                if(player.countSP()>0){
                                    if(att>0 && target.isLinked()) return 2;
                                    if(att<0 && !target.isLinked()) return 1.9;
                                    return -1;
                                } else {
                                    if(att>0 && target.isLinked()&&target.hp<player.hp) return 1.5;
                                    if(att<0 && !target.isLinked()&&player.hp>1) return 1.3;
                                    return -2;
                                }
                            },
                            content:function(){
                                'step 0'
                                event.target = targets[0];

                                if(player.countSP()>0){
                                    if(!player.isLinked()){
                                        player.chooseControl('消耗1点SP','横置').set('prompt','请选择一项执行').set('ai',function(){
                                            return '消耗1点SP'
                                        });
                                    } else {
                                        event._result={control:'消耗1点SP'};
                                    }
                                } else {
                                    event._result={control:'横置'};
                                }
                                'step 1'
                                if(result.control=='横置'){
                                    player.link();
                                } else {
                                    player.loseSP(1);
                                }
                                'step 2'
                                event.target.link();
                                if(!player.storage.bhyinneng_target) player.storage.bhyinneng_target = [];
                                if(!player.storage.bhyinneng_target.contains(event.target)) player.storage.bhyinneng_target.push(event.target);
                                if(!player.hasSkill('bhyinneng_target')) player.addTempSkill('bhyinneng_target','phaseUseEnd');
                            },
                            ai:{
                                order:8.1,
                                result:{
                                    player:0.1,
                                    target:function(player,target){
                                        if(target.isLinked()) return 1;
                                        else return -1;
                                    }
                                },
                            },
                            subSkill:{
                                target:{
                                    trigger:{
                                        global:'linkAfter',
                                    },
                                    forced:true,
                                    sub:true,
                                    unique:true,
                                    charlotte:true,
                                    direct:true,
                                    filter:function(event,player){
                                        return player.storage.bhyinneng_target.contains(event.player);
                                    },
                                    onremove:function(player){
                                        delete player.storage.bhyinneng_target;
                                    },
                                    content:function(){
                                        if(!trigger.player.isLinked()) player.storage.bhyinneng_target.remove(trigger.player);
                                    },
                                    mod:{
                                        targetInRange: function (card, player,target) {
                                            if(player.storage.bhyinneng_target.contains(target)){
                                                return true;
                                            }
                                        },
                                    },
                                },
                            },
                        },
                        bhzshijie:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:'damageBegin',
                            },
                            filter:function(event,player){
                                return event.player.isLinked()&&event.notLink()&&event.hasNature();
                            },
                            direct:true,
                            locked:true,
                            content:function(){
                                player.addTempSkill('bhzshijie_draw');
                            },
                            group:['bhzshijie_gain'],
                            subSkill:{
                                draw:{
                                    audio:'bhzshijie',
                                    trigger:{
                                        global:"damageBegin",
                                    },
                                    forced:true,
                                    filter:function(event,player){
                                        return event.player.isLinked()&&!event.notLink()&&event.hasNature();
                                    },
                                    content:function(){
                                        'step 0'
                                        player.draw();
                                        player.gainSP(1);
                                        'step 1'
                                        player.removeSkill('bhzshijie_draw');
                                    },
                                },
                                gain:{
                                    trigger: { 
                                        global: 'phaseBefore', 
                                        player: ['enterGame'],
                                    },
                                    priority:9,
                                    direct:true,
                                    forced:true,
                                    charlotte:true,
                                    unique:true,
                                    filter: function (event, player) {
                                        return (event.name != 'phase' || game.phaseNumber == 0);
                                    },
                                    content:function(){
                                        'step 0'
                                        event.targets=game.filterPlayer();
                                        for(let i of event.targets){
                                            i.addSkill('bhzshijie_use');
                                        }
                                    },
                                },
                                use:{
                                    trigger:{
                                        player:"useCardAfter",
                                    },
                                    priority:1,
                                    direct:true,
                                    forced:true,
                                    unique:true,
                                    filter:function(event,player){
                                        if(!player.isPhaseUsing()) return false;
                                        if(event.card.name!='sha') return false;
                                        if(player.hasSkill('bhzshijie_lm')) return false;
                                        if(player.getCardUsable('sha')==0) return true;
                                        return false;
                                    },
                                    content:function(){
                                        // game.log(1,player)
                                        player.addTempSkill('bhzshijie_sha','phaseUseEnd');
                                        player.addTempSkill('bhzshijie_lm','phaseUseEnd')
                                    },
                                },
                                sha:{
                                    global:"bhzshijie_bsha",
                                    trigger:{
                                        player:"useCard",
                                    },
                                    priority:100,
                                    direct:true,
                                    forced:true,
                                    unique:true,
                                    filter:function(event,player){
                                        if(!game.hasPlayer(function(current){
                                            return current.hasSkill('bhzshijie');
                                        })) return false;
                                        return event.card.name == 'sha' && player.getCardUsable('sha') == 0;
                                    },
                                    content:function(){
                                        player.removeSkill('bhzshijie_sha');
                                    },
                                    mod:{
                                        cardUsable: function (card, player,num) {
                                            if(!player.isLinked() && card.name=='sha'){
                                                return num + 1;
                                            }
                                        },
                                    },
                                },
                                bsha:{
                                    mod:{
                                        targetEnabled:function(card,player,target){
                                            if(card.name=='sha'){
                                                if(player.isLinked()||player.getCardUsable('sha') > 1) return;
                                                if(target.isLinked()) return;
                                                return false;
                                            }
                                        },
                                    },
                                },
                                lm:{
                                    charlotte:true,
                                    sub:true,
                                    unique:true,
                                    forced:true,
                                },
                            },
                        },
                        xumi: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "damageEnd",
                            },
                            locked: false,
                            notemp: true,
                            init: function (player, skill) {
                                if (!player.storage[skill]) player.storage[skill] = [];
                            },
                            content: function () {
                                "step 0"
                                var num = Math.max(1, player.getStorage('xumi').length);
                                var num2 = Math.min(num, 13 - num);
                                player.draw(num2);
                                "step 1"
                                player.showCards(player.getCards('h'))
                                "step 2"
                                player.chooseButton(['请选择任意张牌作为“智”', player.getCards('h')], [0, Infinity], true).set('filterButton', function (button) {
                                    var cards = player.getStorage('xumi');
                                    if (ui.selected.buttons.length) {
                                        for (var i = 0; i < ui.selected.buttons.length; i++) {
                                            if (get.number(ui.selected.buttons[i].link) == get.number(button.link)) return false;
                                        }
                                    }
                                    if (cards.length) {
                                        for (var i = 0; i < cards.length; i++) {
                                            if (get.number(cards[i]) == get.number(button.link)) return false;
                                        }
                                    }
                                    return true;
                                }).set('ai', function (card) {
                                    return 8 - get.value(card) && card.name != 'tao' && card.name != 'jiu';
                                });
                                "step 3"
                                event.cards = result.links;
                                player.lose(event.cards, ui.special, 'toStorage');
                                player.storage.xumi = player.storage.xumi.concat(event.cards);
                                player.syncStorage('xumi');
                                player.markSkill('xumi');
                                game.log(player, '将', event.cards, '置于角色卡上作为“智”');
                            },
                            intro: {
                                content: "cards",
                                onunmark: function (storage, player) {
                                    if (storage && storage.length) {
                                        player.$throw(storage, 1000);
                                        game.cardsDiscard(storage);
                                        game.log(storage, '被置入了弃牌堆');
                                        storage.length = 0;
                                    }
                                },
                            },
                            mod: {
                                maxHandcard: function (player, num) {
                                    return num + player.storage.xumi.length;
                                },
                            },
                            ai: {
                                maixie: true,
                                "maixie_hp": true,
                                threaten: 0.8,
                                effect: {
                                    target: function (card, player, target) {
                                        if (get.tag(card, 'damage')) {
                                            if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                            if (!target.hasFriend()) return;
                                            if (target.hp >= 4) return [0.5, get.tag(card, 'damage') * 2];
                                            if (!target.hasSkill('hengsha') && target.hp > 1) return [0.5, get.tag(card, 'damage') * 1.5];
                                            if (target.hp == 3) return [0.5, get.tag(card, 'damage') * 1.5];
                                            if (target.hp == 2) return [1, get.tag(card, 'damage') * 0.5];
                                        }
                                    },
                                },
                            },
                        },
                        tianhui: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            // init: function (player) {
                            //     player.storage.tianhui = false;
                            // },
                            // intro: {
                            //     content: "limited",
                            // },
                            // unique: true,
                            // limited: true,
                            derivation: 'tianhui_card',
                            usable: 1,
                            filter: function (event, player) {
                                var list = player.getStorage('xumi'), suits = [];
                                if (list.length < 4) return false;
                                for (var i = 0; i < list.length; i++) {
                                    suits.add(get.suit(list[i]))
                                }
                                return suits.length >= 4;
                            },
                            chooseButton: {
                                dialog: function (event, player) {
                                    return ui.create.dialog('天慧', player.storage.xumi);
                                },
                                filter: function (button, player) {
                                    for (var i = 0; i < ui.selected.buttons.length; i++) {
                                        if (get.suit(ui.selected.buttons[i].link) == get.suit(button.link)) return false;
                                    }
                                    return true;
                                },
                                select: 4,
                                backup: function (links) {
                                    var obj = get.copy(lib.skill.tianhui_target);
                                    obj.cards = links;
                                    obj.filterCard = () => false;
                                    obj.selectCard = -1;
                                    return obj;

                                },
                                prompt: function (links) {
                                    return '选择一名角色改变其手牌的花色和点数'
                                },
                                check: function (button) {
                                    var storage = _status.event.player.storage.xumi.slice(0);
                                    storage.remove(button.link);
                                    if (storage.filter(function (card) {
                                        return card.suit == button.link.suit;
                                    }).length) return 1 + Math.random();
                                    return 0;
                                },
                            },
                            subSkill: {
                                target: {
                                    skillAnimation: true,
                                    animationStr: "天慧",
                                    animationColor: "green",
                                    audio: "tianhui",
                                    filterTarget: true,
                                    delay: false,
                                    content: function () {
                                        "step 0"
                                        if (target.hasSkill('tianhui_card')) target.removeSkill('tianhui_card');
                                        var cards = lib.skill.tianhui_backup.cards;
                                        player.$throw(cards, 1000);
                                        player.unmarkAuto('tianhui', cards);
                                        player.storage.xumi.remove(cards)
                                        game.log(player, '将', cards, '置入了弃牌堆');
                                        game.delayx();
                                        game.cardsDiscard(cards);
                                        "step 1"
                                        var list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13].map((i) => get.strNumber(i))
                                        if (player.isUnderControl()) {
                                            game.swapPlayerAuto(player);
                                        }
                                        numbers = list;
                                        var switchToAuto = function () {
                                            _status.imchoosing = false;
                                            event._result = {
                                                bool: true,
                                                suit: lib.suit.randomGet(),
                                                number: list.randomGet(),
                                            };
                                            if (event.dialog) event.dialog.close();
                                            if (event.control) event.control.close();
                                        };
                                        var chooseButton = function (player, numbers) {
                                            var event = _status.event;
                                            player = player || event.player;
                                            if (!event._result) event._result = {};
                                            var dialog = ui.create.dialog('是否发动【天慧】？', 'forcebutton', 'hidden');
                                            event.dialog = dialog;
                                            dialog.addText('花色');
                                            var table = document.createElement('div');
                                            table.classList.add('add-setting');
                                            table.style.margin = '0';
                                            table.style.width = '100%';
                                            table.style.position = 'relative';
                                            var listi = ['spade', 'heart', 'club', 'diamond'];
                                            for (var i = 0; i < listi.length; i++) {
                                                var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                                                td.link = listi[i];
                                                table.appendChild(td);
                                                td.innerHTML = '<span>' + get.translation(listi[i]) + '</span>';
                                                td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function () {
                                                    if (_status.dragged) return;
                                                    if (_status.justdragged) return;
                                                    _status.tempNoButton = true;
                                                    setTimeout(function () {
                                                        _status.tempNoButton = false;
                                                    }, 500);
                                                    var link = this.link;
                                                    var current = this.parentNode.querySelector('.bluebg');
                                                    if (current) {
                                                        current.classList.remove('bluebg');
                                                    }
                                                    this.classList.add('bluebg');
                                                    event._result.suit = link;
                                                });
                                            }
                                            dialog.content.appendChild(table);
                                            dialog.addText('点数');
                                            var table2 = document.createElement('div');
                                            table2.classList.add('add-setting');
                                            table2.style.margin = '0';
                                            table2.style.width = '100%';
                                            table2.style.position = 'relative';
                                            for (var i = 0; i < list.length; i++) {
                                                var td = ui.create.div('.shadowed.reduce_radius.pointerdiv.tdnode');
                                                td.link = list[i];
                                                table2.appendChild(td);
                                                var num = list[i];
                                                switch (num) {
                                                    case 1: num = 'A'; break;
                                                    case 11: num = 'J'; break;
                                                    case 12: num = 'Q'; break;
                                                    case 13: num = 'K'; break;
                                                }
                                                td.innerHTML = '<span>' + num + '</span>';
                                                td.addEventListener(lib.config.touchscreen ? 'touchend' : 'click', function () {
                                                    if (_status.dragged) return;
                                                    if (_status.justdragged) return;
                                                    _status.tempNoButton = true;
                                                    setTimeout(function () {
                                                        _status.tempNoButton = false;
                                                    }, 500);
                                                    var link = this.link;
                                                    var current = this.parentNode.querySelector('.bluebg');
                                                    if (current) {
                                                        current.classList.remove('bluebg');
                                                    }
                                                    this.classList.add('bluebg');
                                                    event._result.number = link;
                                                });
                                            }
                                            dialog.content.appendChild(table2);
                                            dialog.add('　　');
                                            event.dialog.open();
                                            event.switchToAuto = function () {
                                                event._result = {
                                                    bool: true,
                                                    number: list.randomGet(),
                                                    suit: lib.suit.randomGet(),
                                                };
                                                event.dialog.close();
                                                event.control.close();
                                                game.resume();
                                                _status.imchoosing = false;
                                            };
                                            event.control = ui.create.control('ok', 'cancel2', function (link) {
                                                var result = event._result;
                                                if (link == 'cancel2') result.bool = false;
                                                else {
                                                    if (!result.number || !result.suit) return;
                                                    result.bool = true;
                                                }
                                                event.dialog.close();
                                                event.control.close();
                                                game.resume();
                                                _status.imchoosing = false;
                                            });
                                            for (var i = 0; i < event.dialog.buttons.length; i++) {
                                                event.dialog.buttons[i].classList.add('selectable');
                                            }
                                            game.pause();
                                            game.countChoose();
                                        };
                                        if (event.isMine()) {
                                            chooseButton(player, numbers);
                                        }
                                        else if (event.isOnline()) {
                                            event.player.send(chooseButton, event.player, numbers);
                                            event.player.wait();
                                            game.pause();
                                        }
                                        else {
                                            switchToAuto();
                                        }
                                        "step 2"
                                        var map = event.result || result;
                                        if (map.bool) {
                                            player.logSkill('tianhui');
                                            target.storage.tianhui_card = [map.suit, map.number];
                                            //target.storage.tianhui_number = map.number;
                                            target.addSkill('tianhui_card');
                                            target.markSkill('tianhui_card');
                                        }
                                        else event.finish();
                                        "step 3"
                                        game.updateRoundNumber();
                                    },
                                    ai: {
                                        tag: {
                                            recover: 1,
                                        },
                                        result: {
                                            target: 1.5,
                                        },
                                    },
                                    sub: true,
                                },
                                card: {
                                    marktext: "千",
                                    intro: {
                                        name: '千界',
                                        content: function (storage, player, skill) {
                                            var str = '';
                                            if (player.storage.tianhui_card) {
                                                str += '<li>当前所有手牌的花色：';
                                                str += get.translation(player.storage.tianhui_card[0]);
                                                str += '<li>当前所有手牌的点数：';
                                                str += player.storage.tianhui_card[1];
                                            }
                                            return str;
                                        },
                                    },
                                    mod: {
                                        suit: function (card, suit) {
                                            var player2 = get.owner(card);
                                            var map = player2.storage.tianhui_card;
                                            if (map != undefined) return map[0];
                                        },
                                        cardnumber: function (card) {
                                            var player2 = get.owner(card);
                                            var map = player2.storage.tianhui_card;
                                            if (map != undefined) {
                                                if (map[1] == 'A') return 1;
                                                if (map[1] == 'J') return 11;
                                                if (map[1] == 'Q') return 12;
                                                if (map[1] == 'K') return 13;
                                                return map[1];
                                            }
                                        },
                                    },
                                    sub: true,
                                },
                            },
                            ai: {
                                order: 1,
                                result: {
                                    player: 1,
                                },
                            },
                            mark: true,
                        },
                        hengsha: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: ['phaseZhunbei', 'phaseJieshu'],
                            },
                            intro: {
                                name: "恒沙",
                                onunmark: function (storage, player) {
                                    if (storage && storage.length) {
                                        player.$throw(storage, 1000);
                                        game.cardsDiscard(storage);
                                        game.log(storage, '被置入了弃牌堆');
                                        storage.length = 0;
                                    }
                                },
                                mark: function (dialog, content, player) {
                                    if (content && content.length) {
                                        return '共有' + get.cnNumber(content.length) + '个“智”';
                                    }
                                },
                                content: function (content, player) {
                                    if (content && content.length) {
                                        return '共有' + get.cnNumber(content.length) + '个“智”';
                                    }
                                },
                            },
                            filter: function (event, player) {
                                return player.getStorage('xumi').length > 0;
                            },
                            check: function (event, player) {
                                return player.storage.xumi && player.storage.xumi.length > 4;
                            },
                            content: function () {
                                'step 0'
                                var dialog = ['恒沙：请选择一张“智”进行操作']
                                if (player.getStorage('xumi').length > 0) {
                                    dialog.push(player.getStorage('xumi'));
                                }
                                var chooseButton = player.chooseButton(dialog);
                                chooseButton.set('ai', function (button) {
                                    var card = button.link;
                                    var value = 1;
                                    if (card.name == 'sha') value += 2;
                                    if (card.name == 'shan') value += 2;
                                    return value;
                                });
                                'step 1'
                                if (result.bool) {
                                    event.card = result.links[0];
                                    player.chooseTarget('将' + get.translation(event.card) + '扣置于一名其他角色的角色卡旁', function (card, player, target) {
                                        return target != player;
                                    }).set('ai', function (target) {
                                        var val = 0;
                                        if (target.hasSkill('tianhui_card')) {
                                            if (get.suit(event.card) != target.storage.tianhui_card) return -2;
                                            else val += 3;
                                        }
                                        var att = get.attitude(player, target);
                                        return target.countCards('hs') + (att > 0 ? 1 : 0) - (target.storage.hengsha ? target.storage.hengsha.length : 0) + val;
                                    });
                                } else event.finish();
                                'step 2'
                                if (result.bool) {
                                    event.target = result.targets[0];
                                    player.storage.xumi.remove(event.card);
                                    player.line(event.target);
                                    player.syncStorage('xumi');
                                    if (!event.target.storage.hengsha) event.target.storage.hengsha = [];
                                    event.target.storage.hengsha = event.target.storage.hengsha.concat(event.card);
                                    event.target.syncStorage('hengsha');
                                    if (player.storage.xumi.length == 0) player.unmarkSkill('xumi');
                                    event.target.markSkill('hengsha');
                                    game.log(player, '将一张“智”扣置于', event.target, '的角色卡旁');
                                    game.delayx();
                                }
                            },
                            group: 'hengsha_use',
                            subSkill: {
                                use: {
                                    trigger: {
                                        global: 'useCard',
                                    },
                                    prompt: "是否移去“智”并执行效果",
                                    filter: function (event, player) {
                                        if (event.player == player || !event.player.storage.hengsha || !event.player.storage.hengsha.length) return false;
                                        var cards = event.player.getStorage('hengsha');
                                        for (var i = 0; i < cards.length; i++) {
                                            if (get.suit(cards[i]) == get.suit(event.card)) return true;
                                            if (get.number(cards[i]) == get.number(event.card)) return true;
                                            if (cards[i].name == event.card.name) return true;
                                        }
                                        return false;
                                    },
                                    content: function () {
                                        'step 0'
                                        event.target = trigger.player;
                                        var cards = event.target.getStorage('hengsha');
                                        event.cards = [];
                                        for (var i = 0; i < cards.length; i++) {
                                            if (get.suit(cards[i]) == get.suit(trigger.card) && !event.cards.contains(cards[i])) event.cards.push(cards[i])
                                            if (get.number(cards[i]) == get.number(trigger.card) && !event.cards.contains(cards[i])) event.cards.push(cards[i])
                                            if (cards[i].name == trigger.card.name && !event.cards.contains(cards[i])) event.cards.push(cards[i])
                                        }
                                        player.chooseButton(['选择一张“智”移去并执行效果', event.cards]);
                                        'step 1'
                                        if (result.bool) {
                                            player.line(event.target);
                                            event.card = result.links[0];
                                            event.target.storage.hengsha.remove(event.card);
                                            game.cardsDiscard(event.card);
                                            game.log(event.card, '被置入了弃牌堆');
                                            event.target.syncStorage('hengsha');
                                            if (!event.target.storage.hengsha.length) event.target.unmarkSkill('hengsha');
                                        } else event.finish();
                                        'step 2'
                                        player.chooseControl('无效该牌', '造成伤害', '令其摸牌').set('prompt', '恒沙：请选择一项效果').set('ai', function () {
                                            var att = get.attitude(player, event.target);
                                            if ((att > 0 && player.countCards('hs', { name: ['tao', 'jiu', 'bhbenghuaijiejing'] })) || player.hp > 1) return '造成伤害';
                                            else if (att > 0) return '令其摸牌';
                                            else return '无效该牌';
                                        });
                                        'step 3'
                                        if (result.control == '令其摸牌') {
                                            event.target.draw(2);
                                            event.finish();
                                        } else if (result.control == '造成伤害') {
                                            player.damage(event.target);
                                            event.goto(4);
                                        } else {
                                            trigger.cancel();
                                            //trigger.targets=[];
                                            //trigger.getParent().triggeredTargets1=[];
                                            event.goto(6);
                                        }
                                        'step 4'
                                        event.target.chooseBool('是否令' + get.translation(player) + '回复1点体力').set('ai', function () {
                                            return get.attitude(event.target, player) > 0;
                                        });
                                        'step 5'
                                        if (result.bool) {
                                            player.recover();
                                        }
                                        event.finish();
                                        'step 6'
                                        player.discardPlayerCard(event.target, 'he', true);
                                    },
                                },
                            },
                        },
                        bhhuihong: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "damageEnd",
                                source: "damageSource",
                            },
                            init:function(player){
                                player.storage.bhhuihong=false;
                            },
                            prompt2:function(event,player){
                                if(player.storage.bhhuihong) return '当你造成或受到伤害后，你可以令任意名角色各摸一张牌。';
                                else return '当你造成或受到伤害后，你可以令所有角色各摸一张牌。';
                            },
                            check: function (event, player) {
                                if(player.storage.bhhuihong) return true;
                                var players = game.filterPlayer();
                                var sum = 0;
                                for (var i = 0; i < players.length; i++) {
                                    if (get.attitude(player, players[i]) >= 0) {
                                        sum++;
                                    } else {
                                        sum--;
                                    }
                                }
                                if (player.hasSkill('bhfeiye')) {
                                    var num = game.filterPlayer(function (target) {
                                        return (!player.storage.bhfeiye_im || !player.storage.bhfeiye_im.contains(target)) && get.attitude(player, target) > 0;
                                    }).length;
                                    sum += num;
                                }
                                return sum >= 0;
                            },
                            content: function () {
                                "step 0"
                                if(player.storage.bhhuihong){
                                    player.chooseTarget('请选择任意名角色摸牌',[1,game.filterPlayer().length],true).set('ai',function(target){
                                        return get.attitude(player,target)>0;
                                    });
                                } else {
                                    event.targets = game.filterPlayer();
                                    event.goto(2);
                                }
                                "step 1"
                                event.targets=result.targets;
                                "step 2"
                                event.targets.sortBySeat();
                                player.line(event.targets, 'green');
                                "step 3"
                                for(let i of event.targets){
                                    i.draw();
                                }
                            },
                        },
                        bhzhongzhi: {
                            audio: "ext:崩崩崩/audio:2",
                            skillAnimation: true,
                            animationColor: "wood",
                            zhuSkill: true,
                            juexingji: true,
                            derivation: ["bhfeiye"],
                            unique: true,
                            trigger: {
                                global: "dieEnd",
                            },
                            filter: function (event, player) {
                                if (player.identity != "zhu") return false;
                                if (event.player.group == "bhtianming") return true;
                                if (event.player.identity == "zhong" || event.player.identity == "nei") return true;
                                return false;
                            },
                            forced: true,
                            content: function () {
                                'step 0'
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                                'step 1'
                                player.addSkill('bhfeiye');
                                game.log(player, '获得了技能', '#g【棐业】');
                            },
                        },
                        bhfeiye: {
                            dutySkill: true,
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global:"phaseZhunbei",
                            },
                            check: function (event, player) {
                                if(player==event.player) return player.countCards('hs',function(card){
                                    return get.tag(card,'damage')&&game.hasPlayer(function(target){
                                        return get.effect(target,card,player,player)>0&&player.canUse(card,target);
                                    });
                                })>0&&(player.hp>1||player.getExpansions('bhhudun').length>1);
                                else {
                                    let num=0;
                                    for(let i of game.filterPlayer()){
                                        if(get.attitude(player,i)>0) num++;
                                        else num--;
                                    }
                                    return num>0&&player.hp>2&&player.getExpansions('bhhudun').length<=1;
                                }
                            },
                            content: function () {
                                'step 0'
                                player.damage();
                                'step 1'
                                player.addTempSkill('bhkuanggu');
                            },
                            group:['bhfeiye_achieve','bhfeiye_fail'],
                            subSkill:{
                                achieve:{
                                    skillAnimation:true,
                                    animationColor:'gray',
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    unique:true,
                                    priority:10,
                                    trigger:{
                                        global:"roundStart",
                                    },
                                    filter:function(event,player){
                                        return !game.hasPlayer(function(current){
                                            return current.hp>player.hp||current.countCards('h')>player.countCards('h');
                                        });
                                    },
                                    content:function(){
                                        'step 0'
                                        game.log(player,'使命成功');
                                        player.awakenSkill('bhfeiye');
                                        'step 1'
                                        player.storage.bhhuihong=true;
                                    },
                                },
                                fail:{
                                    skillAnimation:true,
                                    animationColor:'gray',
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    unique:true,
                                    priority:100,
                                    trigger:{
                                        global:"roundStart",
                                    },
                                    filter:function(event,player){
                                        return !game.hasPlayer(function(current){
                                            if(current==player) return false;
                                            return current.hp<player.hp||current.countCards('h')<player.countCards('h');
                                        });
                                    },
                                    content:function(){
                                        'step 0'
                                        game.log(player,'使命失败');
                                        player.awakenSkill('bhfeiye');
                                        'step 1'
                                        player.addSkill('bhfeiye2');
                                    },
                                },
                            },
                        },
                        bhfeiye2:{
                            audio: "bhfeiye",
                            trigger: {
                                global:"phaseZhunbei",
                            },
                            forced:true,
                            content: function () {
                                'step 0'
                                player.damage();
                                'step 1'
                                player.addTempSkill('bhkuanggu');
                            },
                        },
                        bhkuanggu:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                source:"damageSource",
                            },
                            filter:function(event,player){
                                return get.distance(player,event.player)<=1&&event.num>0;
                            },
                            direct:true,
                            preHidden:true,
                            content:function(){
                                'step 0'
                                event.num=trigger.num;
                                'step 1'
                                var choice;
                                if(player.isDamaged()&&get.recoverEffect(player)>0&&(player.countCards('hs',function(card){
                                        return card.name=='sha'&&player.hasValueTarget(card);
                                    })>=player.getCardUsable('sha'))){
                                    choice='recover_hp';
                                }
                                else{
                                    choice='draw_card';
                                }
                                var next=player.chooseDrawRecover(get.prompt(event.name)).set('logSkill',event.name).set('prompt2','摸一张牌或回复1点体力');
                                next.set('choice',choice);
                                next.set('ai',function(){
                                    return _status.event.getParent().choice;
                                });
                                next.setHiddenSkill('bhkuanggu');
                                'step 2'
                                if(result.control!='cancel2'){
                                    event.num--;
                                    if(event.num>0){
                                        event.goto(1);
                                    }
                                }
                            },
                        },
                        nicai: {
                            forced: true,
                            trigger: {
                                player: 'die',
                            },
                            filter: function (event, player) {
                                return false;
                            },
                            content: function () { },
                            group: ["nicai_up", "nicai_down"],
                            subSkill: {
                                up: {
                                    trigger: {
                                        target: "useCardToTarget",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (event.player != player || !event.card.number) return false;
                                        return true;
                                    },
                                    content: function () {
                                        //var num = trigger.card.number;
                                        player.gainMaxHp(trigger.card.number);
                                        //player.gainMaxHp();
                                    },
                                    sub: true,
                                },
                                down: {
                                    trigger: {
                                        target: "useCardToTarget",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (event.player != player && event.card.number) return true;
                                        return false;
                                    },
                                    content: function () {
                                        player.loseMaxHp(trigger.card.number);
                                        //player.loseMaxHp();
                                    },
                                    sub: true,
                                },
                            },
                        },
                        niuzhuan: {
                            forced: true,
                            trigger: {
                                player: 'die',
                            },
                            filter: function (event, player) {
                                return false;
                            },
                            content: function () { },
                            group: ["niuzhuan_niuzhuan1", "niuzhuan_niuzhuan2", "niuzhuan_niuzhuan3"],
                            subSkill: {
                                "niuzhuan1": {
                                    trigger: {
                                        player: ["gainMaxHpEnd", "loseMaxHpEnd"],
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (player.maxHp > 99) return true;
                                        return false;
                                    },
                                    content: function () {
                                        player.loseMaxHp(9);
                                        player.loseHp();
                                    },
                                    sub: true,
                                },
                                "niuzhuan2": {
                                    trigger: {
                                        player: ["gainMaxHpEnd", "loseMaxHpEnd"],
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (player.maxHp < 9) return true;
                                        return false;
                                    },
                                    content: function () {
                                        player.gainMaxHp(9);
                                        player.recover();
                                    },
                                    sub: true,
                                },
                                "niuzhuan3": {
                                    trigger: {
                                        player: "loseMaxHpBegin",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (player.maxHp <= event.number) return true;
                                        return false;
                                    },
                                    content: function () {
                                        trigger.cancel();
                                        player.gainMaxHp(9);
                                    },
                                    sub: true,
                                },
                            },
                        },
                        wanshi: {
                            trigger: {
                                player: ["gainMaxHpEnd", "loseMaxHpEnd"],
                            },
                            forced: true,
                            filter: function (event, player) {
                                return true;
                            },
                            content: function () {
                                'step 0'
                                player.chooseControlList([
                                    '从牌堆顶摸牌',
                                    '从牌堆底摸牌'
                                ], function () {
                                    return _status.event.choice;
                                }).set('choice', function () {
                                    if (player.countCards('h', { name: ['shan', 'tao', 'wuxie'] }) > 0) {
                                        return 0;
                                    } else {
                                        return 1;
                                    }
                                });
                                'step 1'
                                event.index = result.index;
                                if (result.index == 0) {
                                    player.draw();
                                } else {
                                    player.draw('bottom');
                                }
                                'step 2'
                                var card = result[0];
                                if (event.index == 1 && player.countCards('h') && card.number > trigger.num) {
                                    player.chooseCard('he', true, '将一张牌置于牌堆顶');
                                } else if (event.index == 0 && player.countCards('h') && card.number > trigger.num) {
                                    player.chooseCard('he', true, '将一张牌置于牌堆底').set('ai', function (card) {
                                        if (['shan', 'tao', 'wuxie', 'jiu'].contains(card.name)) {
                                            return 6;
                                        } else {
                                            return 8 - get.value(card);
                                        }
                                    });
                                } else {
                                    event.finish();
                                }
                                'step 3'
                                if (result && result.cards && event.index == 1) {
                                    event.card = result.cards[0];
                                    ui.cardPile.insertBefore(result.cards[0], ui.cardPile.firstChild);
                                    game.log(target, '将', (get.position(event.card) == 'h' ? '一张牌' : event.card), '置于牌堆顶');
                                } else if (result && result.cards && event.index == 0) {
                                    event.card = result.cards[0];
                                    ui.cardPile.appendChild(result.cards[0]);
                                    // player.lose(result.cards,ui.cardPile,'insert');
                                    game.log(target, '将', (get.position(event.card) == 'h' ? '一张牌' : event.card), '置于牌堆底');

                                }
                            },
                            ai: {
                                result: {
                                    player: function (card, player, target) {
                                        if (player.maxHp > 80) {
                                            if (['tao', 'jiu', 'wuzhong', 'wugu', 'shandian'].contains(card.name)) {
                                                return get.value(card) - 4;
                                            }
                                            if (get.type(card) == 'equip') {
                                                return get.value(card) - 2;
                                            }
                                            return get.value(card);
                                        } else {
                                            if (['tao', 'jiu', 'wuzhong', 'wugu', 'shandian'].contains(card.name)) {
                                                return get.value(card) + 4;
                                            }
                                            if (get.type(card) == 'equip') {
                                                return get.value(card) + 2;
                                            }
                                            return get.value(card);
                                        }
                                    },
                                },
                            },
                        },
                        qianwu: {
                            enable: "phaseUse",
                            usable: 1,
                            filter: function (event, player) {
                                return player.countCards('he');
                            },
                            content: function () {
                                'step 0'
                                var str1 = '增加9点体力上限';
                                var str2 = '减少9点体力上限';
                                player.chooseControl(str1, str2, function (event, player) {
                                    return _status.event.choice;
                                }).set('ai', function () {
                                    if (player.maxHp > 50) return str2;
                                    else return str1;
                                });
                                event.str = str1;
                                'step 1'
                                player.chooseToDiscard('he', true);
                                if (result.control == event.str) {
                                    player.gainMaxHp(9);
                                }
                                else {
                                    player.loseMaxHp(9);
                                }
                                'step 2'
                                var num = parseInt(player.maxHp / 9);
                                event.num = Math.max(1, num);
                                player.discard(1, 'he', true);
                                'step 3'
                                player.chooseTarget('请选择至多' + get.cnNumber(event.num) + '名其他角色，视为对其使用一张无距离限制且不计入使用次数的【杀】。', function (card, player, target) {
                                    return target != player;
                                }, [1, event.num], { name: 'sha' }, false).set('ai', function (target) {
                                    var att = get.attitude(player, target);
                                    return -att;
                                });
                                'step 4'
                                if (result.bool && result.targets.length) {
                                    result.targets.sortBySeat();
                                    for (var i = 0; i < result.targets.length; i++) {
                                        player.useCard({ name: 'sha', isCard: true }, result.targets[i], false)
                                    }
                                }
                            },
                            ai: {
                                order: 10,
                                result: {
                                    player: 10,
                                },
                            },
                        },
                        bhzuiye: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                source: "damageEnd",
                            },
                            group: "bhzuiye_discard",
                            forced: true,
                            marktext: "罪业",
                            intro: {
                                name: "罪业",
                                content: function (storage, player, skill) {
                                    return "已摸" + player.countMark("bhzuiye") + "张牌";
                                },
                            },
                            init: function (player) {
                                player.storage.bhzuiye = 0;
                                player.syncStorage('bhzuiye');
                            },
                            filter: function (event, player) {
                                return event.num > 0;
                            },
                            content: function () {
                                'step 0'
                                event.num = trigger.num;
                                'step 1'
                                while (event.num > 0) {
                                    player.draw();
                                    player.addMark('bhzuiye');
                                    player.syncStorage('bhzuiye');
                                    player.markSkill('bhzuiye');
                                    event.trigger('bhzuiye2');
                                    event.num--;
                                }
                            },
                            subSkill: {
                                discard: {
                                    forced: true,
                                    trigger: {
                                        player: "bhzuiye2",
                                    },
                                    filter: function (event, player) {
                                        if (player.countMark('bhzuiye') >= 3) return true;
                                        return false;
                                    },
                                    content: function () {
                                        'step 0'
                                        var str1 = '弃三张牌';
                                        var str2 = '失去一点体力';
                                        player.chooseControl(str1, str2, function (event, player) {
                                            return _status.event.choice;
                                        }).set('ai', function () {
                                            if (player.hp + player.countCards('hs', { name: 'tao' }) >= 3) return str2;
                                            if (player.hp + player.countCards('hs', { name: 'tao' }) >= 1 && player.countCards('hes', { name: "zhuge" })) return str2;
                                            return str1;
                                        });
                                        event.str = str1;
                                        'step 1'
                                        if (result.control == event.str) {
                                            player.chooseToDiscard('he', true, 3);
                                        } else {
                                            player.loseHp();
                                        }
                                        player.removeMark('bhzuiye', 3);
                                        player.syncStorage('bhzuiye');
                                        if (player.countMark('bhzuiye') == 0) {
                                            player.unmarkSkill('bhzuiye');
                                        }
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhxueying:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:"useCardAfter",
                            },
                            filter:function(event,player){
                                var suit=get.suit(event.card);
                                //if(!player.countCards('h',{suit:suit})) return false;
                                if(get.tag(event.card,'damage')) return get.color(event.card)=='red'?event.targets.length>0:true;
                                return false;
                            },
                            check:function(event,player){
                                var cards=player.getCards('h',{suit:event.card.suit});
                                var val=0;
                                if(cards.length==0) return true;
                                for(let i of cards){
                                    val+=get.value(i);
                                }
                                if(val>10||cards.length>2) return false;
                                return true;
                            },
                            init:function(player){
                                player.storage.bhxueying_sha=0;
                            },
                            mark:true,
                            intro:{
                                name:'残心',
                                content:"expansion",
                                markcount:"expansion",
                            },
                            content:function(){
                                'step 0'
                                var cards=player.getCards('h',{suit:get.suit(trigger.card)});
                                player.discard(cards);
                                player.draw();
                                if(get.color(trigger.card)!='red'){
                                    if(player.getExpansions('bhxueying').length<5){
                                        event.card=get.cards()[0];
                                        player.addToExpansion(event.card,'gain2').gaintag.add('bhxueying');
                                    }
                                    event.finish();
                                } else {
                                    if(game.hasPlayer(function(target){
                                        return trigger.targets.contains(target)&&target.isAlive();
                                    })){
                                        player.chooseTarget('弃置一名目标的一张牌',function(card,player,target){
                                            return trigger.targets.contains(target);
                                        },true).set('ai',function(target){
                                            return -get.attitude(player,target);
                                        });
                                    } else {
                                        player.storage.bhxueying_sha++;
                                        event.finish();
                                    }
                                }
                                'step 1'
                                event.target=result.targets[0];
                                player.discardPlayerCard(event.target,'he',true);
                                player.storage.bhxueying_sha++;
                            },
                            mod:{
                                cardUsable:function (card, player, num) {
                                    if (card.name == 'sha') {
                                        return num + player.storage.bhxueying_sha;
                                    }
                                },
                            },
                            group:['bhxueying_sha'],
                            subSkill:{
                                sha:{
                                    trigger:{
                                        player:'phaseEnd',
                                    },
                                    silent:true,
                                    forced:true,
                                    charlotte:true,
                                    content:function(){
                                        player.storage.bhxueying_sha=0;
                                    },
                                },
                            },
                            ai:{
                                threaten:1.7,
                            },
                        },
                        bhshasheng: {
                            audio: "ext:崩崩崩/audio:2",
                            unique: true,
                            skillAnimation: true,
                            animationStr: "杀生",
                            animationColor: "fire",
                            trigger:{
                                player:"phaseJieshu",
                            },
                            filter:function(event,player){
                                if(!player.getExpansions('bhxueying').length) return false;
                                var suits=[];
                                game.getGlobalHistory('cardMove',function(evt){
                                    if(suits.length>=4) return;
                                    if(evt.name=='lose'){
                                        if(evt.position==ui.discardPile){
                                            for(var i of evt.cards) suits.add(get.suit(i,false));
                                        }
                                    }
                                    else{
                                        if(evt.name=='cardsDiscard'){
                                            for(var i of evt.cards) suits.add(get.suit(i,false));
                                        }
                                    }
                                });
                                return suits.length>=4;
                            },
                            content:function(){
                                'step 0'
                                event.cards=player.getExpansions('bhxueying');
                                event.num=0;
                                'step 1'
                                var num=Math.max(event.num,1);
                                player.chooseButton(['将'+get.cnNumber(num)+'张“残心”当做火【杀】使用',event.cards],num,true);
                                'step 2'
                                event.usecard=result.links;
                                player.chooseTarget('请选择火【杀】的目标',function(card,player,target){
                                    return player.canUse({name:'sha',nature:"fire"},target,false);
                                },true).set('ai',function(target){
                                    return get.effect(target,{name:'sha',nature:'fire'},player,player);
                                });
                                'step 3'
                                event.target=result.targets[0];
                                player.useCard({name:'sha',nature:'fire'},event.usecard,event.target,false).viewAs=true;
                                event.cards.removeArray(event.usecard);
                                event.num++;
                                'step 4'
                                event.cards=player.getExpansions('bhxueying');
                                if(event.cards.length>=event.num) event.goto(1);
                            },
                            group:['bhshasheng_sha','bhshasheng_mark'],
                            subSkill:{
                                sha:{
                                    trigger:{
                                        player:'phaseJieshu',
                                    },
                                    frequent:true,
                                    filter:function(event,player){
                                        if(!player.getExpansions('bhxueying').length) return false;
                                        var suits=[];
                                        game.getGlobalHistory('cardMove',function(evt){
                                            if(suits.length>=4) return;
                                            if(evt.name=='lose'){
                                                if(evt.position==ui.discardPile){
                                                    for(var i of evt.cards) suits.add(get.suit(i,false));
                                                }
                                            }
                                            else{
                                                if(evt.name=='cardsDiscard'){
                                                    for(var i of evt.cards) suits.add(get.suit(i,false));
                                                }
                                            }
                                        });
                                        return suits.length<4;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.cards=player.getExpansions('bhxueying');
                                        player.chooseButton(['获得一张“残心”',event.cards],true).set('ai',function(button){
                                            return get.value(button.link);
                                        });
                                        'step 1'
                                        player.gain(result.links[0],'gain2');
                                        player.syncStorage('bhxueying');
                                    },
                                },
                                mark:{
                                    trigger:{
                                        global:["loseAfter","cardsDiscardAfter"],
                                        player:"phaseAfter",
                                    },
                                    forced:true,
                                    firstDo:true,
                                    silent:true,
                                    filter:function(event,player){
                                        if(event.name=='phase') return true;
                                        if(player!=_status.currentPhase) return false;
                                        if(event.name=='lose') return event.position==ui.discardPile;
                                        return true;
                                    },
                                    content:function(){
                                        if(trigger.name=='phase'){
                                            player.unmarkSkill('bhshasheng_mark');
                                            return;
                                        }
                                        var suits=[];
                                        game.getGlobalHistory('cardMove',function(evt){
                                            if(suits.length>=4) return;
                                            if(evt.name=='lose'){
                                                if(evt.position==ui.discardPile){
                                                    for(var i of evt.cards) suits.add(get.suit(i,false));
                                                }
                                            }
                                            else{
                                                if(evt.name=='cardsDiscard'){
                                                    for(var i of evt.cards) suits.add(get.suit(i,false));
                                                }
                                            }
                                        });
                                        player.storage.bhshasheng_mark=suits;
                                        player.markSkill('bhshasheng_mark');
                                    },
                                    intro:{
                                        onunmark:true,
                                        content:"本回合已有$花色的牌进入过弃牌堆",
                                    },
                                    sub:true,
                                    popup:false,
                                },
                            },
                            ai:{
                                threaten:2.0,
                            },
                        },
                        bhguaidao: {
                            audio: "ext:崩崩崩/audio:2",
                            group: "bhguaidao_gain",
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            direct: true,
                            check: function (event, player) {
                                return true;
                            },
                            filter: function (event, player) {
                                return player.countCards('h') > 0;
                            },
                            content: function () {
                                'step 0'
                                var players = game.filterPlayer();
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i].storage.bhguaidao) {
                                        players[i].addSkill('bhguaidao2');
                                    }
                                }
                                player.chooseCardTarget({
                                    filterCard: true,
                                    filterTarget: function (card, player, target) {
                                        return player != target && !target.storage.bhguaidao;
                                    },
                                    ai1: function (card) {
                                        return 8 - get.value(card);
                                    },
                                    ai2: function (target) {
                                        var player = _status.event.player;
                                        var att = get.attitude(player, target);
                                        if (game.hasPlayer(function (current) {
                                            return current.countCards('j', { name: 'lebu' });
                                        })) {
                                            var targets1 = game.filterPlayer();
                                            var targets2 = [];
                                            var target1;
                                            while (targets1.length) {
                                                target1 = targets1.shift();
                                                if (target1.countCards('j', { name: 'lebu' })) {
                                                    targets2.push(target1);
                                                }
                                            }
                                            return (targets2.length && targets2.contains(target) && att > 0) ? 6 : -att;
                                        } else {
                                            if (game.hasPlayer(function (current) {
                                                return -att && current.countCards('e');
                                            })) {
                                                return -att + target.countCards('e') * 4;
                                            } else {
                                                return -att + target.countCards('h') > (target.hp + 1) ? target.hp + 1 : target.countCards('h') * 2;
                                            }
                                        }
                                    },
                                    prompt: get.prompt2('bhguaidao')
                                });
                                "step 1"
                                if (result.bool) {
                                    player.logSkill('bhguaidao', result.targets[0]);
                                    result.targets[0].addSkill('bhguaidao2');
                                    result.targets[0].storage.bhguaidao = [result.cards[0], player];
                                    player.lose(result.cards[0], result.targets[0].node.special, 'toStorage');
                                    player.$give(1, result.targets[0], false);
                                }
                            },
                            subSkill: {
                                gain: {
                                    audio: "ext:崩崩崩/audio:2",
                                    forced: true,
                                    trigger: {
                                        global: "phaseUseEnd",
                                    },
                                    filter: function (event, player) {
                                        if (!event.player.hasSkill('bhguaidao2')) return false;
                                        if (event.player.countCards('h') > 0 && !event.player.isMinHandcard(true)) return true;
                                        if (event.player.countCards('e') > 0) return true;
                                        return false;
                                    },
                                    content: function () {
                                        'step 0'
                                        if (trigger.player.countCards('h') > 0 && !trigger.player.isMinHandcard(true)) {
                                            player.gainPlayerCard(trigger.player, true, 'h', [1, trigger.player.hp + 1]);
                                        }
                                        'step 1'
                                        if (trigger.player.countCards('e') > 0) {
                                            player.gainPlayerCard(trigger.player, true, 'e');
                                        }
                                    },
                                },
                            },
                        },
                        "bhguaidao2": {
                            trigger: {
                                player: "phaseDiscardBegin",
                            },
                            forced: true,
                            mark: true,
                            audio: "ext:崩崩崩/audio:2",
                            content: function () {
                                "step 0"
                                player.gain(player.storage.bhguaidao[0], 'draw', 'log', 'fromStorage');
                                delete player.storage.bhguaidao;
                                player.removeSkill('bhguaidao2');
                            },
                            intro: {
                                name: "怪盗",
                                content: "已成为〖怪盗〗的目标",
                                onunmark: function (storage, player) {
                                    var storage = player.storage.bhguaidao;
                                    if (storage && storage.length) {
                                        player.$throw(storage[0], 1000);
                                        game.cardsDiscard(storage[0]);
                                    }
                                    delete player.storage.bhguaidao;
                                },
                            },
                        },
                        bhyouye: {
                            mod: {
                                targetEnabled: function (card, player, target, now) {
                                    if (card.name == 'bingliang' || card.name == 'lebu') return false;
                                },
                            },
                        },
                        bhjiaojian: {
                            trigger: {
                                player: "damageEnd",
                            },
                            direct:true,
                            priority: 6,
                            group: ["bhjiaojian_damage", "bhjiaojian_use"],
                            init: function (player) {
                                if(!player.storage.bhsp) player.storage.bhsp=0;
                                player.syncStorage('bhsp');
                            },
                            filter: function (event, player) {
                                if (event.num > 0) return true;
                                return false;
                            },
                            content: function () {
                                // player.storage.bhsp+=trigger.num;
                                // player.syncStorage('bhsp');
                                // player.markSkill('bhsp');
                                player.logSkill('bhjiaojian');
                                player.gainSP(trigger.num);
                            },
                            subSkill: {
                                damage: {
                                    trigger: {
                                        player: "damageEnd",
                                    },
                                    filter: function (event, player) {
                                        return player.countSP()>=2;
                                    },
                                    priority: 3,
                                    prompt: '是否发动“斠剑”？',
                                    "prompt2":"出牌阶段限一次或当你受到一次伤害后，你可以消耗2点SP，然后令一名角色执行一项：1.将手牌补至你的体力上限（至多摸至8张）；2.将手牌弃至你的体力值（一次性至多弃4张）。",
                                    check:function(event,player){
                                        var targets=game.filterPlayer(function(target){
                                            var num=0;
                                            var att = get.attitude(player, target);
                                            if (att > 0) {
                                                num=(Math.min(8, player.maxHp) - target.countCards('h'));
                                            } else {
                                                num=(Math.min(4, target.countCards('h') - player.hp) - 1);
                                            }
                                            if(att>0){
                                                if(target.hp>2) return num>3;
                                                else return num>1;
                                            } else {
                                                if(target.countCards('h')<5) return num>1;
                                                else return num>3;
                                            }
                                        });
                                        return targets.length>0;
                                    },
                                    content: function () {
                                        'step 0'
                                        event.bhjiaojian_type='null';
                                        player.chooseTarget('请一名其他角色，令其摸牌或弃牌。', 1, true).set('ai', function (target) {
                                            var att = get.attitude(player, target);
                                            if (att > 0) {
                                                return (Math.min(8, player.maxHp) - target.countCards('h'));
                                            } else {
                                                return (Math.min(4, target.countCards('h') - player.hp) - 1);
                                            }
                                        });
                                        'step 1'
                                        event.target = result.targets[0];
                                        var str1 = '摸牌至' + get.cnNumber(Math.min(8, player.maxHp)) + '张';
                                        var str2 = '弃牌至' + get.cnNumber(player.hp) + '张';
                                        player.chooseControl(str1, str2, function (event, player) {
                                            return _status.event.choice;
                                        }).set('ai', function () {
                                            var att = get.attitude(player, event.target);
                                            if (att > 0) {
                                                return str1;
                                            } else {
                                                return str2;
                                            }
                                        });
                                        event.str = str1;
                                        'step 2'
                                        player.line(event.target);
                                        if (result.control == event.str) {
                                            if (event.target.countCards('h') < Math.min(8, player.maxHp)) {
                                                var num1 = Math.min(8, player.maxHp) - event.target.countCards('h');
                                                event.target.draw(num1);
                                                event.bhjiaojian_type='draw';
                                            }
                                        } else {
                                            if (event.target.countCards('h') > player.hp) {
                                                var num2 = Math.min(4, event.target.countCards('h') - player.hp);
                                                event.target.chooseToDiscard(num2, true, 'h');
                                                event.bhjiaojian_type='discard';
                                            }
                                        }
                                        'step 3'
                                        player.loseSP(2);
                                        event.trigger('bhjiaojian');
                                    },
                                    ai: {
                                        maixue: true,
                                        result: {
                                            player: function (player, target) {
                                                if (player.hp >= 4) return [1, 2];
                                                if (player.hp == 3) return [1, 1.5];
                                                if (player.hp == 2) return [1, 0.5];
                                            },
                                            target: function (card, player, target) {
                                                if (get.tag(card, 'damage')) {
                                                    if (player.skills.contains('jueqing')) return [1, -2];
                                                    if (!target.hasFriend()) return;
                                                    if (target.hp >= 4) return [1, get.tag(card, 'damage') * 2];
                                                    if (target.hp == 3) return [1, get.tag(card, 'damage') * 1.5];
                                                    if (target.hp == 2) return [1, get.tag(card, 'damage') * 0.5];
                                                }
                                            },
                                        },
                                    },
                                },
                                use: {
                                    enable: "phaseUse",
                                    usable: 1,
                                    filter: function (event, player) {
                                        return player.countSP()>=2;
                                    },
                                    prompt:"出牌阶段限一次或当你受到一次伤害后，你可以消耗2点SP，然后令一名角色执行一项：1.将手牌补至你的体力上限（至多摸至8张）；2.将手牌弃至你的体力值（一次性至多弃4张）。",
                                    check:function(event,player){
                                        var targets=game.filterPlayer(function(target){
                                            var num=0;
                                            var att = get.attitude(player, target);
                                            if (att > 0) {
                                                num=(Math.min(8, player.maxHp) - target.countCards('h'));
                                            } else {
                                                num=(Math.min(4, target.countCards('h') - player.hp) - 1);
                                            }
                                            if(att>0){
                                                if(target.hp>2) return num>3;
                                                else return num>1;
                                            } else {
                                                if(target.countCards('h')<5) return num>1;
                                                else return num>3;
                                            }
                                        });
                                        return targets.length>0;
                                    },
                                    content: function () {
                                        'step 0'
                                        event.bhjiaojian_type='null';
                                        player.chooseTarget('请一名其他角色，令其摸牌或弃牌。', 1, true).set('ai', function (target) {
                                            var att = get.attitude(player, target);
                                            if (att > 0) {
                                                return att * (Math.min(8, player.maxHp) - target.countCards('h'));
                                            } else {
                                                return -att * (Math.min(4, target.countCards('h') - player.hp) - 2);
                                            }
                                        });
                                        'step 1'
                                        event.target = result.targets[0];
                                        player.line(event.target);
                                        var str1 = '摸牌至' + get.cnNumber(Math.min(8, player.maxHp)) + '张';
                                        var str2 = '弃牌至' + get.cnNumber(player.hp) + '张';
                                        player.chooseControl(str1, str2, function (event, player) {
                                            return _status.event.choice;
                                        }).set('ai', function () {
                                            var att = get.attitude(player, event.target);
                                            if (att > 0) {
                                                return str1;
                                            } else {
                                                return str2;
                                            }
                                        });
                                        event.str = str1;
                                        'step 2'
                                        if (result.control == event.str) {
                                            if (event.target.countCards('h') < Math.min(8, player.maxHp)) {
                                                var num1 = Math.min(8, player.maxHp) - event.target.countCards('h');
                                                event.target.draw(num1);
                                                event.bhjiaojian_type='draw';
                                            }
                                        } else {
                                            if (event.target.countCards('h') > player.hp) {
                                                var num2 = Math.min(4, event.target.countCards('h') - player.hp);
                                                event.target.chooseToDiscard(num2, true, 'h');
                                                event.bhjiaojian_type='discard';
                                            }
                                        }
                                        'step 3'
                                        player.loseSP(2);
                                        event.trigger('bhjiaojian');
                                    },
                                    ai: {
                                        order:4.3,
                                        maixue: true,
                                        result: {
                                            player:function(player,target){
                                                var targets=game.filterPlayer(function(target){
                                                    var att = get.attitude(player, target);
                                                    if (att > 0) {
                                                        return (Math.min(8, player.maxHp) - target.countCards('h'));
                                                    } else {
                                                        return (Math.min(4, target.countCards('h') - player.hp) - 1);
                                                    }
                                                });
                                                if(targets.length>0) return 2;
                                                else return 0;
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        bhchongfeng: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            group: "bhchongfeng_recover",
                            check: function (event, player) {
                                if (player.isMinHp(true) && !player.hasSkill('bhchongfeng_im') && player.hp > 1) {
                                    return true
                                } else {
                                    return player.hp > 2;
                                }
                            },
                            content: function () {
                                'step 0'
                                player.loseHp();
                                'step 1'
                                var num = player.maxHp - player.hp;
                                if (num < 2) {
                                    player.draw(2);
                                } else if (num > 5) {
                                    player.draw(5);
                                } else {
                                    player.draw(num);
                                }
                            },
                            ai: {
                                order: 8,
                                result: {
                                    player: function (player) {
                                        if (player.countCards('h') > player.hp + 1) return -1;
                                        if (!player.hasSkill('bhchongfeng_im') && player.hp > 1) {
                                            return 2;
                                        } else if (player.hp > 2) {
                                            if (player.countCards('hs', { name: 'tao' })) {
                                                return player.maxHp - player.hp + 2;
                                            } else {
                                                return player.maxHp - player.hp;
                                            }
                                        } else {
                                            return -8;
                                        }
                                    },
                                },
                            },
                            subSkill: {
                                recover: {
                                    trigger: {
                                        player: "loseHpEnd",
                                    },
                                    frequent: true,
                                    filter: function (event, player) {
                                        if (!event.skill == "bhchongfeng") return false;
                                        if (player.isMinHp(true) && !player.hasSkill('bhchongfeng_im')) return true;
                                        return false;
                                    },
                                    content: function () {
                                        if (!player.hasSkill('bhchongfeng_im')) {
                                            player.addTempSkill('bhchongfeng_im');
                                        }
                                        player.recover();
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhjinmie:{
                            audio: "ext:崩崩崩/audio:2",
                            init:function(player){
                                player.storage.bhjinmie=0;
                            },
                            enable:'chooseToUse',
                            viewAs:{
                                name:'huogong',
                            },
                            selectCard:0,
                            filterCard:false,
                            filter:function(event,player){
                                return !player.hasSkill('bhjinmie_lm');
                            },
                            precontent:function(){
                                player.storage.bhjinmie=0;
                                player.addTempSkill('bhjinmie_lm');
                                player.addTempSkill('bhjinmie_use');
                            },
                            subSkill:{
                                lm:{
                                    charlotte:true,
                                    forced:true,
                                    sub:true,
                                    silent:true,
                                    trigger:{
                                        source:'damage',
                                    },
                                    filter:function(event,player){
                                        if(player.storage.bhjinmie==0) return event.card.name=='huogong';
                                        else if(player.storage.bhjinmie==1) return event.card.name=='juedou';
                                        else if(player.storage.bhjinmie==2) return event.card.name=='sha'&&event.card.nature&&event.card.nature=='fire';
                                        else return false;
                                    },
                                    content:function(){
                                        player.storage.bhjinmie=-1;
                                    },
                                },
                                use:{
                                    forced:true,
                                    silent:true,
                                    charlotte:true,
                                    sub:true,
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhjinmie>=0;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.target=trigger.targets[0];
                                        event.card=trigger.card;
                                        event.bool=false;
                                        if(player.storage.bhjinmie==0&&event.card.name=='huogong') event.bool=true;
                                        else if(player.storage.bhjinmie==1&& event.card.name=='juedou') event.bool=true;
                                        else if(player.storage.bhjinmie==2&&event.card.name=='sha'&&event.card.nature&&event.card.nature=='fire') event.bool=true;
                                        'step 1'
                                        if(event.bool){
                                            player.storage.bhjinmie++;
                                            if(player.storage.bhjinmie==1) player.chooseBool('你可以弃置一张牌，以视为对'+get.translation(event.target)+'使用【决斗】').set('si',function(){
                                                return player.hp>1&&(event.target.hp<2||event.target.countCards('h')<3);
                                            });
                                            else if(player.storage.bhjinmie==2) player.chooseBool('你可于回合结束时失去一个技能，以视为对'+get.translation(event.target)+'使用火【杀】').set('si',function(){
                                                return [0,1,2,-1].randomGet()>0;
                                            });
                                            else if(player.storage.bhjinmie==3) player.chooseBool('你可于当前轮次结束时死亡，以对'+get.translation(event.target)+'造成你已损体力值点火焰伤害').set('si',function(){
                                                if(player.identity=='zhu') return false;
                                                return (player.maxHp-player.hp>1&&[0,1,2,-1].randomGet()>0)||player.maxHp==1;
                                            });
                                        } else event.finish();
                                        'step 2'
                                        if(result.bool){
                                            if(player.storage.bhjinmie==1&&player.countCards('he')){
                                                player.chooseToDiscard('he',true).set('ai',function(card){
                                                    return 8-get.value(card);
                                                });
                                                player.useCard({name:'juedou',isCard:true},event.target);
                                            } else if(player.storage.bhjinmie==2){
                                                player.addTempSkill('bhjinmie_lose');
                                                player.useCard({name:'sha',nature:'fire',isCard:true},event.target);
                                            } else if(player.storage.bhjinmie==3){
                                                player.addSkill('bhjinmie2');
                                                event.target.damage(player.maxHp-player.hp,'fire');
                                            }
                                        }
                                    },
                                },
                                lose:{
                                    forced:true,
                                    silent:true,
                                    charlotte:true,
                                    sub:true,
                                    trigger:{
                                        global:'phaseEnd',
                                    },
                                    filter:function(event,player){
                                        return player.getSkills(null, false, false).filter(function (skill) {
                                            var info = lib.skill[skill];
                                            var _info = skill + '_info'
                                            if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                            return info;
                                        }).length>0;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.list=player.getSkills(null, false, false).filter(function (skill) {
                                            var info = lib.skill[skill];
                                            var _info = skill + '_info'
                                            if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                            return info;
                                        });
                                        player.chooseButton(['请选择一个技能失去',[event.list,'vcard']],true).set('ai',function(button){
                                            return [0,-1,1].randomGet();
                                        });
                                        'step 1'
                                        player.removeSkill(result.links[0][2]);
                                    },
                                },
                            },
                            ai:{
                                order:2.9,
                                result:{
                                    player:1,
                                },
                            },
                        },
                        bhjinmie2:{
                            forced:true,
                            silent:true,
                            charlotte:true,
                            unique:true,
                            trigger:{
                                global:"roundStart",
                            },
                            content:function(){
                                player.die();
                            },
                        },
                        bhshenyun: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:"phaseEnd",
                            },
                            init:function(player){
                                player.storage.bhshenyun=0;
                            },
                            filter:function(event,player){
                                if(event.player==player) return false;
                                return player.hp<player.maxHp;
                            },
                            forced:true,
                            direct:true,
                            content:function(){
                                'step 0'
                                if(player.storage.bhshenyun==1){
                                    player.chooseBool('是否发动【神陨】？','一名其他角色的回合结束时，若你已受伤，你可以失去1点体力上限并执行一个额外的回合').set('ai',function(){
                                        if(player.hp==player.maxHp) return false;
                                        if(player.maxHp<=1) return false;
                                        if(player.hp<=2&&player.maxHp>=4) return true;
                                        if(player.hp<=1&&player.maxHp>=3) return true;
                                        return false;
                                    });
                                } else if(player.storage.bhshenyun>3){
                                    event.finish();
                                } else {
                                    event.goto(2);
                                }
                                'step 1'
                                if(!result.bool) event.finish();
                                'step 2'
                                player.logSkill('bhshenyun');
                                player.loseMaxHp();
                                if(player.storage.bhshenyun<2){
                                    player.insertPhase();
                                } else {
                                    var next=player.phaseDiscard();
                                    event.next.remove(next);
                                    trigger.next.push(next);
                                    player.storage.bhshenyun++;
                                }
                            },
                        },
                        bhzhongmu: {
                            audio: "ext:崩崩崩/audio:2",
                            skillAnimation: true,
                            animationColor: 'fire',
                            trigger: {
                                player: "dieBegin",
                            },
                            content:function(){
                                'step 0'
                                event.skills=player.getSkills(null, false, false).filter(function (skill) {
                                    var info = lib.skill[skill];
                                    var _info = skill + '_info'
                                    if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                    return info;
                                });
                                if(event.skills.length==1){ 
                                    player.chooseTarget('你可以令一名其他角色获得〖'+get.translation(event.skills[0])+'〗',function(card,player,target){
                                        return target!=player;
                                    }).set('ai',function(target){
                                        return get.attitude(player,target);
                                    });
                                } else event._result={bool:false};
                                'step 1'
                                if(result.bool){
                                    result.targets[0].addSkill(event.skills[0]);
                                }
                                if(player.maxHp==1){
                                    player.chooseTarget('你可以令一名其他角色获得1点体力上限',function(card,player,target){
                                        return target!=player;
                                    }).set('ai',function(target){
                                        return get.attitude(player,target);
                                    });
                                } else event._result={bool:false};
                                'step 2'
                                if(result.bool){
                                    result.targets[0].gainMaxHp();
                                }
                                if(player.hp==1){
                                    player.chooseTarget('你可以令一名其他角色获得1点体力',function(card,player,target){
                                        return target!=player;
                                    }).set('ai',function(target){
                                        return get.attitude(player,target)+(target.hp<target.maxHp?2:-2);
                                    });
                                } else event._result={bool:false};
                                'step 3'
                                if(result.bool){
                                    result.targets[0].recover();
                                }
                                if(player.countCards('he')==1){
                                    player.chooseTarget('你可以令一名其他角色获得'+get.translation(player.getCards('he')[0]),function(card,player,target){
                                        return target!=player;
                                    }).set('ai',function(target){
                                        return get.attitude(player,target);
                                    });
                                } else event._result={bool:false};
                                'step 4'
                                if(result.bool){
                                    result.targets[0].gain(player.getCards('he')[0],player,'give');
                                }
                            },
                        },
                        bhtiemu: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "phaseZhunbei",
                            },
                            silent:true,
                            frequent: true,
                            filter: function (event, player) {
                                return player.countCards('h');
                            },
                            content: function () {
                                "step 0"
                                event.targets=[];
                                "step 1"
                                var cards=player.getCards('h');
                                player.chooseCardTarget({
                                    selectCard:[1,cards.length],
                                    filterCard:true,
                                    position:'h',
                                    filterTarget: function (card, player, target) {
                                        return !event.targets.contains(target);
                                    },
                                    ai1: function (card) {
                                        if(game.hasPlayer(function(target){
                                            return get.attitude(player,target)>0&&target.hp<=2;
                                        })) return ui.selected.cards.length<2?9-get.value(card):7-get.value(card);
                                        if(ui.selected.cards.length>=2) return -0.1;
                                        else return 8-get.value(card);
                                    },
                                    ai2: function (target) {
                                        var player=_status.currentPhase;
                                        var att = get.attitude(player, target);
                                        if(att<0) return -10;
                                        if(target.hasSkillTag('maixue')&&target.hp>1) return -8;
                                        return target.hp<=2?att+4:att;
                                    },
                                    prompt: '是否发动【铁幕】？',
                                    prompt2:'准备阶段，你可以将任意张手牌分配给任意名角色作为“盾”置于角色卡上。一名角色失去护盾前，你可以令其重铸一张牌，若被重铸的牌与其一张“盾”花色相同，你获得之。',
                                });
                                "step 2"
                                if(result.bool){
                                    event.targets.push(result.targets[0]);
                                    player.logSkill('bhtiemu',result.targets[0]);
                                    result.targets[0].gainHudun(result.cards,player);
                                } else event.finish();
                                "step 3"
                                if(player.countCards('h')&&event.targets.length<game.filterPlayer().length) event.goto(1);
                            },
                            group:['bhtiemu_remove','bhtiemu_begin'],
                            subSkill:{
                                begin:{
                                    audio:'bhtiemu',
                                    trigger:{
                                        global:'roundStart',
                                    },
                                    filter:function(event,player){
                                        return player.getExpansions('bhhudun').length<4;
                                    },
                                    frequent:true,
                                    content:function(){
                                        player.gainHudun(get.cards(2),player);
                                    },
                                },
                                remove:{
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger:{
                                        global:'loseHudunBegin',
                                    },
                                    "prompt2":'准备阶段，你可以将任意张手牌分配给任意名角色作为“盾”置于角色卡上。一名角色失去护盾前，你可以令其重铸一张牌，若被重铸的牌与其一张“盾”花色相同，你获得之。',
                                    filter:function(event,player){
                                        return event.player.countCards('he');
                                    },
                                    check:function(event,player){
                                        if(get.attitude(player,event.player)<0) return false;
                                        return event.player.countCards('h')>1;
                                    },
                                    logTarget:function(event,player){
                                        return event.player;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.target=trigger.player;
                                        event.target.chooseCard('请选择一张牌重铸','he',true).set('ai',function(card){
                                            var val=7-get.value(card);
                                            var suits=[];
                                            var att=get.attitude(event.target,player);
                                            var cards=event.target.getExpansions('bhhudun');
                                            for(let i of cards){
                                                if(!suits.contains(get.suit(i))) suits.push(get.suit(i));
                                            }
                                            if(suits.contains(get.suit(card))){
                                                if(att>0) val+=6;
                                                else val-=2.1;
                                            }
                                            return val;
                                        });
                                        'step 1'
                                        var suits=[];
                                        var cards=event.target.getExpansions('bhhudun');
                                        for(let i of cards){
                                            if(!suits.contains(get.suit(i))) suits.push(get.suit(i));
                                        }
                                        event.card=result.cards[0];
                                        event.target.loseToDiscardpile(event.card);
                                        event.target.draw();
                                        if(suits.contains(get.suit(event.card))) player.gain(event.card,'gain2');
                                    },
                                },
                            },
                        },
                        bhnilin: {
                            trigger: {
                                player: "damageEnd",
                            },
                            forced: true,
                            group: "bhnilin_sha",
                            mark: true,
                            marktext: "逆鳞",
                            intro: {
                                name: "逆鳞",
                                content: function (storage, player, skill) {
                                    return "下一张【杀】的伤害+" + player.countMark("bhnilin") + "";
                                },
                            },
                            init: function (player) {
                                player.storage.bhnilin = 0;
                                player.markSkill('bhnilin');
                                player.syncStorage('bhnilin');//同步
                            },
                            filter: function (event, player) {
                                return player.countMark('bhnilin') < 3;
                            },
                            content: function () {
                                player.addMark('bhnilin');
                            },
                            subSkill: {
                                sha: {
                                    forced: true,
                                    trigger: {
                                        player: "useCard",
                                    },
                                    filter: function (event, player) {
                                        return event.card && (event.card.name == 'sha');
                                        //&& game.hasPlayer(function (current) {
                                        //   return current != player && get.distance(current, player) <= 1;
                                        //}));
                                    },
                                    content: function () {
                                        'step 0'
                                        trigger.directHit.addArray(game.filterPlayer(function (current) {
                                            return current != player && get.distance(current, player) <= 1;
                                        }));
                                        'step 1'
                                        if (player.countMark('bhnilin') > 0) {
                                            event.num = player.countMark('bhnilin');
                                            if (!trigger.baseDamage) trigger.baseDamage = event.num;
                                            trigger.baseDamage += event.num;
                                        } else {
                                            event.finish();
                                        }
                                        'step 2'
                                        player.removeMark('bhnilin', event.num);
                                    },
                                    ai: {
                                        "directHit_ai": true,
                                        skillTagFilter: function (player, tag, arg) {
                                            return get.distance(arg.target, player) <= 1;
                                        },
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhdaiduo: {
                            trigger: {
                                global: "phaseJieshu",
                            },
                            group: ["bhdaiduo_draw", "bhdaiduo_damage"],
                            forced: true,
                            init: function (player) {
                                if(!player.storage.bhsp) player.storage.bhsp=0;
                                //player.storage.bhsp = 0;
                                //player.markSkill('bhsp');
                                player.syncStorage('bhsp');
                            },
                            content: function () {
                                if (trigger.player == player) {
                                    player.loseSP(player.countSP());
                                    // var num = player.countMark('bhsp');
                                    // player.removeMark('bhsp', num);
                                    // player.syncStorage('bhsp');
                                } else {
                                    player.gainSP();
                                    // player.addMark('bhsp');
                                    // player.syncStorage('bhsp');
                                }
                            },
                            subSkill: {
                                draw: {
                                    trigger: {
                                        player: "useCard",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (player != _status.currentPhase) return false;
                                        if (!player.countSP()) return false;
                                        return true;
                                    },
                                    content: function () {
                                        player.loseSP();
                                        // player.removeMark('bhsp');
                                        // player.syncStorage('bhsp');
                                        player.draw();
                                    },
                                    ai: {
                                        effect: {
                                            player: function (card, player) {
                                                if (player.countSP() > 0 && get.tag(card, 'damage')) {
                                                    return 0.5;
                                                } else if (player.countSP() == 0 && get.tag(card, 'damage')) {
                                                    return 1;
                                                } else {
                                                    return 0;
                                                }
                                            },
                                        },
                                    },
                                    sub: true,
                                },
                                damage: {
                                    trigger: {
                                        source: "damageBegin",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (!player.countSP()) return true;
                                        return false;
                                    },
                                    content: function () {
                                        trigger.num--;
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhtangguo: {
                            trigger: {
                                player: "useCardToPlayered",
                            },
                            group: ["bhtangguo_tao", "bhtangguo_draw"],
                            mark: true,
                            marktext: "糖",
                            intro: {
                                name: "糖",
                                content: "mark",
                            },
                            init: function (player) {
                                player.storage.bhtangguo = 0;
                                player.markSkill('bhtangguo');
                                player.syncStorage('bhtangguo');
                            },
                            filter: function (event, player) {
                                return event.target != player && player.countMark('bhtangguo') < 5;
                            },
                            content: function () {
                                'step 0'
                                player.judge();
                                'step 1'
                                if (result.color == 'red') {
                                    player.addMark('bhtangguo');
                                }
                            },
                            subSkill: {
                                tao: {
                                    trigger: {
                                        global: ["phaseJieshu", "dying"],
                                    },
                                    check: function (event, player) {
                                        return get.attitude(player, event.player) > 0;
                                    },
                                    filter: function (event, player) {
                                        return player.countMark('bhtangguo') > 0 && event.player.hp < event.player.maxHp;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.removeMark('bhtangguo');
                                        'step 1'
                                        trigger.player.useCard({ name: 'tao', isCard: true }, trigger.player, false);
                                    },
                                    sub: true,
                                },
                                draw: {
                                    trigger: {
                                        player: "phaseZhunbei",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.countMark('bhtangguo') > 0;
                                    },
                                    content: function () {
                                        'step 0'
                                        event.num = player.countMark('bhtangguo');
                                        player.removeMark('bhtangguo', event.num);
                                        'step 1'
                                        var num = parseInt((event.num + 1) / 2);
                                        player.draw(num);
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhsuixing: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "useCardToPlayered",
                            },
                            check:function(event,player){
                                return get.attitude(player,event.target)<0;
                            },
                            logTarget:function(event,player){
                                return event.target;
                            },
                            filter: function (event, player) {
                                if (event.card.name == 'sha') return true;
                                if (event.card.name == 'juedou') return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                event.target=trigger.target;
                                if(event.target.hasSkill('bhshuairuo')){
                                    player.discardPlayerCard(event.target,'he',true);
                                } else {
                                    event.target.addSkill('bhshuairuo');
                                }
                            },
                        },
                        bhshuairuo: {
                            mark: true,
                            marktext: "衰弱",
                            intro: {
                                name: "衰弱",
                                content: function (storage, player) {
                                    return "锁定技，当你即将对有“盾”的角色造成物理伤害时，该角色护盾的额定消耗减半。";
                                },
                                markcount: function () {
                                    return 0;
                                },
                            },
                            forced:true,
                            unique:true,
                            trigger:{
                                source:'damageBegin1',
                            },
                            filter:function(event,player){
                                return event.player.getExpansions('bhhudun').length>0;
                            },
                            content:function(){
                                trigger.bhhudun_weak=true;
                            },
                            group:'bhshuairuo_remove',
                            subSkill:{
                                remove:{
                                    trigger:{
                                        player:'phaseEnd',
                                    },
                                    forced:true,
                                    sub:true,
                                    unique:true,
                                    silent:true,
                                    content:function(){
                                        player.removeSkill('bhshuairuo');
                                    },
                                },
                            },
                        },
                        bhyiyu: {
                            forced: true,
                            audio: "ext:崩崩崩/audio:2",
                            group: "bhyiyu_recover",
                            trigger: {
                                player: "damageBegin",
                            },
                            filter: function (event, player) {
                                if (event.nature == 'fire') return true;
                                return false;
                            },
                            content: function () {
                                trigger.cancel();
                            },
                            subSkill: {
                                recover: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: "dyingBegin",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.maxHp > 1;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.loseMaxHp();
                                        'step 1'
                                        event.num = 1 - player.hp;
                                        player.recover(event.num);
                                    },
                                    sub: true,
                                },
                            },
                            ai: {
                                threaten: 3,
                                nofire: true,
                                effect: {
                                    target: function (card, player, target, current) {
                                        if (get.tag(card, 'fireDamage')) return 'zerotarget';
                                    },
                                },
                            },
                        },
                        bhshenju: {
                            derivation: ['bhqieling', 'bhzhiwo', 'bhjuxiang', 'bhkaixuan'],
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            mark: true,
                            marktext: "薪炎",
                            intro: {
                                name: "薪炎",
                                content: "mark",
                            },
                            init: function (player) {
                                player.storage.bhshenju = 0;
                                player.markSkill('bhshenju');
                                player.syncStorage('bhshenju');
                            },
                            group: "bhshenju_mark",
                            trigger: {
                                player: ["loseMaxHpEnd", "gainMaxHpEnd"],
                            },
                            filter: function (event, player) {
                                if (!player.hasSkill('bhqieling')) return true;
                                if (!player.hasSkill('bhzhiwo')) return true;
                                if (!player.hasSkill('bhjuxiang')) return true;
                                if (!player.hasSkill('bhkaixuan')) return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                var list = [];
                                if (!player.hasSkill('bhqieling')) {
                                    list.push('bhqieling');
                                }
                                if (!player.hasSkill('bhzhiwo')) {
                                    list.push('bhzhiwo');
                                }
                                if (!player.hasSkill('bhjuxiang')) {
                                    list.push('bhjuxiang');
                                }
                                if (!player.hasSkill('bhkaixuan')) {
                                    list.push('bhkaixuan');
                                }
                                event.list = list;
                                'step 1'
                                if (event.list.length == 1) event._result = { control: event.list[0] };
                                else player.chooseControl(event.list).set('prompt', '身炬：选择获得下列技能中的一个').set('ai', function () {
                                    if ((event.list.contains('bhqieling') && player.maxHp <= 3) || player.hasSkill('bhkaixuan')) return 'bhqieling';
                                    if (event.list.contains('bhkaixuan') && player.maxHp > 3) return 'bhkaixuan';
                                    if (event.list.contains('bhjuxiang')) return 'bhjuxiang';
                                    return 0;
                                });
                                'step 2'
                                // if (result.control == 'xindangxian') player.storage.xinfuli = true;
                                player.addSkill(result.control);
                                player.popup(result.control);
                                game.log(player, '获得了技能', '#g【' + get.translation(result.control) + '】');
                            },
                            subSkill: {
                                mark: {
                                    audio: 'bhshenju',
                                    forced: true,
                                    mark: true,
                                    trigger: {
                                        player: ["phaseZhunbei", "phaseJieshu", "damage"],
                                    },
                                    filter: function (event, player) {
                                        return player.countMark('bhshenju') < 5;
                                    },
                                    content: function () {
                                        player.addMark('bhshenju');
                                    },
                                    sub: true,
                                },
                            },
                            ai: {
                                threaten: 2.5,
                            },
                        },
                        bhzhiwo: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "useCard",
                            },
                            filter: function (event, player) {
                                return event.card && (event.card.name == 'sha') && player.countMark('bhshenju') > 0;;
                            },
                            content: function () {
                                'step 0'
                                player.removeMark('bhshenju');
                                player.syncStorage('bhshenju');
                                'step 1'
                                trigger.directHit.addArray(game.filterPlayer(function (current) {
                                    return current != player;
                                }));
                            },
                            ai: {
                                "directHit_ai": true,
                                skillTagFilter: function (player, tag, arg) {
                                    return player.countMark('bhshenju');
                                },
                            },
                        },
                        bhjuxiang: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: ["chooseToUse"],
                            usable: 2,
                            filter: function (event, player) {
                                if (!player.countMark('bhshenju') > 0) return false;
                                if (event.type == 'wuxie') return false;
                                var hs = player.getCards('h');
                                if (!hs.length) return false;
                                for (var i of hs) {
                                    if (game.checkMod(i, player, 'unchanged', 'cardEnabled2', player) === false) return false;
                                }
                                for (var i of lib.inpile) {
                                    if (i == 'tiesuo') return true;
                                    if (i == 'sha') {
                                        var list = [''];
                                        for (var j of list) {
                                            if (event.filterCard({ name: i, nature: j, cards: hs }, player, event)) return true;
                                        }
                                    }
                                }
                                return false;
                            },
                            chooseButton: {
                                dialog: function (event, player) {
                                    var vcards = [], hs = player.getCards('h');
                                    for (var i of lib.inpile) {
                                        // if (i != 'du' && get.type(i) == 'basic' && event.filterCard({ name: i, cards: hs }, player, event)) vcards.push(['基本', '', i]);
                                        if (i == 'sha') {
                                            var list = [''];
                                            for (var j of list) {
                                                if (event.filterCard({ name: i, nature: j, cards: hs }, player, event)) vcards.push(['基本', '', i, j]);
                                            }
                                        }
                                        if (i == 'tiesuo') vcards.push(['锦囊', '', i]);
                                        // if (s.contains(i)) vcards.push([get.type(i), '', i]);
                                    }
                                    return ui.create.dialog('具像', [vcards, 'vcard']);
                                },
                                check: function (button, player) {
                                    if (_status.event.getParent().type != 'phase') return 1;
                                    return _status.event.player.getUseValue({ name: button.link[2], nature: button.link[3] });
                                },
                                backup: function (links, player) {
                                    return {
                                        audio: 'bhjuxiang',
                                        popname: true,
                                        viewAs: { name: links[0][2], nature: links[0][3] },
                                        filterCard: true,
                                        selectCard: 1,
                                        position: 'h',
                                        precontent: function () {
                                            player.removeMark('bhshenju', 1);
                                            player.syncStorage("bhshenju");
                                        }
                                    }
                                },
                            },
                            hiddenCard: function (player, name) {
                                return name != 'du' && get.type(name) == 'basic' && player.countCards('h') > 0;
                            },
                            ai: {
                                respondSha: true,
                                skillTagFilter: function (player) {
                                    return player.countCards('he') > 0;
                                },
                                order: 1,
                                result: {
                                    player: function (player) {
                                        if (_status.event.dying) {
                                            return get.attitude(player, _status.event.dying);
                                        }
                                        var val = 0, hs = player.getCards('he'), max = 0;
                                        for (var i of hs) {
                                            val += get.value(i, player);
                                            if (get.type(i, player) == 'trick') max += 5;
                                        }
                                        if (player.hasSkill('zhenjue')) max += 7;
                                        return val <= max ? 1 : 0;
                                    },
                                },
                            },
                        },
                        bhkaixuan: {
                            audio: "ext:崩崩崩/audio:2",
                            group: "bhkaixuan_draw",
                            trigger: {
                                source: "damageBegin",
                            },
                            check: function (event, player) {
                                if (event.player.hasSkillTag('nofire')) return false;
                                return true;
                            },
                            filter: function (event, player) {
                                return (!event.nature) && player.countMark('bhshenju') > 0;
                            },
                            content: function () {
                                'step 0'
                                player.removeMark('bhshenju');
                                player.syncStorage('bhshenju');
                                'step 1'
                                trigger.nature = 'fire';
                            },
                            ai: {
                                fireAttack: true,
                                result: {
                                    player: 2,
                                },
                            },
                            subSkill: {
                                draw: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        source: "damageEnd",
                                    },
                                    frequent: true,
                                    filter: function (event, player) {
                                        if (!event.nature) return false;
                                        if (event.nature == 'fire') return true;
                                        return false;
                                    },
                                    content: function () {
                                        player.draw();
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhxinhuo: {
                            audio: "ext:崩崩崩/audio:2",
                            frequent: true,
                            group: ["bhxinhuo_draw"],
                            trigger: {
                                global: "dieBegin",
                            },
                            silent: true,
                            filter: function (event, player) {
                                return event.player != player;
                            },
                            content: function () {
                                'step 0'
                                trigger.player.chooseBool('是否令' + get.translation(player) + '增加一点体力上限并回复一点体力？').set('ai', function () {
                                    return get.attitude(_status.event.player, _status.event.target) > 0;
                                }).set('target', player);
                                'step 1'
                                if (result.bool) {
                                    player.logSkill('bhxinhuo');
                                    trigger.player.line(player, 'fire');
                                    player.gainMaxHp();
                                    player.recover();
                                }
                            },
                            ai: {
                                threaten: 2.1,
                            },
                            subSkill: {
                                draw: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: "phaseDrawBegin2",
                                    },
                                    frequent: true,
                                    filter: function (event, player) {
                                        return !event.numFixed && player.maxHp > 3;
                                    },
                                    content: function () {
                                        trigger.num += (Math.max(player.maxHp - 3, 0));
                                    },
                                    sub: true,
                                },
                                gain: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        source: "dieAfter",
                                    },
                                    frequent: true,
                                    content: function () {
                                        player.gainMaxHp();
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhqieling: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "damageEnd",
                            },
                            filter: function (event, player) {
                                return player.countMark('bhshenju') > 0;
                            },
                            content: function () {
                                'step 0'
                                player.removeMark('bhshenju');
                                player.syncStorage('bhshenju');
                                'step 1'
                                player.draw(3);
                            },
                            ai: {
                                maixue: true,
                            },
                        },
                        bhtianyu: {
                            // zhuSkill: true,
                            dutySkill:true,
                            unique:true,
                            derivation:'bhdongzheng',
                            init:function(player){
                                player.storage.bhtianyu_use=[];
                            },
                            trigger:{
                                player:['bhjiaojian','phaseZhunbei'],
                            },
                            direct:true,
                            filter:function(event,player){
                                return game.hasPlayer(function(target){
                                    return target!=player&&!player.storage.bhtianyu_use.contains(target);
                                });
                            },
                            content:function(){
                                'step 0'
                                player.chooseTarget('请选择一名其他角色发动【天谕】',function(card,player,target){
                                    return target!=player&&!player.storage.bhtianyu_use.contains(target);
                                },true).set('ai',function(target){
                                    var att=get.attitude(player,target);
                                    var val=0;
                                    if(att>0){
                                        if(target.hp>2) val+=(target.hp*2);
                                        if(target.countCards('he')>3) val+=target.countCards('he');
                                        if(target.countCards('he')<=2&&target.hp<=1) val-=5;
                                        return val;
                                    } else {
                                        if(target.countCards('he')<=2&&target.hp<=2) val+=4;
                                        if(target.countCards('he')>4) val-=2;
                                        else val+=target.countCards('he');
                                        if(target.hp>2) val-=2;
                                        else val+=(target.hp*2);
                                        return val;
                                    }
                                });
                                'step 1'
                                event.target=result.targets[0];
                                player.logSkill('bhtianyu',event.target);
                                player.line(event.target);
                                player.storage.bhtianyu_use.push(event.target);
                                var str1='交给'+get.translation(player)+'两张牌，然后获得【东征】',str2='弃置两张牌';
                                event.target.chooseControlList([str1,str2],true).set('ai',function(){
                                    var att=get.attitude(event.target,player);
                                    if(att>0) return 0;
                                    else return 1;
                                });
                                'step 2'
                                if(result.index==0){
                                    event.target.chooseCard('请选择两张牌交给'+get.translation(player),'he',2,true).set('ai',function(card){
                                        return 2+get.value(card,player)-get.value(card,event.target);
                                    });
                                } else {
                                    event.target.chooseToDiscard('请弃置两张牌','he',2,true).set('ai',function(card){
                                        return 7-get.value(card);
                                    });
                                    event.finish();
                                }
                                'step 3'
                                player.gain(result.cards,event.target,'give');
                                event.target.addSkill('bhdongzheng');
                            },
                            group:['bhtianyu_fail','bhtianyu_achieve'],
                            subSkill:{
                                fail:{
                                    skillAnimation:true,
                                    animationColor:'gray',
                                    forced:true,
                                    trigger:{
                                        player:'phaseZhunbei',
                                    },
                                    filter:function(event,player){
                                        return !game.hasPlayer(function(target){
                                            return target!=player&&!player.storage.bhtianyu_use.contains(target);
                                        });
                                    },
                                    content:function(){
                                        'step 0'
                                        game.log(player, '使命失败');
                                        player.awakenSkill('bhtianyu');
                                        'step 1'
                                        player.loseMaxHp();
                                        player.addTempSkill('bhtianyu_failphase');
                                    },
                                },
                                achieve:{
                                    skillAnimation:true,
                                    animationColor:'metal',
                                    trigger:{
                                        player:'phaseUseBegin',
                                    },
                                    forced:true,
                                    filter:function(event,player){
                                        return game.filterPlayer(function(target){
                                            return target.hasSkill('bhdongzheng')&&target!=player;
                                        }).length>=2||game.filterPlayer().length<=2;
                                    },
                                    content:function(){
                                        'step 0'
                                        game.log(player, '成功完成使命');
                                        player.awakenSkill('bhtianyu');
                                        'step 1'
                                        player.addSkill('bhdongzheng');
                                    },
                                },
                                failphase:{
                                    mod:{
                                        playerEnabled:function(card,player,target){
                                            if(player!=target) return false;
                                        },
                                    },
                                },
                            },
                        },
                        bhdongzheng: {
                            enable: "phaseUse",
                            usable: 1,
                            position: "h",
                            selectCard: 2,
                            complexCard: true,
                            filter: function (event, player) {
                                if (player.countCards('h', { suit: 'spade' }) >= 2) return true;
                                if (player.countCards('h', { suit: 'heart' }) >= 2) return true;
                                if (player.countCards('h', { suit: 'club' }) >= 2) return true;
                                if (player.countCards('h', { suit: 'diamond' }) >= 2) return true;
                                return false;
                            },
                            filterCard: function (card, player) {
                                if (ui.selected.cards.length) {
                                    return get.suit(card) == get.suit(ui.selected.cards[0]);
                                }
                                var cards = player.getCards('hs');
                                for (var i = 0; i < cards.length; i++) {
                                    if (card != cards[i]) {
                                        if (get.suit(card) == get.suit(cards[i])) return true;
                                    }
                                }
                                return false;
                            },
                            filterTarget: function (card, player, target) {
                                return target != player;
                            },
                            content: function () {
                                'step 0'
                                if(!player.storage.bhdongzheng2) player.storage.bhdongzheng2=[];
                                if(!player.storage.bhdongzheng2.contains(target)) player.storage.bhdongzheng2.push(target);
                                player.addSkill('bhdongzheng2');
                                if(player.storage.bhdongzheng_remove) player.storage.bhdongzheng_remove=false;
                                target.damage(player, 'nocard');
                                'step 1'
                                if(get.color(cards[0])==get.color(cards[1])&&get.color(cards[0])=='red'){
                                    event.trigger('bhdongzheng_red');
                                }
                            },
                            ai: {
                                order: 6.5,
                                result: {
                                    player: function (player, target) {
                                        if (get.distance(player, target) <= 1) return 0;
                                        var hs = player.getCards('h', 'shunshou');
                                        if (hs.length && player.canUse(hs[0], target, false)) {
                                            return 1;
                                        }
                                        var geteff = function (current) {
                                            return player.canUse('sha', current, false, true) && get.effect(current, { name: 'sha' }, player, player) > 0;
                                        }
                                        if (player.hasSha() && geteff(target)) {
                                            var num = game.countPlayer(function (current) {
                                                return current != player && get.distance(player, current) <= 1 && geteff(current);
                                            });
                                            if (num == 0) {
                                                if (game.hasPlayer(function (current) {
                                                    return player.canUse('sha', current) && geteff(current) && current != target;
                                                })) {
                                                    return 1;
                                                }
                                            }
                                            else if (num == 1) {
                                                return 0.8;
                                            }
                                        }
                                        return 0.3;
                                    },
                                    target: -2,
                                },
                            },
                        },
                        "bhdongzheng2": {
                            mark: true,
                            onremove: true,
                            trigger:{
                                player:"phaseEnd",
                            },
                            forced:true,
                            silent:true,
                            charlotte:true,
                            unique:true,
                            content:function(){
                                'step 0'
                                if(!player.storage.bhdongzheng_remove) player.storage.bhdongzheng_remove=true;
                                else player.removeSkill('bhdongzheng2');
                            },
                            intro: {
                                content: "到$的距离视为1",
                                markcount:function(){
                                    return 0;
                                },
                            },
                            mod: {
                                globalFrom: function (from, to) {
                                    if (from.storage.bhdongzheng2.contains(to)) {
                                        return -Infinity;
                                    }
                                },
                            },
                        },
                        bhshengtu:{
                            zhuSkill:true,
                            trigger:{
                                global:"bhdongzheng_red",
                            },
                            logTarget:function(event,player){
                                return event.player;
                            },
                            check:function(event,player){
                                return get.attitude(player,event.player)>0;
                            },
                            filter:function(event,player){
                                if(player.identity!='zhu') return false;
                                return event.player.group=='bhtianming';
                            },
                            content:function(){
                                player.line(trigger.player);
                                trigger.player.draw(player);
                            },
                        },
                        bhzhujiao: {
                            zhuSkill: true,
                            enable: "phaseUse",
                            usable: 1,
                            filter: function (event, player) {
                                if (player.identity != "zhu") return false;
                                // if (event.player.group != "bhtianming") return false;
                                if (!player.countCards('h')) return false;
                                // var targets = game.filterPlayer();
                                // targets.sort(lib.sort.seat);
                                // targets.remove(player);
                                // var group;
                                // while (targets.length) {
                                //     group = targets.shift().group;
                                //     if (group == 'bhtianming') return true;
                                // }
                                // return false;
                                return true;
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('选择一名天命势力的角色', 1, true, function (card, player, target) {
                                    return target != player && target.countCards('h') && target.group == "bhtianming";
                                });
                                'step 1'
                                if (result.targets.length) {
                                    player.chooseToDiscard(1, true, 'h');
                                    event.target = result.targets[0];
                                    event.target.chooseBool('是否弃置一张手牌，令' + get.translation(player) + '获得你的一个技能？');
                                } else {
                                    event.finish();
                                }
                                'step 2'
                                if (result.bool) {
                                    event.target.chooseToDiscard(1, true, 'h');
                                    var list = event.target.getStockSkills('仲村由理', '天下第一').filter(function (skill) {
                                        var info = get.info(skill);
                                        return info && !info.juexingji && !info.hiddenSkill && !info.zhuSkill && !info.charlotte && !info.limited && !info.dutySkill;
                                    });
                                    if (!list.length) {
                                        event.finish();
                                    }
                                    player.chooseControl(list).set('prompt', '选择获得一个技能').set('forceDie', true).set('ai', function () {
                                        return list.randomGet();
                                    });
                                } else {
                                    event.finish();
                                }
                                'step 3'
                                player.markSkill('bhzhujiao');
                                player.addSkill(result.control);
                                game.broadcastAll(function (skill) {
                                    var list = [skill];
                                    game.expandSkills(list);
                                    for (var i of list) {
                                        var info = lib.skill[i];
                                        if (!info) continue;
                                        if (!info.audioname2) info.audioname2 = {};
                                        info.audioname2.bhaotuo = 'bhzhujiao';
                                    }
                                }, result.control);
                                event.target.removeSkill(result.control);
                                game.log('' + get.translation(player) + '获得了技能' + get.translation(result.control));
                                game.log('' + get.translation(event.target) + '失去了技能' + get.translation(result.control));
                                'step 4'
                                player.loseMaxHp();
                                event.target.gainMaxHp();
                            },
                        },
                        bhzaiyao: {
                            derivation: ['bhzaiyao_zhengfu', 'bhzaiyao_yiji', 'bhzaiyao_jingmi', 'bhzaiyao_kewang'],
                            forced: true,
                            trigger: {
                                player: "damageBegin2",
                            },
                            filter: function (event, player) {
                                if(player.hp==player.maxHp) return false;
                                if (!event.num) return false;
                                if (!player.hasSkill('bhzaiyao_zhengfu')) return true;
                                if (!player.hasSkill('bhzaiyao_yiji')) return true;
                                if (!player.hasSkill('bhzaiyao_jingmi')) return true;
                                if (!player.hasSkill('bhzaiyao_kewang')) return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                player.loseMaxHp();
                                trigger.cancel();
                                'step 1'
                                var list = [];
                                if (!player.hasSkill('bhzaiyao_zhengfu')) {
                                    list.push('bhzaiyao_zhengfu');
                                }
                                if (!player.hasSkill('bhzaiyao_yiji')) {
                                    list.push('bhzaiyao_yiji');
                                }
                                if (!player.hasSkill('bhzaiyao_jingmi')) {
                                    list.push('bhzaiyao_jingmi');
                                }
                                if (!player.hasSkill('bhzaiyao_kewang')) {
                                    list.push('bhzaiyao_kewang');
                                }
                                event.list = list;
                                'step 2'
                                if (event.list.length == 1) event._result = { control: event.list[0] };
                                else player.chooseControl(event.list).set('prompt', '灾耀：选择获得下列技能中的一个').set('ai', function () {
                                    if (event.list.contains('bhzaiyao_kewang') && !player.countCards('hs', { suit: 'heart' }) && player.hp > 1) return 'bhzaiyao_kewang';
                                    else if (event.list.contains('bhzaiyao_jingmi') && player.countCards('hs', { suit: 'heart' }) && player.hp <= 1) return 'bhzaiyao_jingmi';
                                    else if (event.list.contains('bhzaiyao_yiji') && player.hasSkill('bhzaiyao_kewang')) return 'bhzaiyao_yiji';
                                    return 0;
                                });
                                'step 3'
                                player.addSkill(result.control);
                                player.popup(result.control);
                                game.log(player, '获得了技能', '#g【' + get.translation(result.control) + '】');
                            },
                        },
                        "bhzaiyao_zhengfu": {
                            forced: true,
                            group: "bhzaiyao_zhengfu_use",
                            priority:1,
                            trigger: {
                                player: "damageBegin",
                            },
                            filter: function (event, player) {
                                if (event.nature == 'thunder') return true;
                                return false;
                            },
                            content: function () {
                                trigger.cancel();
                            },
                            subSkill: {
                                use: {
                                    forced: true,
                                    trigger: {
                                        player:'useCard'
                                    },
                                    filter: function (event, player) {
                                        return get.suit(event.card)=='spade'&&get.tag(event.card,'damage');
                                    },
                                    content: function () {
                                        'step 0'
                                        trigger.directHit.addArray(game.filterPlayer());
                                        player.addTempSkill('bhzaiyao_zhengfu_damage','useCardAfter');
                                    },
                                    sub: true,
                                },
                                damage:{
                                    sub:true,
                                    forced:true,
                                    priority:10,
                                    trigger:{
                                        source:"damageBegin",
                                    },
                                    filter:function(event,player){
                                        return event.card&&get.suit(event.card)=='spade';
                                    },
                                    content:function(){
                                        trigger.nature='thunder';
                                    },
                                },
                            },
                            ai:{
                                effect:{
                                    player:function (card, player, target) {
                                        if (get.suit(card) == 'spade'&&get.tag(card,'damage')) return [1, 0.6];
                                    },
                                },
                            },
                        },
                        "bhzaiyao_yiji": {
                            enable: "phaseUse",
                            usable: 1,
                            selectCard:2,
                            filterCard:true,
                            position:'h',
                            filter: function (event, player) {
                                if (player.countCards('h') < 2) return false;
                                return true;
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('请选择一名其他角色，对其造成1点火焰伤害', function (player, target) {
                                    return target != player;
                                }, 1, true).set('ai', function (target) {
                                    return get.damageEffect(target,player,player,'fire');
                                });
                                'step 1'
                                result.targets[0].damage(player, 1, 'fire', 'nocard');
                            },
                            ai: {
                                fireDamage:true,
                                fireAttack:true,
                                result: {
                                    player: 1,
                                },
                            },
                        },
                        "bhzaiyao_jingmi": {
                            forced: true,
                            group: "bhzaiyao_jingmi_2",
                            trigger: {
                                global: "dyingBegin",
                            },
                            content: function () {
                                player.addSkill('bhzaiyao_jingmi3');
                            },
                            ai: {
                                save: true,
                            },
                            subSkill: {
                                "2": {
                                    trigger: {
                                        global: "dyingAfter",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return true;
                                    },
                                    content: function () {
                                        player.removeSkill('bhzaiyao_jingmi3');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        "bhzaiyao_kewang": {
                            trigger: {
                                player: "useCardToPlayered",
                            },
                            usable: 1,
                            logTarget:function(event,player){
                                return event.target;
                            },
                            filter: function (event, player) {
                                if(!get.tag(event.card,'damage')) return false;
                                if (event.target == player) return false;
                                return true;
                            },
                            content: function () {
                                'step 0'
                                var str1 = '获得' + get.translation(trigger.target) + '一张牌';
                                var str2 = '摸一张牌';
                                player.chooseControl(str1, str2).set('ai', function () {
                                    var att = get.attitude(player, trigger.target);
                                    if (att > 0) {
                                        return str2;
                                    } else {
                                        if (get.effect(trigger.target, { name: 'shunshou' }, player, player) > 0) {
                                            return str1;
                                        } else {
                                            return str2;
                                        }
                                    }
                                });
                                event.str = str1;
                                'step 1'
                                if (result.control == event.str) {
                                    player.gainPlayerCard(trigger.target, 'he', true);
                                } else {
                                    player.draw();
                                }
                            },
                        },
                        "bhzaiyao_jingmi3": {
                            forced: true,
                            trigger: {
                                player: "useCard",
                            },
                            mod: {
                                cardname: function (card, player) {
                                    if (card.suit == 'heart') return 'tao';
                                },
                            },
                            filter: function (event, player) {
                                return true;
                            },
                            content: function () { },
                        },
                        bhyakong: {
                            enable: 'phaseUse',
                            group: ['bhyakong_round', 'bhyakong_remove','bhyakong_1','bhyakong_3'],
                            marktext: "亚空",
                            intro: {
                                name: "亚空",
                                content: function (storage, player, skill) {
                                    var str="本轮已发动" + get.cnNumber(player.storage.bhyakong) + "次";
                                    if(player.storage.bhyakong_1.length>0){
                                        str+='<br><li>你到';
                                        str+=get.translation(player.storage.bhyakong_1);
                                        str+='的距离视为1';
                                    }
                                    if(player.storage.bhyakong_3.length>0){
                                        str+='<br><li>你无视';
                                        str+=get.translation(player.storage.bhyakong_3);
                                        str+='的防具';
                                    }
                                    return str;
                                },
                                markcount:function(storage,player){
                                    return player.storage.bhyakong;
                                },
                            },
                            init: function (player) {
                                player.storage.bhyakong = 0;
                                player.syncStorage('bhyakong');
                                player.storage.bhyakong_1=[];
                                player.storage.bhyakong_3=[];
                            },
                            filter: function (event, player) {
                                if (player.storage.bhyakong >= player.maxHp) return false;
                                return true;
                            },
                            selectTarget:1,
                            filterTarget:function(card,player,target){
                                var bool1 = player.hasSkill('bhyakong_1') && player.storage.bhyakong_1.contains(target);
                                var bool2 = target.hasSkill('bhyakong_2') && target.storage.bhyakong_2.contains(player);
                                var bool3 = player.hasSkill('bhyakong_3') && player.storage.bhyakong_3.contains(target)
                                if (bool1 && bool2 && bool3) return false;
                                return target != player;
                            },
                            content: function () {
                                'step 0'
                                event.target=targets[0];
                                'step 1'
                                var str1 = '你到' + get.translation(event.target) + '的距离视为1';
                                var str2 = get.translation(event.target) + '到你的距离+1';
                                var str3 = '你无视' + get.translation(event.target) + '的防具'
                                if (player.hasSkill('bhyakong_1') && player.storage.bhyakong_1.contains(event.target)) {
                                    if (event.target.hasSkill('bhyakong_2') && event.target.storage.bhyakong_2.contains(player)) {//3
                                        if (player.hasSkill('bhyakong_3') && player.storage.bhyakong_3.contains(event.target)) {
                                            event.finish();
                                        } else {
                                            if(!player.storage.bhyakong_3.contains(event.target)) player.storage.bhyakong_3.push(event.target);
                                            // player.storage.bhyakong_3.sortBySeat();
                                        }
                                    } else {
                                        if (player.hasSkill('bhyakong_3') && player.storage.bhyakong_3.contains(event.target)) {//2
                                            if(!event.target.storage.bhyakong_2) event.target.storage.bhyakong_2 = [];
                                            event.target.storage.bhyakong_2.push(player);
                                            event.target.addSkill('bhyakong_2');
                                        } else {//2,3
                                            player.chooseControlList([str2, str3], function () {
                                                return _status.event.choice;
                                            }, true).set('ai',function(){
                                                if(event.target.countCards('e',{subtype:'equip2'})) return 1;
                                                return 0;
                                            });;
                                            event.goto(3);
                                        }
                                    }
                                } else {
                                    if (event.target.hasSkill('bhyakong_2') && event.target.storage.bhyakong_2.contains(player)) {
                                        if (player.hasSkill('bhyakong_3') && player.storage.bhyakong_3.contains(event.target)) {//1
                                            if(!player.storage.bhyakong_1.contains(event.target)) player.storage.bhyakong_1.push(event.target);
                                        } else {//1,3
                                            player.chooseControlList([str1, str3], function () {
                                                return _status.event.choice;
                                            }, true).set('ai',function(){
                                                if(event.target.countCards('e',{subtype:'equip2'})) return 1;
                                                return 0;
                                            });
                                            event.goto(4);
                                        }
                                    } else {
                                        if (player.hasSkill('bhyakong_3') && player.storage.bhyakong_3.contains(event.target)) {//1,2
                                            player.chooseControlList([str1, str2], function () {
                                                return _status.event.choice;
                                            }, true).set('ai',function(){
                                                return 1;
                                            });
                                            event.goto(5);
                                        } else {//1,2,3
                                            player.chooseControlList([str1, str2, str3], function () {
                                                return _status.event.choice;
                                            }, true).set('ai',function(){
                                                return 1;
                                            });
                                        }
                                    }
                                }
                                'step 2'
                                event.index = result.index;
                                if (event.index == 0) {
                                    if(!player.storage.bhyakong_1.contains(event.target)) player.storage.bhyakong_1.push(event.target);
                                } else if (event.index == 1) {
                                    if(!event.target.storage.bhyakong_2) event.target.storage.bhyakong_2 = [];
                                    event.target.storage.bhyakong_2.push(player);
                                    event.target.addSkill('bhyakong_2');
                                } else {
                                    if(!player.storage.bhyakong_3.contains(event.target)) player.storage.bhyakong_3.push(event.target);
                                }
                                event.goto(6);
                                'step 3'
                                if (event.index == 0) {
                                    if(!event.target.storage.bhyakong_2) event.target.storage.bhyakong_2 = [];
                                    event.target.storage.bhyakong_2.push(player);
                                    event.target.addSkill('bhyakong_2');
                                } else {
                                    if(!player.storage.bhyakong_3.contains(event.target)) player.storage.bhyakong_3.push(event.target);
                                }
                                event.goto(6);
                                'step 4'
                                event.index = result.index;
                                if (event.index == 0) {
                                    if(!player.storage.bhyakong_1.contains(event.target)) player.storage.bhyakong_1.push(event.target);
                                } else {
                                    if(!player.storage.bhyakong_3.contains(event.target)) player.storage.bhyakong_3.push(event.target);
                                }
                                event.goto(6);
                                'step 5'
                                event.index = result.index;
                                if (event.index == 0) {
                                    if(!player.storage.bhyakong_1.contains(event.target)) player.storage.bhyakong_1.push(event.target);
                                } else {
                                    if(!event.target.storage.bhyakong_2) event.target.storage.bhyakong_2 = [];
                                    event.target.storage.bhyakong_2.push(player);
                                    event.target.addSkill('bhyakong_2');
                                }
                                event.goto(6);
                                'step 6'
                                player.storage.bhyakong++;
                                player.syncStorage('bhyakong');
                                player.markSkill('bhyakong');
                            },
                            ai: {
                                order: 8,
                                unequip_ai: true,
                                result: {
                                    player: 0.6,
                                    target:function(player,target){
                                        var att = get.attitude(player, target);
                                        if(att>0) return 0;
                                        return att -10 + get.distance(target, player);
                                    },
                                },
                            },
                            subSkill: {
                                round: {
                                    trigger: {
                                        global: 'roundStart',
                                    },
                                    forced: true,
                                    silent: true,
                                    filter: function (event, player) {
                                        if (player.countMark('bhyakong') > 0) return true;
                                        return false;
                                    },
                                    content: function () {
                                        player.storage.bhyakong=0;
                                        player.unmarkSkill('bhyakong');
                                    },
                                },
                                remove: {
                                    trigger: {
                                        player: 'phaseUseBegin',
                                    },
                                    forced: true,
                                    silent: true,
                                    content: function () {
                                        'step 0'
                                        player.storage.bhyakong_1=[];
                                        player.storage.bhyakong_3=[];
                                        player.syncStorage('bhyakong');
                                        event.targets = game.filterPlayer();
                                        event.targets.remove(player);
                                        event.targets.sortBySeat();
                                        'step 1'
                                        if (event.targets.length) {
                                            event.target = event.targets.shift();
                                        } else {
                                            event.finish();
                                        }
                                        'step 2'
                                        if (event.target.hasSkill('bhyakong_2')) {
                                            event.target.removeSkill('bhyakong_2');
                                        }
                                        event.goto(1);
                                    },
                                },
                            }
                        },
                        "bhyakong_1": {
                            mod: {
                                globalFrom: function (from, to) {
                                    if (from.storage.bhyakong_1.contains(to)) {
                                        return -Infinity;
                                    }
                                },
                            },
                        },
                        "bhyakong_2": {
                            mark:true,
                            onremove:function(player){
                                delete player.storage.bhyakong_2;
                            },
                            intro:{
                                name:'亚空',
                                content:function(storage,player){
                                    return '到'+get.translation(player.storage.bhyakong_2)+'的距离+1';
                                },
                                markcount:function(){
                                    return 0;
                                },
                            },
                            mod: {
                                globalFrom: function (from, to, distance) {
                                    if (from.storage.bhyakong_2.contains(to)) {
                                        return distance + 1;
                                    }
                                },
                            },
                        },
                        "bhyakong_3": {
                            trigger: {
                                player: "useCardToTargeted",
                            },
                            filter: function (event, player) {
                                return player.storage.bhyakong_3.contains(event.target);
                            },
                            forced: true,
                            logTarget: "target",
                            content: function () {
                                trigger.targets[0].addTempSkill('qinggang2');
                                trigger.targets[0].storage.qinggang2.add(trigger.card);
                            },
                        },
                        bhyuanzui: {
                            trigger:{
                                global:"damageEnd",
                            },
                            filter:function(event,player){
                                return event.source;
                            },
                            marktext: "罪",
                            intro: {
                                name: "罪",
                                content: "mark",
                            },
                            forced:true,
                            silent:true,
                            content:function(){
                                'step 0'
                                event.target=trigger.source;
                                if(!event.target.storage.bhyuanzui) event.target.storage.bhyuanzui=0;
                                event.target.storage.bhyuanzui+=trigger.num;
                                event.target.syncStorage('bhyuanzui');
                                event.target.markSkill('bhyuanzui');
                                event.trigger('bhyuanzui_add');
                            },
                            group:['bhyuanzui_die','bhyuanzui2'],
                            subSkill:{
                                die: {
                                    audio: "ext:崩崩崩/audio:1",
                                    trigger: {
                                        global: "dieAfter",
                                    },
                                    filter:function(event,player){
                                        return event.source;
                                    },
                                    logTarget:'source',
                                    forced: true,
                                    content: function () {
                                        event.target=trigger.source;
                                        if(!event.target.storage.bhyuanzui) event.target.storage.bhyuanzui=0;
                                        event.target.storage.bhyuanzui+=6;
                                        event.target.syncStorage('bhyuanzui');
                                        event.target.markSkill('bhyuanzui');
                                        event.trigger('bhyuanzui_add');
                                        game.delayx();
                                    },
                                    sub: true,
                                },
                            },
                            ai:{
                                threaten:1.7,
                            },
                        },
                        "bhyuanzui2": {
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:['bhyuanzui_add'],
                            },
                            silent:true,
                            forced:true,
                            filter:function(event,player){
                                return game.hasPlayer(function(target){
                                    if(!target.storage.bhyuanzui) return false;
                                    if(target.storage.bhyuanzui>=8&&!target.hasSkill('bhyuanzui3')) return true;
                                    if(target.storage.bhyuanzui>=16&&!target.storage.bhyuanzui_loseMaxHp) return true;
                                    if(target.storage.bhyuanzui>=24) return true;
                                    return false;
                                });
                            },
                            content:function(){
                                'step 0'
                                event.targets1=game.filterPlayer(function(target){
                                    if(!target.storage.bhyuanzui) return false;
                                    if(target.storage.bhyuanzui>=8&&!target.hasSkill('bhyuanzui3')) return true;
                                    return false;
                                });
                                event.targets2=game.filterPlayer(function(target){
                                    if(!target.storage.bhyuanzui) return false;
                                    if(target.storage.bhyuanzui>=16&&!target.storage.bhyuanzui_loseMaxHp) return true
                                    return false;
                                });
                                event.targets3=game.filterPlayer(function(target){
                                    if(!target.storage.bhyuanzui) return false;
                                    if(target.storage.bhyuanzui>=24) return true;
                                    return false;
                                });
                                'step 1'
                                for(let i of event.targets1){
                                    player.line(i);
                                    player.logSkill('bhyuanzui2',i);
                                    i.addSkill('bhyuanzui3');
                                }
                                'step 2'
                                for(let i of event.targets2){
                                    player.line(i);
                                    if(!event.targets1.contains(i)) player.logSkill('bhyuanzui2',i);
                                    i.storage.bhyuanzui_loseMaxHp=true;
                                    i.loseMaxHp();
                                }
                                'step 3'
                                for(let i of event.targets3){
                                    player.line(i);
                                    if(!event.targets1.contains(i)&&!event.targets2.contains(i)) player.logSkill('bhyuanzui2',i);
                                    i.die();
                                }
                            },
                        },
                        "bhyuanzui3": {
                            mod: {
                                maxHandcard: function (player, num) {
                                    if(player.storage.bhyuanzui&&player.storage.bhyuanzui>=8){
                                        return num - 1;
                                    }
                                },
                            },
                        },
                        bhanyi: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            trigger: {
                                player: "damageBegin",
                            },
                            filter: function (event, player) {
                                if (event.source&&event.source.storage.bhyuanzui) {
                                    if((event.source.storage.bhyuanzui>=4&&!player.storage.bhyuanzui)||(event.source.storage.bhyuanzui-player.storage.bhyuanzui)>=4) return true;
                                }
                                return false;
                            },
                            content: function () {
                                trigger.num--;
                                event.target=player;
                                if(!event.target.storage.bhyuanzui) event.target.storage.bhyuanzui=0;
                                event.target.storage.bhyuanzui+=2;
                                event.target.syncStorage('bhyuanzui');
                                event.target.markSkill('bhyuanzui');
                                event.trigger('bhyuanzui_add');
                            },
                        },
                        bhzhuilie: {
                            audio: "ext:崩崩崩/audio:2",
                            group: "bhzhuilie_remove",
                            trigger: {
                                player: "useCardToPlayered",
                            },
                            check: function (event, player) {
                                var att=get.attitude(player, event.target);
                                return (att>0&&event.target.storage.bhyuanzui>0)||att<0;
                            },
                            filter: function (event, player) {
                                if(event.card.name!= 'sha') return false;
                                return true;
                            },
                            content: function () {
                                'step 0'
                                event.target=trigger.target;
                                player.line(event.target);
                                if (event.target.storage.bhyuanzui> 0) {
                                    var str1 = '令' + get.translation(trigger.target) + '获得2个“罪”';
                                    var str2 = '令' + get.translation(trigger.target) + '失去2个“罪”';
                                    player.chooseControlList([str1, str2],true).set('ai', function () {
                                        var att = get.attitude(player, trigger.target);
                                        return att <= 0 ? 0: 1;
                                    });
                                } else {
                                    event.goto(2);
                                }
                                'step 1'
                                if(result.index==1){
                                    event.target.storage.bhyuanzui-=2;
                                    if(event.target.storage.bhyuanzui<0) event.target.storage.bhyuanzui=0;
                                    event.target.syncStorage('bhyuanzui');
                                    if(event.target.storage.bhyuanzui==0) event.target.unmarkSkill('bhyuanzui');
                                    event.finish();
                                }
                                'step 2'
                                if(!event.target.storage.bhyuanzui) event.target.storage.bhyuanzui=0;
                                event.target.storage.bhyuanzui+=2;
                                event.target.syncStorage('bhyuanzui');
                                event.target.markSkill('bhyuanzui');
                                event.trigger('bhyuanzui_add');
                            },
                            subSkill: {
                                remove: {
                                    audio: "ext:崩崩崩/audio:2",
                                    frequent: true,
                                    trigger: {
                                        player: "damageEnd",
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhyuanzui&&player.storage.bhyuanzui>0;
                                    },
                                    content: function () {
                                        player.storage.bhyuanzui-=trigger.num;
                                        if(player.storage.bhyuanzui<0) player.storage.bhyuanzui=0;
                                        player.syncStorage('bhyuanzui');
                                        if(player.storage.bhyuanzui==0) player.unmarkSkill('bhyuanzui');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhhairu: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            usable: 1,
                            filterTarget: function (card, player, target) {
                                return target != player && target.countCards('h');
                            },
                            content: function () {
                                "step 0"
                                event.target = target;
                                // player.chooseToDiscard('he', true);
                                var chooseButton = player.chooseButton(1, [get.translation(target.name) + '的手牌', target.getCards('h')]);
                                chooseButton.set('target', target);
                                chooseButton.set('filterButton', function (button) {
                                    return true;
                                });
                                chooseButton.set('ai', function (card) {
                                    return get.value(card);
                                });
                                "step 1"
                                if (result.bool) {
                                    event.card = result.links[0];
                                    var bool1 = game.hasPlayer(function (current) {
                                        return target.canUse(event.card, current);
                                    });
                                    if (bool1) {
                                        var str1 = '令' + get.translation(event.target) + '选择目标使用此牌';
                                        player.chooseControl(str1, '获得此牌').set('ai', function () {
                                            var target = event.target;
                                            var card = event.card;
                                            var att = get.attitude(_status.event.player, target);
                                            var player = _status.event.player;
                                            if (att < 0) {
                                                var att = get.attitude(player, target);
                                                if (get.tag(card, 'damage')) {
                                                    if (game.hasPlayer(function (current) {
                                                        return target.canUse(card, current) && get.attitude(player, current) > 0;
                                                    })) {
                                                        return '获得此牌';
                                                    } else {
                                                        return '选择目标使用此牌';
                                                    }
                                                }
                                                else {
                                                    if (get.type(card) == 'equip') {
                                                        if (att < 0) {
                                                            return '获得此牌';
                                                        } else {
                                                            return '选择目标使用此牌';
                                                        }
                                                    }
                                                    return '获得此牌';
                                                }
                                            }
                                        });
                                    } else {
                                        player.gain(event.card, event.target, 'giveAuto');
                                        game.delayx();
                                        event.finish();
                                    }
                                } else {
                                    game.delayx();
                                    event.finish();
                                }
                                "step 2"
                                if (result.control == '获得此牌') {
                                    player.gain(event.card, event.target, 'gain2');
                                    game.delayx();
                                } else {
                                    event.target.chooseUseTarget(event.card, true, false);
                                }
                            },
                            ai: {
                                order: 7,
                                result: {
                                    player: 1,
                                    target: -1,
                                },
                            },
                        },
                        bhtouying: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            usable: 1,
                            group: ["bhtouying_remove"],
                            check: function (event, player) {
                                return true;
                            },
                            content: function () {
                                var list = [1, 2, 3, 4, 5];
                                player.addSkill('bhtouying' + list.randomGet());
                            },
                            ai: {
                                order: 9,
                                result: {
                                    player: 2,
                                },
                            },
                            subSkill: {
                                remove: {
                                    trigger: {
                                        player: "phaseZhunbeiBegin",
                                    },
                                    priority: 2,
                                    silent: true,
                                    forced: true,
                                    filter: function (event, player) {
                                        if (player.hasSkill('bhtouying1')) return true;
                                        if (player.hasSkill('bhtouying2')) return true;
                                        if (player.hasSkill('bhtouying3')) return true;
                                        if (player.hasSkill('bhtouying4')) return true;
                                        if (player.hasSkill('bhtouying5')) return true;
                                        return false;
                                    },
                                    content: function () {
                                        if (player.hasSkill('bhtouying1')) player.removeSkill('bhtouying1');
                                        if (player.hasSkill('bhtouying2')) player.removeSkill('bhtouying2');
                                        if (player.hasSkill('bhtouying3')) player.removeSkill('bhtouying3');
                                        if (player.hasSkill('bhtouying4')) player.removeSkill('bhtouying4');
                                        if (player.hasSkill('bhtouying5')) player.removeSkill('bhtouying5');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        "bhtouying1": {
                            audio: "ext:崩崩崩/audio:1",
                            trigger: {
                                player: 'useCard',
                            },
                            filter: function (event, player) {
                                return event.card && event.card.name == 'sha';
                            },
                            frequent: true,
                            content: function () { },
                            mark: true,
                            onremove: true,
                            marktext: "投影",
                            intro: {
                                name: "猎兔人",
                                content: function (storage, player, skill) {
                                    return '你对距离不大于2的角色使用【杀】没有次数限制';
                                },
                            },
                            mod: {
                                cardUsableTarget: function (card, player, target) {
                                    if (card.name == 'sha' && get.distance(player, target) <= 2) return Infinity;
                                },
                            },
                        },
                        "bhtouying2": {
                            audio: "ext:崩崩崩/audio:1",
                            mark: true,
                            onremove: true,
                            marktext: "投影",
                            intro: {
                                name: "碎骨兔",
                                content: function (storage, player, skill) {
                                    return '你使用的【杀】不能被响应';
                                },
                            },
                            forced: true,
                            trigger: {
                                player: "useCard",
                            },
                            filter: function (event, player) {
                                return event.card.name == 'sha';
                            },
                            content: function () {
                                trigger.directHit.addArray(game.filterPlayer());
                            },
                        },
                        "bhtouying3": {
                            audio: "ext:崩崩崩/audio:1",
                            mark: true,
                            onremove: true,
                            marktext: "投影",
                            intro: {
                                name: "啮齿兔",
                                content: function (storage, player, skill) {
                                    return '你对与你距离大于2的角色使用的【杀】造成的伤害+1';
                                },
                            },
                            forced: true,
                            trigger: {
                                source: "damageBegin",
                            },
                            filter: function (event, player) {
                                return event.card && event.card.name == 'sha' && get.distance(player, event.player) > 1;
                            },
                            content: function () {
                                trigger.num++;
                            },
                        },
                        "bhtouying4": {
                            audio: "ext:崩崩崩/audio:1",
                            trigger: {
                                player: 'useCard',
                            },
                            filter: function (event, player) {
                                return event.card && event.card.name == 'sha';
                            },
                            frequent: true,
                            content: function () { },
                            mark: true,
                            onremove: true,
                            marktext: "投影",
                            intro: {
                                name: "追猎者",
                                content: function (storage, player, skill) {
                                    return '你使用【杀】没有距离限制';
                                },
                            },
                            mod: {
                                targetInRange: function (card) {
                                    if (card.name == 'sha') return true;
                                },
                            },
                        },
                        "bhtouying5": {
                            audio: "ext:崩崩崩/audio:1",
                            mark: true,
                            onremove: true,
                            marktext: "投影",
                            intro: {
                                name: "蹦蹦兔",
                                content: function (storage, player, skill) {
                                    return '当你使用【杀】指定其他角色为目标时，你可以弃一张牌，然后令与该角色距离为1的所有其他角色也成为此【杀】的目标';
                                },
                            },
                            frequent: true,
                            trigger: {
                                player: "useCardToPlayered",
                            },
                            filter: function (event, player) {
                                return event.card.name == 'sha' && player.countCards('h') && !player.hasSkill('bhtouying5_im');
                            },
                            content: function () {
                                'step 0'
                                player.chooseBool('是否令与目标距离为1的所有其他角色也成为此【杀】的目标？');
                                'step 1'
                                if (result.bool) {
                                    player.chooseToDiscard('he', true);
                                    player.addTempSkill('bhtouying5_im');
                                } else {
                                    event.finish();
                                }
                                'step 2'
                                var targets = game.filterPlayer();
                                targets.remove(player);
                                targets.remove(trigger.player);
                                targets.sort(lib.sort.seat);
                                var target;
                                event.targets = [];
                                while (targets.length > 0) {
                                    target = targets.shift();
                                    if (get.distance(trigger.target, target) <= 1) {
                                        event.targets.push(target);
                                    };
                                }
                                player.line(event.targets, trigger.card.nature);
                                trigger.targets.addArray(event.targets);
                            },
                        },
                        "bhtouying5_im": {
                        },
                        bhyongbing: {
                            enable: "phaseUse",
                            usable: 1,
                            audio: "ext:崩崩崩/audio:2",
                            position: "he",
                            filterCard: true,
                            selectCard: 2,
                            filter: function (event, player) {
                                return player.countCards('he') > 1;
                            },
                            selectTarget: 2,
                            multitarget: true,
                            discard: false,
                            lose: false,
                            prompt: '你可以用两张牌雇佣一个佣兵',
                            targetprompt: ["得到牌", "出杀目标"],
                            filterTarget: function (card, player, target) {
                                var targets = game.filterPlayer(function (current) {
                                    return current.hasSkill('bhyongbing2');
                                });
                                if (ui.selected.targets.length == 0) {
                                    return player != target && targets.contains(target);
                                }
                                else {
                                    return target != ui.selected.targets[0];
                                    //ui.selected.targets[0].inRange(target);
                                }
                            },
                            delay: false,
                            content: function () {
                                "step 0"
                                targets[0].gain(cards, player, 'give');
                                "step 1"
                                if (!lib.filter.filterTarget({ name: 'sha', isCard: true }, targets[0], targets[1])) event._result = { control: '交还' };
                                else targets[0].chooseControl('交还', '出杀', function () {
                                    var player = _status.event.player;
                                    var target = _status.event.target;
                                    if (get.effect(_status.event.target, { name: 'sha' }, player, player) > 0) {
                                        return '出杀';
                                    }
                                    return '交还';
                                }).set('target', targets[1]).set('prompt', '对' + get.translation(targets[1]) + '使用一张杀，或交还给' + get.translation(player) + '一张牌').set('ai', function () {
                                    return get.attitude(targets[0], targets[1]);
                                });
                                "step 2"
                                if (result.control == '交还') {
                                    event.goto(3)
                                    event.bool = true
                                }
                                else {
                                    if (targets[0].canUse('sha', targets[1])) {
                                        targets[0].chooseToUse(function (card, player, event) {
                                            if (get.name(card) != 'sha') return false;
                                            return lib.filter.filterCard.apply(this, arguments);
                                        }, '佣兵：对' + get.translation(targets[1]) + '使用一张【杀】，或交给' + get.translation(player) + '一张牌').set('complexSelect', true).set('filterTarget', function (card, player, target) {
                                            if (target != _status.event.sourcex && !ui.selected.targets.contains(_status.event.sourcex)) return false;
                                            return lib.filter.targetEnabled.apply(this, arguments);
                                        }).set('sourcex', targets[1]).set('ai', function (card) {
                                            var player = _status.event.player;
                                            if (get.effect(_status.event.target, { name: 'sha' }, player, player) > 0) {
                                                return 1;
                                            } else {
                                                return 0;
                                            }
                                        });
                                    } else {
                                        event.goto(5);
                                    }
                                }
                                'step 3'
                                if (event.bool == true || result.bool == false) targets[0].chooseCard('he', '选择一张牌交还给' + get.translation(player), true)
                                else event.finish();
                                'step 4'
                                if (result.cards && result.bool) player.gain(result.cards, targets[0], 'give');
                                event.finish();
                                'step 5'
                                targets[0].chooseCard('he', '选择一张牌交还给' + get.translation(player), true)
                                event.goto(4);
                            },
                            ai: {
                                order: 8.1,
                                result: {
                                    target: function (player, target) {
                                        var num = target.countCards('h');
                                        var att = get.attitude(player, target);
                                        if (ui.selected.targets.length == 0) {
                                            return 2;
                                        }
                                        else {
                                            var starget = ui.selected.targets[0];
                                            if (starget.canUse('sha', target)) return -2;
                                            else return 0;
                                        }
                                    },
                                    player: function (player, target) {
                                        if (ui.selected.targets.length == 0) {
                                            if (get.attitude(player, target) < 0) return -2;
                                            if (player.countCards('h', { name: 'sha' }) && player.countCards('hs') > 2) return 0.3;
                                            if (player.countCards('h') > player.hp) return 0.8;
                                            return 0.1;
                                        } else {
                                            if (get.attitude(player, target) < 0) return 0.1;
                                            else return 0;
                                        }
                                    },
                                },
                            },
                        },
                        "bhyongbing2": {
                            global: "bhyongbing",
                            ai: {
                                threaten: 1.7,
                            },
                            // trigger: {
                            //     global: "gameDrawAfter",
                            //     player: "enterGame",
                            // },
                            // group: "bhyongbing2_remove",
                            // forced: true,
                            // locked: false,
                            // content: function () {
                            //     event.targets = game.filterPlayer();
                            //     event.targets.sort(lib.sort.seat);
                            //     event.targets.remove(player);
                            //     while (event.targets.length) {
                            //         event.targets.shift().addSkill('bhyongbing');
                            //     }
                            //},
                            // subSkill: {
                            //     remove: {
                            //         trigger: {
                            //             player: "dieEnd",
                            //         },
                            //         forced: true,
                            //         locked: false,
                            //         content: function () {
                            //             event.targets = game.filterPlayer();
                            //             event.targets.sort(lib.sort.seat);
                            //             event.targets.remove(player);
                            //             while (event.targets.length) {
                            //                 event.target = event.targets.shift();
                            //                 if (event.target.hasSkill('bhyongbing')) {
                            //                     event.target.removeSkill('bhyongbing');
                            //                 }
                            //             }
                            //         },
                            //         sub: true,
                            //     },
                            // },
                        },
                        bhfeiying: {
                            audio: "ext:崩崩崩/audio:2",
                            group: [ "bhfeiying_use"],
                            trigger: {
                                player: "useCard",
                            },
                            filter: function (event, player) {
                                return !player.hasSkill('bhfeiying_im');
                            },
                            check:function(event,player){
                                if(player.countCards('hs',{name:['nanman','wanjian','wugu','taoyuan']})) return false;
                                if(['shan','wuxie','tao','jiu','bhbenghuaijiejing','bhpingzhang','bhbujibao','wuzhong','shunshou'].contains(event.card.name)) return false;
                                if(['equip','delay'].contains(get.type(event.card))) return false;
                                if(event.targets.length==1&&get.attitude(player,event.targets[0])<0) return true;

                                let val = 0;
                                for(let i of event.targets){
                                    if(get.attitude(player,i)<0 && (!i.storage.bhfeiying2||i.storage.bhfeiying2 == 0)) val++;
                                }
                                game.log(val);
                                if(val<=0) return false;

                                return true;
                            },
                            content: function () {
                                'step 0'
                                event.targets=trigger.targets;
                                player.addTempSkill('bhfeiying_im');
                                trigger.cancel();
                                for(let i of event.targets){
                                    if(!i.storage.bhfeiying2) i.storage.bhfeiying2=0;
                                    i.storage.bhfeiying2++;
                                    i.syncStorage('bhfeiying2');
                                    i.markSkill('bhfeiying2');
                                }
                            },
                            mod: {
                                targetInRange: function (card, player, target) {
                                    if (target.storage.bhfeiying2&&target.storage.bhfeiying2>0) return true;
                                },
                            },
                            subSkill: {
                                im: {
                                    silent: true,
                                    forced: true,
                                    charlotte:true,
                                    sub: true,
                                },
                                use: {
                                    trigger:{
                                        player:'useCardToPlayered',
                                    },
                                    filter:function(event,player){
                                        return event.target.storage.bhfeiying2&&event.target.storage.bhfeiying2>1;
                                    },
                                    content:function(){
                                        'step 0'
                                        trigger.directHit.addArray(game.filterPlayer());
                                    },
                                    frequent:true,
                                    audio:'bhfeiying',
                                    sub: true,
                                },
                            },
                        },
                        "bhfeiying2": {
                            mark: true,
                            onremove: true,
                            marktext: "樱",
                            intro: {
                                name: "樱",
                                content: function (storage, player, skill) {
                                    return '拔刀能留住落樱吗？';
                                },
                            },
                        },
                        bhrenfan: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                source: "damageEnd",
                            },
                            check:function(event,player){
                                if(player.hasCard('hs',function(card){
                                    return game.hasPlayer(function(current){
                                        return player.canUse(card,current)&&get.effect(current,card,player,player)>0;
                                    });
                                })) return false;
                                return true;
                            },
                            filter: function (event, player) {
                                if(!game.hasPlayer(function(current){
                                    return current.storage.bhfeiying2&&current.storage.bhfeiying2>0;
                                })) return false;
                                return true;
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('移去一名角色的所有“樱”并对其造成1点伤害',function(card,player,target){
                                    return target.storage.bhfeiying2&&target.storage.bhfeiying2>0;
                                },true).set('ai',function(target){
                                    return get.damageEffect(target,player,player);
                                });
                                'step 1'
                                event.target=result.targets[0];
                                event.target.storage.bhfeiying2=0;
                                event.target.unmarkSkill('bhfeiying2');
                                event.target.damage();
                                'step 2'
                                if(player.isPhaseUsing()){
                                    player.draw();
                                    var evt=_status.event;
                                    for(var i=0;i<10;i++){
                                        if(evt&&evt.getParent)evt=evt.getParent();
                                        if(evt.name=='phaseUse'){
                                        evt.skipped=true;
                                            break;
                                        };
                                    };
                                }
                            },
                        },
                        bhhuling: {
                            audio: "ext:崩崩崩/audio:2",
                            unique: true,
                            trigger: {
                                player: "dying",
                            },
                            mark: true,
                            limited: true,
                            skillAnimation: true,
                            animationStr: "狐灵",
                            animationColor: "fire",
                            init: function (player) {
                                player.storage.bhhuling = false;
                            },
                            content: function () {
                                'step 0'
                                player.awakenSkill('bhhuling');
                                player.storage.bhhuling = true;
                                'step 1'
                                player.recover(1 - player.hp);
                                'step 2'
                                player.draw(3);
                            },
                            intro: {
                                content: "limited",
                            },
                        },
                        bhhuhuo: {
                            audio: "ext:崩崩崩/audio:2",
                            enable:'phaseUse',
                            usable: 1,
                            check: function (event, player) {
                                return game.hasPlayer(function (target) {
                                    return target.storage.bhfeiying2 && get.damageEffect(target,player, player,'fire') > 0;
                                });
                            },
                            filter: function (event, player) {
                                return game.hasPlayer(function (target) {
                                    return target.storage.bhfeiying2 ;
                                });
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget(function (card, player, current) {
                                    return current.storage.bhfeiying2;
                                }, '选择至多'+get.cnNumber(player.maxHp)+'名有“樱”的角色，对其各造成一点火焰伤害', [1, player.maxHp],true).set('ai', function (target) {
                                    get.damageEffect(target,player, player,'fire');
                                });
                                'step 1'
                                event.targets=result.targets;
                                for(let i of event.targets){
                                    i.storage.bhfeiying2--;
                                    if(i.storage.bhfeiying2==0) i.unmarkSkill('bhfeiying2');
                                    i.damage('fire');
                                }
                                'step 2'
                                if(event.targets.length>1) player.loseHp();
                            },
                            ai: {
                                order:3,
                                result: {
                                    player: 1.1,
                                },
                            },
                        },
                        bhxueyin: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            priority:4,
                            trigger: {
                                source: "damageEnd",
                            },
                            filter: function (event, player) {
                                if (event.num > 0) return event.player != player;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                player.judge(function (card) {
                                    if (get.color(card) == 'red') return player.hasSkill('bhkexue2')?1:2;
                                    return player.hasSkill('bhkexue2')?2:1;
                                }).judge2 = function (result) {
                                    return result.bool;
                                };
                                'step 1'
                                if (result.color=='red') {
                                    if(player.hp==player.maxHp){
                                        player.chooseBool('是否改为增加一点体力上限直到下个回合开始？').set('ai',function(){
                                            //if(player==_status.currentPhase) return true;
                                            return true;
                                        });
                                    } else {
                                        player.recover();
                                        event.finish();
                                    }
                                } else {
                                    player.draw();
                                    event.finish();
                                }
                                'step 2'
                                if(result.bool){
                                    if(!player.storage.bhxueyin_maxHp) player.storage.bhxueyin_maxHp=0;
                                    player.storage.bhxueyin_maxHp++;
                                    player.gainMaxHp();
                                } else player.recover();
                            },
                            group:"bhxueyin_lose",
                            subSkill:{
                                lose:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    trigger:{
                                        player:"phaseBegin",
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhxueyin_maxHp>0;
                                    },
                                    content:function(){
                                        event.num=player.storage.bhxueyin_maxHp;
                                        player.storage.bhxueyin_maxHp=0;
                                        player.loseMaxHp(event.num);
                                    },
                                },
                            },
                        },
                        bhchuyong: {
                            audio: "ext:崩崩崩/audio:2",
                            unique: true,
                            mark: true,
                            derivation: ["bhjuanshu"],
                            limited: true,
                            skillAnimation: true,
                            animationStr: "初拥",
                            animationColor: "fire",
                            priority:2,
                            init: function (player) {
                                player.storage.bhchuyong = false;
                            },
                            trigger:{
                                source:'damageEnd',
                            },
                            filter: function (event, player) {
                                if(event.player.hasSkill('bhjuanshu')) return false;
                                if(event.player==player) return false;
                                if (player.countCards('he', { color: 'red' }) > 0) return true;
                                return false;
                            },
                            check:function(event,player){
                                var att=get.attitude(player,event.target);
                                if(att>0) return false;
                                if(att<0&&player.hp<3) return true;
                                if(player.identity=='fan'&&event.player.identity!='zhu') return false;
                                return att<0;
                            },
                            content: function () {
                                'step 0'
                                player.awakenSkill('bhchuyong');
                                player.storage.bhchuyong = true;
                                event.target=trigger.player;
                                player.chooseCard('选择一张红色牌交给'+get.translation(event.target), 'he', 1, function (card) {
                                    return get.color(card) == 'red';
                                }, true);
                                'step 1'
                                event.card = result.cards;
                                player.line(event.target);
                                event.target.gain(event.card, player, 'give');
                                if (!event.target.storage.bhjuanshu) event.target.storage.bhjuanshu = [];
                                event.target.storage.bhjuanshu.push(player);
                                event.target.addSkill('bhjuanshu');
                                event.target.addSkill('bhkexue');
                            },
                            intro: {
                                content: "limited",
                            },
                        },
                        bhjuanshu: {
                            audio: "ext:崩崩崩/audio:1",
                            mark: true,
                            marktext: "眷属",
                            init: function (player) {
                                player.storage.bhjuanshu_markcount = 0;
                            },
                            intro: {
                                name: "眷属",
                                content: "我是$小姐的dog",
                                markcount: 0,
                            },
                            group: ["bhjuanshu_recover","bhjuanshu_lose"],
                            forced: true,
                            trigger: {
                                global: "dying",
                            },
                            filter: function (event, player) {
                                if (!player.storage.bhjuanshu||!player.storage.bhjuanshu.contains(event.player)) return false;
                                return true;
                            },
                            content: function () {
                                'step 0'
                                event.num=1-trigger.player.hp;
                                player.line(trigger.player);
                                trigger.player.recover(event.num);
                                player.loseHp(event.num);
                            },
                            subSkill: {
                                recover: {
                                    forced: true,
                                    trigger: {
                                        player: "recoverAfter",
                                    },
                                    content: function () {
                                        event.targets = game.filterPlayer();
                                        event.targets.sort(lib.sort.seat);
                                        event.targets.remove(player);
                                        while (event.targets.length) {
                                            event.target = event.targets.shift();
                                            if (player.storage.bhjuanshu.contains(event.target)) {
                                                player.line(event.target);
                                                event.target.draw(trigger.num);
                                            }
                                        }
                                    },
                                    sub: true,
                                },
                                lose:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    silent:true,
                                    trigger:{
                                        player:'dyingBegin',
                                    },
                                    content:function(){
                                        'step 0'
                                        player.chooseBool('是否失去技能【眷属】？').set('ai',function(){
                                            var att=get.attitude(player,player.storage.bhjuanshu[0]);
                                            if(att>0&&player.identity!='nei') return false;
                                            return true;
                                        });
                                        'step 1'
                                        if(result.bool){
                                            player.storage.bhjuanshu=[];
                                            delete player.storage.bhjuanshu;
                                            player.removeSkill('bhjuanshu');
                                        }
                                    },
                                },
                            },
                        },
                        bhkexue: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "phaseZhunbei",
                            },
                            forced: true,
                            filter: function (event, player) {
                                var num = Math.floor((player.maxHp) / 2);
                                return player.hp <= num;
                            },
                            content: function () {
                                player.addTempSkill('bhkexue2');
                            },
                        },
                        "bhkexue2": {
                            audio: "ext:崩崩崩/audio:2",
                            mark: true,
                            marktext: "渴血",
                            intro: {
                                name: "渴血",
                                content: "使用基本牌没有次数限制，锦囊牌视为【杀】。",
                            },
                            forced: true,
                            trigger: {
                                player: "useCard",
                            },
                            filter: function (event, player) {
                                return event.card && event.card.name == 'sha';
                            },
                            mod: {
                                cardname: function (card, player) {
                                    if (['trick', 'delay'].contains(lib.card[card.name].type)) return 'sha';
                                },
                                cardUsable: function (card, player) {
                                    if (['basic'].contains(lib.card[card.name].type)) return Infinity;
                                },
                            },
                            content: function () { },
                        },
                        bhshenghu: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: "dying",
                            },
                            check: function (event, player) {
                                if (get.attitude(player, event.player) < 0) return false;
                                return true;
                            },
                            filter: function (event, player) {
                                if (player.hp > (1 - event.player.hp)) return true;
                                if ((Math.max(player.countCards('e'), event.player.countCards('e')) - (1 - event.player.hp)) >= 0) return true;
                                if (player.countCards('he', { color: 'red' }) >= ((1 - event.player.hp) - Math.max(player.countCards('e'), event.player.countCards('e')))) return true;
                                return false;
                            },
                            content: function () {
                                "step 0"
                                if (trigger.player != player) {
                                    var str1 = '弃置' + get.translation(player) + '的装备牌';
                                    var str2 = '弃置' + get.translation(trigger.player) + '的装备牌';
                                    if (player.hp > (1 - trigger.player.hp)) {
                                        player.chooseControl(str1, str2, function (event, player) {
                                            return _status.event.choice;
                                        }).set('ai', function () {
                                            var cards1 = player.getCards('e');
                                            var value1 = 0;
                                            var num1 = player.countCards('e');
                                            var cards2 = trigger.player.getCards('e');
                                            var value2 = 0;
                                            var num2 = trigger.player.countCards('e');
                                            for (var i = 0; i < cards1.length; i++) {
                                                value1 += get.value(cards1[i]);
                                            }
                                            for (var i = 0; i < cards2.length; i++) {
                                                value2 += get.value(cards2[i]);
                                            }
                                            if (value1 > value2 && num1 < num2) return str2;
                                            if (value2 > value1 && num1 > num2) return str1;
                                            return num1 > num2 ? str1 : str2;
                                        });
                                        event.str = str1;
                                    } else if (player.countCards('e') < (1 - trigger.player.hp)) {
                                        result.control = str2;
                                    } else {
                                        result.control = str1;
                                    }
                                } else {
                                    event.num = player.countCards('e');
                                    event.cards = player.getCards('e');
                                    player.discard(event.cards);
                                    event.goto(2);
                                }
                                "step 1"
                                player.line(trigger.player);
                                if (result.control == event.str) {
                                    event.num = player.countCards('e');
                                    event.cards = player.getCards('e');
                                    player.discard(event.cards);
                                } else {
                                    event.num = trigger.player.countCards('e');
                                    event.cards = trigger.player.getCards('e');
                                    trigger.player.discard(event.cards);
                                }
                                "step 2"
                                var x = event.num;
                                event.num = 1 - trigger.player.hp;
                                trigger.player.recover(event.num);
                                var y = event.num;
                                var str1 = '弃置' + get.cnNumber(y - x) + '张红色牌';
                                var str2 = '失去' + get.cnNumber(y) + '点体力';
                                var str3 = '摸' + get.cnNumber(x - y) + '张牌';
                                event.num1 = x;
                                event.num2 = y;
                                if (x < y) {
                                    if (player.countCards('he', { color: 'red' }) >= y - x && player.hp >= y) {
                                        player.chooseControlList([str1, str2], function () {
                                            return _status.event.choice;
                                        }, true).set('ai', function () {
                                            return 0;
                                        });
                                    } else if (player.hp < y) {
                                        player.chooseToDiscard('he', (y - x), true, '弃置' + get.cnNumber(y - x) + '张红色牌', function (card) {
                                            return get.color(card) == 'red';
                                        });
                                        event.finish();
                                    } else {
                                        player.loseHp(y);
                                        event.finish();
                                    }
                                } else if (x > y) {
                                    player.chooseControlList([str2, str3], function () {
                                        return _status.event.choice;
                                    }, true).set('ai', function () {
                                        return 1;
                                    });
                                    event.goto(4);
                                } else {
                                    event.finish();
                                }
                                "step 3"
                                event.index = result.index;
                                if (event.index == 0) {
                                    player.chooseToDiscard('he', (event.num2 - event.num1), true, '弃置' + get.cnNumber(event.num2 - event.num1) + '张红色牌', function (card) {
                                        return get.color(card) == 'red';
                                    });
                                } else {
                                    player.loseHp(event.num2);
                                }
                                event.finish();
                                "step 4"
                                event.index = result.index;
                                if (event.index == 1) {
                                    player.draw(event.num1 - event.num2);
                                } else {
                                    player.loseHp(event.num2);
                                }
                                event.finish();
                            },
                        },
                        bhtiebi: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:"loseAfter",
                            },
                            filter:function(event,player){
                                if(event.type!='discard') return false;
                                if(event.cards.length<1) return false;
                                if(player==_status.currentPhase) return true;
                                else return event.player==player;
                                return false;
                            },
                            direct:true,
                            content:function(){
                                'step 0'
                                event.cards=trigger.cards;
                                event.targets=[];
                                'step 1'
                                player.chooseButton(['铁壁：请选择任意张牌作为“盾”分配',event.cards],[1,event.cards.length]).set('ai',function(button){
                                    if(game.hasPlayer(function(target){
                                        return get.attitude(player,target)>0&&player!=target;
                                    })){
                                        if(ui.selected.buttons.length<2) return 2;
                                        if(player.hp<2) return 2;
                                        return event.cards.length-ui.selected.buttons.length<=2?-1:2;
                                    } else return 2;
                                });
                                'step 2'
                                if(result.bool){
                                    event.cards2=result.links;
                                    player.chooseTarget('请选择分配“盾”的目标',function(card,player,target){
                                        return !event.targets.contains(target);
                                    },true).set('ai',function(target){
                                        var att=get.attitude(player,target);
                                        return att+(att>0&&target.hp<=2?3:0)+(att>0&&target.getExpansions('bhhudun').length>=6?0:4);
                                    });
                                } else event.finish();
                                'step 3'
                                event.target=result.targets[0];
                                player.logSkill('bhtiebi',event.target);
                                event.target.gainHudun(event.cards2,player);
                                event.cards.removeArray(event.cards2);
                                'step 4'
                                if(event.cards.length>0) event.goto(1);
                            },
                        },
                        bhtongdiao: {
                            audio: "ext:崩崩崩/audio:2",
                            enable:'phaseUse',
                            usable:2,
                            selectCard:-1,
                            filterCard:false,
                            filterTarget:function(card,player,target){
                                return target!=player&&target.countCards('he');
                            },
                            selectTarget:1,
                            filter:function(event,player){
                                if(player.hasSkill('bhtongdiao_im')) return false;
                                return player.countCards('he');
                            },
                            content:function(){
                                'step 0'
                                event.target=targets[0];
                                player.chooseCard('请选择一张牌弃置','he',true).set('ai',function(card){
                                    return 7-get.value(card);
                                });
                                'step 1'
                                event.card1=result.cards[0];
                                target.chooseCard('请选择一张牌弃置','he',true).set('ai',function(card){
                                    return 7-get.value(card)+(get.color(card)==get.color(event.card1)?[2,6,10]:0);
                                });
                                'step 2'
                                event.card2=result.cards[0];
                                player.discard(event.card1);
                                event.target.discard(event.card2);
                                'step 3'
                                if(get.color(event.card1)==get.color(event.card2)){
                                    player.addTempSkill('bhtongdiao_im');
                                    player.draw(2);
                                    event.target.draw(2);
                                } else event.finish();
                                'step 4'
                                player.chooseCard('请选择一张牌弃置','he',true).set('ai',function(card){
                                    return 7-get.value(card);
                                });
                                'step 5'
                                event.card1=result.cards[0];
                                target.chooseCard('请选择一张牌弃置','he',true).set('ai',function(card){
                                    return 7-get.value(card)+(get.color(card)==get.color(event.card1)?[2,6,10]:0);
                                });
                                'step 6'
                                event.card2=result.cards[0];
                                player.discard(event.card1);
                                event.target.discard(event.card2);
                                'step 7'
                                if(get.color(event.card1)==get.color(event.card2)){
                                    player.chooseBool('回复1点体力，或取消令'+get.translation(event.target)+'回复1点体力').set('ai',function(){
                                        if(player.hp==player.maxHp) return false;
                                        if(event.target.hp==event.target.maxHp) return true;
                                        return player.hp<=target.hp;
                                    });
                                } else event.finish();
                                'step 8'
                                if(result.bool){
                                    player.recover();
                                } else {
                                    event.target.recover();
                                }
                            },
                            ai:{
                                order:8.2,
                                result:{
                                    player:2,
                                    target:2,
                                },
                            },
                            subSkill:{
                                im:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                },
                            },
                        },
                        bhyueshengy: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:['gainAfter','loseAfter','equipAfter'],
                                global: ["equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter"],
                            },
                            init:function(player){
                                player.storage.bhyueshengy = [];
                                player.storage.bhyueshengy.addArray(game.filterPlayer(function(current){
                                    return player.inRange(current);
                                }));
                            },
                            direct:true,
                            silent:true,
                            log:false,
                            content:function(){
                                'step 0'
                                event.addPlayer = [];
                                let rangePlayer = game.filterPlayer(function(current){
                                    return player.inRange(current);
                                });

                                for(let i of rangePlayer){
                                    if(!player.storage.bhyueshengy.contains(i)) event.addPlayer.push(i);
                                }
                                
                                player.storage.bhyueshengy = rangePlayer;
                                'step 1'
                                if(event.addPlayer.length>0){
                                    event.addPlayer.sortBySeat();
                                    event.num = 0;
                                } else event.finish();
                                'step 2'
                                event.card1 = undefined;
                                event.card2 = undefined;
                                event.target = event.addPlayer[event.num];
                                if(!event.target.hasSkill('bhyueshengy_lm')){
                                    event.target.addTempSkill('bhyueshengy_lm');
                                    player.chooseCard('是否发动〖月升〗','h',1).set('ai',function(card){
                                        let att = get.attitude(player, event.target);
                                        if(att < 0) return -2;

                                        if(get.value(card, event.target) - get.value(card, player) > 2) return get.value(card, event.target);
                                        else if(event.target.isPhaseUsing() && player.countCards('hs') > 1) return 4;
                                        else if(player.countCards('hs') > 2 && get.value(card) < 5.1) return 3.5;
                                        else if(player.countCards('hs') > 4) return 8 - get.value(card);
                                        return -0.1;
                                    }).set('prompt2','你可以将一张手牌交给'+get.translation(event.target)+'（本回合可视为无次数限制的【杀】使用）');
                                } else event.goto(7);
                                'step 3'
                                if(result.bool) {
                                    event.card1 = result.cards[0];
                                    player.logSkill('bhyueshengy', event.target);
                                }
                                'step 4'
                                event.target.chooseCard('是否响应〖月升〗','h',1).set('ai', function(card){
                                    let att = get.attitude(event.target, player);
                                    if(att < 0) return -2;

                                    if(get.value(card, player) - get.value(card, event.target) > 2) return get.value(card, player);
                                    else if(player.isPhaseUsing() && player.countCards('hs') > 1) return 4;
                                    else if(event.target.countCards('hs') > 2 && get.value(card) < 5.1) return 3.5;
                                    else if(event.target.countCards('hs') > 4) return 8 - get.value(card);
                                    return -0.1;
                                }).set('prompt2','你可以将一张手牌交给'+get.translation(player)+'（本回合可视为无次数限制的【杀】使用）');
                                'step 5'
                                if(result.bool) {
                                    event.card2 = result.cards[0];
                                    if(!event.card1) player.logSkill('bhyueshengy', event.target);
                                }
                                'step 6'
                                if(event.card1) {
                                    event.target.gain(event.card1, player, 'give').set('log',true);
                                    event.target.addTempSkill('bhyueshengy_use');
                                    if(!event.target.storage.bhyueshengy_use) event.target.storage.bhyueshengy_use = [];
                                    event.target.storage.bhyueshengy_use.push(event.card1);
                                }
                                if(event.card2) {
                                    player.gain(event.card2, event.target, 'give').set('log',true);
                                    player.addTempSkill('bhyueshengy_use');
                                    if(!player.storage.bhyueshengy_use) player.storage.bhyueshengy_use = [];
                                    player.storage.bhyueshengy_use.push(event.card2);
                                }
                                'step 7'
                                event.num++;
                                if(event.num < event.addPlayer.length) event.goto(2);
                            },
                            subSkill:{
                                lm:{
                                    sub:true,
                                    charlotte:true,
                                },
                                use:{
                                    audio: "ext:崩崩崩/audio:1",
                                    enable:"phaseUse",
                                    filter:function(event,player){
                                        return player.storage.bhyueshengy_use.length>0;
                                    },
                                    filterTarget:function(card,player,target){
                                        return target!=player&&player.canUse('sha',target,false);
                                    },
                                    filterCard:function(card,player){
                                        return player.storage.bhyueshengy_use.contains(card) && player.getCards('hes').contains(card);
                                    },
                                    position:"hes",
                                    selectCard:1,
                                    sub:true,
                                    discard:false,
                                    lose:false,
                                    check:function(card){
                                        return 8-get.value(card);
                                    },
                                    prompt:'将一张本回合因〖月升〗获得的牌视为无次数限制的【杀】使用',
                                    content:function(){
                                        player.useCard({name:'sha',isCard:false,cards:cards[0]},cards,target,false).viewAs=true;
                                    },
                                    onremove:function(player){
                                        delete player.storage.bhyueshengy_use;
                                    },
                                    ai:{
                                        order:function(item,player){
                                            return get.order({name:'sha'},player)+1;
                                        },
                                        result:{
                                            target:function(player,target){
                                                return get.effect(target,{name:'sha'},player,target);
                                            },
                                        },
                                    },
                                },
                            },
                        },
                        bhjiaoyi: {
                            audio: "ext:崩崩崩/audio:1",
                            trigger:{
                                player:'useCard',
                            },
                            forced:true,
                            filter:function(event,player){
                                return !game.hasPlayer(function(current){
                                    return !player.inRange(current) && current!=player;
                                }) && event.card.name == 'sha';
                            },
                            content:function(){},
                            mod: {
                                attackFrom: function (from, to, distance) {
                                    return distance - parseInt(from.countCards('h')/2);
                                },
                                selectTarget: function (card, player, range) {
                                    if(!game.hasPlayer(function(current){
                                        return !player.inRange(current) && current!=player;
                                    }) && card.name=='sha'){
                                        range[1]=Infinity;
                                    }
                                },
                            },
                        },
                        bhhejin: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "damageBegin",
                            },
                            content: function () {
                                'step 0'
                                player.judge();
                                'step 1'
                                if (result.color == 'red') {
                                    trigger.cancel();
                                } else {
                                    player.draw(2);
                                }
                            },
                        },
                        bhshijie: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: ["damageEnd", "phaseZhunbeiBegin"],
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('选择一名其他角色进行判定', function (card, player, target) {
                                    return target != player;
                                }).set('ai', function (target) {
                                    return -get.attitude(_status.event.player, target) - (target.isTurnedOver() ? 6 : 0);
                                });
                                'step 1'
                                if (result.bool) {
                                    event.target = result.targets[0];
                                    player.line(event.target);
                                    event.target.judge();
                                } else {
                                    event.finish();
                                }
                                'step 2'
                                if (result.suit == 'club' || result.suit == 'diamond') {
                                    event.target.draw(2);
                                    event.target.turnOver();
                                } else if (result.suit == 'heart' || result.suit == 'spade') {
                                    event.target.draw();
                                    event.target.damage();
                                } else {
                                    event.finish();
                                }
                            },
                            ai: {
                                result: {
                                    player: 1,
                                    target: -1,
                                },
                            },
                        },
                        bhhuangguan: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            trigger: {
                                source: "damageBegin2",
                            },
                            filter: function (event, player) {
                                return event.player.isTurnedOver();
                            },
                            content: function () {
                                trigger.num++;
                            },
                        },
                        bhqinglei: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                source: "damageSource",
                            },
                            check: function (event, player) {
                                var att = get.attitude(player, event.target);
                                if (att < 9) {
                                    if (att > 0 && !player.hasSkill('bhlongming')) {
                                        return false;
                                    } else {
                                        return true;
                                    }
                                } else {
                                    return false;
                                }
                            },
                            filter:function(event,player){
                                return !event.player.hasSkill('bhgandian')&&event.player.isAlive();
                            },
                            content: function () {
                                'step 0'
                                player.judge(function (card) {
                                    if (get.color(card) == 'black') return 2;
                                    else return -2;
                                }).judge2 = function (result) {
                                    return result.bool;
                                };
                                'step 1'
                                event.color = result.color;
                                if (event.color == 'black'){											
                                    player.line(trigger.player);
                                    trigger.player.addSkill('bhgandian');
                                    event.trigger('bhqinglei2');
                                } else event.finish();
                            },
                            group: ["bhqinglei_remove","bhqinglei_res", "bhqinglei_use"],
                            subSkill: {
                                remove: {
                                    forced: true,
                                    silent: true,
                                    trigger: {
                                        player: "phaseZhunbeiBegin",
                                    },
                                    filter: function (event, player) {
                                        return game.hasPlayer(function (current) {
                                            return current.hasSkill('bhgandian');
                                        });
                                    },
                                    content: function () {
                                        event.targets = game.filterPlayer();
                                        event.targets.sort(lib.sort.seat);
                                        while (event.targets.length) {
                                            event.target = event.targets.shift();
                                            if (event.target.hasSkill('bhgandian')) {
                                                event.target.removeSkill('bhgandian');
                                                event.trigger('bhqinglei2');
                                            }
                                        }
                                    },
                                    sub: true,
                                },
                                res: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: "respond",
                                    },
                                    prompt2:"①你使用或打出了一张【闪】后，可以令一名没有“感电”的其他角色获得“感电”。②你对其他角色造成伤害后，若受伤角色没有“感电”，你可以进行一次判定：若为黑色，你令其获得“感电”。③你的准备阶段开始时，全场角色依次失去“感电”。",
                                    check: function (event, player) {
                                        return game.hasPlayer(function(target){
                                            return get.attitude(player,target)<0&&!target.hasSkill('bhgandian');
                                        });
                                    },
                                    filter: function (event, player) {
                                        var bool=game.hasPlayer(function(target){
                                            return target!=player&&!target.hasSkill('bhgandian');
                                        });
                                        if (event.card.name != 'shan') return false;
                                        return bool;
                                    },
                                    content: function () {
                                        'step 0'
										player.chooseTarget('选择一名角色令其获得“感电”', function (card, player, target) {
											return target != player&&!target.hasSkill('bhgandian');
										},true).set('ai', function (target) {
											return -get.attitude(player, target);
										});	
                                        'step 1'
										//player.logSkill('bhlongming', result.targets[0]);
										player.line(result.targets[0]);
                                        result.targets[0].addSkill('bhgandian');
                                        event.trigger('bhqinglei2');
                                    },
                                    ai: {
                                        effect: {
                                            player: 1,
                                            target: -0.5,
                                        },
                                    },
                                },
                                use: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: "useCard",
                                    },
                                    prompt2:"①你使用或打出了一张【闪】后，可以令一名没有“感电”的其他角色获得“感电”。②你对其他角色造成伤害后，若受伤角色没有“感电”，你可以进行一次判定：若为黑色，你令其获得“感电”。③你的准备阶段开始时，全场角色依次失去“感电”。",
                                    check: function (event, player) {
                                        return game.hasPlayer(function(target){
                                            return get.attitude(player,target)<0&&!target.hasSkill('bhgandian');
                                        });
                                    },
                                    filter: function (event, player) {
                                        var bool=game.hasPlayer(function(target){
                                            return target!=player&&!target.hasSkill('bhgandian');
                                        });
                                        if (event.card.name != 'shan') return false;
                                        return bool;
                                    },
                                    content: function () {
                                        'step 0'
										player.chooseTarget('选择一名角色令其获得“感电”', function (card, player, target) {
											return target != player&&!target.hasSkill('bhgandian');
										},true).set('ai', function (target) {
											return -get.attitude(player, target);
										});	
                                        'step 1'
										//player.logSkill('bhlongming', result.targets[0]);
										player.line(result.targets[0]);
                                        result.targets[0].addSkill('bhgandian');
                                        event.trigger('bhqinglei2');
                                    },
                                },
                            },
                            derivation:['bhgandian'],
                        },
                        bhgandian: {
                            mark: true,
                            marktext: "感电",
                            intro: {
                                name: "感电",
                                content: function (storage, player, skill) {
                                    return "受到的雷电伤害+1";
                                },
                            },
                            trigger: {
                                player: "damageBegin3",
                            },
                            forced: true,
                            filter: function (event, player) {
                                if (!event.nature || event.nature != 'thunder') return false;
                                return true;
                            },
                            content: function () {
                                trigger.num++;
                            },
                            ai: {
                                effect: {
                                    player: function (event) {
                                        if (event.nature == 'thunder') {
                                            return -2;
                                        }
                                    },
                                },
                            },
                        },
                        bhlongming: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "bhqinglei2",
                            },
                            content: function () {
							'step 0'
							player.judge();
							'step 1'
                            event.color = result.color;	
                            if (event.color == 'black') {
                                player.chooseTarget('你可以对一名其他角色造成1点雷电伤害', function (card, player, target) {
                                return target != player;
                                }).set('ai', function (target) {
                                    var att=get.attitude(player, target);
                                    if(att>0) return -4;
                                    if(target.hasSkill('bhgandian')) return -att+2;
                                    return -att;
                                });	
                            } else {
                                player.draw();
                                event.finish();
                            }
							'step 2'							
                            if (event.color == 'black') {
                                //player.logSkill('bhlongming', result.targets[0]);
                                player.line(result.targets[0]);
                                result.targets[0].damage('thunder');
                            }
                            },
                            ai: {
                                effect: {
                                    player: 2,
                                },
                            },
                        },
                        bhzhiliu: {
                            enable: ["chooseToRespond", "chooseToUse"],
                            filterCard: function (card, player) {
                                return get.color(card) == 'black';
                            },
                            group: "bhzhiliu_damage",
                            position: "he",
                            viewAs: {
                                name: "sha",
                                nature: "thunder",
                            },
                            viewAsFilter: function (player) {
                                if (!player.countCards('he', { color: 'black' })) return false;
                            },
                            prompt: "将一张黑色牌当雷【杀】使用或打出",
                            ai: {
                                respondSha: true,
                                skillTagFilter: function (player) {
                                    if (!player.countCards('hes', { color: 'black' })) return false;
                                },
                                yingbian: function (card, player, targets, viewer) {
                                    if (get.attitude(viewer, player) <= 0) return 0;
                                    var base = 0, hit = false;
                                    if (get.cardtag(card, 'yingbian_hit')) {
                                        hit = true;
                                        if (targets.filter(function (target) {
                                            return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                        })) base += 5;
                                    }
                                    if (get.cardtag(card, 'yingbian_all')) {
                                        if (game.hasPlayer(function (current) {
                                            return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                        })) base += 5;
                                    }
                                    if (get.cardtag(card, 'yingbian_damage')) {
                                        if (targets.filter(function (target) {
                                            return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                                target: target,
                                                card: card,
                                            }, true)) && !target.hasSkillTag('filterDamage', null, {
                                                player: player,
                                                card: card,
                                                jiu: true,
                                            })
                                        })) base += 5;
                                    }
                                    return base;
                                },
                                canLink: function (player, target, card) {
                                    if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                    if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                        target: target,
                                        card: card,
                                    }, true)) return false;
                                    if (player.hasSkill('jueqing') || target.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                    return true;
                                },
                                basic: {
                                    useful: [5, 1],
                                    value: [5, 1],
                                },
                                order: function (item, player) {
                                    if (player.hasSkillTag('presha', true, null, true)) return 10;
                                    if (lib.linked.contains(get.nature(item))) {
                                        if (game.hasPlayer(function (current) {
                                            return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                        }) && game.countPlayer(function (current) {
                                            return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                        }) > 1) return 3.1;
                                        return 3;
                                    }
                                    return 3.05;
                                },
                                result: {
                                    target: function (player, target, card, isLink) {
                                        var eff = function () {
                                            if (!isLink && player.hasSkill('jiu')) {
                                                if (!target.hasSkillTag('filterDamage', null, {
                                                    player: player,
                                                    card: card,
                                                    jiu: true,
                                                })) {
                                                    if (get.attitude(player, target) > 0) {
                                                        return -7;
                                                    }
                                                    else {
                                                        return -4;
                                                    }
                                                }
                                                return -0.5;
                                            }
                                            return -1.5;
                                        }();
                                        if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) return eff / 1.2;
                                        return eff;
                                    },
                                },
                                tag: {
                                    respond: 1,
                                    respondShan: 1,
                                    damage: function (card) {
                                        if (card.nature == 'poison') return;
                                        return 1;
                                    },
                                    natureDamage: function (card) {
                                        if (card.nature) return 1;
                                    },
                                    fireDamage: function (card, nature) {
                                        if (card.nature == 'fire') return 1;
                                    },
                                    thunderDamage: function (card, nature) {
                                        if (card.nature == 'thunder') return 1;
                                    },
                                    poisonDamage: function (card, nature) {
                                        if (card.nature == 'poison') return 1;
                                    },
                                },
                            },
                            subSkill: {
                                damage: {
                                    forced: true,
                                    trigger: {
                                        source: "damageBegin",
                                    },
                                    filter: function (event, player) {
                                        if (!event.nature || event.nature != 'thunder') return false;
                                        return true;
                                    },
                                    content: function () {
                                        if (get.distance(player, trigger.player) <= 1) {
                                            trigger.num++;
                                        } else if (get.distance(player, trigger.player) > 3) {
                                            trigger.num--;
                                        }
                                    },
                                },
                            },
                        },
                        bhzhuanli: {
                            trigger: {
                                global: "useCard",
                            },
                            filter: function (event, player) {
                                if (!event.card.nature || event.card.nature != 'thunder') return false;
                                return event.player != player;
                            },
                            content: function () {
                                'step 0'
                                trigger.player.chooseToDiscard('弃置一张牌，或令' + get.translation(player) + '摸一张牌', 'he').set('ai', function (card) {
                                    var trigger = _status.event.getTrigger();
                                    return -get.attitude(trigger.player, player) - get.value(card);
                                });
                                'step 1'
                                if (result.bool == false) player.draw();
                            },
                            group: ["bhzhuanli_damage"],
                            subSkill: {
                                damage: {
                                    trigger: {
                                        global: "damage",
                                    },
                                    filter: function (event, player) {
                                        if (!event.nature || event.nature != 'thunder') return false;
                                        if (!event.source || event.source == player) return false;
                                        return true;
                                    },
                                    frequent: true,
                                    silent: true,
                                    content: function () {
                                        'step 0'
                                        event.num = trigger.num;
                                        event.target = trigger.source;
                                        'step 1'
                                        player.chooseBool('是否对' + get.translation(trigger.source) + '发动“专利”？');
                                        'step 2'
                                        if (result.bool) {
                                            player.logSkill('bhzhuanli');
                                            trigger.source.chooseToDiscard('弃置一张牌，或令' + get.translation(player) + '摸一张牌', 'he').set('ai', function (card) {
                                                return -get.attitude(event.target, player) - get.value(card);
                                            });
                                        } else {
                                            event.finish();
                                        }
                                        'step 3'
                                        if (result.bool == false) player.draw();
                                        'step 4'
                                        event.num--;
                                        if (event.num > 0) {
                                            event.goto(1);
                                        }
                                    },
                                },
                            },
                        },
                        bhjiaoliu: {
                            enable: ["chooseToRespond", "chooseToUse"],
                            filterCard: function (card, player) {
                                return get.color(card) == 'red';
                            },
                            group: "bhjiaoliu_damage",
                            position: "he",
                            viewAs: {
                                name: "sha",
                                nature: "thunder",
                            },
                            viewAsFilter: function (player) {
                                if (!player.countCards('he', { color: 'red' })) return false;
                            },
                            prompt: "将一张红色牌当雷【杀】使用或打出",
                            ai: {
                                respondSha: true,
                                skillTagFilter: function (player) {
                                    if (!player.countCards('hes', { color: 'red' })) return false;
                                },
                                yingbian: function (card, player, targets, viewer) {
                                    if (get.attitude(viewer, player) <= 0) return 0;
                                    var base = 0, hit = false;
                                    if (get.cardtag(card, 'yingbian_hit')) {
                                        hit = true;
                                        if (targets.filter(function (target) {
                                            return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                        })) base += 5;
                                    }
                                    if (get.cardtag(card, 'yingbian_all')) {
                                        if (game.hasPlayer(function (current) {
                                            return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                        })) base += 5;
                                    }
                                    if (get.cardtag(card, 'yingbian_damage')) {
                                        if (targets.filter(function (target) {
                                            return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                                target: target,
                                                card: card,
                                            }, true)) && !target.hasSkillTag('filterDamage', null, {
                                                player: player,
                                                card: card,
                                                jiu: true,
                                            })
                                        })) base += 5;
                                    }
                                    return base;
                                },
                                canLink: function (player, target, card) {
                                    if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                    if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                        target: target,
                                        card: card,
                                    }, true)) return false;
                                    if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                    return true;
                                },
                                basic: {
                                    useful: [5, 3, 1],
                                    value: [5, 3, 1],
                                },
                                order: function (item, player) {
                                    if (player.hasSkillTag('presha', true, null, true)) return 10;
                                    if (lib.linked.contains(get.nature(item))) {
                                        if (game.hasPlayer(function (current) {
                                            return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                        }) && game.countPlayer(function (current) {
                                            return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                        }) > 1) return 3.1;
                                        return 3;
                                    }
                                    return 3.05;
                                },
                                result: {
                                    target: function (player, target, card, isLink) {
                                        var eff = function () {
                                            if (!isLink && player.hasSkill('jiu')) {
                                                if (!target.hasSkillTag('filterDamage', null, {
                                                    player: player,
                                                    card: card,
                                                    jiu: true,
                                                })) {
                                                    if (get.attitude(player, target) > 0) {
                                                        return -7;
                                                    }
                                                    else {
                                                        return -4;
                                                    }
                                                }
                                                return -0.5;
                                            }
                                            return -1.5;
                                        }();
                                        if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) return eff / 1.2;
                                        return eff;
                                    },
                                },
                                tag: {
                                    respond: 1,
                                    respondShan: 1,
                                    damage: function (card) {
                                        if (card.nature == 'poison') return;
                                        return 1;
                                    },
                                    natureDamage: function (card) {
                                        if (card.nature) return 1;
                                    },
                                    fireDamage: function (card, nature) {
                                        if (card.nature == 'fire') return 1;
                                    },
                                    thunderDamage: function (card, nature) {
                                        if (card.nature == 'thunder') return 1;
                                    },
                                    poisonDamage: function (card, nature) {
                                        if (card.nature == 'poison') return 1;
                                    },
                                },
                            },
                            subSkill: {
                                damage: {
                                    forced: true,
                                    trigger: {
                                        source: "damageBegin",
                                    },
                                    filter: function (event, player) {
                                        if (!event.nature || event.nature != 'thunder') return false;
                                        return true;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.judge();
                                        'step 1'
                                        if (result.number <= 4) {
                                            trigger.num--;
                                        } else if (result.number >= 10) {
                                            trigger.num++;
                                        }
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhtaitan: {
                            enable: "phaseUse",
                            init: function (player) {
                                player.storage.bhtaitan = false;
                            },
                            intro: {
                                content: "limited",
                            },
                            unique: true,
                            limited: true,
                            skillAnimation: true,
                            animationStr: "泰坦",
                            animationColor: "grey",
                            filter: function (event, player) {
                                return player.storage.bhtaitan == false;
                            },
                            content: function () {
                                'step 0'
                                player.awakenSkill('bhtaitan');
                                player.storage.bhtaitan = true;
                                player.addSkill('bhtaitan2');
                                player.removeSkill('bhjiaoliu');
                                player.addSkill('bhtiequan');
                                player.storage.bhtaitan2 = [0, 0];
                                player.storage.bhtaitan2[0] = player.maxHp;
                                player.storage.bhtaitan2[1] = player.hp;
                                'step 1'
                                if (player.maxHp > 3) {
                                    player.loseMaxHp(player.maxHp - 3);
                                } else if (player.maxHp < 3) {
                                    player.gainMaxHp(3 - player.maxHp);
                                }
                                'step 2'
                                if (player.hp < player.maxHp) {
                                    player.recover(player.maxHp - player.hp);
                                }
                            },
                            ai: {
                                order: 5,
                                result: {
                                    player: function (player, target) {
                                        return (player.maxHp - player.hp) * 8 - 9;
                                    },
                                },
                            },
                            mark: true,
                        },
                        "bhtaitan2": {
                            mark: true,
                            marktext: "泰坦",
                            intro: {
                                name: "泰坦",
                                content: function (storage, player, skill) {
                                    return "体力上限：" + player.storage.bhtaitan2[0] + "\n体力值：" + player.storage.bhtaitan2[1];
                                },
                            },
                            trigger: {
                                player: "dying",
                            },
                            forced: true,
                            content: function () {
                                'step 0'
                                player.removeSkill('bhtiequan');
                                player.addSkill('bhjiaoliu');
                                'step 1'
                                if (player.maxHp > player.storage.bhtaitan2[0]) {
                                    player.loseMaxHp(player.maxHp - player.storage.bhtaitan2[0]);
                                } else if (player.maxHp < player.storage.bhtaitan2[0]) {
                                    player.gainMaxHp(player.storage.bhtaitan2[0] - player.maxHp);
                                }
                                if (player.hp > player.storage.bhtaitan2[1]) {
                                    player.loseHp(player.hp - player.storage.bhtaitan2[1]);
                                } else if (player.hp < player.storage.bhtaitan2[1]) {
                                    player.recover(player.storage.bhtaitan2[1] - player.hp);
                                }
                                'step 2'
                                player.removeSkill('bhtaitan2');
                            },
                        },
                        bhtiequan: {
                            trigger: {
                                source: "damageBegin",
                            },
                            filter: function (event, player) {
                                if (event.card.name != 'sha') return false;
                                if (!event.nature) return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                player.judge();
                                'step 1'
                                if (result.color == 'black') {
                                    trigger.num++;
                                }
                            },
                        },
                        bhronghe: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:"phaseUseBegin",
                            },
                            check:function(event,player){
                                if(player.isBurst()&&player.hp<3) return true;
                                if(!player.isBurst()&&player.hp>2) return true;
                                return false;
                            },
                            content: function () {
                                if(player.isBurst()){
                                    player.chooseToDiscard('he',true);
                                    player.unBurst();
                                } else {
                                    player.draw();
                                    player.Burst(Infinity);
                                }
                            },
                            group: "bhronghe_jieshu",
                            subSkill: {
                                jieshu:{
                                    sub:true,
                                    frequent:true,
                                    trigger:{
                                        player:'phaseJieshu',
                                    },
                                    filter:function(event,player){
                                        return !player.isBurst();
                                    },
                                    content:function(){
                                        player.draw();
                                    },
                                },
                            },
                            // ai: {
                            //     result: {
                            //         player: function (player, target) {
                            //             var hs = player.countCards('hs', function (card) {
                            //                 return ['sha','juedou','huogong'].contains(card.name);
                            //             });
                            //             if (hs.length > 1 && game.hasPlayer(function (current) {
                            //                 return get.attitude(player, current) < 0;
                            //             })) return 2;
                            //             return 0;
                            //         },
                            //     },
                            // },
                        },
                        bhleiren: {
                            audio: "ext:崩崩崩/audio:2",
                            mod: {
                                targetInRange: function (card,player,target) {
                                    if (player.isBurst()&&card.name == 'sha'&&get.color(card)=='black') return true;
                                },
                            },
                            forced: true,
                            trigger: {
                                source:"damageEnd",
                            },
                            filter: function (event, player) {
                                if(!event.card||!player.isBurst()) return false;
                                return event.player!=player&&event.player.isAlive();
                            },
                            content: function () {
                                'step 0'
                                player.line(trigger.player);
                                trigger.player.damage('thunder',player);
                                'step 1'
                                player.loseHp();
                            },
                            group:"bhleiren_sha",
                            subSkill:{
                                sha:{
                                    audio:'bhleiren',
                                    sub:true,
                                    trigger:{
                                        player:"useCard",
                                    },
                                    forced:true,
                                    filter:function(event,player){
                                        return player.isBurst()&&event.card.name=='sha'&&get.color(event.card)=='black';
                                    },
                                    content:function(){
                                        trigger.directHit.addArray(game.filterPlayer());
                                    },
                                },
                            },
                        },
                        bhhaoling: {
                            audio: "ext:崩崩崩/audio:2",
                            unique: true,
                            zhuSkill: true,
                            global: "bhhaoling2",
                        },
                        "bhhaoling2": {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            discard: false,
                            lose: false,
                            delay: false,
                            line: true,
                            direct: true,
                            clearTime: true,
                            prepare: function (cards, player, targets) {
                                targets[0].logSkill('bhhaoling');
                            },
                            prompt: function () {
                                var player = _status.event.player;
                                var list = game.filterPlayer(function (target) {
                                    return target != player && target.hasZhuSkill('bhhaoling', player);
                                });
                                var str = '将一张手牌展示并交给' + get.translation(list);
                                if (list.length > 1) str += '中的一人';
                                return str;
                            },
                            filter: function (event, player) {
                                if (player.group != 'bhxiubolian') return false;
                                if (!player.countCards('h')) return 0;
                                return game.hasPlayer(function (target) {
                                    return target != player && target.hasZhuSkill('bhhaoling', player) && !target.hasSkill('bhhaoling3');
                                });
                            },
                            filterCard: function (card) {
                                return true;
                            },
                            log: false,
                            visible: true,
                            filterTarget: function (card, player, target) {
                                return target != player && target.hasZhuSkill('bhhaoling', player) && !target.hasSkill('bhhaoling3');
                            },
                            content: function () {
                                'step 0'
                                player.showCards(cards);
                                target.gain(cards, player, 'giveAuto');
                                target.addTempSkill('bhhaoling3', 'phaseUseEnd');
                                if (cards[0].name == 'sha') {
                                    target.chooseBool('是否令' + get.translation(player) + '摸一张牌？').set('ai', function () {
                                        return get.attitude(target, player);
                                    });
                                }
                                'step 1'
                                if (result.bool) {
                                    player.draw();
                                }
                            },
                            ai: {
                                expose: 0.3,
                                order: 10,
                                result: {
                                    target: function (card) {
                                        return card.name == 'sha' ? 8 : 4;
                                    },
                                },
                            },
                        },
                        "bhhaoling3": {
                        },
                        bhxiangdui: {
                            forced: true,
                            trigger: {
                                target: "useCardToTarget",
                            },
                            filter: function (event, player) {
                                if (event.player == player) return false;
                                var bool = player.canUse(event.card, event.player);
                                return !bool;
                            },
                            content: function () {
                                'step 0'
                                if (trigger.targets.length > 1) {
                                    trigger.getParent().excluded.add(player);
                                } else {
                                    trigger.targets.length = 0;
                                    trigger.getParent().triggeredTargets2.length = 0;
                                    trigger.cancel();
                                }
                            },
                        },
                        bhyinbian: {
                            usable: 1,
                            trigger: {
                                global: 'useCardAfter',
                            },
                            frequent: true,
                            filter: function (event, player) {
                                if (!event.targets.contains(player) || event.player == player) return false;
                                return Math.min(event.player.countCards('h'), 5) > player.countCards('h');
                            },
                            prompt: function (event, player) {
                                var num = Math.min(event.player.countCards('h'), 5) - player.countCards('h')
                                return '隐变：你可以摸' + num + '张牌';
                            },
                            content: function () {
                                'step 0'
                                event.num = Math.min(trigger.player.countCards('h'), 5) - player.countCards('h');
                                player.draw(event.num);
                            },
                        },
                        bhdanbai: {
                            trigger: {
                                player: "loseAfter",
                                global: ["equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter"],
                            },
                            filter: function (event, player) {
                                if (player.countCards('h')) return false;
                                var evt = event.getl(player);
                                return evt && evt.hs && evt.hs.length;
                            },
                            content: function () {
                                "step 0"
                                event.num = player.hp;
                                var str1 = '摸牌';
                                var str2 = '弃牌';
                                player.chooseControl(str1, str2, function () {
                                    return _status.event.choice;
                                }).set('ai', function () {
                                    var player = _status.event.player;
                                    var players = game.filterPlayer();
                                    var num1 = 0;
                                    var num2 = 0
                                    for (var i = 0; i < players.length; i++) {
                                        if (get.attitude(player, players[i]) > 0) {
                                            num1++;
                                        } else if (get.attitude(player, players[i]) < 0) {
                                            num2++;
                                        }
                                    }
                                    if (num1 < player.hp && num2 > player.hp) {
                                        if (player.hp >= 2 && !player.countCards('he', { name: 'zhuge' })) {
                                            return str2;
                                        } else {
                                            return str1;
                                        }
                                    } else {
                                        return str1;
                                    }
                                });
                                event.str = str1;
                                "step 1"
                                if (event.str == result.control) {
                                    player.chooseTarget(true, '令至多' + get.cnNumber(event.num) + '名角色各摸一张牌', [1, event.num]).set('ai', function (target) {
                                        var player = _status.event.player;
                                        if (player == target) return get.attitude(player, target) + 10;
                                        return get.attitude(player, target);
                                    });
                                    event.goto(2);
                                } else {
                                    player.chooseTarget(true, '令至多' + get.cnNumber(event.num) + '名角色各弃一张牌', [1, event.num]).set('ai', function (target) {
                                        var player = _status.event.player;
                                        if (player == target) return get.attitude(player, target) - 11;
                                        return -get.attitude(player, target);
                                    });
                                    event.goto(3);
                                }
                                "step 2"
                                event.targets = result.targets;
                                player.logSkill('bhdanbai', event.targets);
                                game.asyncDraw(event.targets);
                                event.finish();
                                "step 3"
                                event.targets = result.targets;
                                event.targets.sortBySeat();
                                while (event.targets.length) {
                                    event.target = event.targets.shift();
                                    player.line(event.target);
                                    event.target.chooseToDiscard('he', true);
                                }
                            },
                        },
                        bhluoti: {
                            trigger: {
                                player: "phaseUseBegin",
                            },
                            content: function () {
                                'step 0'
                                player.draw(2);
                                'step 1'
                                player.chooseCard('选择要置于牌堆底的牌', 'h', [2, Infinity], true).set('ai', function (card) {
                                    if (player.countCards('h', { name: 'sha' }) > 1 && !player.countCards('he', { name: 'zhuge' })) {
                                        if (player.countCards('h', { name: 'tao' }) > player.maxHp - player.hp) {
                                            if (player.countCards('h', { name: ['shan', 'wuxie'] }) >= 2) {
                                                if (card.name == 'sha') return 2;
                                                else if (card.name == 'shan' || card.name == 'wuxie') return 1;
                                                else if (card.name == 'tao') return 0;
                                                else return -0.8;
                                            } else {
                                                if (card.name == 'sha') return 2;
                                                else if (card.name == 'shan' || card.name == 'wuxie') return -1;
                                                else if (card.name == 'tao') return 0;
                                                else return -0.8;
                                            }
                                        } else {
                                            if (player.countCards('h', { name: ['shan', 'wuxie'] }) >= 2) {
                                                if (card.name == 'sha') return 2;
                                                else if (card.name == 'shan' || card.name == 'wuxie') return 1;
                                                else if (card.name == 'tao') return -1;
                                                else return 0.8;
                                            } else {
                                                if (card.name == 'sha') return 2;
                                                else if (card.name == 'shan' || card.name == 'wuxie') return -1;
                                                else if (card.name == 'tao') return -1;
                                                else return -0.8;
                                            }
                                        }
                                    } else {
                                        if (card.name == 'sha' || get.tag(card, 'damage') || (get.type(card) == 'trick' && card.name != 'wuxie') || card.name == 'lebu') {
                                            return -1;
                                        } else {
                                            return 1;
                                        }
                                    }
                                });
                                'step 2'
                                event.cards = result.cards;
                                player.chooseCardButton(event.cards, event.cards.length, '落体：将选择的牌按任意顺序置于牌堆底（先选择的在上）', true).set('ai', function () {
                                    return -1;
                                }, true);
                                'step 3'
                                var cards = result.links.slice(0);
                                while (cards.length) {
                                    ui.cardPile.appendChild(cards.pop());
                                    //ui.cardPile.insertBefore(cards.pop(), ui.cardPile.firstChild);
                                }
                                player.logSkill(event.name);
                            },
                        },
                        bhguanxing: {
                            trigger: {
                                player: "damageBegin",
                            },
                            forced: true,
                            content: function () {
                                if (!player.hasSkill('bhguanxing2')) {
                                    player.addTempSkill('bhguanxing2');
                                    trigger.cancel();
                                } else {
                                    trigger.num++;
                                }
                            },
                        },
                        "bhguanxing2": {
                            charlotte: true,
                            forced: true,
                        },
                        bhaomie: {
                            audio: "ext:崩崩崩/audio:2",
                            forced:true,
                            locked:true,
                            priority:101,
                            trigger:{
                                global:'useCardAfter',
                            },
                            filter:function(event,player){
                                if(event.player != player && !event.targets.contains(player)) return false;
                                if(!get.tag(event.card,'damage')) return false;

                                if (!event.player.hasHistory('sourceDamage', function (evt) {
                                    var card = evt.card;
                                    if (!card || !get.tag(card,'damage')) return false;
                                    return event.card == card;
                                })) {
                                    return true;
                                }

                                return false;
                            },
                            content:function(){
                                'step 0'
                                event.user = trigger.player;
                                event.user.chooseToUse('使用一张伤害牌，或受到来自'+get.translation(player)+'的1点伤害',function(card,player,target){
                                    return get.tag(card, 'damage');
                                }).set('ai',function(card){
                                    if(event.user.hasSkill('bhfanji')&&!event.user.getExpansions('bhhudun').length&&!event.user.hasSkill('bhjielv')&&event.user.hp==1) return -10;
                                    if(event.user.hp <= 2 && event.user.getExpansions('bhhudun').length < 2 ) return 10-get.value(card);

                                    let maxEff = -2;
                                    for(let i of game.filterPlayer(function(current){
                                        return event.user.canUse(card,current);
                                    })){
                                        if(get.effect(i, card, event.user, event.user) > maxEff){
                                            maxEff = get.effect(i, card, event.user, event.user);
                                        }
                                    }
                                    return maxEff;
                                });
                                'step 1'
                                if(!result.bool){
                                    player.draw();
                                    if(event.user == player){
                                        player.addTempSkill('bhaomie_use','bhaomie_after');
                                        player.storage.bhaomie_use = trigger.card;
                                    } 
                                    event.user.damage(player);
                                }
                                'step 2'
                                event.trigger('bhaomie_after');
                            },
                            subSkill:{
                                use:{
                                    forced:true,
                                    locked:true,
                                    direct:true,
                                    sub:true,
                                    trigger:{
                                        player:'damageEnd',
                                    },
                                    filter:function(event,player){
                                        if(!event.source || event.source != player) return false;
                                        return !event.card && player.storage.bhaomie_use;
                                    },
                                    content:function(){
                                        'step 0'
                                        event.card = player.storage.bhaomie_use;
                                        player.chooseUseTarget('视为使用'+get.translation(event.card),{name:event.card.name, nature:get.nature(event.card)?get.nature(event.card):undefined, isCard:true},true);
                                        'step 1'
                                        player.removeSkill('bhaomie_use');
                                    },
                                },
                            },
                        },
                        bhfanji:{
                            audio: "ext:崩崩崩/audio:2",
                            forced:true,
                            locked:true,
                            derivation:['bhniepan'],
                            trigger:{
                                global:'dyingBegin',
                            },
                            filter:function(event,player){
                                return event.source && event.source == player;
                            },
                            content:function(){
                                'step 0'
                                event.target = trigger.player;
                                event.source = player;
                                event.target.discard(event.target.getCards('h'));
                                'step 1'
                                if(event.target == player){
                                    player.logSkill('bhniepan');
                                    player.discard(player.getCards('hej'));
                                    player.link(false);
                                    player.turnOver(false);
                                    player.draw(3);
                                    if(player.hp<3){
                                        player.recover(3-player.hp);
                                    }
                                }
                            },
                            logTarget:function(event,player){
                                return event.player;
                            },
                        },
                        bhniepan:{
                            audio: "ext:崩崩崩/audio:2",
                            unique:true,
                            enable:"chooseToUse",
                            mark:true,
                            skillAnimation:false,
                            limited:true,
                            animationColor:"orange",
                            init:function(player){
                                player.storage.bhniepan=false;
                            },
                            filter:function(event,player){
                                if(player.storage.bhniepan) return false;
                                if(event.type=='dying'){
                                    if(player!=event.dying) return false;
                                    return true;
                                }
                                return false;
                            },
                            content:function(){
                                'step 0'
                                player.awakenSkill('bhniepan');
                                player.storage.bhniepan=true;
                                player.discard(player.getCards('hej'));
                                'step 1'
                                player.link(false);
                                'step 2'
                                player.turnOver(false);
                                'step 3'
                                player.draw(3);
                                'step 4'
                                if(player.hp<3){
                                    player.recover(3-player.hp);
                                }
                            },
                            ai:{
                                order:1,
                                skillTagFilter:function(player,arg,target){
                                    if(player!=target||player.storage.bhniepan) return false;
                                },
                                save:true,
                                result:{
                                    player:function(player){
                                        if(player.hp<=0) return 10;
                                        if(player.hp<=2&&player.countCards('he')<=1) return 10;
                                        return 0;
                                    },
                                },
                                threaten:function(player,target){
                                    if(!target.storage.bhniepan) return 0.6;
                                },
                            },
                            intro:{
                                content:"limited",
                            },
                            "_priority":0,
                        },
                        bhbaopo: {
                            trigger: {
                                player: "useCard",
                            },
                            filter: function (event, player) {
                                if (event.targets.length > 1||!event.targets.length) return false;
                                if (!['basic', 'trick'].contains(get.type(event.card))) return false;
                                if (get.type(event.card)=='delay') return false;
                                if (event.targets && event.targets[0] != player) return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                event.color = get.color(trigger.card);
                                event.suit=get.suit(trigger.card);
                                player.judge(function (card) {
                                    if(player.hasSkill('bhbaopo_buff')){
                                        if (get.suit(card) == event.suit) return -2;
                                        else return 2;
                                    } else {
                                        if (get.color(card) == event.color) return -2;
                                        else return 2;
                                    }
                                }).judge2 = function (result) {
                                    return result.bool;
                                };
                                'step 1'
                                if (result.judge == -2 ) {
                                    event._result = { bool: false };
                                } else {
                                    event._result = { bool: true };
                                }
                                'step 2'
                                if (result.bool) {
                                    trigger.nowuxie = true;
                                    trigger.directHit.addArray(game.players);
                                    player.removeSkill('bhbaopo_buff');
                                    if(!game.hasPlayer(function(target){
                                        return get.distance(target,trigger.targets[0])==1&&target!=trigger.targets[0];
                                    })) event.finish();
                                    else {
                                        player.chooseTarget('你可以令一名与'+get.translation(trigger.targets[0])+'距离为1的角色也成为'+get.translation(trigger.card)+'的目标',function(card,player,target){
                                            return get.distance(target,trigger.targets[0])==1&&target!=trigger.targets[0];
                                        }).set('ai',function(target){
                                            return get.effect(target,trigger.card,player,player);
                                        });
                                    }
                                } else {
                                    trigger.targets.push(player);
                                    player.addSkill('bhbaopo_buff');
                                    event.finish();
                                }
                                'step 3'
                                if(result.bool){
                                    trigger.targets.push(result.targets[0]);
                                }
                            },
                            subSkill:{
                                buff:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                },
                            },
                        },
                        bhdajiang: {
                            trigger: {
                                player: "judgeEnd",
                            },
                            group: "bhdajiang_give",
                            subSkill: {
                                give: {
                                    skillAnimation: true,
                                    animationColor: "metal",
                                    trigger: {
                                        player: "dieBegin",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.getExpansions('bhdajiang') && player.getExpansions('bhdajiang').length > 0;
                                    },
                                    content: function () {
                                        'step 0'
                                        event.targets = game.filterPlayer();
                                        event.targets.remove(player);
                                        'step 1'
                                        player.chooseCardButton('选择至多两张“奖”用于分配', [1, 2], player.getExpansions('bhdajiang')).set('ai', function (card) {
                                            if (!game.hasPlayer(function (target) {
                                                return event.targets.contains(target) && get.attitude(player, target) > 0;
                                            })) return -20;
                                            return get.value(card);
                                        });
                                        'step 2'
                                        if (result.bool && result.links) {
                                            event.cards = result.links;
                                            //player.loseToDiscardpile(result.links);
                                            player.markSkill('bhdajiang');
                                            if (player.getExpansions('bhdajiang').length == 0) {
                                                player.unmarkSkill('bhdajiang');
                                            }
                                            player.chooseTarget('将' + get.translation(result.links) + '分配给一名角色', function (card, player, target) {
                                                return event.targets.contains(target);
                                            }, true).set('ai', function (target) {
                                                var att = get.attitude(_status.event.player, target);
                                                if (att < 0) return -20;
                                                else {
                                                    return att - target.countCards('hs');
                                                }
                                            });
                                        } else {
                                            event.finish();
                                        }
                                        'step 3'
                                        player.line(result.targets[0]);
                                        result.targets[0].gain(event.cards, player, 'give');
                                        game.log(player, '将', event.cards, '分配给了', result.targets[0]);
                                        event.targets.remove(result.targets[0]);
                                        'step 4'
                                        if (event.targets.length > 0 && player.getExpansions('bhdajiang').length > 0) {
                                            event.goto(1);
                                        }
                                    },
                                },
                            },
                            marktext: "奖",
                            intro: {
                                content: 'expansion',
                                markcount: 'expansion',
                            },
                            onremove: function (player, skill) {
                                var cards = player.getExpansions(skill);
                                if (cards.length) player.loseToDiscardpile(cards);
                            },
                            init:function(player){
                                player.storage.bhdajinag_count=0;
                            },
                            forced: true,
                            filter: function (event, player) {
                                return get.position(event.result.card, true) == 'o';
                            },
                            content: function () {
                                'step 0'
                                event.card = trigger.result.card;
                                if(player.getExpansions('bhdajiang').length>=16){
                                    var card=player.getExpansions('bhdajiang').randomGet();
                                    player.discard(card);
                                }
                                player.addToExpansion(event.card, 'gain2').gaintag.add('bhdajiang');
                                player.syncStorage('bhdajiang');
                                player.markSkill('bhdajiang');
                                'step 1'
                                player.storage.bhdajinag_count++;
                                if(player.storage.bhdajinag_count%2==0) player.draw();
                            },
                        },
                        bhjiansheng: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                target: "useCardToTargeted",
                            },
                            group: "bhjiansheng_use",
                            check: function (event, player) {
                                var att = get.attitude(player, event.player);
                                if (att < 0) {
                                    return true;
                                } else {
                                    if ((event.card.name == 'nanman' || event.card.name == 'wanjian') && player.hp >= 2) {
                                        return false
                                    } else {
                                        return true;
                                    }
                                }
                            },
                            filter: function (event, player) {
                                if (player.hasSkill('bhjiansheng2') && player.countMark('bhjiansheng') > 0) return false;
                                if (player.countMark('bhjiansheng') >= 2) return false;
                                if (event.player == player) return false;
                                if (!['basic', 'trick'].contains(get.type(event.card))) return false;
                                if (!event.player.countCards('h')) return false;
                                if (get.type(event.card) == 'basic' && event.card.name != 'sha') return false;
                                if (get.tag(event.card, 'damage')) return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                player.addSkill('bhjiansheng2');
                                trigger.player.chooseCard('选择一张手牌进行展示', 'h', true);
                                'step 1'
                                event.card1 = result.cards;
                                trigger.player.showCards(event.card1);
                                event.card2 = get.cards()[0];
                                game.cardsGotoOrdering(event.card2);
                                player.showCards(event.card2);
                                'step 2'
                                var color1 = get.color(event.card1);
                                var color2 = get.color(event.card2);
                                if (color1 == color2) {
                                    player.useCard({ name: 'sha', isCard: true }, trigger.player, false);
                                    trigger.targets.remove(player);
                                    player.removeSkill('bhjiansheng2');
                                    trigger.cancel();
                                } else {
                                    player.chooseToUse({ name: 'sha' }, '剑圣：是否对' + get.translation(trigger.player) + '使用一张杀？', trigger.player, -1).set('ai', function () {
                                        if (get.attitude(player, trigger.player) < 0) {
                                            return 1.5;
                                        } else {
                                            return -2.5;
                                        }
                                    });

                                }
                                player.addMark('bhjiansheng');
                                player.unmarkSkill('bhjiansheng');
                            },
                            subSkill: {
                                use: {
                                    direct: true,
                                    trigger: {
                                        global: "phaseZhunbeiBegin",
                                    },
                                    filter: function (event, player) {
                                        if (player.countMark('bhjiansheng') > 0) return true;
                                        if (player.hasSkill('bhjiansheng2')) return true;
                                        return false;
                                    },
                                    content: function () {
                                        if (player.countMark('bhjiansheng') > 0) {
                                            event.num = player.countMark('bhjiansheng');
                                            player.removeMark('bhjiansheng', event.num);
                                        }
                                        if (player.hasSkill('bhjiansheng2')) {
                                            player.removeSkill('bhjiansheng2');
                                        }
                                    },
                                    sub: true,
                                },
                            },
                        },
                        "bhjiansheng2": {
                        },
                        bhtouchui: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "phaseUseBegin",
                            },
                            check: function (event, player) {
                                var sum = 0;
                                var cards = player.getCards('h', { type: ['trick', 'daley'] });
                                for (var i = 0; i < cards.length; i++) {
                                    sum += get.value(cards[i]);
                                }
                                return sum <= 16;
                            },
                            filter: function (event, player) {
                                return player.countCards('he');
                            },
                            content: function () {
                                'step 0'
                                player.chooseToDiscard('he').set('ai', function (card) {
                                    return 9 - get.value(card);
                                });
                                'step 1'
                                if (result.bool) {
                                    player.chooseTarget('选择一名其他角色，对其造成1点伤害，然后横置该角色及所有到该角色距离为1的其他角色的角色卡', function (player, target) {
                                        return target != player;
                                    }, true).set('ai', function (target) {
                                        return -get.attitude(_status.event.player, target);
                                    });
                                } else {
                                    event.finish();
                                }
                                'step 2'
                                event.target = result.targets[0];
                                player.line(event.target);
                                event.target.damage();

                                var targets = game.filterPlayer();
                                targets.remove(player);
                                targets.remove(event.target);
                                var target;
                                event.targets = [];
                                targets.sort(lib.sort.seat);
                                while (targets.length > 0) {
                                    target = targets.shift();
                                    if (get.distance(event.target, target) <= 1) {
                                        event.targets.push(target);
                                    };
                                }
                                'step 3'
                                var target;
                                if (!event.target.isLinked()) event.target.link();
                                while (event.targets.length > 0) {
                                    target = event.targets.shift();
                                    if (!target.isLinked()) target.link();
                                }
                                player.addTempSkill('bhtouchui2');
                                event.trigger('bhtouchui');
                            },
                        },
                        bhmoqi: {
                            audio: "ext:崩崩崩/audio:2",
                            usable: 1,
                            trigger: {
                                target: "useCardToTarget",
                            },
                            filter: function (event, player) {
                                if (event.player == player) return false;
                                if (!['basic', 'trick'].contains(get.type(event.card))) return false;
                                if (!event.player.countCards('h')) return false;
                                if (get.type(event.card) == 'basic' && event.card.name != 'sha') return false;
                                if (!get.tag(event.card, 'damage')) return false;
                                if (player.countCards('h') == 0) return false;
                                return game.hasPlayer(function (current) {
                                    return player.inRange(current) && current != event.player &&
                                        current != player && event.player.canUse(event.card, current, false);
                                });
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('将' + get.translation(trigger.card) + '转移给一名其他角色', function (card, player, target) {
                                    return target != player && target != trigger.player;
                                }).set('ai', function (target) {
                                    var namelist = ['bhlanmeitegong'];
                                    if (namelist.includes(target.name)) {
                                        return get.attitude(player, target) > 0 ? 10 : 12;
                                    } else {
                                        return -get.attitude(player, target);
                                    }
                                });
                                'step 1'
                                if (result.bool && result.targets.length > 0) {
                                    event.target = result.targets[0];
                                    player.line(event.target);
                                    var namelist = ['bhlanmeitegong'];
                                    if (!namelist.includes(event.target.name)) {
                                        player.chooseToDiscard('h', true);
                                    }
                                } else {
                                    event.finish();
                                }
                                'step 2'
                                trigger.targets.remove(player);
                                trigger.targets.push(event.target);
                                player.update();
                                'step 3'
                                player.chooseBool('是否令' + get.translation(event.target) + '摸一张牌？').set('ai', function () {
                                    return get.attitude(player, event.target) > 0;
                                });
                                'step 4'
                                if (result.bool) {
                                    event.target.draw();
                                }
                            },
                            group: 'bhmoqi_change',
                            subSkill: {
                                change: {
                                    trigger: {
                                        global: "gameDrawAfter",
                                        player: "enterGame",
                                    },
                                    direct: true,
                                    content: function () {
                                        'step 0'
                                        if (game.hasPlayer(function (target) {
                                            return target.name == 'bhlanmeitegong';
                                        })) {
                                            player.addSkill('bhmoqi_die');
                                        }
                                        player.removeSkill('bhmoqi_change');
                                    },
                                },
                                die: {
                                    trigger: {
                                        global: 'die',
                                    },
                                    direct: true,
                                    filter: function (event, player) {
                                        return event.player.name == 'bhlanmeitegong';
                                    },
                                    content: function () {
                                        player.reinit('bhyingtaozhadan', 'bhkuangrelandiao', player.maxHp);
                                        player.removeSkill('bhmoqi_die');
                                    },
                                }
                            },
                        },
                        "bhtouchui2": {
                            audio: "ext:崩崩崩/audio:1",
                            trigger: {
                                player: 'bhtouchui',
                            },
                            content: function () { },
                            forced: true,
                            mark: true,
                            intro: {
                                name: "头槌",
                                content: "你不能使用锦囊牌（笨蛋罗莎莉娅）\n            ——莉莉娅",
                            },
                            mod: {
                                "cardEnabled2": function (card) {
                                    if (get.type(card) == 'trick' || get.type(card) == 'delay') return false;
                                },
                            },
                        },
                        "bhchongfeng_im": {
                        },
                        bhduchen:{
                            audio: "ext:崩崩崩/audio:2",
                            init:function(player){
                                player.storage.bhduchen = [];
                            },
                            direct:true,
                            trigger:{
                                global:['phaseZhunbeiEnd','phaseJudgeEnd','phaseDrawEnd','phaseUseEnd','phaseDiscardEnd','phaseJieshuEnd'],
                            },
                            filter:function(event,player){
                                let damcards = []
                                game.getGlobalHistory('cardMove',function(evt){
                                    if(evt.name=='lose'){
                                        if(evt.position==ui.discardPile){
                                            for(var i of evt.cards) {
                                                if(get.tag(i, 'damage')) damcards.push(i);
                                            }
                                        }
                                    }
                                    else{
                                        if(evt.name=='cardsDiscard'){
                                            for(var i of evt.cards) {
                                                if(get.tag(i, 'damage')) damcards.push(i);
                                            }
                                        }
                                    }
                                });
                                if(damcards.length==0) return false;
                                return true;
                            },
                            content:function(){
                                'step 0'
                                event.damcards = []
                                event.damaged = false;
                                game.getGlobalHistory('cardMove',function(evt){
                                    if(evt.name=='lose'){
                                        if(evt.position==ui.discardPile){
                                            for(var i of evt.cards) {
                                                if(get.tag(i, 'damage')) event.damcards.push(i);
                                            }
                                        }
                                    }
                                    else{
                                        if(evt.name=='cardsDiscard'){
                                            for(var i of evt.cards) {
                                                if(get.tag(i, 'damage')) event.damcards.push(i);
                                            }
                                        }
                                    }
                                });

                                for(let i of player.storage.bhduchen){
                                    event.damcards.remove(i);
                                }

                                for(let current of game.filterPlayer()){
                                    current.getHistory('damage', function(evt){
                                        // game.log(evt.card,'/',evt.cards);
                                        if(evt.card&&evt.cards){
                                            for(let i of evt.cards){
                                                if(event.damcards.contains(i)) event.damaged = true;
                                            }
                                        }
                                    });
                                }

                                for(let i of event.damcards){
                                    player.storage.bhduchen.push(i);
                                }

                                for(let i of event.damcards){
                                    if(get.position(i,true)!='d') event.damcards.remove(i);
                                }
                                'step 1'
                                if(event.damaged||event.damcards.length==0||!_status.currentPhase.isAlive()) event.finish();
                                else {
                                    player.chooseButton(['是否发动〖渡尘〗？', '你可以选择一张牌令'+get.translation(_status.currentPhase)+'获得', event.damcards])
                                        .set('ai',function(button){
                                            let att = get.attitude(player,_status.currentPhase);
                                            if(att>0) return get.value(button.link);
                                            else return -4;
                                        });
                                }
                                'step 2'
                                if(result.bool){
                                    player.logSkill('bhduchen');
                                    _status.currentPhase.gain(result.links[0],'gain2');
                                } else event.finish();
                                'step 3'
                                let phaseName;
                                if(trigger.name=='phaseZhunbei') phaseName = '准备阶段';
                                else if(trigger.name=='phaseJudge') phaseName = '判定阶段';
                                else if(trigger.name=='phaseDraw') phaseName = '摸牌阶段';
                                else if(trigger.name=='phaseUse') phaseName = '出牌阶段';
                                else if(trigger.name=='phaseDiscard') phaseName = '弃牌阶段';
                                else phaseName = '结束阶段'
                                if(_status.currentPhase.hp > 0) _status.currentPhase.chooseBool('是否失去1点体力以执行一个额外的'+phaseName+'？').set('ai',function(){
                                    if(_status.currentPhase.hp<=1&&_status.currentPhase.countCards('hs',{name:['tao','jiu']})==0) return false;
                                    if(['phaseDiscard','phaseZhunbei','phaseJieshu'].contains(trigger.name)) return false;
                                    else if(_status.currentPhase.hp<=2&&(trigger.name!='phaseUse'||_status.currentPhase.countCards('hs')<3)) return false;
                                    else return true;
                                });
                                else event._result = {bool:false};
                                'step 4'
                                if(result.bool){
                                    _status.currentPhase.loseHp();
                                    let next = _status.currentPhase[trigger.name]();
                                    event.next.remove(next);
                                    trigger.next.push(next);
                                }
                            },
                            group:['bhduchen_end'],
                            subSkill:{
                                end:{
                                    direct:true,
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    trigger:{
                                        global:'phaseEnd',
                                    },
                                    content:function(){
                                        player.storage.bhduchen = [];
                                    },
                                },
                            },
                        },
                        bhzhonghuo:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:'roundStart',
                            },
                            direct:true,
                            silent:true,
                            filter:function(event,player){
                                if(game.hasPlayer(function(current){
                                    return current!=player&&current.hp<current.maxHp;
                                })) return player.hp>0;
                                if(game.hasPlayer(function(current){
                                    return current!=player&&current.hp==current.maxHp;
                                })) return player.maxHp>0;
                                return false;
                            },
                            content:function(){
                                'step 0'
                                let players1 = game.filterPlayer(function(current){
                                    return current!=player&&current.hp<current.maxHp;
                                });
                                if(players1.length>0&&player.hp>0) player.chooseTarget('是否发动〖渡尘〗？',[1,Math.min(player.hp,players1.length)],function(card,player,target){
                                    return player!=target && players1.contains(target);
                                }).set('ai',function(target){
                                    let att = get.attitude(player,target);
                                    if(ui.selected.targets&&ui.selected.targets.length >= player.hp-1) return -20;
                                    else if(att < 0) return -18;
                                    else if(player.hp<=1) return -10;
                                    else {
                                        if(target.maxHp - target.hp == 1) return 8;
                                        else if(target.hp <=1 ) return 6;
                                        else if(att>5) return 3+player.hp;
                                        else return [-1,0,1].randomGet()+att-4+player.hp;
                                    }
                                }).set('prompt2','你可赠予任意名已受伤的角色1点体力值');
                                else event._result = {bool:false};
                                'step 1'
                                event.players1 = []
                                if(result.bool){
                                    player.logSkill('bhduchen', result.targets);
                                    event.targets = result.targets;
                                    event.targets.sortBySeat();
                                    event.num = 0;
                                } else event.goto(5);
                                'step 2'
                                player.loseHp();
                                event.targets[event.num].recover();
                                'step 3'
                                if(event.targets[event.num].hp == event.targets[event.num].maxHp) event.targets[event.num].draw(2);
                                'step 4'
                                event.num++;
                                if(event.num<event.targets.length) event.goto(2);
                                'step 5'
                                let players2 = game.filterPlayer(function(current){
                                    return current!=player&&current.hp==current.maxHp;
                                });
                                if(players2.length>0&&player.maxHp>0) player.chooseTarget('是否发动〖渡尘〗？',[1,Math.min(player.maxHp,players2.length)],function(card,player,target){
                                    return player!=target && players2.contains(target);
                                }).set('ai',function(target){
                                    let att = get.attitude(player,target);
                                    if(player.hp==player.maxHp) return -20;
                                    else if(ui.selected.targets&&ui.selected.targets.length >= player.maxHp-1) return -20;
                                    else if(att < 0) return -18;
                                    else if(player.hp<=2) return -10;
                                    else {
                                        if(att>5) return 3+player.maxHp;
                                        else return [-3,0,3].randomGet()+att+player.maxHp-6;
                                    }
                                }).set('prompt2','你可赠予任意名未受伤的角色1点体力上限');
                                else event._result = {bool:false}; 
                                'step 6'
                                if(result.bool){
                                    player.logSkill('bhduchen', result.targets);
                                    event.targets = result.targets;
                                    event.targets.sortBySeat();
                                    event.num = 0;
                                } else event.finish();
                                'step 7'
                                player.loseMaxHp();
                                event.targets[event.num].gainMaxHp();
                                'step 8'
                                if(event.targets[event.num].hp < event.targets[event.num].maxHp) event.targets[event.num].recover();
                                'step 9'
                                event.num++;
                                if(event.num< event.targets.length) event.goto(7);
                            },
                        },
                        bhhuiming: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "useCard",
                            },
                            forced: true,
                            mark: true,
                            init: function (player) {
                                player.storage.bhhuiming = [-1, -1, -1];
                                player.markSkill('bhhuiming');
                            },
                            intro: {
                                name: "晦明",
                                content: function (content, player) {
                                    var str1;
                                    if (player.storage.bhhuiming[0] == 0) {
                                        str1 = '—';
                                    } else if (player.storage.bhhuiming[0] == 1) {
                                        str1 = '--';
                                    } else {
                                        str1 = '·';
                                    }
                                    var str2;
                                    if (player.storage.bhhuiming[1] == 0) {
                                        str2 = '—';
                                    } else if (player.storage.bhhuiming[1] == 1) {
                                        str2 = '--';
                                    } else {
                                        str2 = '·';
                                    }
                                    var str3;
                                    if (player.storage.bhhuiming[2] == 0) {
                                        str3 = '—';
                                    } else if (player.storage.bhhuiming[2] == 1) {
                                        str3 = '--';
                                    } else {
                                        str3 = '·';
                                    }
                                    var str4;
                                    if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 0) str4 = '乾';
                                    else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 1) str4 = '坤';
                                    else if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 0) str4 = '离';
                                    else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 1) str4 = '坎';
                                    else if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 1) str4 = '震';
                                    else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 0) str4 = '巽';
                                    else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 0) str4 = '艮';
                                    else if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 1) str4 = '兑';
                                    else str4 = '无';
                                    var str = '<style type="text/css"> .huiming{width:30px;height:50px;margin:0 auto;}</style><table border="0" class="huiming" cellspacing="0"><tr><td>' + str3 + '</td></tr><tr><td>' + str2 + '</td></tr><tr><td>' + str1 + '</td></tr><tr><td>' + str4 + '</td></tr></table>';
                                    return str;
                                },
                                markcount: function (storage, player) {
                                    if (player.storage.bhhuiming[2] != -1) return 3;
                                    else if (player.storage.bhhuiming[1] != -1) return 2;
                                    else if (player.storage.bhhuiming[0] != -1) return 1;
                                    else return 0;
                                },
                            },
                            filter: function (event, player) {
                                var bool = player.storage.bhhuiming[0] == -1 || player.storage.bhhuiming[1] == -1 || player.storage.bhhuiming[2] == -1;
                                if (!event.card) return false;
                                if (get.type(event.card) == 'trick' || get.type(event.card) == 'delay') return bool;
                                if (get.type(event.card) == 'basic') return bool;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                if (get.type(trigger.card) == 'trick' || get.type(trigger.card) == 'delay') {
                                    event.num = 1;
                                } else if (get.type(trigger.card) == 'basic') {
                                    event.num = 0;
                                } else {
                                    event.finish();
                                }
                                'step 1'
                                if (player.storage.bhhuiming[0] == -1) {
                                    player.storage.bhhuiming[0] = event.num;
                                    player.syncStorage('bhhuiming');
                                    event.finish();
                                }
                                'step 2'
                                if (player.storage.bhhuiming[1] == -1) {
                                    player.storage.bhhuiming[1] = event.num;
                                    player.syncStorage('bhhuiming');
                                    event.finish();
                                }
                                'step 3'
                                if (player.storage.bhhuiming[2] == -1) {
                                    player.storage.bhhuiming[2] = event.num;
                                    player.syncStorage('bhhuiming');
                                    player.draw();
                                }
                            },
                        },
                        bhxianfa: {
                            enable: 'phaseUse',
                            prompt:function (event, player) {
                                var player = _status.event.player;
                                var str = '卦象：';
                                var str4;
                                if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 0) str4 = '乾·摸两张牌，然后移去所有标记';
                                else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 1) str4 = '坤·回复一点体力，然后移去所有标记';
                                else if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 0) str4 = '离·对一名其他角色造成一点火焰伤害，然后移去所有标记';
                                else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 1) str4 = '坎·弃置至多3张手牌，并摸等量的牌，然后移去所有标记';
                                else if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 1) str4 = '震·对一名其他角色造成一点雷电伤害，然后移去所有标记';
                                else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 0) str4 = '巽·弃置一名角色的一张牌，且本回合你使用牌没有距离限制，然后移去所有标记';
                                else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 0) str4 = '艮·令你下一次受到的伤害-1（不可叠加），然后移去所有标记';
                                else if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 1) str4 = '兑·令你本回合你使用【杀】没有次数限制，然后移去所有标记';
                                str += str4;
                                return str;
                            },
                            pop:false,
                            log:false,
                            filter: function (event, player) {
                                if (player.storage.bhhuiming[0] != -1 && player.storage.bhhuiming[1] != -1 && player.storage.bhhuiming[2] != -1) return true;
                                return false;
                            },
                            group: ['bhxianfa_qian', 'bhxianfa_kun', 'bhxianfa_li', 'bhxianfa_kan', 'bhxianfa_zhen', 'bhxianfa_xun', 'bhxianfa_gen', 'bhxianfa_yue'],
                            subSkill: {
                                qian: {
                                    trigger: {
                                        player: 'bhxianfa1',
                                    },
                                    pop:false,
                                    log:false,
                                    forced: true,
                                    content: function () { },
                                    audio: "ext:崩崩崩/audio:1",
                                },
                                kun: {
                                    trigger: {
                                        player: 'bhxianfa2',
                                    },
                                    pop:false,
                                    log:false,
                                    forced: true,
                                    content: function () { },
                                    audio: "ext:崩崩崩/audio:1",
                                },
                                li: {
                                    trigger: {
                                        player: 'bhxianfa3',
                                    },
                                    pop:false,
                                    log:false,
                                    forced: true,
                                    content: function () { },
                                    audio: "ext:崩崩崩/audio:1",
                                },
                                kan: {
                                    trigger: {
                                        player: 'bhxianfa4',
                                    },
                                    pop:false,
                                    log:false,
                                    forced: true,
                                    content: function () { },
                                    audio: "ext:崩崩崩/audio:1",
                                },
                                zhen: {
                                    trigger: {
                                        player: 'bhxianfa5',
                                    },
                                    pop:false,
                                    log:false,
                                    forced: true,
                                    content: function () { },
                                    audio: "ext:崩崩崩/audio:1",
                                },
                                xun: {
                                    trigger: {
                                        player: 'bhxianfa6',
                                    },
                                    pop:false,
                                    log:false,
                                    forced: true,
                                    content: function () { },
                                    audio: "ext:崩崩崩/audio:1",
                                },
                                gen: {
                                    trigger: {
                                        player: 'bhxianfa7',
                                    },
                                    pop:false,
                                    log:false,
                                    forced: true,
                                    content: function () { },
                                    audio: "ext:崩崩崩/audio:1",
                                },
                                yue: {
                                    trigger: {
                                        player: 'bhxianfa8',
                                    },
                                    pop:false,
                                    log:false,
                                    forced: true,
                                    content: function () { },
                                    audio: "ext:崩崩崩/audio:1",
                                },
                            },
                            content: function () {
                                'step 0'
                                event.index = 0;
                                if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 0) event.index = 1;
                                else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 1) event.index = 2;
                                else if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 0) event.index = 3;
                                else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 1) event.index = 4;
                                else if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 1) event.index = 5;
                                else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 0) event.index = 6;
                                else if (player.storage.bhhuiming[0] == 1 && player.storage.bhhuiming[1] == 1 && player.storage.bhhuiming[2] == 0) event.index = 7;
                                else if (player.storage.bhhuiming[0] == 0 && player.storage.bhhuiming[1] == 0 && player.storage.bhhuiming[2] == 1) event.index = 8;
                                if (event.index != 0) {
                                    var str = 'bhxianfa' + event.index;
                                    event.trigger(str);
                                    event.goto(event.index);
                                } else event.finish();
                                'step 1'
                                //event.trigger('bhxianfa_1');
                                player.draw(2);
                                event.goto(9);
                                'step 2'
                                //event.trigger('bhxianfa_2');
                                player.recover();
                                event.goto(9)
                                'step 3'
                                player.chooseTarget('对一名其他角色造成一点火焰伤害', true, function (card, player, target) {
                                    return target != player;
                                }).set('ai', function (target) {
                                    return get.damageEffect(target, player, player,'fire');
                                });
                                event.goto(10);
                                'step 4'
                                player.chooseCard('弃置至多3张牌并摸等量的牌', 'he', [1, 3]).set('ai', function (card) {
                                    return 7 - get.value(card);
                                });
                                event.goto(11);
                                'step 5'
                                player.chooseTarget('对一名其他角色造成一点雷电伤害', 1, true, function (card, player, target) {
                                    return target != player;
                                }).set('ai', function (target) {
                                    return get.damageEffect(target, player, player,'thunder');
                                });
                                event.goto(12);
                                'step 6'
                                player.chooseTarget('弃置一名角色的一张牌', true).set('ai', function (target) {
                                    return -get.attitude(player, target);
                                });
                                event.goto(13);
                                'step 7'
                                if (!player.hasSkill('bhxianfa7')) player.addSkill('bhxianfa7');
                                event.goto(9);
                                'step 8'
                                if (!player.hasSkill('bhxianfa8')) player.addTempSkill('bhxianfa8');
                                event.goto(9);
                                'step 9'
                                player.storage.bhhuiming[0] = -1;
                                player.storage.bhhuiming[1] = -1;
                                player.storage.bhhuiming[2] = -1;
                                player.syncStorage('bhhuiming');
                                event.finish();
                                'step 10'
                                player.line(result.targets[0], 'fire');
                                result.targets[0].damage('fire', player);
                                event.goto(9);
                                'step 11'
                                if (result.bool && result.cards.length) {
                                    event.cards = result.cards;
                                    event.num = event.cards.length;
                                    player.discard(event.cards);
                                    player.draw(event.num);
                                }
                                event.goto(9);
                                'step 12'
                                player.line(result.targets[0], 'thunder');
                                result.targets[0].damage('thunder', player);
                                event.goto(9);
                                'step 13'
                                player.discardPlayerCard(result.targets[0], 'he', true);
                                if (!player.hasSkill('bhxianfa6')) player.addTempSkill('bhxianfa6');
                                event.goto(9);
                            },
                            ai: {
                                order: 10,
                                result: {
                                    player: 2,
                                },
                            },
                        },
                        "bhxianfa6": {
                            mod: {
                                targetInRange: function (card, player, target) {
                                    return true;
                                },
                            },
                        },
                        "bhxianfa7": {
                            trigger: {
                                player: "damageBegin",
                            },
                            forced: true,
                            content: function () {
                                trigger.num--;
                                player.removeSkill('bhxianfa7');
                            },
                        },
                        "bhxianfa8": {
                            mod: {
                                cardUsable: function (card, player, num) {
                                    if (card.name == 'sha') {
                                        return Infinity;
                                    }
                                },
                            },
                        },
                        bhzhexian: {
                            audio: "ext:崩崩崩/audio:2",
                            skillAnimation: true,
                            animationColor: "gray",
                            juexingji: true,
                            derivation: ["bhzhejian"],
                            unique: true,
                            forced: true,
                            trigger: {
                                player: "dying",
                            },
                            content: function () {
                                player.loseMaxHp();
                                player.recover(player.maxHp - player.hp);
                                player.removeSkill('bhxianfa');
                                player.addSkill('bhzhejian');
                                game.log(player, '获得了技能', '#g【折剑】');
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                            },
                        },
                        bhzhejian: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: 'phaseJieshu',
                            },
                            filter: function (event, player) {
                                if (!player.storage.bhhuiming) return false;
                                if (player.storage.bhhuiming[0] != -1 && player.storage.bhhuiming[1] != -1 && player.storage.bhhuiming[2] != -1) return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                player.chooseToDiscard('he').set('ai', function (card) {
                                    return (game.hasPlayer(function (target) {
                                        return get.attitude(player, target) < 0;
                                    }) ? 8 : -10) - get.value(card);
                                });
                                'step 1'
                                if (result.bool) {
                                    player.storage.bhhuiming[0] = -1;
                                    player.storage.bhhuiming[1] = -1;
                                    player.storage.bhhuiming[2] = -1;
                                    player.chooseTarget('弃置一名角色各区域各一张牌', true).set('ai', function (target) {
                                        return -get.attitude(player, target);
                                    }).set('ai', function (target) {
                                        if (get.attitude(player, target) > 0) return -10;
                                        else return (target.countCards('j') ? -4 : 0) + (target.countCards('e') ? 3 : 0) - get.attitude(player, target);
                                    });
                                } else event.finish();
                                'step 2'
                                event.target = result.targets[0];
                                if (event.target.countCards('h') > 0) {
                                    player.discardPlayerCard(event.target, 'h', true);
                                }
                                if (event.target.countCards('e') > 0) {
                                    player.discardPlayerCard(event.target, 'e', true);
                                }
                                if (event.target.countCards('j') > 0) {
                                    player.discardPlayerCard(event.target, 'j', true);
                                }
                            },
                        },
                        bhwuyu: {
                            subSkill: {
                                stat: {
                                    sub: true,
                                },
                                mark: {
                                    mark: true,
                                    marktext: "雾雨",
                                    init: function (player) {
                                        if (!player.storage.bhwuyu_mark2) player.storage.bhwuyu_mark2 = 0;
                                        if (!player.storage.bhwuyu_mark3) player.storage.bhwuyu_mark3 = [];
                                    },
                                    onremove: function (player) {
                                        delete player.storage.bhwuyu_mark;
                                        delete player.storage.bhwuyu_mark2;
                                        delete player.storage.bhwuyu_mark3;
                                        player.storage.bhwuyu_change = false;
                                    },
                                    intro: {
                                        content: function (storage, player) {
                                            var str = '';
                                            if (player.storage.bhwuyu_mark) str += '<br><li>上一张花色：' + get.translation(player.storage.bhwuyu_mark);
                                            if (player.storage.bhwuyu_mark3.length > 0) str += '<br><li>已因' + get.translation(player.storage.bhwuyu_mark3) + '发动过修改花色'
                                            str += '<br><li>已发动次数：';
                                            str += player.storage.bhwuyu_mark2;
                                            return str;
                                        },
                                    },
                                    sub: true,
                                },
                            },
                            audio: "ext:崩崩崩/audio:2",
                            locked: false,
                            trigger: {
                                player: "useCard1",
                            },
                            silent: true,
                            frequent: true,
                            filter: function (event, player) {
                                return player.isPhaseUsing();
                            },
                            content: function () {
                                'step 0'
                                if (!player.storage.bhwuyu_mark) {
                                    player.addTempSkill('bhwuyu_mark', { player: "phaseUseEnd" });
                                    player.storage.bhwuyu_mark = get.suit(trigger.card);
                                    event.finish();
                                }
                                'step 1'
                                if (get.suit(trigger.card) == player.storage.bhwuyu_mark) {
                                    player.logSkill('bhwuyu');
                                    player.draw();
                                    event.trigger('bhwuyu');
                                    event.finish();
                                }
                                else {
                                    if (player.storage.bhwuyu_change) {
                                        player.storage.bhwuyu_mark = get.suit(trigger.card);
                                        event.finish();
                                    } else {
                                        player.logSkill('bhwuyu');
                                        player.storage.bhwuyu_mark3.push(get.suit(trigger.card));
                                        player.chooseControl(lib.suit).set('prompt', '修改“雾雨”记录的花色');
                                        event.trigger('bhwuyu');
                                        player.storage.bhwuyu_change = true;
                                    }
                                }
                                'step 2'
                                game.log(player, '将', trigger.card, '的花色改为', get.translation(result.control));
                                player.draw();
                                trigger.card.suit = result.control;
                                player.storage.bhwuyu_mark = result.control;
                            },
                        },
                        bhxuzuo: {
                            subSkill: {
                                attackdistance: {
                                    charlotte: true,
                                    onremove: true,
                                    mod: {
                                        attackFrom: function (player, target, num) {
                                            return num - player.countMark('bhxuzuo_attackdistance');
                                        },
                                    },
                                    intro: {
                                        content: "攻击范围+#",
                                    },
                                    sub: true,
                                },
                            },
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "bhwuyu",
                            },
                            forced: true,
                            silent: true,
                            content: function () {
                                'step 0'
                                player.storage.bhwuyu_mark2 = player.storage.bhwuyu_mark2 + 1;
                                'step 1'
                                var num = player.storage.bhwuyu_mark2;
                                if (num % 2 == 0) {
                                    player.logSkill('bhxuzuo');
                                    player.addTempSkill('bhxuzuo_attackdistance')
                                    player.addMark('bhxuzuo_attackdistance', false)
                                }
                                if (num % 3 == 0) player.chooseTarget(get.prompt('bhxuzuo'), '令攻击范围内的一名角色摸一张牌', function (card, player, target) {
                                    return player.inRange(target);
                                }).set('ai', function (target) {
                                    var player = _status.event.player;
                                    if (target == player) return 2;
                                    if (get.attitude(player, target) > 0) {
                                        return 5
                                    }
                                    return 0.5;
                                });
                                'step 2'
                                if (result.bool) {
                                    if (player.storage.bhwuyu_mark2 % 2 != 0) player.logSkill('bhxuzuo');
                                    player.line(result.targets[0]);
                                    result.targets[0].draw()
                                }
                            },
                        },
                        bhyadao: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "useCard",
                            },
                            check: function (event, player) {
                                var num=0;
                                for(let i of event.targets){
                                    if(get.attitude(player,i)<0&&i.countCards('h')>2&&player.hp>=i.hp) num++
                                    else if([0,1].randomGet()>0) num--;
                                }
                                return num>=0;
                            },
                            filter: function (event, player) {
                                return event.card.name == 'sha'&&event.targets.length>0&&player.countCards('he');
                            },
                            content: function () {
                                'step 0'
                                player.addTempSkill('bhyadao_dis');
                                event.targets=trigger.targets;
                                player.chooseToDiscard('弃置一张牌然后令'+get.translation(event.targets)+'展示与之同色的牌','he',true).set('ai',function(card){
                                    return 8-get.value(card)+(get.color(card)=='red'?1:0);
                                });
                                'step 1'
                                event.color=get.color(result.cards[0]);
                                event.num=0;
                                'step 2'
                                event.target=event.targets[event.num];
                                event.target.chooseCard('请选择任意张牌展示','h',[0,Infinity],function(card){
                                    return get.color(card)==event.color;
                                },true).set('ai',function(card){
                                    var num=event.target.countCards('h',{color:event.color});
                                    if(num<event.target.hp||num>3||event.target.hp-player.hp>1) return -2;
                                    else if(ui.selected.cards&&ui.selected.cards.length<event.target.hp){
                                        var val=12-get.value(card);
                                        if(['sha','wanjian'].contains(trigger.card.name)&&card.name=='shan') val-=2;
                                        if(['juedou','nanman'].contains(trigger.card.name)&&card.name=='sha') val-=2;
                                        if(get.type(trigger.card)=='trick'&&card.name=='wuxie') val-=2;
                                        if(event.target.hp<2&&['tao','jiu'].contains(card.name)) val-=2;
                                        return val;
                                    } else return -2;
                                });
                                'step 3'
                                event.cards=result.cards;
                                event.target.showCards(event.cards);
                                event.target.addTempSkill('bhyadao_use');
                                if(!event.target.storage.bhyadao_use) event.target.storage.bhyadao_use=[];
                                event.target.storage.bhyadao_use.addArray(event.cards);
                                'step 4'
                                event.num++;
                                if(event.num<event.targets.length) event.goto(2);
                            },
                            subSkill:{
                                use:{
                                    sub:true,
                                    onremove:function(player){
                                        delete player.storage.bhyadao_use;
                                    },
                                    mod: {
                                        "cardEnabled2": function (card,player) {
                                            if (player.storage.bhyadao_use&&player.storage.bhyadao_use.contains(card)) return false;
                                        },
                                    },
                                },
                                dis:{
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    forced:true,
                                    sub:true,
                                    silent:true,
                                    charlotte:true,
                                    content:function(){
                                        'step 0'
                                        event.targets=game.filterPlayer(function(target){
                                            return target.hp<player.hp&&trigger.targets.contains(target);
                                        });
                                        event.num=0;
                                        if(!event.targets.length) event.goto(6);
                                        'step 1'
                                        event.target=event.targets[event.num];
                                        if(event.target.countCards('h',function(card){
                                            return event.target.storage.bhyadao_use.contains(card);
                                        })<event.target.hp) event._result={bool:true,index:1};
                                        else {
                                            event.target.chooseControlList(['弃置'+get.cnNumber(event.target.hp)+'张因〖压倒〗无法使用的牌','受到1点伤害'],true).set('ai',function(){
                                                if(event.target.hp>2) return 1;
                                                else return 0;
                                            });
                                        }
                                        'step 2'
                                        if(result.index==1){
                                            event.target.damage();
                                            event.goto(5);
                                        }
                                        'step 3'
                                        event.target.chooseCard('h',event.target.hp,true,function(card){
                                            return event.target.storage.bhyadao_use.contains(card);
                                        }).set('ai',function(card){
                                            return 8-get.value(card);
                                        });
                                        'step 4'
                                        event.target.discard(result.cards);
                                        'step 5'
                                        event.num++;
                                        if(event.num<event.targets.length) event.goto(1);
                                        'step 6'
                                        player.removeSkill('bhyadao_dis');
                                    },
                                },
                            },
                        },
                        bhtuji: {
                            audio: "ext:崩崩崩/audio:2",
                            enable:'phaseUse',
                            filterTarget:function(card,player,target){
                                return player.canCompare(target);
                            },
                            selectTarget:1,
                            init:function(player){
                                player.storage.bhtuji=0;
                            },
                            filter:function(event,player){
                                if(player.hasSkill('bhtuji_lm')) return false;
                                return player.countCards('h')>0;
                            },
                            content:function(){
                                "step 0"
                                player.chooseToCompare(target);
                                "step 1"
                                if(result.bool){
                                    player.useCard({name:'sha',isCard:true},target);
                                }
                                else{
                                    player.gainPlayerCard('hej',target,true);
                                    if(player.hasSkill('bhtuji_fd')) player.damage(target);
                                }
                                "step 2"
                                player.addTempSkill('bhtuji_fd','phaseUseEnd');
                            },
                            ai:{
                                order:function(name,player){
                                    var cards=player.getCards('h');
                                    if(player.countCards('h','sha')==0){
                                        return 1.5;
                                    }
                                    for(var i=0;i<cards.length;i++){
                                        if(cards[i].name!='sha'&&get.number(cards[i])>11&&get.value(cards[i])<7){
                                            return 3.5;
                                        }
                                    }
                                    return get.order({name:'sha'})-1;
                                },
                                result:{
                                    player:function(player){
                                        if(player.countCards('h','sha')>0) return 0.6;
                                        var num=player.countCards('h');
                                        if(num>player.hp) return 0.9;
                                        if(num==1) return -0.5;
                                        if(num==2) return 0.5;
                                        return 0.6;
                                    },
                                    target:function(player,target){
                                        var num=target.countCards('h');
                                        if(num==1) return -1;
                                        if(num==2) return -1.7;
                                        return -0.9;
                                    },
                                },
                                threaten:1.3,
                            },
                            group:'bhtuji_dam',
                            subSkill:{
                                dam:{
                                    trigger:{
                                        player:'damageEnd',
                                        source:'damageEnd',
                                    },
                                    filter:function(event,player){
                                        return player.isPhaseUsing()&&!player.hasSkill('bhtuji_lm');
                                    },
                                    silent:true,
                                    forced:true,
                                    charlotte:true,
                                    sub:true,
                                    content:function(){
                                        player.addTempSkill('bhtuji_lm','phaseUseEnd');
                                    },
                                },
                                lm:{
                                    charlotte:true,
                                    forced:true,
                                    sub:true,
                                },
                                fd:{
                                    charlotte:true,
                                    forced:true,
                                    sub:true,
                                },
                            },
                        },
                        bhjianjie: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            usable: 1,
                            check: function (event, player) {
                                var player = _status.event.player;
                                if (!game.hasPlayer(function (current) {
                                    return get.attitude(player, current) > 0;
                                })) return false;
                                var cards = player.getCards('h');
                                var value = 0;
                                if (!cards.length) return false;
                                for (i of cards) {
                                    value += get.value(i);
                                }
                                return value <= 15;
                            },
                            filter: function (event, player) {
                                if (!player.countCards('h')) return false;
                                return game.hasPlayer(function (current) {
                                    return get.distance(current, player) <= 2;
                                });
                            },
                            selectCard: -1,
                            filterCard: true,
                            selectTarget: [1, 3],
                            filterTarget: function (card, player, target) {
                                if (!ui.selected.targets.length) {
                                    return target != player;
                                } else if (ui.selected.targets.length == 1 && ui.selected.targets.length < player.hp) {
                                    return target != player && (target == ui.selected.targets[0].next || target == ui.selected.targets[0].previous);
                                } else if (ui.selected.targets.length == 2 && ui.selected.targets.length < player.hp) {
                                    if (ui.selected.targets[1] == ui.selected.targets[0].next) {
                                        return target != player && (target == ui.selected.targets[1].next || target == ui.selected.targets[0].previous);
                                    } else {
                                        return target != player && (target == ui.selected.targets[0].next || target == ui.selected.targets[1].previous);
                                    }
                                } else {
                                    return false;
                                }
                            },
                            precontent: function () {
                                var cards = player.getCards('h');
                                player.discard(cards);
                            },
                            content: function () {
                                for (var i = 0; i < targets.length; i++) {
                                    targets[i].storage.bhjianjie2 = [];
                                    targets[i].storage.bhjianjie2.push(player);
                                    targets[i].addSkill('bhjianjie2');
                                }
                            },
                            ai: {
                                order: 1,
                                result: {
                                    player: function (player, target) {
                                        if (!game.hasPlayer(function (current) {
                                            return get.attitude(player, current) > 0;
                                        })) return -20;
                                        else return [-2, 2];
                                    },
                                    target: -1,
                                },
                            },
                        },
                        "bhjianjie2": {
                            mark: true,
                            marktext: '结界',
                            intro: {
                                name: "结界",
                                content: function (storage, player) {
                                    return '受到的伤害+1直到受到伤害或' + get.translation(player.storage.bhjianjie2) + '的出牌阶段开始';
                                },
                                markcount: function () {
                                    return 0;
                                },
                            },
                            onremove: function (player) {
                                var target = player.storage.bhjianjie2[0];
                                player.storage.bhjianjie2.remove(target);
                            },
                            trigger: {
                                player: "damageBegin",
                            },
                            content: function () {
                                'step 0'
                                trigger.num++;
                                'step 1'
                                player.removeSkill('bhjianjie2');
                            },
                            forced: true,
                            charlotte: true,
                            group: "bhjianjie2_remove",
                            subSkill: {
                                remove: {
                                    trigger: {
                                        global: "phaseUseBegin",
                                    },
                                    silent: true,
                                    filter: function (event, player) {
                                        return player.storage.bhjianjie2.contains(event.player);
                                    },
                                    content: function () {
                                        player.removeSkill('bhjianjie2');
                                    },
                                    sub: true,
                                    forced: true,
                                    popup: false,
                                },
                            },
                        },
                        bhjianren: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            trigger: {
                                player: "damageBegin4",
                            },
                            filter: function (event, player) {
                                return event.num > 1 && player.countCards('h') == 0;
                            },
                            content: function () {
                                trigger.num = 1;
                            },
                        },
                        bhyouda: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "useCard",
                            },
                            //usable: 1,
                            marktext: "誓",
                            intro: {
                                name: "誓约",
                                content: "cards",
                                onunmark: function (storage, player) {
                                    if (storage && storage.length) {
                                        player.$throw(storage, 1000);
                                        game.cardsDiscard(storage);
                                        game.log(storage, '被置入了弃牌堆');
                                        storage.length = 0;
                                    }
                                },
                            },
                            filter: function (event, player) {
                                if (!event.targets.length) return false;
                                if (!['basic', 'trick'].contains(get.type(event.card))) return false;
                                if (get.tag(event.card, 'damage')) return player.isPhaseUsing();
                                return false;
                            },
                            content: function () {
                                'step 0'
                                event.card = get.cards()[0];
                                //game.cardsGotoOrdering(event.card);
                                player.showCards(event.card);
                                player.chooseTarget('选择一个目标，令其获得“誓约”牌（' + get.translation(event.card) + '）', function (card, player, target) {
                                    return _status.event.targets.contains(target);
                                }, true).set('targets', trigger.targets);;
                                'step 1'
                                event.target = result.targets[0];
                                if (!event.target.storage.bhyouda) {
                                    event.target.storage.bhyouda = [];
                                } else {
                                    var card = event.target.storage.bhyouda[0];
                                    event.target.storage.bhyouda.remove(card);
                                    game.cardsDiscard(card);
                                    //event.trigger('bhyouda3');
                                }
                                player.line(event.target);
                                event.target.storage.bhyouda.push(event.card);
                                event.target.markSkill('bhyouda');
                                event.trigger('bhyouda2');
                            },
                            group: "bhyouda_remove",
                            subSkill: {
                                remove: {
                                    frequent: true,
                                    selent: true,
                                    trigger: {
                                        player: "phaseZhunbeiBegin",
                                    },
                                    filter: function (event, player) {
                                        return game.hasPlayer(function (current) {
                                            return current.storage.bhyouda;
                                        });
                                    },
                                    content: function () {
                                        'step 0'
                                        event.targets = game.filterPlayer(function (target) {
                                            return target.storage.bhyouda;
                                        });
                                        event.num = 0;
                                        'step 1'
                                        event.card = event.targets[event.num].storage.bhyouda[0];
                                        event.targets[event.num].storage.bhyouda.remove(event.card);
                                        game.cardsDiscard(event.card);
                                        event.targets[event.num].unmarkSkill('bhyouda');
                                        event.trigger('bhyouda3');
                                        event.num++;
                                        'step 2'
                                        if (event.num < event.targets.length) {
                                            event.goto(1);
                                        }
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhyueshu: {
                            group: ['bhyueshu_spade', 'bhyueshu_club', 'bhyueshu_diamond', 'bhyueshu_heart'],
                            subSkill: {
                                spade: {
                                    audio: "ext:崩崩崩/audio:1",
                                    forced: true,
                                    trigger: {
                                        global: 'damageEnd',
                                    },
                                    filter: function (event, player) {
                                        if (!event.player) return false;
                                        if (!event.player.storage.bhyouda || !event.player.storage.bhyouda[0] || !event.player.storage.bhyouda.length) return false;
                                        if (event.player.storage.bhyouda[0].suit != 'spade') return false;
                                        var evt = event.getParent();
                                        if (evt && evt.name == 'bhyueshu_spade') {
                                            return false;
                                        }
                                        return true;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.line(trigger.player);
                                        trigger.player.damage('thunder');
                                        'step 1'
                                        game.delay();
                                    },
                                },
                                club: {
                                    audio: "ext:崩崩崩/audio:1",
                                    forced: true,
                                    trigger: {
                                        global: 'bhyouda2',
                                    },
                                    filter: function (event, player) {
                                        return game.hasPlayer(function (target) {
                                            return target.storage.bhyouda && target.storage.bhyouda[0] && target.storage.bhyouda.length > 0 && target.storage.bhyouda[0].suit == 'club';
                                        });
                                    },
                                    content: function () {
                                        event.targets = game.filterPlayer(function (target) {
                                            return target.storage.bhyouda && target.storage.bhyouda[0] && target.storage.bhyouda.length > 0 && target.storage.bhyouda[0].suit == 'club';
                                        });
                                        event.num = 0;
                                        'step 1'
                                        if (!event.targets[event.num].hasSkill('fengyin')) {
                                            event.targets[event.num].addTempSkill('fengyin', 'bhyouda3');
                                        }
                                        event.num++;
                                        'step 2'
                                        if (event.num < event.targets.length) {
                                            event.goto(1);
                                        }
                                    },
                                },
                                diamond: {
                                    audio: "ext:崩崩崩/audio:1",
                                    forced: true,
                                    trigger: {
                                        global: 'damageEnd',
                                    },
                                    filter: function (event, player) {
                                        if (!event.player) return false;
                                        if (!event.player.storage.bhyouda || !event.player.storage.bhyouda[0] || !event.player.storage.bhyouda.length) return false;
                                        if (event.player.storage.bhyouda[0].suit != 'diamond') return false;
                                        return true;
                                    },
                                    content: function () {
                                        player.line(trigger.player);
                                        player.draw();
                                    },
                                },
                                heart: {
                                    audio: "ext:崩崩崩/audio:1",
                                    forced: true,
                                    trigger: {
                                        global: 'damageEnd',
                                    },
                                    filter: function (event, player) {
                                        if (!event.player) return false;
                                        if (!event.player.storage.bhyouda || !event.player.storage.bhyouda[0] || !event.player.storage.bhyouda.length) return false;
                                        if (event.player.storage.bhyouda[0].suit != 'heart') return false;
                                        return event.source && event.source == player;
                                    },
                                    content: function () {
                                        player.recover();
                                    },
                                },
                            },
                        },
                        bhxingluo:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                player:"useCard",
                            },
                            forced:true,
                            priority:91,
                            init:function(player){
                                player.storage.bhxingluo=[0,[],false,false];
                            },
                            mark:true,
                            intro:{
                                name:'星落',
                                content:function(storage,player){
                                    if(!player.storage.bhxingluo[1].length) return '无效果';
                                    var str='你使用颜色为 ';
                                    var card=player.storage.bhxingluo[1][0];
                                    if(!get.color(card)||!['red','black'].contains(get.color(card))) return '无效果';
                                    str+=get.translation(get.color(card));
                                    str+=' 的【杀】无';
                                    if(player.storage.bhxingluo[0]==0||(player.storage.bhxingluo[0]>0&&player.storage.bhxingluo[2])) str+='①<font color="orange">次数</font>';
                                    if(player.storage.bhxingluo[0]==1||(player.storage.bhxingluo[0]>1&&player.storage.bhxingluo[2])) str+='②<font color="orange">距离</font>';
                                    if(player.storage.bhxingluo[0]==2||(player.storage.bhxingluo[0]>2&&player.storage.bhxingluo[2])) str+='③<font color="orange">目标数</font>';
                                    if(player.storage.bhxingluo[0]==3) str+='④<font color="orange">伤害值</font>';
                                    str+='限制';
                                    return str;
                                },
                                markcount:function(storage,player){
                                    return player.storage.bhxingluo[0]+1;
                                },
                            },
                            filter:function(event,player){
                                if(!player.storage.bhxingluo[1].length) return false;
                                if(event.card.name!='sha') return false;
                                var card=player.storage.bhxingluo[1][0];
                                if(get.color(card)==get.color(event.card)&&['black','red'].contains(get.color(card))) return true;
                                return false;
                            },
                            content:function(){
                                'step 0'
                                if(player.storage.bhxingluo[0]==3){
                                    trigger.baseDamage=Infinity
                                    // game.log('111');
                                }
                                'step 1'
                                player.storage.bhxingluo[0]++;
                                if(player.storage.bhxingluo[0]>3) player.storage.bhxingluo[0]=0;
                                player.storage.bhxingluo[3]=true;
                                player.syncStorage('bhxingluo');
                            },
                            mod:{
                                cardUsable: function (card, player) {
                                    if(player.storage.bhxingluo[0]==0||(player.storage.bhxingluo[0]>0&&player.storage.bhxingluo[2])){
                                        if(card.name=='sha'
                                            &&player.storage.bhxingluo[1].length
                                            &&get.color(card)==get.color(player.storage.bhxingluo[1][0])
                                            &&['black','red'].contains(get.color(card))
                                        ){
                                            return Infinity;
                                        }
                                    }
                                },
                                targetInRange: function (card, player) {
                                    if(player.storage.bhxingluo[0]==1||(player.storage.bhxingluo[0]>1&&player.storage.bhxingluo[2])){
                                        if(card.name=='sha'
                                            &&player.storage.bhxingluo[1].length
                                            &&get.color(card)==get.color(player.storage.bhxingluo[1][0])
                                            &&['black','red'].contains(get.color(card))
                                        ){
                                            return true;
                                        }
                                    }
                                },
                                selectTarget: function (card, player, range) {
                                    if(player.storage.bhxingluo[0]==2||(player.storage.bhxingluo[0]>2&&player.storage.bhxingluo[2])){
                                        if(card.name=='sha'
                                            &&player.storage.bhxingluo[1].length
                                            &&get.color(card)==get.color(player.storage.bhxingluo[1][0])
                                            &&['black','red'].contains(get.color(card))
                                        ){
                                            range[1]=Infinity;
                                        }
                                    }
                                },
                            },
                            group:['bhxingluo_use','bhxingluo_after','bhxingluo_clear'],
                            subSkill:{
                                use:{
                                    trigger:{
                                        player:'useCard',
                                    },
                                    silent:true,
                                    forced:true,
                                    sub:true,
                                    priority:10,
                                    filter:function(event,player){
                                        return get.tag(event.card,'damage');
                                    },
                                    content:function(){
                                        if(!player.storage.bhxingluo[1].length) player.storage.bhxingluo[1].push(trigger.card);
                                        else player.storage.bhxingluo[1][0]=trigger.card;
                                        player.storage.bhxingluo[2]=false;
                                        player.syncStorage('bhxingluo');
                                    },
                                },
                                after:{
                                    silent:true,
                                    forced:true,
                                    sub:true,
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    filter:function(event,player){
                                        if(player.storage.bhxingluo[3]) return true;
                                        if(player.storage.bhxingluo[1].length&&event.card==player.storage.bhxingluo[1][0]&&player.getHistory('sourceDamage', function (evt) {
                                            return evt.card == player.storage.bhxingluo[1][0];
                                        }).length) return true;
                                        return false;
                                    },
                                    content:function(){
                                        'step 0'
                                        if(player.storage.bhxingluo[1].length&&trigger.card==player.storage.bhxingluo[1][0]&&player.getHistory('sourceDamage', function (evt) {
                                            return evt.card == player.storage.bhxingluo[1][0];
                                        }).length) player.storage.bhxingluo[2]=true;
                                        'step 1'
                                        if(player.storage.bhxingluo[3]) player.draw();
                                        player.storage.bhxingluo[3]=false;
                                    },
                                },
                                clear:{
                                    silent:true,
                                    forced:true,
                                    sub:true,
                                    trigger:{
                                        global:'phaseBegin',
                                    },
                                    content:function(){
                                        player.storage.bhxingluo[1]=[];
                                        player.storage.bhxingluo[2]=false;
                                        player.storage.bhxingluo[3]=false;
                                    },
                                },
                            },
                        },
                        bhyuedu: {
                            audio: "ext:崩崩崩/audio:2",
                            intro: {
                                name: "分身",
                                markcount:"expansion",
                                mark:function(dialog,content,player){
                                    var content=player.getExpansions('bhyuedu');
                                    if(content&&content.length){
                                        if(player==game.me||player.isUnderControl()){
                                            dialog.addAuto(content);
                                        }
                                        else{
                                            return '共有'+get.cnNumber(content.length)+'张“分身”';
                                        }
                                    }
                                },
                                content:function(content,player){
                                    var content=player.getExpansions('bhyuedu');
                                    if(content&&content.length){
                                        if(player==game.me||player.isUnderControl()){
                                            return get.translation(content);
                                        }
                                        return '共有'+get.cnNumber(content.length)+'张“分身”';
                                    }
                                },
                            },
                            init:function(player){
                                player.storage.bhyuedu_use = [];
                                player.storage.bhyuedu_dam = [];
                            },
                            enable:'chooseToUse',
                            filter:function(event,player){
                                if (!event.filterCard({ name: 'sha' }, player, event)){
                                    if(!player.isPhaseUsing()) return false;
                                    else {
                                        if(event.filterCard({ name: 'shan' }) || event.filterCard({ name: 'wuxie' })) return false;
                                    }
                                }
                                return player.getExpansions('bhyuedu').length>0 && game.hasPlayer(function(target){
                                    return player.canUse('sha',target);
                                });
                            },
                            content:function(){
                                'step 0'
                                player.chooseButton(['请选择一张“分身”',player.getExpansions('bhyuedu')],1,true).set('ai',function(button){
                                    if(player.hasSkill('jiu')||player.hasSkill('bhyuedu_sha')){
                                        if(get.tag(button.link,'damage')) return 2;
                                        else return 0;
                                    } else {
                                        if(get.tag(button.link,'damage')) return [0,0,1].randomGet();
                                        else return [1,2,-1,2,1,-1].randomGet();
                                    }
                                });
                                'step 1'
                                event.card = result.links[0];
                                player.storage.bhyuedu_use.push(event.card);
                                'step 2'
                                player.chooseTarget('请选择【杀】的目标',function(card,player,target){
                                    return player.canUse({name:'sha'},target,true,false);
                                },true).set('ai',function(target){
                                    return get.effect(target,{name:'sha'},player,player);
                                });
                                'step 3'
                                event.target = result.targets[0];
                                player.useCard({name:'sha',isCard:false},event.target,false);
                            },
                            ai:{
                                order:3.5,
                                result:{
                                    player:0.5,
                                },
                            },
                            group:['bhyuedu2','bhyuedu_use','bhyuedu_dam','bhyuedu_after'],
                            subSkill:{
                                sha:{
                                    audio:'bhyuedu',
                                    trigger:{
                                        player:'useCard',
                                    },
                                    filter:function(event,player){
                                        return event.card.name=='sha';
                                    },
                                    priority:10,
                                    frequent:true,
                                    forced:true,
                                    sub:true,
                                    content:function(){
                                        'step 0'
                                        var evts=player.getHistory('useCard', function (evt) {
                                            if (evt.card==trigger.card) return true;
                                        });
                                        if (!evts[0].baseDamage) evts[0].baseDamage = 1;
                                        evts[0].baseDamage++;
                                        game.setNature(trigger.card, 'stab');
                                        'step 1'
                                        player.removeSkill('bhyuedu_sha');
                                    },
                                },
                                use:{
                                    trigger:{
                                        player:'useCard',
                                    },
                                    priority:101,
                                    direct:true,
                                    forced:true,
                                    charlotte:true,
                                    unique:true,
                                    filter:function(event,player){
                                        return event.card.name=='sha'&&!event.cards.length&&player.storage.bhyuedu_use.length>0;
                                    },
                                    content:function(){
                                        'step 0'
                                        for(var i of player.getExpansions('bhyuedu')){
                                            if(i == player.storage.bhyuedu_use[player.storage.bhyuedu_use.length-1]){
                                                event.card = i;
                                            }
                                        }
                                        // event.card = player.storage.bhyuedu_use[player.storage.bhyuedu_use.length-1];
                                        player.lose(event.card, ui.ordering);
                                        trigger.cards.push(event.card);
                                        'step 1'
                                        player.storage.bhyuedu_use.remove(event.card);
                                        player.storage.bhyuedu_dam.push(trigger.card);
                                        player.syncStorage('bhyuedu');
                                    },
                                },
                                dam:{
                                    trigger:{
                                        source:'damageBegin1',
                                    },
                                    direct:true,
                                    forced:true,
                                    unique:true,
                                    charlotte:true,
                                    filter:function(event,player){
                                        if(event.card.name!='sha'||player.storage.bhyuedu_dam.length==0) return false;
                                        return event.card==player.storage.bhyuedu_dam[player.storage.bhyuedu_dam.length-1];
                                    },
                                    content:function(){
                                        'step 0'
                                        event.card=player.storage.bhyuedu_dam[player.storage.bhyuedu_dam.length-1];
                                        player.showCards(trigger.cards[0]);
                                        'step 1'
                                        if(!get.tag(trigger.cards[0],'damage')){
                                            player.storage.bhyuedu_dam.remove(event.card);
                                            trigger.cancel();
                                            player.addSkill('bhyuedu_sha');
                                        }
                                    },
                                },
                                after:{
                                    trigger:{
                                        player:'useCardAfter',
                                    },
                                    direct:true,
                                    forced:true,
                                    unique:true,
                                    charlotte:true,
                                    priority:11,
                                    filter:function(event,player){
                                        if(event.card.name!='sha'||player.storage.bhyuedu_dam.length==0) return false;
                                        return event.card==player.storage.bhyuedu_dam[player.storage.bhyuedu_dam.length-1];
                                    },
                                    content:function(){
                                        player.storage.bhyuedu_dam.remove(trigger.card);
                                    },
                                },
                            },
                        },
                        bhyuedu2:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: 'useCardAfter',
                            },
                            prompt2:"未造成伤害的【杀】结算后，你可以将使用者的一张手牌扣置于你的角色卡上，称为“分身”（至多四张）。",
                            check:function(event,player){
                                if(event.player==player) return player.countCards('h')>2||player.countCards('h',function(card){
                                    return get.value(card) < 6;
                                });
                                else return get.attitude(player,event.player)<0;
                            },
                            filter: function (event, player) {
                                if(event.card.name!='sha') return false;
                                if(event.player.countCards('h')==0) return false;
                                if(player.getExpansions('bhyuedu').length>=4) return false;
                                return !event.player.getHistory('sourceDamage', function (evt) {
                                    return evt.card == event.card;
                                }).length;
                            },
                            logTarget:function(event,player){
                                return event.player;
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.player;
                                player.choosePlayerCard('h','将'+get.translation(event.target)+'的一张手牌扣置为“分身”',event.target,true).set('ai',function(card){
                                    if(event.target==player){
                                        var cards=player.getExpansions('bhyuedu');
                                        var num1=0, num2=0;
                                        for(var i of cards){
                                            if(get.tag(i,'damage')) num1++;
                                            else num2++;
                                        }
                                        var dis = num1 - num2
                                        if(cards.length<2) return 7.5-get.value(card);
                                        else {
                                            if(dis>=-1) return 7-get.value(card) + (get.tag(card,'damage')?-1:1);
                                            else return 6-get.value(card) + (get.tag(card,'damage')?2:0);
                                        }
                                    } else {
                                        return [0,1,2,-1,-2].randomGet();
                                    }
                                });
                                'step 1'
                                event.card=result.cards[0];
                                player.addToExpansion(event.card, event.target, 'giveAuto').gaintag.add('bhyuedu');
                            },
                        },
                        bhfengyu: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "useCard1",
                            },
                            silent: true,
                            frequent: true,
                            group: "bhfengyu_remove",
                            subSkill: {
                                remove: {
                                    trigger: {
                                        player: "phaseUseEnd",
                                    },
                                    forced: true,
                                    silent: true,
                                    filter: function (event, player) {
                                        return player.storage.bhfengyu;
                                    },
                                    content: function () {
                                        player.unmarkSkill('bhfengyu');
                                        delete player.storage.bhfengyu;
                                    },
                                    sub: true,
                                    popup: false,
                                },
                            },
                            marktext: "锋雨",
                            intro: {
                                content: function (storage, player) {
                                    var str = '';
                                    if (player.storage.bhfengyu) {
                                        str += '<li>上一张花色：' + get.translation(player.storage.bhfengyu[0]);
                                        str += '<br><li>上一张点数：' + player.storage.bhfengyu[1];
                                    }
                                    return str;
                                },
                            },
                            filter: function (event, player) {
                                return player.isPhaseUsing();
                            },
                            content: function () {
                                'step 0'
                                if (!player.storage.bhfengyu) {
                                    player.storage.bhfengyu = ['', -1];
                                    player.storage.bhfengyu[0] = get.suit(trigger.card);
                                    player.storage.bhfengyu[1] = get.number(trigger.card);
                                    player.markSkill('bhfengyu');
                                    event.finish();
                                }
                                'step 1'
                                if (get.suit(trigger.card) == player.storage.bhfengyu[0]) {
                                    player.draw();
                                    player.storage.bhfengyu[1] = get.number(trigger.card);
                                    player.logSkill('bhfengyu');
                                } else if (get.number(trigger.card) == player.storage.bhfengyu[1]) {
                                    player.draw();
                                    player.storage.bhfengyu[0] = get.suit(trigger.card);
                                    player.logSkill('bhfengyu');
                                } else {
                                    if (player.countMark('bhliudian') < 4 && (!player.storage.bhliudian_im || player.storage.bhliudian_im < 4)) {
                                        player.addMark('bhliudian');
                                        player.logSkill('bhfengyu');
                                        if (!player.hasSkill('bhliudian_im')) player.addTempSkill('bhliudian_im');
                                        if (!player.storage.bhliudian_im) player.storage.bhliudian_im = 0;
                                        player.storage.bhliudian_im++;
                                        player.syncStorage('bhliudian');
                                    }
                                    player.storage.bhfengyu[0] = get.suit(trigger.card);
                                    player.storage.bhfengyu[1] = get.number(trigger.card);
                                }
                            },
                        },
                        bhliudian: {
                            mark: true,
                            marktext: '闪刃',
                            mod: {
                                attackFrom: function (player, target, num) {
                                    return num - (player.countMark('bhliudian') > 0 ? 1 : 0);
                                },
                            },
                            init: function (player) {
                                player.storage.bhliudian = 0;
                                player.syncStorage('bhliudian');
                            },
                            intro: {
                                name: '闪刃',
                                content: function (storage, player) {
                                    var str = '';
                                    var num = player.countMark('bhliudian');
                                    if (num == 0) {
                                        str += '○ ○ ○ ○';
                                    } else if (num == 4) {
                                        str += '● ● ● ●';
                                    }
                                    else {
                                        var i = 0;
                                        while (i < num) {
                                            str += '● ';
                                            i++;
                                        }
                                        while (i < 4) {
                                            str += '○ ';
                                            i++;
                                        }
                                    }
                                    str += '<br>'
                                    str += num;
                                    str += '/4';
                                    return str;
                                },
                            },
                            enable: 'phaseUse',
                            prompt: function (event, player) {
                                var player = _status.event.player;
                                if (!player.storage.bhliudian_lm) {
                                    return '弃置一个“闪刃”，视为使用一张【杀】或令一名角色摸一张牌';
                                } else if (player.storage.bhliudian_lm[0] < 2 && player.storage.bhliudian_lm[1] < 2) {
                                    return '弃置一个“闪刃”，视为使用一张【杀】或令一名角色摸一张牌';
                                } else if (player.storage.bhliudian_lm[0] >= 2) {
                                    return '弃置一个“闪刃”，令一名角色摸一张牌';
                                } else {
                                    return '弃置一个“闪刃”，视为使用一张【杀】';
                                }
                            },
                            filter: function (event, player) {
                                if (!player.storage.bhliudian_lm || (player.storage.bhliudian_lm && player.storage.bhliudian_lm[0] + player.storage.bhliudian_lm[1] < 4)) {
                                    return player.countMark('bhliudian') > 0;
                                }
                                return false;
                            },
                            backup: function (links, player) {
                                return {
                                    audio: 'bhliudian',
                                }
                            },
                            audio: "ext:崩崩崩/audio:2",
                            content: function () {
                                'step 0'
                                if (!player.storage.bhliudian_lm) {
                                    player.addTempSkill('bhliudian_lm');
                                    player.chooseControl('出杀', '摸牌').set('ai', function () {
                                        if (game.hasPlayer(function (current) {
                                            return player.canUse('sha', current) && get.attitude(player, current) < 0 && get.effect(current, { name: 'sha' }, player, player) > 0;
                                        })) return '出杀';
                                        else return '摸牌';
                                    });
                                } else if (player.storage.bhliudian_lm[0] < 2 && player.storage.bhliudian_lm[1] < 2) {
                                    player.chooseControl('出杀', '摸牌').set('ai', function () {
                                        if (game.hasPlayer(function (current) {
                                            return player.canUse('sha', current) && get.attitude(player, current) < 0 && get.effect(current, { name: 'sha' }, player, player) > 0;
                                        })) return '出杀';
                                        else return '摸牌';
                                    });
                                } else if (player.storage.bhliudian_lm[0] >= 2) {
                                    result.control = '摸牌';
                                } else {
                                    result.control = '出杀';
                                }
                                'step 1'
                                event.control = result.control;
                                if (event.control == '出杀') {
                                    player.storage.bhliudian_lm[0]++;
                                    player.chooseTarget('视为使用一张【杀】', function (card, player, target) {
                                        return target != player && player.inRange(target);
                                    }, true).set('ai', function (target) {
                                        return -get.attitude(player, target) + get.effect(target, { name: 'sha' }, player, player);
                                    });
                                } else {
                                    player.storage.bhliudian_lm[1]++;
                                    player.chooseTarget('令一名角色摸一张牌', true).set('ai', function (target) {
                                        return get.attitude(player, target);
                                    });
                                }
                                'step 2'
                                event.target = result.targets[0];
                                player.removeMark('bhliudian');
                                player.syncStorage('bhliudian');
                                player.markSkill('bhliudian');
                                if (event.control == '出杀') {
                                    player.useCard({ name: 'sha', isCard: true }, event.target, false);
                                } else {
                                    if (event.target != player) player.line(event.target);
                                    event.target.draw(player);
                                }
                            },
                            ai: {
                                order: 5,
                                result: {
                                    player: 6,
                                },
                            },
                            subSkill: {
                                im: {
                                    sub: true,
                                    onremove: function (player) {
                                        delete player.storage.bhliudian_im;
                                    },
                                },
                                lm: {
                                    init: function (player) {
                                        player.storage.bhliudian_lm = [0, 0];
                                    },
                                    onremove: function (player) {
                                        delete player.storage.bhliudian_lm;
                                    },
                                    intro: {
                                        content: function (storage, player) {
                                            var str = '';
                                            return str;
                                        },
                                    },
                                },
                            },
                        },
                        bhmianji: {
                            trigger: {
                                global: "phaseUseBegin",
                            },
                            direct: true,
                            filter: function (event, player) {
                                return event.player.countCards('he') > 0 && event.player != player;
                            },
                            content: function () {
                                'step 0'
                                event.target=trigger.player;
                                trigger.player.chooseCard('面积：是否交给' + get.translation(player) + '一张牌？', 'he').set('ai', function (card) {
                                    var att=get.attitude(event.target, player);
                                    if(att<1) return -20;
                                    else return 8-get.value(card);
                                });
                                'step 1'
                                if (result.bool && result.cards) {
                                    event.target = trigger.player;
                                    player.logSkill('bhmianji',event.target);
                                    player.gain(result.cards, trigger.player, 'giveAuto');
                                    if(player.hasSkill('bhguidao')){
                                        var str1 = '令' + get.translation(trigger.player) + '摸一张牌';
                                        var str2 = '将“轨道”中“-1”与“+1”交换位置';
                                        player.chooseControlList([str1, str2,'取消'],true).set('ai', function () {
                                            var att = get.attitude(player, trigger.player);
                                            if (att > 0&&event.target.hp>2&&event.target.countCards('h')>1&&player.storage.bhguidao[0]>0) {
                                                return 0;
                                            } else if(att>0){
                                                return 1;
                                            }
                                            return 2;
                                        });
                                    } else {
                                        event.goto(3);
                                    }
                                } else {
                                    event.finish();
                                }
                                'step 2'
                                if (result.index==0) {
                                    event.target.draw();
                                } else if(result.index==1){
                                    player.storage.bhguidao[0] = -player.storage.bhguidao[0];
                                    player.storage.bhguidao[1] = -player.storage.bhguidao[1];
                                    player.syncStorage('bhguidao');
                                }
                                event.finish();
                                'step 3'
                                player.chooseBool('是否令' + get.translation(event.target) + '摸一张牌?').set('ai',function(){
                                    return get.attitude(player,event.target)>0;
                                });
                                'step 4'
                                if(result.bool){
                                    event.target.draw();
                                }
                            },
                        },
                        bhguidao: {
                            mark: true,
                            init: function (player) {
                                player.storage.bhguidao = [1, 1];
                            },
                            forced: true,
                            intro: {
                                content: function (storage, player) {
                                    var str = '一名未受伤角色到已受伤角色的距离';
                                    if (player.storage.bhguidao[0] == 1) {
                                        str += '-1';
                                    } else {
                                        str += '+1';
                                    }
                                    str += '，一名已受伤角色到未受伤角色的距离'
                                    if (player.storage.bhguidao[1] == 1) {
                                        str += '+1';
                                    } else {
                                        str += '-1';
                                    }
                                    return str;
                                },
                                markcount:function(storage,player){
                                    return 0;
                                },
                            },
                            global:'bhguidao2',
                        },
                        "bhguidao2": {
                            mod: {
                                globalTo: function (from, to, distance) {
                                    var players = game.filterPlayer(function (current) {
                                        return current.hasSkill('bhguidao');
                                    });
                                    if(!players.length) return distance;
                                    var player = players.shift();
                                    if(!player||!player.storage.bhguidao) return distance;
                                    if (from.hp < from.maxHp && to.hp == to.maxHp) return distance + player.storage.bhguidao[1];
                                    if (from.hp == from.maxHp && to.hp < to.maxHp) return distance - player.storage.bhguidao[0];
                                },
                            },
                        },
                        bhzhouqi: {
                            forced: true,
                            trigger: {
                                global: "gameDrawAfter",
                                player: "phaseZhunbeiBegin",
                            },
                            init: function (player) {
                                player.storage.bhzhouqi = 0;
                            },
                            silent:true,
                            content: function () {
                                if (player.storage.bhzhouqi == 0) {
                                    player.logSkill('bhzhouqi');
                                    player.draw();
                                    player.storage.bhzhouqi = 2;
                                } else {
                                    player.storage.bhzhouqi--;
                                }
                            },
                        },
                        bhshengong: {
                            forced: true,
                            trigger: {
                                player: "useCard",
                            },
                            filter: function (event, player) {
                                if (!event.targets) return false;
                                for (var i = 0; i < event.targets.length; i++) {
                                    if (player.inRange(event.targets[i])) return event.card && (event.card.name == 'sha');
                                }
                                return false;
                            },
                            content: function () {
                                'step 0'
                                trigger.directHit.addArray(game.filterPlayer(function (current) {
                                    return current != player && player.inRange(current);
                                }));
                            },
                            mod: {
                                targetInRange: function (card) {
                                    if (card.name == 'sha') return true;
                                },
                            },
                        },
                        bhlvlin: {
                            forced: true,
                            trigger: {
                                player: 'useCard',
                            },
                            filter: function (event, player) {
                                return event.card.suit && event.card.suit == 'club' && event.targets && !event.targets.contains(player);
                            },
                            content: function () {
                                player.draw();
                            },
                            mod: {
                                targetEnabled: function (card) {
                                    if (card.suit && get.suit(card) == 'club') return false;
                                },
                            },
                        },
                        bhjianwu: {
                            trigger: {
                                player: ["chooseToRespondBegin", "chooseToUseBegin", "useCard"],
                            },
                            usable: 3,
                            filter: function (event, player) {
                                if (event.name == 'chooseToRespond' || event.name == 'chooseToUse') {
                                    if (event.responded) return false;
                                    //if (event.bhjianwu) return false;
                                    if (!event.filterCard || !event.filterCard({ name: 'sha' }, player, event)) return false;
                                    if (event.name == 'chooseToRespond' && !lib.filter.cardRespondable({ name: 'sha' }, player, event)) return false;
                                    return true;
                                } else {
                                    return event.card && event.card.name == 'sha';
                                }
                            },
                            content: function () {
                                'step 0'
                                player.draw();
                                'step 1'
                                if (player.countCards('h') >= player.maxHp) player.chooseToDiscard('he', true);
                            },
                        },
                        bhduanren: {
                            forced: true,
                            trigger: {
                                player: "damageBegin3",
                            },
                            filter: function (event, player) {
                                return player.isLinked() && event.notLink() && event.nature;
                            },
                            content: function () {
                                trigger.num++;
                            },
                            group: "bhduanren_nocard",
                            subSkill: {
                                nocard: {
                                    forced: true,
                                    trigger: {
                                        player: "damageBegin",
                                    },
                                    filter: function (event, player) {
                                        return player.countCards('h') == 0 && event.nature;
                                    },
                                    content: function () {
                                        trigger.num++;
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhshaji: {
                            trigger: {
                                player: "useCardToPlayered",
                            },
                            check: function (event, player) {
                                if (player.hp < 2) return false;
                                if (player.hp + player.countCards('hs', { name: 'tao' }) >= player.maxHp) return true;
                                return event.target.countCards('e', { subtype: 'equip2' });
                            },
                            filter: function (event, player) {
                                return event.card.name == 'sha';
                            },
                            content: function () {
                                'step 0'
                                player.damage(player);
                                player.addTempSkill('unequip', 'shaAfter');
                                trigger.directHit.addArray(game.filterPlayer());
                                'step 1'
                                player.draw(2);
                            },
                            ai: {
                                unequip: true,
                            },
                        },
                        bhmuen: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            usable: 1,
                            filter: function (event, player) {
                                return player.countCards('he') >= 2;
                            },
                            content: function () {
                                'step 0'
                                player.chooseToDiscard('he', 2).set('ai', function (card) {
                                    return 7 - get.value(card);
                                });
                                'step 1'
                                if (result.bool) {
                                    player.chooseTarget('选择一名其他角色与你一起分配牌', function (card, player, target) {
                                        return target != player;
                                    }, true).set('ai', function (target) {
                                        return get.attitude(player, target);
                                    });
                                } else event.finish();
                                'step 2'
                                if (result.bool && result.targets) {
                                    event.target = result.targets[0];
                                    event.cards = get.cards(4);
                                    //game.cardsGotoOrdering(event.cards);
                                    player.showCards(event.cards);
                                }
                                'step 3'
                                player.line(event.target);
                                event.list = [];
                                event.list1 = [];
                                event.list2 = [];
                                event.list3 = [];
                                for (var i = 0; i < event.cards.length; i++) {
                                    if (get.type(event.cards[i]) == 'basic') {
                                        if (!event.list.contains('基本')) event.list.push('基本');
                                        event.list1.push(event.cards[i]);
                                    }
                                    if (get.type(event.cards[i]) == 'trick' || get.type(event.cards[i]) == 'delay') {
                                        if (!event.list.contains('锦囊')) event.list.push('锦囊');
                                        event.list2.push(event.cards[i]);
                                    }
                                    if (get.type(event.cards[i]) == 'equip') {
                                        if (!event.list.contains('装备')) event.list.push('装备');
                                        event.list3.push(event.cards[i]);
                                    }
                                }
                                event.list.push('取消');
                                event.target.chooseControl(event.list).set('prompt', '你可以选择其中一种类型的牌获得之').set('ai', function () {
                                    var bool1 = event.list1.length > 0 && event.list1.length <= 2;
                                    var bool2 = event.list2.length > 0 && event.list2.length <= 2;
                                    var bool3 = event.list3.length > 0 && event.list3.length <= 2;
                                    if (player.hp <= 2) {
                                        if (event.list2.length >= 2) {
                                            return '锦囊';
                                        }
                                        if (event.list3.length >= 2) {
                                            return '装备';
                                        }
                                        if (event.list1.length >= 2) {
                                            return '基本';
                                        }
                                        return '取消';
                                    } else {
                                        if (player.hp - player.countCards('h') >= 2) return '取消';
                                        if (bool1) {
                                            return '基本';
                                        }
                                        if (bool2) {
                                            return '锦囊';
                                        }
                                        if (bool3) {
                                            return '装备';
                                        }
                                    }
                                });
                                'step 4'
                                event.control = result.control;
                                if (event.control == '基本') {
                                    event.cards.removeArray(event.list1);
                                    event.target.gain(event.list1, 'gain2');
                                    game.log(event.target, '选择获得了', event.list1);
                                } else if (event.control == '锦囊') {
                                    event.cards.removeArray(event.list2);
                                    event.target.gain(event.list2, 'gain2');
                                    game.log(event.target, '选择获得了', event.list2);
                                } else if (event.control == '装备') {
                                    event.cards.removeArray(event.list3);
                                    event.target.gain(event.list3, 'gain2');
                                    game.log(event.target, '选择获得了', event.list3);
                                } else {
                                    game.log(event.target, '选择不获得任何牌');
                                }
                                'step 5'
                                player.gain(event.cards, 'gain2');
                                game.log(player, '获得了', event.cards);
                                if (event.cards.length <= 2) player.recover();
                            },
                            ai: {
                                order: 8,
                                result: {
                                    player: 6,
                                },
                            },
                        },
                        bhshengyu: {
                            audio: "ext:崩崩崩/audio:2",
                            zhuSkill: true,
                            trigger: {
                                global: "damageEnd",
                            },
                            silent: true,
                            frequent: true,
                            filter: function (event, player) {
                                if (player.hasSkill('bhshengyu_im')) return false;
                                if (player.identity != "zhu") return false;
                                if (!event.source || event.source.group != "bhxiubolian" || event.source == player) return false;
                                if (event.nature) return false;
                                if (get.itemtype(event.cards) == 'cards' && get.position(event.cards[0], true) == 'o') return true;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                trigger.source.chooseBool('是否将' + get.translation(trigger.cards) + '交给' + get.translation(player) + '?').set('ai', function () {
                                    return get.attitude(trigger.source, player) > 0;
                                });
                                'step 1'
                                if (result.bool) {
                                    player.logSkill('bhshengyu');
                                    player.addTempSkill('bhshengyu_im');
                                    trigger.source.line(player);
                                    player.gain(trigger.cards, trigger.source, 'give');
                                }
                            },
                            subSkill: {
                                im: {
                                    charlotte: true,
                                },
                            },
                        },
                        bhshenji: {
                            audio: "ext:崩崩崩/audio:2",
                            init: function (player) {
                                player.storage.bhshenji = 0;
                            },
                            group: 'bhshenji_start',
                            subSkill: {
                                start: {
                                    silent: true,
                                    forced: true,
                                    trigger: {
                                        player: 'phaseJieshuEnd',
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhshenji > 0;
                                    },
                                    content: function () {
                                        player.storage.bhshenji = 0;
                                    },
                                },
                            },
                            trigger: {
                                player: "useCardToPlayered",
                            },
                            silent: true,
                            filter: function (event, player) {
                                if (get.type(event.card) != 'trick' && get.type(event.card) != 'delay') return false;
                                return event.target != player && player.canUse('sha', event.target, false) && player.countCards('hs') > 0;
                            },
                            frequent: true,
                            content: function () {
                                'step 0'
                                player.chooseToUse({ name: 'sha' }, '神机：是否对' + get.translation(trigger.target) + '使用一张杀？', trigger.target, -1)
                                'step 1'
                                if (result.bool) {
                                    player.logSkill('bhshenji');
                                    player.storage.bhshenji++;
                                }
                                // player.chooseCard('神机：是否对'+get.translation(trigger.target)+'使用一张【杀】？',function(card){
                                //     return card.name=='sha';
                                // },'hs').set('ai',function(){
                                //     var att=get.attitude(player,trigger.target);
                                //     return -att-7+player.countCards('hs',{name:'sha'});
                                // });
                                // 'step 1'
                                // if(result.bool&&result.cards){
                                //     event.card=result.cards[0];
                                // player.useCard(event.card,trigger.target,false);
                                // }
                            },
                            mod: {
                                cardUsable: function (card, player, num) {
                                    if (card.name == 'sha') {
                                        return num + player.storage.bhshenji;
                                    }
                                },
                            },
                        },
                        bhkanluan: {
                            audio: "ext:崩崩崩/audio:1",
                            skillAnimation: true,
                            animationColor: 'gray',
                            group: ["bhkanluan_dam", "bhkanluan_use", "bhkanluan_sou", "bhkanluan_remove"],
                            subSkill: {
                                sou: {
                                    audio: "ext:崩崩崩/audio:1",
                                    frequent: true,
                                    trigger: {
                                        source: "damage",
                                    },
                                    content: function () {
                                        player.addMark('bhkanluan');
                                    },
                                },
                                dam: {
                                    audio: "ext:崩崩崩/audio:1",
                                    frequent: true,
                                    trigger: {
                                        player: "damage",
                                    },
                                    content: function () {
                                        player.addMark('bhkanluan');
                                    },
                                },
                                use: {
                                    audio: "ext:崩崩崩/audio:1",
                                    frequent: true,
                                    trigger: {
                                        player: "useCard",
                                    },
                                    filter: function (event, player) {
                                        if (event.card.name == 'sha') return true;
                                        if (get.type(event.card) == 'trick') return true;
                                        return false;
                                    },
                                    content: function () {
                                        player.addMark('bhkanluan');
                                    },
                                },
                                remove: {
                                    direct: true,
                                    trigger: {
                                        player: "phaseUseBegin",
                                    },
                                    filter: function (event, player) {
                                        return player.countMark('bhkanluan') > 0;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.judge();
                                        'step 1'
                                        if (result.color == 'red') {
                                            player.removeMark('bhkanluan');
                                            player.draw();
                                        } else {
                                            player.removeMark('bhkanluan', 2);
                                            player.draw(2);
                                        }
                                    },
                                },
                            },
                            mark: true,
                            init: function (player) {
                                player.storage.bhkanluan = 0;
                            },
                            marktext: "魄",
                            intro: {
                                name: "魄",
                                content: "mark",
                            },
                            enable: "phaseUse",
                            filter: function (event, player) {
                                return player.countMark('bhkanluan') >= 10 && game.hasPlayer(function (target) {
                                    return player.inRange(target);
                                });
                            },
                            selectCard: -1,
                            filterCard: false,
                            filterTarget: function (card, player, target) {
                                return player.inRange(target);
                            },
                            selectTarget: 1,
                            content: function () {
                                'step 0'
                                player.removeMark('bhkanluan', 10);
                                'step 1'
                                targets[0].damage(3, player);
                            },
                            ai: {
                                order: 7,
                                result: {
                                    player: 2,
                                    target: -6,
                                },
                            },
                        },
                        bhheliu: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "turnOverEnd",
                            },
                            filter: function (event, player) {
                                return !player.isTurnedOver();
                            },
                            content: function () {
                                var next = player.phaseUse();
                                event.next.remove(next);
                                trigger.next.push(next);
                            },
                        },
                        bhshunbao: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            trigger: {
                                source: "damageBegin",
                            },
                            filter: function (event, player) {
                                if (!event.card || event.card.name != 'sha') return false;
                                return player.isTurnedOver();
                            },
                            content: function () {
                                trigger.num++;
                            },
                        },
                        bhanying: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            usable: 1,
                            content: function () {
                                'step 0'
                                player.draw(3);
                                'step 1'
                                player.turnOver();
                            },
                            ai: {
                                order: 10,
                                result: {
                                    player: 5,
                                },
                            },
                        },
                        bhmoxiang: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: ["gameDrawAfter", "dieAfter"],
                            },
                            mark: true,
                            marktext: "小兔",
                            // init: function (player) {
                            //     if (!player.storage.bhmoxiang) player.storage.bhmoxiang = [];
                            // },
                            onremove: function (player, skill) {
                                var cards = player.getExpansions(skill);
                                if (cards.length) player.loseToDiscardpile(cards);
                            },
                            forced: true,
                            intro: {
                                name: "小兔",
                                content: 'expansion',
                                markcount: 0,
                            },
                            filter: function (event, player) {
                                return player.getExpansions('bhmoxiang').length == 0 && !game.hasPlayer(function (target) {
                                    return target.getExpansions('bhmoxiang') && target.getExpansions('bhmoxiang').length > 0;
                                });
                            },
                            content: function () {
                                'step 0'
                                player.draw();
                                player.chooseCard('选择一张牌作为“小兔”', 'h', true);
                                'step 1'
                                event.card = result.cards[0];
                                player.addToExpansion(event.card, player, 'giveAuto').gaintag.add('bhmoxiang');
                                //player.lose(event.card, ui.special, 'toStorage');//触发周妃技能
                                //player.storage.bhmoxiang.push(event.card);
                                player.markSkill('bhmoxinag');
                                game.log(player, '将', event.card, '置于自己的角色卡上作为“小兔”');
                            },
                            group: "bhmoxiang_move",
                            subSkill: {
                                move: {
                                    audio: "ext:崩崩崩/audio:2",
                                    prompt: "将“小兔”移动至其他角色的角色卡上",
                                    enable: "phaseUse",
                                    usable: 1,
                                    filterCard: false,
                                    selectTarget: 1,
                                    filterTarget: function (card, target, player) {
                                        return target != player;
                                    },
                                    filter: function (event, player) {
                                        return player.getExpansions('bhmoxiang').length > 0;
                                    },
                                    content: function () {
                                        event.card = player.getExpansions('bhmoxiang')[0];
                                        //player.storage.bhmoxiang.remove(event.card);
                                        target.addToExpansion(event.card, player, 'give').gaintag.add('bhmoxiang');
                                        // if (!targets[0].storage.bhmoxiang) targets[0].storage.bhmoxiang = [];
                                        // targets[0].storage.bhmoxiang.push(event.card);
                                        player.unmarkSkill('bhmoxiang');
                                        targets[0].markSkill('bhmoxiang');
                                        game.log(player, '将“小兔”移动至了', targets[0], '的角色卡上');
                                    },
                                    ai: {
                                        order: 6,
                                        result: {
                                            target: 2,
                                            player: 2,
                                        },
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhgongming: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: "damageEnd",
                            },
                            filter: function (event, player) {
                                return event.player == player || (event.player.getExpansions('bhmoxiang') && event.player.getExpansions('bhmoxiang').length > 0);
                            },
                            content: function () {
                                player.draw();
                                if (game.hasPlayer(function (target) {
                                    return target != player && target.getExpansions('bhmoxiang') && target.getExpansions('bhmoxiang').length > 0;
                                })) {
                                    event.target = game.filterPlayer(function (target) {
                                        return target != player && target.getExpansions('bhmoxiang') && target.getExpansions('bhmoxiang').length > 0;
                                    });
                                    event.target[0].draw();
                                }
                            },
                        },
                        bhyueqian: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: "phaseUseBegin",
                            },
                            prompt: function (event, player) {
                                var str = '你可以获得';
                                str += get.translation(event.player);
                                str += '区域内的一张牌，然后移动小兔';
                                return str;
                            },
                            check: function (event, player) {
                                return get.attitude(player, event.player) < 0;
                            },
                            filter: function (event, player) {
                                return event.player != player && event.player.getExpansions('bhmoxiang') && event.player.getExpansions('bhmoxiang').length > 0 && event.player.countCards('hej') > 0;
                            },
                            content: function () {
                                'step 0'
                                event.target = trigger.player;
                                player.gainPlayerCard(event.target, 'hej', true);
                                player.judge();
                                'step 1'
                                if (result.color == 'red') {
                                    event.target2 = event.target.next;
                                } else {
                                    event.target2 = player.previous;
                                }
                                if (event.target == event.target2) event.finish();
                                'step 2'
                                //if (!event.target2.storage.bhmoxiang) event.target2.storage.bhmoxiang = [];
                                event.card = event.target.getExpansions('bhmoxiang')[0];
                                //event.target.storage.bhmoxiang.remove(event.card);
                                event.target.line(event.target2);
                                event.target2.addToExpansion(event.card, event.target, 'give').gaintag.add('bhmoxiang');
                                //event.target2.storage.bhmoxiang.push(event.card);
                                event.target.unmarkSkill('bhmoxiang');
                                event.target2.markSkill('bhmoxiang');
                                game.log(player, '将“小兔”从', event.target, '的角色卡上移动到了', event.target2, '的角色卡上');
                            },
                        },
                        bhmojing: {
                            trigger:{
                                player:'bhmojing_use',
                            },
                            frequent:true,
                            silent:true,
                            content:function(){
                                player.storage.bhmojing++;
                                if(player.storage.bhmojing>3) player.storage.bhmojing=1;
                            },
                            init:function(player){
                                player.storage.bhmojing=1;
                                player.storage.bhmojing_check1=true;
                                player.storage.bhmojing_check3=true;
                            },
                            intro:{
                                name:'镜',
                                content:'expansion',
                                markcount:'expansion',
                            },
                            mark:true,
                            marktext:'镜',
                            group:['bhmojing_use1','bhmojing_use2','bhmojing_use3','bhmojing_check1','bhmojing_check3','bhmojing_clear1','bhmojing_clear3'],
                            subSkill:{
                                use1:{
                                    trigger:{
                                        global:'phaseEnd',
                                    },
                                    priority:10,
                                    prompt2:"转换技，①一名角色的回合②你的出牌阶段③轮次结束时，若期间你未使用过牌指定其他角色为目标，你可以摸项目编号张牌并将一张手牌置于角色卡上，称为“镜”。",
                                    filter:function(event,player){
                                        return player.storage.bhmojing==1&&player.storage.bhmojing_check1;
                                    },
                                    content:function(){
                                        'step 0'
                                        player.draw(1);
                                        player.chooseCard('请选择一张手牌作为“镜”','h',1,true).set('ai',function(card){
                                            if(player!=_status.currentPhase) return player.getUseValue(card);
                                            else return 10-get.value(card);
                                        });
                                        'step 1'
                                        player.addToExpansion(result.cards[0],player,'gain2').gaintag.add('bhmojing');
                                        'step 2'
                                        event.trigger('bhmojing_use');
                                    },
                                },
                                check1:{
                                    forced:true,
                                    sub:true,
                                    charlotte:true,
                                    silent:true,
                                    priority:10,
                                    trigger:{
                                        player:"useCardAfter",
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhmojing_check1&&event.targets.length>0&&game.hasPlayer(function(current){
                                            return current!=player&&event.targets.contains(current);
                                        });
                                    },
                                    content:function(){
                                        player.storage.bhmojing_check1=false;
                                    },
                                },
                                clear1:{
                                    forced:true,
                                    sub:true,
                                    charlotte:true,
                                    silent:true,
                                    priority:2,
                                    trigger:{
                                        global:"phaseBegin",
                                    },
                                    content:function(){
                                        player.storage.bhmojing_check1=true;
                                    },
                                },
                                use2:{
                                    trigger:{
                                        player:'phaseUseEnd',
                                    },
                                    prompt2:"转换技，①一名角色的回合②你的出牌阶段③轮次结束时，若期间你未使用过牌指定其他角色为目标，你可以摸项目编号张牌并将一张手牌置于角色卡上，称为“镜”。",
                                    filter:function(event,player){
                                        return player.storage.bhmojing==2&&player.getHistory('useCard',function(evt){
                                            if(evt.targets&&evt.targets.length&&evt.isPhaseUsing()){
                                                var targets=evt.targets.slice(0);
                                                while(targets.contains(player)) targets.remove(player);
                                                return targets.length>0;
                                            }
                                            return false;
                                        }).length==0;
                                    },
                                    content:function(){
                                        'step 0'
                                        player.draw(2);
                                        player.chooseCard('请选择一张手牌作为“镜”','h',1,true).set('ai',function(card){
                                            if(player!=_status.currentPhase) return player.getUseValue(card);
                                            else return 10-get.value(card);
                                        });
                                        'step 1'
                                        player.addToExpansion(result.cards[0],player,'gain2').gaintag.add('bhmojing');
                                        'step 2'
                                        event.trigger('bhmojing_use');
                                    },
                                },
                                use3:{
                                    trigger:{
                                        global:'roundStart',
                                    },
                                    prompt2:"转换技，①一名角色的回合②你的出牌阶段③轮次结束时，若期间你未使用过牌指定其他角色为目标，你可以摸项目编号张牌并将一张手牌置于角色卡上，称为“镜”。",
                                    filter:function(event,player){
                                        return player.storage.bhmojing==3&&player.storage.bhmojing_check3;
                                    },
                                    content:function(){
                                        'step 0'
                                        player.draw(3);
                                        player.chooseCard('请选择一张手牌作为“镜”','h',1,true).set('ai',function(card){
                                            if(player!=_status.currentPhase) return player.getUseValue(card);
                                            else return 10-get.value(card);
                                        });
                                        'step 1'
                                        player.addToExpansion(result.cards[0],player,'gain2').gaintag.add('bhmojing');
                                        'step 2'
                                        event.trigger('bhmojing_use');
                                    },
                                },
                                check3:{
                                    forced:true,
                                    sub:true,
                                    charlotte:true,
                                    silent:true,
                                    priority:10,
                                    trigger:{
                                        player:"useCardAfter",
                                    },
                                    filter:function(event,player){
                                        return player.storage.bhmojing_check3&&event.targets.length>0&&game.hasPlayer(function(current){
                                            return current!=player&&event.targets.contains(current);
                                        });
                                    },
                                    content:function(){
                                        player.storage.bhmojing_check3=false;
                                    },
                                },
                                clear3:{
                                    forced:true,
                                    sub:true,
                                    charlotte:true,
                                    silent:true,
                                    priority:2,
                                    trigger:{
                                        global:"roundStart",
                                    },
                                    content:function(){
                                        player.storage.bhmojing_check3=true;
                                    },
                                },
                            },
                        },
                        bhxianwei:{
                            enable:'phaseUse',
                            init:function(player){
                                player.storage.bhxianwei=[];
                            },
                            filter:function(event,player){
                                return player.getExpansions('bhmojing').length>0&&game.hasPlayer(function(current){
                                    return current!=player&&!player.storage.bhxianwei.contains(current);
                                });
                            },
                            filterCard:function(card){
                                return true;
                            },
                            position:'h',
                            selectCard:1,
                            selectTarget:1,
                            filterTarget:function(card,player,target){
                                return target!=player&&!player.storage.bhxianwei.contains(target);
                            },
                            content:function(){
                                'step 0'
                                player.chooseButton(['请选择一张“镜”移去',player.getExpansions('bhmojing')],true).set('ai',function(button){
                                    return player.getUseValue(button.link);
                                });
                                'step 1'
                                event.card1=cards[0];
                                event.card2=result.links[0];
                                event.target=targets[0];
                                player.storage.bhxianwei.push(event.target);
                                player.loseToDiscardpile(event.card2);
                                'step 2'
                                event.num=50*player.getExpansions('bhmojing').length*get.number(event.card1)/get.distance(player,event.target);
                                game.log(player,'计算的放大倍数为',parseInt(event.num));
                                if(event.num>=150){
                                    var content;
                                    var str=get.translation(event.target)+'的手牌';
                                    if(event.target.countCards('h')){
                                        content=[str,event.target.getCards('h')];
                                        game.log(player,'观看了',event.target,'的手牌');
                                    }
                                    player.chooseControl('ok').set('dialog',content);
                                }
                                'step 3'
                                if(event.num>=300&&player.canUse(event.card2,event.target)){
                                    player.useCard({name:event.card2.name,nature:event.card2.nature,isCard:true},event.target);
                                }
                                'step 4'
                                if(event.num>=450){
                                    player.choosePlayerCard(event.target,'选择'+get.translation(event.target)+'区域内一张牌进行分配','hej',1,true,'visible').set('ai',function(card){
                                        var att=get.attitude(player,event.target);
                                        if(att>0){
                                            if(event.target.getCards('j').contains(card)) return 20;
                                            return 1-get.value(card);
                                        } else {
                                            if(event.target.getCards('j').contains(card)) return -20;
                                            else if(event.target.getCards('e').contains(card)) return 4+get.value(card);
                                            else return get.value(card);
                                        }
                                    });
                                } else event.finish();
                                'step 5'
                                event.card3=result.cards[0];
                                player.chooseTarget('选择'+get.translation(event.card3)+'的分配目标',function(card,player,target){
                                    return target!=event.target;
                                },1,true).set('ai',function(target){
                                    var att=get.attitude(player,target);
                                    if(att<0) return -20;
                                    else return 10+att-target.countCards('he');
                                });
                                'step 6'
                                result.targets[0].gain(event.card3,event.target,'gain2');
                            },
                            ai:{
                                order:2.5,
                                result:{
                                    player:0.5,
                                    target:function(player,target){
                                        var att=get.attitude(player,target);
                                        if(att>0&&target.countCards('j')) return 10;
                                        else return 4-get.distance(player,target)+player.getExpansions('bhmojing').length;
                                    },
                                },
                            },
                            group:'bhxianwei_clear',
                            subSkill:{
                                clear:{
                                    sub:true,
                                    forced:true,
                                    charlotte:true,
                                    trigger:{
                                        player:'phaseUseEnd',
                                    },
                                    priority:100,
                                    content:function(){
                                        player.storage.bhxianwei=[];
                                    },
                                    silent:true,
                                },
                            },
                        },
                        bhfusheng:{
                            audio: "ext:崩崩崩/audio:2",
                            trigger:{
                                global:'damageEnd',
                            },
                            frequent:true,
                            direct:true,
                            silent:true,
                            filter:function(event,player){
                                if(player.getHistory('useCard').length>0) return false;
                                return true;
                            },
                            content:function(){
                                'step 0'
                                event.target = trigger.player;
                                event.num = trigger.num;
                                event.canRespond = false;
                                if(trigger._dyinged) {
                                    event.canRespond = true;
                                }
                                if(!trigger.player.isAlive()) {
                                    event.target = player;
                                }
                                event.target.chooseBool('是否发动〖浮生〗')
                                    .set('prompt2','你可判定'+get.cnNumber(event.num)+'次，若结果：为红色，你摸两张牌：不为【闪】，'+get.translation(player)+'获得之。')
                                    .set('ai',function(){
                                        var att = get.attitude(event.target,player);
                                        if(att>0) return true;
                                        else {
                                            if(player.hp<=1 && player.countCards('e') < 2) return [false,true,true].randomGet();
                                            if(event.target.countCards('he')<2 && event.target.hp <= 2) return [false,true,true].randomGet();
                                            return false;
                                        }
                                    });
                                'step 1'
                                if(result.bool){
                                    player.logSkill('bhfusheng',event.target);
                                } else event.finish();
                                'step 2'
                                if(event.canRespond){
                                    player.chooseCard('你可以打出一张手牌作为〖浮生〗的判定结果','hs').set('ai',function(card){
                                        let att = get.attitude(player, event.target);
                                        if(att>0){
                                            return get.color(card)=='red'?10:-4 + get.name(card)!='shan'?1:-get.value(card);
                                        } else {
                                            return get.color(card)!='red'?7:-10 + get.name(card)!='shan'?1:2-get.value(card);
                                        }
                                    });
                                } else {
                                    event._result = {bool:false};
                                }
                                'step 3'
                                if(result.bool){
                                    player.respond(result.cards,'bhfusheng','highlight','noOrdering');
                                    event._result = {
                                        card:result.cards[0]
                                    }
                                } else {
                                    event.target.judge(function (card) {
                                        if(get.color(card) == 'red') return 7;
                                        else if(get.name(card) != 'shan') return get.attitude(event.target,player)>0?get.value(card):-get.value(card);
                                        else return 0;
                                    }).judge2 = function (result) {
                                        return result.bool;
                                    };
                                }
                                'step 4'
                                if(get.color(result.card) == 'red'){
                                    event.target.draw(2);
                                } 
                                if(get.name(result.card) != 'shan'){
                                    player.gain(result.card,'gain2');
                                }
                                'step 5'
                                event.num--;
                                if(event.num>0) event.goto(2);
                            },
                        },
                        bhshenyin:{
                            audio: "ext:崩崩崩/audio:2",
                            locked:true,
                            forced:true,
                            trigger:{
                                player:'phaseUseBegin',
                            },
                            content:function(){
                                let players=game.filterPlayer();
                                let fixedNum = 0;

                                players.sort(function(a,b){
                                    return b.countCards('h')-a.countCards('h');
                                });
                                let handcardNum = players[0].countCards('h');
                                if(player.countCards('h') < handcardNum){
                                    player.draw();
                                } else {
                                    fixedNum = 1;
                                }

                                players.sort(function(a,b){
                                    return b.hp-a.hp;
                                });
                                let hpNum = players[0].hp;
                                if(player.hp < hpNum){
                                    player.recover(1+fixedNum);
                                    fixedNum = 0;
                                } else {
                                    fixedNum = 1
                                }

                                players.sort(function(a,b){
                                    return b.maxHp-a.maxHp;
                                });
                                let maxhpNum = players[0].maxHp;
                                if(player.maxHp < maxhpNum){
                                    player.gainMaxHp(1+fixedNum);
                                }
                            },
                        },
                        bhfeiqiu: {
                            trigger: {
                                player: "gainAfter",
                            },
                            forced: true,
                            filter: function (event, player) {
                                if (!event.cards || !event.cards.length) return false;
                                for (var i = 0; i < event.cards.length; i++) {
                                    if (get.type(event.cards[i]) != 'basic') return true;
                                }
                                return false;
                            },
                            content: function () {
                                'step 0'
                                event.cards = trigger.cards;
                                event.list = [];
                                for (var i = 0; i < event.cards.length; i++) {
                                    if (get.type(event.cards[i]) != 'basic') event.list.push(event.cards[i]);
                                }
                                'step 1'
                                var bool = false;
                                var saylist = ['不幸啊！', '难道又要吃保底？', '呜呜呜，玄不救非啊...', '呜呜呜，氪不改命啊...'];
                                player.say(saylist.randomGet());
                                event.num = event.list.length;
                                if (player.hasSkill('bhbaodi')) {
                                    if (player.storage.bhbaodi - 1 <= event.num) {
                                        player.storage.bhbaodi += 10;
                                        player.storage.bhbaodi -= event.num;
                                        if (player.storage.bhbaodi > 10) player.storage.bhbaodi = 10;
                                        event.num--;
                                        bool = true;
                                    } else {
                                        player.storage.bhbaodi -= event.num;
                                    }
                                }
                                player.discard(event.list);
                                player.draw(event.num);
                                if (bool) event.trigger('bhbaodi');
                                'step 2'
                                event.trigger('bhfeiqiu');
                                'step 3'
                                event.trigger('bhfeiqiu2');
                            },
                        },
                        bhbaodi: {
                            trigger: {
                                player: "bhbaodi",
                            },
                            derivation: ["bhhaibao", "bhtonghua", "bhkejin", "bhxuanxue", "bhzengou", "bhtongbao", "bhtianyi", "bhzhufu", "bhjiqu", "bhchoumao", "bhdatong", "bhqiuzhang"],
                            forced: true,
                            init: function (player) {
                                player.storage.bhbaodi = 10;
                            },
                            mark: true,
                            marktext: "保",
                            intro: {
                                content: function (storage, player) {
                                    if (player.storage.bhbaodi == 2) {
                                        var str = '下一发，下一发就保底了';
                                    } else {
                                        var str = '距离保底还有';
                                        str += (player.storage.bhbaodi);
                                        str += '抽';
                                    }
                                    return str;
                                },
                            },
                            content: function (event, player) {
                                'step 0'
                                var list = [];
                                if (!player.hasSkill('bhhaibao')) list.push('bhhaibao');
                                if (!player.hasSkill('bhtonghua')) list.push('bhtonghua');
                                if (!player.hasSkill('bhkejin')) list.push('bhkejin');
                                if (!player.hasSkill('bhxuanxue')) list.push('bhxuanxue');
                                if (!player.hasSkill('bhzengou') && !player.hasSkill('bhbeici')) list.push('bhzengou');
                                if (!player.hasSkill('bhtongbao') && !player.hasSkill('bhfayi')) list.push('bhtongbao');
                                if (!player.hasSkill('bhtianyi') && player.storage.bhtianyi == false) list.push('bhtianyi');
                                if (!player.hasSkill('bhzhufu')) list.push('bhzhufu');
                                if (!player.hasSkill('bhjiqu')) list.push('bhjiqu');
                                if (!player.hasSkill('bhchoumao') && !player.hasSkill('bhxichaofeng')) list.push('bhchoumao');
                                if (!player.hasSkill('bhdatong') && !player.hasSkill('bhdatong_get')) list.push('bhdatong');
                                if (!player.hasSkill('bhqiuzhang') && !player.hasSkill('bhhaozhao')) list.push('bhqiuzhang');
                                if (!list.length) {
                                    player.say('什么？池子已经捞空了？');
                                    player.draw();
                                    event.finish();
                                } else {
                                    player.say('终于，终于出货了！');
                                    event.str = list.randomGet();
                                }
                                'step 1'
                                player.addSkill(event.str);
                                event.trigger('bhbaodi2');
                                game.log(player, '出货了，他获得了', '#g【' + get.translation(event.str) + '】');
                            },
                            group: ["bhbaodi_jieshu", "bhbaodi_dam"],
                            subSkill: {
                                dam: {
                                    trigger: {
                                        player: "damageEnd",
                                    },
                                    forced: true,
                                    content: function () {
                                        'step 0'
                                        event.num = trigger.num;
                                        for (var i = 0; i < event.num; i++) {
                                            player.storage.bhbaodi--;
                                            player.syncStorage('bhbaodi');
                                            if (player.storage.bhbaodi == 1) {
                                                player.storage.bhbaodi = 10;
                                                player.syncStorage('bhbaodi');
                                                event.trigger('bhbaodi');
                                            }
                                        }
                                        'step 1'
                                        event.trigger('bhfeiqiu');
                                        'step 2'
                                        event.trigger('bhfeiqiu2');
                                    },
                                    sub: true,
                                },
                                jieshu: {
                                    trigger: {
                                        global: "phaseJieshu",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return event.player != player;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.storage.bhbaodi--;
                                        player.syncStorage('bhbaodi');
                                        if (player.storage.bhbaodi == 1) {
                                            player.storage.bhbaodi = 10;
                                            player.syncStorage('bhbaodi');
                                            event.trigger('bhbaodi');
                                        }
                                        'step 1'
                                        event.trigger('bhfeiqiu');
                                        'step 2'
                                        event.trigger('bhfeiqiu2');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        "bhfeiqiu2": {
                            trigger: {
                                player: "gainAfter",
                            },
                            check: function (event, player) {
                                return false;
                            },
                            filter: function (event, player) {
                                if (!event.cards || !event.cards.length) return false;
                                for (var i = 0; i < event.cards.length; i++) {
                                    if (get.type(event.cards[i]) != 'basic') return true;
                                }
                                return false;
                            },
                            content: function () {
                                'step 0'
                                event.cards = trigger.cards;
                                event.list = [];
                                for (var i = 0; i < event.cards.length; i++) {
                                    if (get.type(event.cards[i]) != 'basic') event.list.push(event.cards[i]);
                                }
                                'step 1'
                                var bool = false;
                                var saylist = ['不幸啊！', '难道又要吃保底？', '呜呜呜，玄不救非啊...', '呜呜呜，氪不改命啊...'];
                                player.say(saylist.randomGet());
                                event.num = event.list.length;
                                if (player.hasSkill('bhbaodi')) {
                                    if (player.storage.bhbaodi - 1 <= event.num) {
                                        player.storage.bhbaodi += 10;
                                        player.storage.bhbaodi -= event.num;
                                        if (player.storage.bhbaodi > 10) player.storage.bhbaodi = 10;
                                        event.num--;
                                        bool = true;
                                    } else {
                                        player.storage.bhbaodi -= event.num;
                                    }
                                }
                                player.discard(event.list);
                                player.draw(event.num);
                                if (bool) event.trigger('bhbaodi');
                                'step 2'
                                event.trigger('bhfeiqiu');
                                'step 3'
                                event.trigger('bhfeiqiu2');
                            },
                            group: "bhfeiqiu2_remove",
                            subSkill: {
                                remove: {
                                    trigger: {
                                        player: "phaseJieshuEnd",
                                    },
                                    forced: true,
                                    content: function () {
                                        player.addSkill('bhfeiqiu');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        "bhfeiqiu_give": {
                            mark: true,
                            marktext: "非",
                            intro: {
                                name: "非酋",
                                content: "你是一名光荣的非酋了",
                            },
                            trigger: {
                                player: "gainAfter",
                            },
                            forced: true,
                            filter: function (event, player) {
                                if (!event.cards || !event.cards.length) return false;
                                for (var i = 0; i < event.cards.length; i++) {
                                    if (get.type(event.cards[i]) != 'basic') return true;
                                }
                                return false;
                            },
                            content: function () {
                                'step 0'
                                event.cards = trigger.cards;
                                event.list = [];
                                for (var i = 0; i < event.cards.length; i++) {
                                    if (get.type(event.cards[i]) != 'basic') event.list.push(event.cards[i]);
                                }
                                'step 1'
                                event.num = event.list.length;
                                player.discard(event.list);
                                player.draw(event.num);
                            },
                            group: "bhfeiqiu_give_2",
                            subSkill: {
                                "2": {
                                    trigger: {
                                        player: "dyingEnd",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.hasSkill('bhfeiqiu_give');
                                    },
                                    content: function () {
                                        player.removeSkill('bhfeiqiu_give');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhhaibao: {
                            forced: true,
                            trigger: {
                                player: "bhfeiqiu",
                            },
                            silent: true,
                            content: function () {
                                'step 0'
                                var list = [0, 0, 0, 0, 1];
                                event.num = list.randomGet();
                                if (event.num == 1) {
                                    event.trigger('bhhaibao');
                                }
                            },
                            group: "bhhaibao_get",
                            subSkill: {
                                get: {
                                    forced: true,
                                    trigger: {
                                        player: "bhhaibao",
                                    },
                                    content: function () {
                                        'step 0'
                                        var list = [];
                                        if (!player.hasSkill('bhhaibao')) list.push('bhhaibao');
                                        if (!player.hasSkill('bhtonghua')) list.push('bhtonghua');
                                        if (!player.hasSkill('bhkejin')) list.push('bhkejin');
                                        if (!player.hasSkill('bhxuanxue')) list.push('bhxuanxue');
                                        if (!player.hasSkill('bhzengou') && !player.hasSkill('bhbeici')) list.push('bhzengou');
                                        if (!player.hasSkill('bhtongbao') && !player.hasSkill('bhfayi')) list.push('bhtongbao');
                                        if (!player.hasSkill('bhtianyi') && player.storage.bhtianyi == false) list.push('bhtianyi');
                                        if (!player.hasSkill('bhzhufu')) list.push('bhzhufu');
                                        if (!player.hasSkill('bhjiqu')) list.push('bhjiqu');
                                        if (!player.hasSkill('bhchoumao') && !player.hasSkill('bhxichaofeng')) list.push('bhchoumao');
                                        if (!player.hasSkill('bhdatong') && !player.hasSkill('bhdatong_get')) list.push('bhdatong');
                                        if (!player.hasSkill('bhqiuzhang') && !player.hasSkill('bhhaozhao')) list.push('bhqiuzhang');
                                        if (!list.length) {
                                            player.say('什么？池子已经捞空了？');
                                            player.draw();
                                            event.finish();
                                        } else {
                                            player.say('我超，不是保底？！');
                                            event.str = list.randomGet();
                                        }
                                        'step 1'
                                        player.addSkill(event.str);
                                        event.trigger('bhbaodi2');
                                        game.log(player, '出货了');
                                        player.storage.bhbaodi = 9;
                                        'step 2'
                                        event.trigger('bhhaibao2');
                                    },
                                    sub: true,
                                },
                            },
                            popup: false,
                        },
                        bhtonghua: {
                            enable: "phaseUse",
                            usable: 1,
                            check: function (event, player) {
                                return player.maxHp >= 5 && player.hp < 5;
                            },
                            filter: function (event, player) {
                                return player.maxHp > 1 && game.hasPlayer(function (target) {
                                    return target != player && !target.hasSkill('bhfeiqiu_give');
                                });
                            },
                            filterCard: false,
                            selectTarget: 1,
                            filterTarget: function (card, player, target) {
                                return target != player && !target.hasSkill('bhfeiqiu_give');
                            },
                            content: function () {
                                player.loseMaxHp();
                                targets[0].addSkill('bhfeiqiu_give');
                                event.trigger('bhfeiqiu_give');
                            },
                            ai: {
                                order: 9,
                                result: {
                                    player: -2,
                                    target: -3,
                                },
                            },
                        },
                        bhkejin: {
                            trigger: {
                                player: "bhfeiqiu2",
                            },
                            filter: function (event, player) {
                                return player.countDisabled() < 5;
                            },
                            content: function () {
                                'step 0'
                                player.chooseToDisable();
                                'step 1'
                                player.draw(4);
                                if (player.isDisabled(1)) player.addSkill('bhkejin_sha');
                            },
                            subSkill: {
                                sha: {
                                    mod: {
                                        targetInRange: function (card) {
                                            if (card.name == 'sha') return true;
                                        },
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhxuanxue: {
                            trigger: {
                                player: "phaseZhunbei",
                            },
                            frequent: true,
                            content: function () {
                                'step 0'
                                event.card = get.cards();
                                player.showCards(event.card);
                                if (get.color(event.card) == 'red') {
                                    player.removeSkill('bhfeiqiu');
                                    player.addTempSkill('bhfeiqiu2');
                                }
                            },
                        },
                        bhzengou: {
                            trigger: {
                                player: "bhbaodi2",
                            },
                            derivation: ["bhbeici"],
                            forced: true,
                            filter: function (event, player) {
                                return player.hasSkill('bhhaibao');
                            },
                            content: function () {
                                player.removeSkill('bhzengou');
                                game.log(player, '转投了可恶的欧洲人，他背刺了非酋们');
                                player.addSkill('bhbeici');
                            },
                            mod: {
                                globalFrom: function (from, to) {
                                    if (!to.hasSkill('bhfeiqiu_give')) return -Infinity;
                                },
                                cardUsable: function (card) {
                                    if (card.name == 'sha') return Infinity;
                                },
                            },
                        },
                        bhbeici: {
                            trigger: {
                                player: "bhhaibao2",
                            },
                            filter: function (event, player) {
                                return game.hasPlayer(function (target) {
                                    return target != player && target.hasSkill('bhfeiqiu_give');
                                });
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('选择一名有“非酋”的其他角色', function (card, player, target) {
                                    return target != player && target.hasSkill('bhfeiqiu_give');
                                }).set('ai', function (target) {
                                    return -get.attitude(player, target);
                                });
                                'step 1'
                                if (result.bool && result.targets) {
                                    player.line(result.targets[0]);
                                    result.targets[0].damage(2, player);
                                }
                            },
                        },
                        bhtongbao: {
                            trigger: {
                                source: "damageBegin",
                            },
                            forced: true,
                            filter: function (event, player) {
                                return event.player && event.player != player && event.player.hasSkill('bhfeiqiu_give');
                            },
                            content: function () {
                                'step 0'
                                player.say('同是非酋，何必手足相残');
                                'step 1'
                                trigger.num--;
                            },
                            group: ["bhtongbao_recover", "bhtongbao_dam", "bhtongbao_remove"],
                            subSkill: {
                                remove: {
                                    trigger: {
                                        player: "bhbaodi2",
                                    },
                                    derivation: ["bhfayi"],
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.hasSkill('bhhaibao');
                                    },
                                    content: function () {
                                        player.removeSkill('bhtongbao');
                                        game.log(player, '已经是个欧洲人了，他再也不是我们的同志了...');
                                        player.addSkill('bhfayi');
                                    },
                                    sub: true,
                                },
                                dam: {
                                    trigger: {
                                        player: "damageBegin",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return event.source && event.source != player && event.source.hasSkill('bhfeiqiu_give');
                                    },
                                    content: function () {
                                        'step 0'
                                        player.say('同是非酋，何必手足相残');
                                        'step 1'
                                        trigger.num--;
                                    },
                                    sub: true,
                                },
                                recover: {
                                    trigger: {
                                        global: "recover",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return event.player != player && event.player.hasSkill('bhfeiqiu_give');
                                    },
                                    content: function () {
                                        player.line(trigger.player);
                                        player.draw(trigger.num);
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhtianyi: {
                            enable: "phaseUse",
                            init: function (player) {
                                player.storage.bhtianyi = false;
                            },
                            intro: {
                                content: "limited",
                            },
                            unique: true,
                            limited: true,
                            skillAnimation: true,
                            animationStr: "天意",
                            animationColor: "gray",
                            filter: function (event, player) {
                                return player.storage.bhtianyi == false && player.countCards('he') > 0;
                            },
                            content: function () {
                                'step 0'
                                player.awakenSkill('bhtianyi');
                                player.storage.bhtianyi = true;
                                player.chooseCard('将至多两张牌随机交给其他角色', 'hes', 2, true);
                                'step 1'
                                event.cards = result.cards;
                                event.num = event.cards.length;
                                var targets = game.filterPlayer(function (target) {
                                    return target != player && !target.hasSkill('bhfeiqiu_give');
                                });
                                event.targets = [];
                                for (var i = 0; i < event.num; i++) {
                                    event.target = targets.randomGet();
                                    event.targets.push(event.target);
                                    targets.remove(event.target);
                                }
                                'step 2'
                                for (var i = 0; i < event.targets.length; i++) {
                                    event.card = event.cards.shift();
                                    player.line(event.targets[i]);
                                    event.targets[i].gain(event.card, player, 'give');
                                    event.targets[i].addSkill('bhfeiqiu_give');
                                    event.trigger('bhfeiqiu_give');
                                }
                            },
                            mark: true,
                            ai: {
                                order: 2,
                                result: {
                                    player: 1,
                                },
                            },
                        },
                        bhzhufu: {
                            trigger: {
                                player: "phaseUseEnd",
                            },
                            marktext: "福",
                            intro: {
                                name: "祝福",
                                content: "愿非酋之神庇佑你",
                            },
                            frequent: true,
                            filter: function (event, player) {
                                return player.countCards('he') >= 2 && game.hasPlayer(function (target) {
                                    return target.hasSkill('bhfeiqiu_give') || target.hasSkill('bhfeiqiu') || target.hasSkill('bhfeiqiu2');
                                });
                            },
                            content: function () {
                                'step 0'
                                game.delay();
                                'step 1'
                                player.chooseToDiscard('弃置两张牌以获取非酋之神的庇佑？', 'he', 2).set('ai', function (card) {
                                    return 8 - get.value(card);
                                });
                                'step 2'
                                if (result.bool) {
                                    player.chooseTarget('选择一名有“非酋”的角色', function (card, player, target) {
                                        return target.hasSkill('bhfeiqiu_give') || target.hasSkill('bhfeiqiu') || target.hasSkill('bhfeiqiu2');
                                    }, true).set('ai', function (target) {
                                        return get.attitude(player, target);
                                    });
                                } else event.finish();
                                'step 3'
                                result.targets[0].addSkill('bhzhufu_draw');
                                result.targets[0].markSkill('bhzhufu');
                            },
                            subSkill: {
                                draw: {
                                    trigger: {
                                        player: "phaseDrawBegin2",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return !event.numFixed;
                                    },
                                    content: function () {
                                        'step 0'
                                        var list = [1, 2, 3, 4]
                                        trigger.num += list.randomGet();
                                        'step 1'
                                        player.removeSkill('bhzhufu_draw');
                                        player.unmarkSkill('bhzhufu');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhjiqu: {
                            trigger: {
                                source: "die",
                            },
                            filter: function (event, player) {
                                return !event.player.hasSkill('bhfeiqiu_give');
                            },
                            forced: true,
                            content: function () {
                                'step 0'
                                player.gainMaxHp();
                                player.recover();
                                'step 1'
                                player.draw(3);
                            },
                        },
                        bhchoumao: {
                            trigger: {
                                player: "useCard",
                            },
                            derivation: ["bhxichaofeng"],
                            prompt: "你可以失去一点体力然后令该【杀】伤害+1且不可响应",
                            check: function (event, player) {
                                return player.hp > 2;
                            },
                            filter: function (event, player) {
                                if (!event.targets) return false;
                                for (var i = 0; i < event.targets.length; i++) {
                                    if (event.targets[i].hasSkill('bhfeiqiu_give')) return false;
                                }
                                return event.card && (event.card.name == 'sha');
                            },
                            content: function () {
                                'step 0'
                                player.loseHp();
                                'step 1'
                                trigger.directHit.addArray(game.filterPlayer(function (current) {
                                    return current != player;
                                }));
                                player.addTempSkill('bhchoumao_dam', 'shaAfter');
                            },
                            group: "bhchoumao_remove",
                            subSkill: {
                                remove: {
                                    trigger: {
                                        player: "bhbaodi2",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.hasSkill('bhhaibao');
                                    },
                                    content: function () {
                                        player.removeSkill('bhchoumao');
                                        game.log(player, '转投了可恶的欧洲人，他要嘲讽曾经的hxd');
                                        player.addSkill('bhxichaofeng');
                                    },
                                    sub: true,
                                },
                                dam: {
                                    trigger: {
                                        source: "damageBegin",
                                    },
                                    forced: true,
                                    content: function () {
                                        trigger.num++;
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhxichaofeng: {
                            trigger: {
                                player: "useCard",
                            },
                            filter: function (event, player) {
                                if (!event.targets) return false;
                                for (var i = 0; i < event.targets.length; i++) {
                                    if (event.targets[i].hasSkill('bhfeiqiu_give') && event.targets[i].countCards('he') > 0) return event.card && (event.card.name == 'sha');
                                }
                                return false;
                            },
                            content: function () {
                                for (var i = 0; i < trigger.targets.length; i++) {
                                    if (trigger.targets[i].hasSkill('bhfeiqiu_give') && trigger.targets[i].countCards('he') > 0) player.discardPlayerCard('he', trigger.targets[i]);
                                }
                            },
                        },
                        bhdatong: {
                            dutySkill: true,
                            forced: true,
                            group: ["bhdatong_achieve", "bhdatong_fail"],
                            init: function (player) {
                                player.storage.bhdatong = false;
                            },
                            subSkill: {
                                achieve: {
                                    trigger: {
                                        global: "bhfeiqiu_give",
                                    },
                                    forced: true,
                                    skillAnimation: true,
                                    animationColor: "metal",
                                    filter: function (event, player) {
                                        return !player.storage.bhdatong && !game.hasPlayer(function (target) {
                                            return !target.hasSkill('bhfeiqiu_give') && target != player;
                                        })
                                    },
                                    content: function () {
                                        'step 0'
                                        game.log(player, '成功完成使命');
                                        player.awakenSkill('bhdatong');
                                        'step 1'
                                        var players = game.filterPlayer();
                                        event.num = parseInt(players.length + 1 / 2);
                                        player.gainMaxHp(event.num);
                                        player.recover(event.num);
                                        if (player.countCards('h') < players.maxHp) players.draw(players.maxHp - players.countCards('h'));
                                        player.storage.bhdatong = true;
                                        player.addSkill('bhdatong_get');
                                    },
                                    sub: true,
                                },
                                fail: {
                                    trigger: {
                                        player: "dying",
                                    },
                                    forced: true,
                                    content: function () {
                                        'step 0'
                                        game.log(player, '使命失败');
                                        player.awakenSkill('bhdatong');
                                        if (player.hasSkill('bhtonghua')) player.removeSkill('bhtonghua');
                                        'step 1'
                                        if (player.hp < 1) player.recover(1 - player.hp);
                                        player.storage.bhdatong = true;
                                        player.addSkill('bhdatong_get');
                                    },
                                    sub: true,
                                },
                                get: {
                                    sub: true,
                                },
                            },
                            mod: {
                                maxHandcard: function (player, num) {
                                    var players = game.filterPlayer();
                                    return num + parseInt(players.length + 1 / 2);;
                                },
                            },
                        },
                        bhqiuzhang: {
                            skillAnimation: true,
                            animationColor: "thunder",
                            juexingji: true,
                            derivation: ["bhhaozhao"],
                            trigger: {
                                player: "phaseZhunbeiBegin",
                            },
                            forced: true,
                            unique: true,
                            filter: function (event, player) {
                                var players = game.filterPlayer();
                                var players2 = game.filterPlayer(function (target) {
                                    return target.hasSkill('bhfeiqiu_give') || target.hasSkill('bhfeiqiu') || target.hasSkill('bhfeiqiu2');
                                });
                                if (players2.length >= parseInt(players.length / 2)) {
                                    return true;
                                }
                                return false;
                            },
                            content: function () {
                                'step 0'
                                player.loseMaxHp();
                                if (player.countCards('h') < player.maxHp) player.draw(player.maxHp - player.countCards('h'));
                                player.addSkill('bhhaozhao');
                                game.log(player, '获得了技能', '#g【号召】');
                                'step 1'
                                player.awakenSkill(event.name);
                                player.storage[event.name] = true;
                            },
                        },
                        bhhaozhao: {
                            enable: "phaseUse",
                            usable: 1,
                            filterCard: false,
                            selectTarget: 1,
                            filterTarget: function (card, player, target) {
                                return target.hasSkill('bhfeiqiu_give');
                            },
                            filter: function (event, player) {
                                return game.hasPlayer(function (target) {
                                    return target.hasSkill('bhfeiqiu_give');
                                });
                            },
                            content: function () {
                                'step 0'
                                targets[0].chooseCard('交给' + get.translation(player) + '一张牌，或失去一点体力令其摸两张牌', 'he');
                                'step 1'
                                if (result.bool && result.cards) {
                                    player.gain(result.cards, targets[0], 'give');
                                } else {
                                    targets[0].loseHp();
                                    player.draw(2, targets[0]);
                                }
                            },
                            ai: {
                                order: 8.2,
                                result: {
                                    player: 1,
                                    target: -2,
                                },
                            },
                        },
                        bhfayi: {
                            trigger: {
                                source: "damageBegin",
                            },
                            forced: true,
                            filter: function (event, player) {
                                return event.player && event.player != player && event.player.hasSkill('bhfeiqiu_give');
                            },
                            content: function () {
                                'step 0'
                                player.say('哈哈哈，我现在是欧洲人啦！');
                                'step 1'
                                trigger.num++;
                            },
                            group: ["bhfayi_damage", "bhfayi_dam"],
                            subSkill: {
                                dam: {
                                    trigger: {
                                        player: "damageBegin",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return event.source && event.source != player && event.source.hasSkill('bhfeiqiu_give');
                                    },
                                    content: function () {
                                        'step 0'
                                        player.say('别，别打脸，hxd留点面子给我');
                                        'step 1'
                                        trigger.num++;
                                    },
                                    sub: true,
                                },
                                damage: {
                                    trigger: {
                                        source: "damage",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return event.player != player && event.player.hasSkill('bhfeiqiu_give');
                                    },
                                    content: function () {
                                        player.line(trigger.player);
                                        player.draw(trigger.num);
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhlvling: {
                            marktext: "门",
                            intro: {
                                name: "门",
                                content: "cards",
                                onunmark: function (storage, player) {
                                    if (storage && storage.length) {
                                        player.$throw(storage, 1000);
                                        game.cardsDiscard(storage);
                                        game.log(storage, '被置入了弃牌堆');
                                        storage.length = 0;
                                    }
                                },
                            },
                            group: ["bhlvling_add", "bhlvling_change", "bhlvling_remove"],
                            subSkill: {
                                add: {
                                    audio: "ext:崩崩崩/audio:2",
                                    enable: "phaseUse",
                                    usable: 2,
                                    position: "h",
                                    discard: false,
                                    lose: false,
                                    delay: false,
                                    filter: function (event, player) {
                                        var players = game.filterPlayer();
                                        var sum = [0, 0, 0, 0];//f,m,t,x
                                        for (var i = 0; i < players.length; i++) {
                                            if (players[i].storage.bhlvling) {
                                                if (players[i].storage.bhlvling.length == 1) {
                                                    if (get.suit(players[i].storage.bhlvling[0]) == 'diamond') sum[0]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'club') sum[1]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'heart') sum[2]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'spade') sum[3]++;
                                                } else if (players[i].storage.bhlvling.length == 2) {
                                                    if (get.suit(players[i].storage.bhlvling[0]) == 'diamond') sum[0]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'club') sum[1]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'heart') sum[2]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'spade') sum[3]++;
                                                    if (get.suit(players[i].storage.bhlvling[1]) == 'diamond') sum[0]++;
                                                    else if (get.suit(players[i].storage.bhlvling[1]) == 'club') sum[1]++;
                                                    else if (get.suit(players[i].storage.bhlvling[1]) == 'heart') sum[2]++;
                                                    else if (get.suit(players[i].storage.bhlvling[1]) == 'spade') sum[3]++;
                                                }
                                            }
                                        }
                                        if (sum[0] + sum[1] + sum[2] + sum[3] >= 8) return false;
                                        return player.countCards('h') > 0
                                    },
                                    selectCard: 1,
                                    selectTarget: 1,
                                    filterCard: function (card) {
                                        var players = game.filterPlayer();
                                        var sum = [0, 0, 0, 0];//f,m,t,x
                                        for (var i = 0; i < players.length; i++) {
                                            if (players[i].storage.bhlvling) {
                                                if (players[i].storage.bhlvling.length == 1) {
                                                    if (get.suit(players[i].storage.bhlvling[0]) == 'diamond') sum[0]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'club') sum[1]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'heart') sum[2]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'spade') sum[3]++;
                                                } else if (players[i].storage.bhlvling.length == 2) {
                                                    if (get.suit(players[i].storage.bhlvling[0]) == 'diamond') sum[0]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'club') sum[1]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'heart') sum[2]++;
                                                    else if (get.suit(players[i].storage.bhlvling[0]) == 'spade') sum[3]++;
                                                    if (get.suit(players[i].storage.bhlvling[1]) == 'diamond') sum[0]++;
                                                    else if (get.suit(players[i].storage.bhlvling[1]) == 'club') sum[1]++;
                                                    else if (get.suit(players[i].storage.bhlvling[1]) == 'heart') sum[2]++;
                                                    else if (get.suit(players[i].storage.bhlvling[1]) == 'spade') sum[3]++;
                                                }
                                            }
                                        }
                                        if (sum[0] < 2 && get.suit(card) == 'diamond') return true;
                                        if (sum[1] < 2 && get.suit(card) == 'club') return true;
                                        if (sum[2] < 2 && get.suit(card) == 'heart') return true;
                                        if (sum[3] < 2 && get.suit(card) == 'spade') return true;
                                        return false;
                                    },
                                    filterTarget: function (card, player, target) {
                                        var suit = get.suit(card);
                                        if (!target.storage.bhlvling) return true;
                                        else {
                                            if (target.storage.bhlvling.length == 2) return false;
                                            else if (target.storage.bhlvling.length == 1) return get.suit(target.storage.bhlvling[0]) != suit;
                                            else return true;
                                        }
                                    },
                                    prompt: "将一张手牌置于一名角色的角色卡上作为“门”",
                                    content: function () {
                                        'step 0'
                                        event.target = targets[0];
                                        event.card = cards[0];
                                        // if (event.target != player) {
                                        //     event.target.gain(event.card, player, 'giveAuto');
                                        // }
                                        'step 1'
                                        player.lose(event.card, ui.special, 'toStorage');
                                        if (!event.target.storage.bhlvling) event.target.storage.bhlvling = [];
                                        event.target.storage.bhlvling = event.target.storage.bhlvling.concat(event.card);
                                        event.target.syncStorage('bhlvling');
                                        event.target.markSkill('bhlvling');
                                        game.log(player, '将', event.card, '置于', event.target, '的角色卡上作为“门”');
                                        'step 2'
                                        player.draw();
                                    },
                                    sub: true,
                                    ai: {
                                        order: 6.2,
                                        result: {
                                            player: 1,
                                            target: function (player, target, card) {
                                                var bool1, bool2, bool3, bool4,
                                                    bool1 = game.hasPlayer(function (current) {
                                                        if (current.storage.bhlvling && current.storage.bhlvling.length) {
                                                            for (i of current.storage.bhlvling) {
                                                                if (get.suit(i) == 'heart') return true;
                                                            }
                                                        }
                                                        return false;
                                                    });
                                                bool2 = game.hasPlayer(function (current) {
                                                    if (current.storage.bhlvling && current.storage.bhlvling.length) {
                                                        for (i of current.storage.bhlvling) {
                                                            if (get.suit(i) == 'diamond') return true;
                                                        }
                                                    }
                                                    return false;
                                                });
                                                bool3 = game.hasPlayer(function (current) {
                                                    if (current.storage.bhlvling && current.storage.bhlvling.length) {
                                                        for (i of current.storage.bhlvling) {
                                                            if (get.suit(i) == 'club') return true;
                                                        }
                                                    }
                                                    return false;
                                                });
                                                bool4 = game.hasPlayer(function (current) {
                                                    if (current.storage.bhlvling && current.storage.bhlvling.length) {
                                                        for (i of current.storage.bhlvling) {
                                                            if (get.suit(i) == 'spade') return true;
                                                        }
                                                    }
                                                    return false;
                                                });
                                                if (get.suit(card) == 'heart') return bool1 ? -2 : 1;
                                                else if (get.suit(card) == 'diamond') return bool2 ? -2 : 1;
                                                else if (get.suit(card) == 'club') return bool3 ? -2 : 1;
                                                else return bool4 ? -2 : 1;
                                            },
                                        },
                                    },
                                },
                                change: {
                                    audio: "ext:崩崩崩/audio:2",
                                    enable: "phaseUse",
                                    usable: 2,
                                    filter: function (event, player) {
                                        return game.hasPlayer(function (target) {
                                            return target.storage.bhlvling && target.storage.bhlvling.length > 0;
                                        });
                                    },
                                    selectCard: -1,
                                    selectTarget: 2,
                                    filterCard: false,
                                    filterTarget: function (card, player, target) {
                                        if (ui.selected.targets.length == 0) {
                                            return target.storage.bhlvling && target.storage.bhlvling.length > 0;
                                        }
                                        else {
                                            if (!target.storage.bhlvling || target.storage.bhlvling.length == 0) return true;
                                            var suit1 = get.suit(ui.selected.targets[0].storage.bhlvling[0]);
                                            var suit2 = '';
                                            if (ui.selected.targets[0].storage.bhlvling.length > 1) suit2 = get.suit(ui.selected.targets[0].storage.bhlvling[1]);
                                            if (target.storage.bhlvling.length == 1) {
                                                if (get.suit(target.storage.bhlvling[0]) != suit1) return true;
                                                if (suit2 == '') return false;
                                                if (get.suit(target.storage.bhlvling[0]) != suit2) return true;
                                            } else {
                                                if (suit2 != '') return false;
                                                if (get.suit(target.storage.bhlvling[0]) != suit1) return true;
                                                if (get.suit(target.storage.bhlvling[1]) != suit1) return true;
                                                // if (get.suit(target.storage.bhlvling[0]) == suit2) return false;
                                                // if (get.suit(target.storage.bhlvling[1]) == suit2) return false;
                                            }
                                            return false;
                                        }
                                    },
                                    delay: false,
                                    multitarget: true,
                                    targetprompt: ["失去“门”", "获得“门”"],
                                    prompt: "你可以移动场上一张“门”",
                                    content: function () {
                                        'step 0'
                                        event.target1 = targets[0];
                                        event.target2 = targets[1];
                                        //var list = targets[0].getStorage('bhlvling');
                                        player.chooseCardButton(1, '选择一张“门”进行移动', event.target1.storage.bhlvling, true);
                                        //player.chooseButton(['选择一张“门”进行移动', list], 1, true);
                                        'step 1'
                                        event.card = result.links[0];
                                        //event.target1.gain(event.card,'gain2','fromStorage');
                                        event.target1.storage.bhlvling.remove(event.card);
                                        event.target1.line(event.target2);
                                        event.target1.syncStorage('bhlvling');
                                        //event.target2.gain(event.card,event.target1,'giveAuto');
                                        //event.target2.lose(event.card, ui.special, 'toStorage');
                                        if (!event.target2.storage.bhlvling) event.target2.storage.bhlvling = [];
                                        event.target2.storage.bhlvling = event.target2.storage.bhlvling.concat(event.card);
                                        event.target2.syncStorage('bhlvling');
                                        if (event.target1.storage.bhlvling.length == 0) event.target1.unmarkSkill('bhlvling');
                                        event.target2.markSkill('bhlvling');
                                        game.log(player, '将“门”', event.card, '从', event.target1, '的角色卡移动到了', event.target2, '的角色卡上');
                                        event.finish();
                                    },
                                    sub: true,
                                },
                                remove: {
                                    audio: "ext:崩崩崩/audio:2",
                                    enable: "phaseUse",
                                    usable: 2,
                                    filter: function (event, player) {
                                        return game.hasPlayer(function (target) {
                                            return target.storage.bhlvling && target.storage.bhlvling.length > 0;
                                        });
                                    },
                                    selectCard: -1,
                                    selectTarget: 1,
                                    filterCard: false,
                                    filterTarget: function (card, player, target) {
                                        return target.storage.bhlvling && target.storage.bhlvling.length > 0;
                                    },
                                    prompt: "你可以收回一张“门”",
                                    content: function () {
                                        'step 0'
                                        var list = targets[0].getStorage('bhlvling');
                                        player.chooseButton(['选择一张“门”收回', list], 1, true);
                                        'step 1'
                                        event.card = result.links[0];
                                        targets[0].storage.bhlvling.remove(event.card);
                                        player.gain(event.card, 'gain2', 'fromStorage');
                                        if (targets[0].storage.bhlvling.length == 0) targets[0].unmarkSkill('bhlvling');
                                        game.log(player, '从', event.target, '的角色卡上收回了“门”', event.card);
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhxujie: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            trigger: {
                                global: "useCardToPlayered",
                            },
                            filter: function (event, player) {
                                if (!event.card || event.card.name != 'sha') return false;
                                if (!event.target.storage.bhlvling || event.target.storage.bhlvling.length == 0) return false;
                                var suit1 = get.suit(event.target.storage.bhlvling[0]);
                                var suit2 = '';
                                if (event.target.storage.bhlvling.length == 2) suit2 = get.suit(event.target.storage.bhlvling[1]);
                                return game.hasPlayer(function (target) {
                                    if (target == event.target) return false;
                                    if (!target.storage.bhlvling || target.storage.bhlvling.length == 0) return false;
                                    if (target.storage.bhlvling.length == 1) {
                                        return get.suit(target.storage.bhlvling[0]) == suit1 || get.suit(target.storage.bhlvling[0]) == suit2;
                                    } else {
                                        if (get.suit(target.storage.bhlvling[0]) == suit1 || get.suit(target.storage.bhlvling[0]) == suit2) return true;
                                        if (get.suit(target.storage.bhlvling[1]) == suit1 || get.suit(target.storage.bhlvling[1]) == suit2) return true;
                                    }
                                    return false;
                                });
                            },
                            init: function (player) {
                                player.storage.bhxujie = 0;
                            },
                            content: function () {
                                'step 0'
                                event.target1 = trigger.target;
                                if (trigger.target.storage.bhlvling.length == 1) {
                                    event.suit = get.suit(trigger.target.storage.bhlvling[0]);
                                    event.card = trigger.target.storage.bhlvling[0];
                                } else {
                                    var suits = [get.suit(trigger.target.storage.bhlvling[0]), get.suit(trigger.target.storage.bhlvling[1])];
                                    var bool1 = game.hasPlayer(function (target) {
                                        if (target == event.target1) return false;
                                        if (!target.storage.bhlvling || target.storage.bhlvling.length == 0) return false;
                                        if (target.storage.bhlvling.length == 1) {
                                            return get.suit(target.storage.bhlvling[0]) == 'diamond';
                                        } else {
                                            if (get.suit(target.storage.bhlvling[0]) == 'diamond') return true;
                                            if (get.suit(target.storage.bhlvling[1]) == 'diamond') return true;
                                        }
                                        return false;
                                    });
                                    var bool2 = game.hasPlayer(function (target) {
                                        if (target == event.target1) return false;
                                        if (!target.storage.bhlvling || target.storage.bhlvling.length == 0) return false;
                                        if (target.storage.bhlvling.length == 1) {
                                            return get.suit(target.storage.bhlvling[0]) == 'club';
                                        } else {
                                            if (get.suit(target.storage.bhlvling[0]) == 'club') return true;
                                            if (get.suit(target.storage.bhlvling[1]) == 'club') return true;
                                        }
                                        return false;
                                    });
                                    var bool3 = game.hasPlayer(function (target) {
                                        if (target == event.target1) return false;
                                        if (!target.storage.bhlvling || target.storage.bhlvling.length == 0) return false;
                                        if (target.storage.bhlvling.length == 1) {
                                            return get.suit(target.storage.bhlvling[0]) == 'heart';
                                        } else {
                                            if (get.suit(target.storage.bhlvling[0]) == 'heart') return true;
                                            if (get.suit(target.storage.bhlvling[1]) == 'heart') return true;
                                        }
                                        return false;
                                    });
                                    if (suits.contains('diamond') && bool1) event.suit = 'diamond';
                                    else if (suits.contains('club') && bool2) event.suit = 'club';
                                    else if (suits.contains('heart') && bool3) event.suit = 'heart';
                                    else event.suit = 'spade';
                                    if (get.suit(trigger.target.storage.bhlvling[0]) == event.suit) event.card = trigger.target.storage.bhlvling[0];
                                    else event.card = trigger.target.storage.bhlvling[1];
                                }
                                var targets = game.filterPlayer(function (target) {
                                    if (target == event.target1) return false;
                                    if (!target.storage.bhlvling || target.storage.bhlvling.length == 0) return false;
                                    if (target.storage.bhlvling.length == 1) {
                                        return get.suit(target.storage.bhlvling[0]) == event.suit;
                                    } else {
                                        if (get.suit(target.storage.bhlvling[0]) == event.suit) return true;
                                        if (get.suit(target.storage.bhlvling[1]) == event.suit) return true;
                                    }
                                    return false;
                                });
                                event.target2 = targets[0];
                                if (event.suit == 'club' || event.suit == 'spade') {
                                    var evts=trigger.player.getHistory('useCard', function (event) {
                                        if (event.card==trigger.card) return true;
                                    });
                                    if (!evts[0].baseDamage) evts[0].baseDamage = 1;
                                    evts[0].baseDamage++;
                                    //game.log(evts[0].baseDamage);
                                } else {
                                    trigger.directHit.addArray(game.filterPlayer());
                                }
                                'step 1'
                                event.target1.line(event.target2);
                                trigger.targets.remove(event.target1);
                                trigger.targets.push(event.target2);
                                'step 2'
                                event.target1.storage.bhlvling.remove(event.card);
                                event.target1.syncStorage('bhlvling');
                                if (event.target1.storage.bhlvling.length == 0) event.target1.unmarkSkill('bhlvling');
                                game.log(event.target1, '将【杀】转移给了', event.target2, '并移去了“门”', event.card);
                                player.draw();
                                'step 3'
                                game.delay();
                            },
                        },
                        bhachang: {
                            enable: "phaseUse",
                            usable: 1,
                            filter: function (event, player) {
                                var hs = player.getCards('h');
                                if (!hs.length) return false;
                                for (var i = 0; i < hs.length; i++) {
                                    var mod2 = game.checkMod(hs[i], player, 'unchanged', 'cardEnabled2', player);
                                    if (mod2 === false) return false;
                                }
                                return true;
                            },
                            chooseButton: {
                                dialog: function (player) {
                                    var list = [];
                                    for (var i = 0; i < lib.inpile.length; i++) {
                                        if (get.type(lib.inpile[i]) == 'trick') list.push(['锦囊', '', lib.inpile[i]]);
                                    }
                                    return ui.create.dialog(get.translation('bhachang'), [list, 'vcard']);
                                },
                                filter: function (button, player) {
                                    return lib.filter.filterCard({ name: button.link[2] }, player, _status.event.getParent());
                                },
                                check: function (button) {
                                    var player = _status.event.player;
                                    var recover = 0, lose = 1, players = game.filterPlayer();
                                    for (var i = 0; i < players.length; i++) {
                                        if (players[i].hp == 1 && get.damageEffect(players[i], player, player) > 0 && !players[i].hasSha()) {
                                            return (button.link[2] == 'juedou') ? 2 : -1;
                                        }
                                        if (!players[i].isOut()) {
                                            if (players[i].hp < players[i].maxHp) {
                                                if (get.attitude(player, players[i]) > 0) {
                                                    if (players[i].hp < 2) {
                                                        lose--;
                                                        recover += 0.5;
                                                    }
                                                    lose--;
                                                    recover++;
                                                }
                                                else if (get.attitude(player, players[i]) < 0) {
                                                    if (players[i].hp < 2) {
                                                        lose++;
                                                        recover -= 0.5;
                                                    }
                                                    lose++;
                                                    recover--;
                                                }
                                            }
                                            else {
                                                if (get.attitude(player, players[i]) > 0) {
                                                    lose--;
                                                }
                                                else if (get.attitude(player, players[i]) < 0) {
                                                    lose++;
                                                }
                                            }
                                        }
                                    }
                                    if (lose > recover && lose > 0) return (button.link[2] == 'nanman') ? 1 : -1;
                                    if (lose < recover && recover > 0) return (button.link[2] == 'taoyuan') ? 1 : -1;
                                    return (button.link[2] == 'wuzhong') ? 1 : -1;
                                },
                                backup: function (links, player) {
                                    return {
                                        filterCard: true,
                                        selectCard: -1,
                                        position: 'h',
                                        audio: 2,
                                        popname: true,
                                        viewAs: { name: links[0][2] },
                                    }
                                },
                                prompt: function (links, player) {
                                    return '将全部手牌当作' + get.translation(links[0][2]) + '使用';
                                },
                            },
                            ai: {
                                order: 5,
                                result: {
                                    player: function (player) {
                                        var num = 0;
                                        var cards = player.getCards('h');
                                        if (cards.length >= 3 && player.hp >= 3) return 2;
                                        for (var i = 0; i < cards.length; i++) {
                                            num += Math.max(0, get.value(cards[i], player, 'raw'));
                                        }
                                        num /= cards.length;
                                        num *= Math.min(cards.length, player.hp);
                                        return 12 - num;
                                    },
                                },
                            },
                            group: "bhachang_equip",
                            subSkill: {
                                equip: {
                                    enable: "phaseUse",
                                    usable: 1,
                                    filter: function (event, player) {
                                        var hs = player.getCards('e');
                                        if (!hs.length) return false;
                                        for (var i = 0; i < hs.length; i++) {
                                            var mod2 = game.checkMod(hs[i], player, 'unchanged', 'cardEnabled2', player);
                                            if (mod2 === false) return false;
                                        }
                                        return true;
                                    },
                                    chooseButton: {
                                        dialog: function (player) {
                                            var list = [];
                                            for (var i = 0; i < lib.inpile.length; i++) {
                                                if (get.type(lib.inpile[i]) == 'trick') list.push(['锦囊', '', lib.inpile[i]]);
                                            }
                                            return ui.create.dialog(get.translation('bhachang'), [list, 'vcard']);
                                        },
                                        filter: function (button, player) {
                                            return lib.filter.filterCard({ name: button.link[2] }, player, _status.event.getParent());
                                        },
                                        check: function (button) {
                                            var player = _status.event.player;
                                            var recover = 0, lose = 1, players = game.filterPlayer();
                                            for (var i = 0; i < players.length; i++) {
                                                if (players[i].hp == 1 && get.damageEffect(players[i], player, player) > 0 && !players[i].hasSha()) {
                                                    return (button.link[2] == 'juedou') ? 2 : -1;
                                                }
                                                if (!players[i].isOut()) {
                                                    if (players[i].hp < players[i].maxHp) {
                                                        if (get.attitude(player, players[i]) > 0) {
                                                            if (players[i].hp < 2) {
                                                                lose--;
                                                                recover += 0.5;
                                                            }
                                                            lose--;
                                                            recover++;
                                                        }
                                                        else if (get.attitude(player, players[i]) < 0) {
                                                            if (players[i].hp < 2) {
                                                                lose++;
                                                                recover -= 0.5;
                                                            }
                                                            lose++;
                                                            recover--;
                                                        }
                                                    }
                                                    else {
                                                        if (get.attitude(player, players[i]) > 0) {
                                                            lose--;
                                                        }
                                                        else if (get.attitude(player, players[i]) < 0) {
                                                            lose++;
                                                        }
                                                    }
                                                }
                                            }
                                            if (lose > recover && lose > 0) return (button.link[2] == 'nanman') ? 1 : -1;
                                            if (lose < recover && recover > 0) return (button.link[2] == 'taoyuan') ? 1 : -1;
                                            return (button.link[2] == 'wuzhong') ? 1 : -1;
                                        },
                                        backup: function (links, player) {
                                            return {
                                                filterCard: true,
                                                selectCard: -1,
                                                position: 'e',
                                                audio: 2,
                                                popname: true,
                                                viewAs: { name: links[0][2] },
                                            }
                                        },
                                        prompt: function (links, player) {
                                            return '将全部装备区的牌当作' + get.translation(links[0][2]) + '使用';
                                        },
                                    },
                                    ai: {
                                        order: 5,
                                        result: {
                                            player: function (player) {
                                                var num = 0;
                                                var cards = player.getCards('e');
                                                if (cards.length >= 3 && player.hp >= 3) return 2;
                                                for (var i = 0; i < cards.length; i++) {
                                                    num += Math.max(0, get.value(cards[i], player, 'raw'));
                                                }
                                                num /= cards.length;
                                                num *= Math.min(cards.length, player.hp);
                                                return 12 - num;
                                            },
                                        },
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhmoer: {
                            trigger: {
                                global: "useCard",
                            },
                            frequent: true,
                            filter: function (event, player) {
                                if (!event.cards) return false;
                                return event.cards.length > 1;
                            },
                            content: function () {
                                if (trigger.player != player) player.line(trigger.player);
                                event.num = trigger.cards.length - 1;
                                player.draw(event.num);
                            },
                        },
                        bhjuji: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            marktext: "弹",
                            intro: {
                                name: "子弹",
                                onunmark: function (storage, player) {
                                    if (storage && storage.length) {
                                        player.$throw(storage, 1000);
                                        game.cardsDiscard(storage);
                                        game.log(storage, '被置入了弃牌堆');
                                        storage.length = 0;
                                    }
                                },
                                mark: function (dialog, content, player) {
                                    if (content && content.length) {
                                        if (player == game.me || player.isUnderControl()) {
                                            dialog.addAuto(content);
                                        }
                                        else {
                                            return '共有' + get.cnNumber(content.length) + '发子弹';
                                        }
                                    }
                                },
                                content: function (content, player) {
                                    if (content && content.length) {
                                        if (player == game.me || player.isUnderControl()) {
                                            return get.translation(content);
                                        }
                                        return '共有' + get.cnNumber(content.length) + '发子弹';
                                    }
                                },
                            },
                            group: ["bhjuji_mark", "bhjuji_fire"],
                            subSkill: {
                                fire: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        global: "useCard",
                                    },
                                    check: function (event, player) {
                                        var att = get.attitude(player, event.player);
                                        if (att < 0) return true;
                                        return false;
                                    },
                                    logTarget:function(event,player){
                                        return event.player;
                                    },
                                    prompt: function (event, player) {
                                        return '是否对' + get.translation(event.player) + '开枪？';
                                    },
                                    filter: function (event, player) {
                                        if (event.player == player) return false;
                                        if(game.hasPlayer(function(target){
                                            return target.isDying();
                                        })) return false;
                                        if (!event.card || !event.cards.length) return false;
                                        if (!player.storage.bhjuji || player.storage.bhjuji.length == 0) return false;
                                        var list = player.getStorage('bhjuji');
                                        for (var i = 0; i < list.length; i++) {
                                            if (get.suit(list[i]) == get.suit(event.card)) return true;
                                        }
                                        return false;
                                    },
                                    content: function () {
                                        'step 0'
                                        event.target = trigger.player;
                                        event.card = trigger.card;
                                        event.list = [];
                                        var list = player.getStorage('bhjuji');
                                        for (var i = 0; i < list.length; i++) {
                                            if (get.suit(list[i]) == get.suit(event.card)) {
                                                event.list.push(list[i]);
                                            }
                                        }
                                        if (!event.list.length) event.finish();
                                        player.chooseCardButton(1, '选择一张“子弹”移去', event.list, true).set('ai', function (links) {
                                            if (get.type(links) == get.type(event.card)) return 8;
                                            return 4;
                                        });
                                        'step 1'
                                        event.card2 = result.links[0];
                                        player.storage.bhjuji.remove(event.card2);
                                        game.cardsDiscard(event.card2);
                                        game.log(event.card2, '被置入了弃牌堆');
                                        player.syncStorage('bhjuji');
                                        if (!player.storage.bhjuji.length) player.unmarkSkill('bhjuji');
                                        game.log(player, '移去了“子弹”', event.card2, '，向', event.target, '开枪');
                                        'step 2'
                                        player.line(event.target);
                                        event.target.damage(player);
                                        if (get.type(event.card) == get.type(event.card2)) player.discardPlayerCard(event.target, 'hej', 1, true);
                                        'step 3'
                                        game.delay();
                                    },
                                },
                                mark: {
                                    init: function (player) {
                                        player.storage.bhjuji_mark = 0;
                                    },
                                    trigger: {
                                        player: "phaseJieshuEnd",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.storage.bhjuji_mark > 0;
                                    },
                                    silent: true,
                                    content: function () {
                                        player.storage.bhjuji_mark = 0;
                                    },
                                },
                            },
                            filter: function (event, player) {
                                if (player.storage.bhjuji_mark >= Math.max(player.hp, 1)) return false;
                                return player.countCards('hs') > 0 && player.storage.bhjuji.length < 5;
                            },
                            init: function (player) {
                                if (!player.storage.bhjuji) player.storage.bhjuji = [];
                            },
                            position: "h",
                            discard: false,
                            lose: false,
                            delay: false,
                            selectCard: 1,
                            filterCard: true,
                            prompt: "将一张手牌盖在角色卡旁作为“子弹”",
                            content: function () {
                                'step 0'
                                event.card = cards[0];
                                player.lose(event.card, ui.special, 'toStorage');
                                player.storage.bhjuji = player.storage.bhjuji.concat(event.card);
                                player.syncStorage('bhjuji');
                                player.markSkill('bhjuji');
                                game.log(player, '装填了一发子弹');
                                player.storage.bhjuji_mark++;
                                'step 1'
                                game.delay();
                            },
                            ai: {
                                order: 3,
                                result: {
                                    player: 6,
                                },
                            },
                        },
                        bhdongtu: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: "dying",
                            },
                            forced: true,
                            filter: function (event, player) {
                                if (event.player == player) return false;
                                var evt = event.getParent(2);
                                if (evt && evt.name == 'bhjuji_fire') {
                                    return true;
                                }
                                return false;
                            },
                            content: function () {
                                'step 0'
                                event.target = trigger.player;
                                player.chooseControl('减上限', '获得手牌', '获得装备').set('ai', function () {
                                    var player = _status.event.player;
                                    var att = get.attitude(player, event.target);
                                    var value1 = 0;
                                    var value2 = 0;
                                    var cards1 = event.target.getCards('h');
                                    var cards2 = event.target.getCards('e');
                                    for (var i = 0; i < cards1.length; i++) {
                                        value1 += get.value(cards1[i]);
                                    }
                                    for (var i = 0; i < cards2.length; i++) {
                                        value2 += get.value(cards2[i]);
                                    }
                                    if (6 - att > value1 && 4 - att > value2) {
                                        return '减上限';
                                    } else {
                                        if (value1 > value2) {
                                            return '获得手牌';
                                        } else {
                                            return '获得装备';
                                        }
                                    }
                                });
                                'step 1'
                                player.line(event.target)
                                if (result.control == '减上限') {
                                    event.target.loseMaxHp();
                                } else if (result.control == '获得手牌') {
                                    event.cards = event.target.getCards('h');
                                    if (event.cards.length > 0) player.gain(event.cards, event.target, 'gain2');
                                } else {
                                    event.cards = event.target.getCards('e');
                                    if (event.cards.length > 0) player.gain(event.cards, event.target, 'gain2');
                                }
                            },
                            mod: {
                                globalTo: function (from, to, distance) {
                                    return distance + 1;
                                },
                            },
                        },
                        bhexiaodao: {
                            trigger: {
                                player: "damageEnd",
                            },
                            forced: true,
                            filter: function (event, player) {
                                return event.num >= 3&&!player.hasSkill('bhexiaodao_remove');
                            },
                            content: function () {
                                'step 0'
                                event.trigger('bhexiaodao1');
                                'step 1'
                                player.goMad();
                                player.addSkill('bhexiaodao_remove');
                            },
                            group: ["bhexiaodao_zhunbei", "bhexiaodao_use"],
                            subSkill: {
                                use: {
                                    trigger: {
                                        global: "phaseUseBegin",
                                    },
                                    check: function (event, player) {
                                        return player.hp >= 6 && player.countCards('h') <= 5&&!player.hasSkill('kurou');
                                    },
                                    prompt: "真的要走小道吗，带将军？",
                                    filter: function (event, player) {
                                        return !player.hasSkill('bhexiaodao_remove');
                                    },
                                    content: function () {
                                        'step 0'
                                        event.trigger('bhexiaodao1');
                                        'step 1'
                                        player.judge()
                                        'step 2'
                                        if(result.color!='black'){
                                            player.goMad();
                                            player.addSkill('bhexiaodao_remove');
                                        }
                                    },
                                    sub: true,
                                },
                                zhunbei: {
                                    trigger: {
                                        global: "phaseZhunbei",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (event.player == player) return false;
                                        return event.player.hp + event.player.countCards('h') > player.hp + player.countCards('h');
                                    },
                                    content: function () {
                                        'step 0'
                                        event.trigger('bhexiaodao1');
                                        'step 1'
                                        player.goMad();
                                        player.addSkill('bhexiaodao_remove');
                                    },
                                    sub: true,
                                },
                                remove: {
                                    trigger: {
                                        global: "phaseJieshu",
                                    },
                                    forced: true,
                                    silent: true,
                                    content: function () {
                                        'step 0'
                                        player.unMad();
                                        'step 1'
                                        //event.trigger('bhexiaodao2');
                                        'step 2'
                                        player.removeSkill('bhexiaodao_remove');
                                    },
                                    sub: true,
                                    popup: false,
                                },
                            },
                        },
                        bheqiyu: {
                            trigger: {
                                player: "bhexiaodao1",
                            },
                            init: function (player) {
                                player.storage.bheqiyu = [0, ''];
                            },
                            forced: true,
                            poolstranslate:{
                                "bheqiyu_pool1_info":"角色活动祈愿-1【阴曹地府】<br>UP角色：大宝，大鬼，大妖，白马，老宝",
                                "bheqiyu_pool2_info":"角色活动祈愿-2【将军特供】<br>UP角色：神，单挑王，单挑女王，魔将-6，魔将-8，魔将-15，大嘴，盖子",
                                "bheqiyu_pool3_info":"角色常驻祈愿-1【八仙过海】<br>UP角色：草原的不死青蛇-无限连陆逊，赤色的夺魂蝙蝠-追魂泪马谡，蛰伏深渊的大蝎-白兽公孙瓒，堕入地狱的魔王-红血魔魏延，宇宙的守护战士-蓝高达曹仁，深海的蓄爆大龟-人亡盾于禁，盘节大地的霸主-绿巨蜥周泰，极地的雷电琉璃-劈你妹张角",
                                "bheqiyu_pool4_info":"角色常驻祈愿-2【四大金刚】<br>UP角色：恐惧魔王-吕蒙，无想一刀-曹冲，不祥之刃-张春华，那个男人-孙笨",
                                "bheqiyu_pool1":['re_xusheng','shen_ganning','shen_guojia','quyi','sb_huangzhong'],
                                "bheqiyu_pool2":['re_machao','re_liubei','bulianshi','huaxiong','dongzhuo','wutugu','re_yuanshao','huanggai'],
                                "bheqiyu_pool3":['luxun','masu','gongsunzan','weiyan','caoren','yujin','old_zhoutai','zhangjiao'],
                                "bheqiyu_pool4":['lvmeng','caochong','zhangchunhua','sunce'],
                            },
                            characterindex:{
                                're_xusheng':1,
                                'shen_ganning':2,
                                'shen_guojia':3,
                                'quyi':4,
                                'sb_huangzhong':5,

                                're_machao':6,
                                're_liubei':7,
                                'bulianshi':8,
                                'huaxiong':9,
                                'dongzhuo':10,
                                'wutugu':11,
                                're_yuanshao':12,
                                'huanggai':13,

                                'luxun':14,
                                'masu':15,
                                'gongsunzan':16,
                                'weiyan':17,
                                'caoren':18,
                                'yujin':19,
                                'old_zhoutai':20,
                                'zhangjiao':21,

                                'lvmeng':22,
                                'caochong':23,
                                'zhangchunhua':24,
                                'sunce':25,
                            },
                            content:function(){
                                'step 0'
                                var pools=[];
                                for (var i = 1; i < 5; i++) {
                                    var name = 'bheqiyu_pool' + i;
                                    var nametranslate;
                                    switch(i){
                                        case 1:
                                            nametranslate='阴曹地府';
                                            break;
                                        case 2:
                                            nametranslate='将军特供';
                                            break;
                                        case 3:
                                            nametranslate='八仙过海';
                                            break;
                                        default:
                                            nametranslate='四大金刚';
                                    }
                                    if (!lib.card[name]) {
                                        var info = {
                                            fullimage: true,
                                            type: "卡池",
                                            image: 'ext:崩崩崩/card/' + name + '.png',
                                            suit:null,
                                            number:null,
                                        }
                                        lib.card[name] = info;
                                        lib.translate[name] = nametranslate;
                                        lib.translate[name + '_info'] = lib.skill.bheqiyu.poolstranslate[name+'_info'];
                                    }
                                    pools.push(game.createCard(name,' ',0));
                                }
                                player.chooseButton(['请选择一个卡池',pools],true);
                                'step 1'
                                var name=result.links[0].name,pool;
                                pool=lib.skill.bheqiyu.poolstranslate[name];
                                event.name=pool.randomGet();
                                name2='bheqiyu_'+event.name;
                                if (!lib.card[name2]) {
                                    var info = {
                                        fullimage: true,
                                        type: "character",
                                        image: 'character:' + event.name,
                                        suit:null,
                                        number:null,
                                        destroy: true,
                                        derivation: 'Ezie',
                                    }
                                    lib.card[name2] = info;
                                    lib.translate[name2] = get.translation(event.name);
                                    lib.translate[name2 + '_info'] = '小道战神：' + get.translation(event.name);
                                }
                                var card=game.createCard(name2,' ',0);
                                var str='恭喜你，在'+lib.skill.bheqiyu.poolstranslate[name+'_info'].slice(0,14)+'中获得了UP角色';
                                player.chooseButton([str,[card]],true);
                                'step 2'
                                player.say('噫，好，我中了！');
                                player.storage.bheqiyu[1]=event.name;
                                game.delayx();
                                'step 3'
                                event.trigger('bhexiaodao2');
                            },
                            group: "bheqiyu_get",
                            subSkill: {
                                get: {
                                    trigger: {
                                        player: "bhexiaodao2",
                                    },
                                    silent:true,
                                    forced: true,
                                    content: function () {
                                        'step 0'
                                        event.name = player.storage.bheqiyu[1];
                                        event.index=lib.skill.bheqiyu.characterindex[event.name];
                                        event.goto(event.index);
                                        'step 1'
                                        var list = ['guding','repojun','effect'];
                                        if (player.hasSkill('repojun')) list.remove('repojun');
                                        event.get = list.randomGet();
                                        if (event.get == 'repojun') {
                                            player.addSkill('repojun');
                                            game.log('大宝决定助', player, '一臂之力，', player, '获得了', get.translation('repojun'));
                                            player.say('大宝不在，大吴疆土就由爷来守护！');
                                        } else if(event.get=='guding'){
                                            var card = get.cardPile(function (card) {
                                                return card.name == event.get;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('大宝决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('刀来！');
                                        } else {
                                            var cards=player.getCards('he');
                                            var target=player;
                                            player.logSkill('repojun',target);
                                            target.addSkill('repojun2');
                                            target.addToExpansion('giveAuto',cards,target).gaintag.add('repojun2');
                                            game.log(player, '犯了大吴疆土，', player, '被击而破之了');
                                            player.say('大宝你干嘛！');
                                        }
                                        event.finish();
                                        'step 2'
                                        var list = ['lebu', 'drlt_jieying','effect'];
                                        if (player.hasSkill('drlt_jieying')) list.remove('drlt_jieying');
                                        event.get = list.randomGet();
                                        if (event.get == 'drlt_jieying') {
                                            player.addSkill('drlt_jieying');
                                            game.log('大鬼决定助', player, '一臂之力，', player, '获得了', get.translation('drlt_jieying'));
                                            player.say('百骑劫魏营，功振天下英！');
                                        } else if(event.get=='lebu'){
                                            var card = get.cardPile(function (card) {
                                                return card.name == event.get;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('大鬼决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('乐，乐死了。');
                                        } else {
                                            var cards=player.getCards('h');
                                            var cards2=[],suits=[];
                                            for(let i of cards){
                                                if(!suits.contains(get.suit(i))){
                                                    suits.push(get.suit(i));
                                                    cards2.push(i);
                                                }
                                            }
                                            if(cards2.length>0) player.discard(cards2);
                                            game.log(player, '犯了大吴疆土，', player, '失去了大业炎');
                                            player.say('大鬼不要啊！');
                                        }
                                        event.finish();
                                        'step 3'
                                        var list = ['tao', 'reshuishi', 'effect'];
                                        if (player.hasSkill('reshuishi')) list.remove('reshuishi');
                                        event.get = list.randomGet();
                                        if (event.get == 'reshuishi') {
                                            player.addSkill('reshuishi');
                                            game.log('大妖决定助', player, '一臂之力，', player, '获得了', get.translation('reshuishi'));
                                            player.say('聪明之猿');
                                        } else if (event.get == 'tao') {
                                            var card = get.cardPile(function (card) {
                                                return card.name == 'tao';
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('大妖决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('桃来！');
                                        } else {
                                            player.logSkill('resghuishi',player);
                                            player.draw(4);
                                            player.loseMaxHp(2);
                                            game.log('大妖决定助', player, '一臂之力');
                                            player.say('Ezie不才,一轮十牌');
                                        }
                                        event.finish();
                                        'step 4'
                                        var list = ['nanman', 'fuqi', 'jiaozi'];
                                        if (player.hasSkill('jiaozi')) list.remove('jiaozi');
                                        if (player.hasSkill('fuqi')) list.remove('fuqi');
                                        event.get = list.randomGet();
                                        if (event.get == 'jiaozi') {
                                            player.addSkill('jiaozi');
                                            game.log('翻车王决定助', player, '一臂之力，', player, '获得了', get.translation('jiaozi'));
                                            player.say('白马？定叫他有来无回！');
                                        } else if(event.get=='nanman'){
                                            var card = get.cardPile(function (card) {
                                                return card.name == event.get;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('翻车王决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('无爷出力，怎会连胜');
                                        } else {
                                            player.addSkill('fuqi');
                                            game.log('翻车王决定助', player, '一臂之力，', player, '获得了', get.translation('fuqi'));
                                            player.say('翻车？不可能的！');
                                        }
                                        event.finish();
                                        'step 5'
                                        var list = ['sha', 'sbliegong', 'effect'];
                                        if (player.hasSkill('sbliegong')) list.remove('sbliegong');
                                        if (!player.hasSkill('sbliegong')) list.remove('effect');
                                        event.get = list.randomGet();
                                        if (event.get == 'sbliegong') {
                                            player.addSkill('sbliegong');
                                            game.log('老宝决定助', player, '一臂之力，', player, '获得了', get.translation('sbliegong'));
                                            player.say('吾虽年迈...');
                                        } else if(event.get=='sha'){
                                            var card = get.cardPile(function (card) {
                                                return card.name == event.get;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('老宝决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('屎灌经食，竟灌三斤');
                                        } else {
                                            player.storage.sbliegong=['spade','diamond','heart','club'];
                                            player.markSkill('sbliegong');
                                            //player.markAuto('sbliegong',['spade','diamond','heart','club']);
                                            game.log('老宝决定助', player, '一臂之力，', player, '的【烈弓】已蓄势待发');
                                            player.say('无双，万军取首!');
                                        }
                                        event.finish();
                                        'step 6'
                                        var list = ['sha', 'retieji','effect'];
                                        if (player.hasSkill('xinwuyan')) list.remove('retieji')
                                        event.get = list.randomGet();
                                        if (event.get == 'retieji') {
                                            player.addSkill(event.get);
                                            game.log('马神决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('爷已经获得了神の力量');
                                        } else if (event.get == 'sha') {
                                            var card = get.cardPile(function (card) {
                                                return card.name == event.get;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('马神决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('你可闪的过洗衣机！');
                                        } else {
                                            player.addTempSkill('fengyin');
                                            game.log(player, '犯下了不敬之罪，因此神降下了神罚');
                                            player.say('首先是犯下傲慢之罪的...');
                                        }
                                        event.finish();
                                        'step 7'
                                        var list = ['shandian', 'rerende','effect'];
                                        if (player.hasSkill('rerende')) list.remove('rerende');
                                        event.get = list.randomGet();
                                        if (event.get == 'rerende') {
                                            player.addSkill('rerende');
                                            game.log('单挑王决定助', player, '一臂之力，', player, '获得了', get.translation('rerende'));
                                            player.say('爷也是单挑王！');
                                        } else if(event.get=='shandian'){
                                            var card;
                                            var cards = [];
                                            for (var i = 0; i < 2; i++) {
                                                card = get.cardPile(function (card) {
                                                    return card.name == event.get && !cards.contains(card);
                                                });
                                                if (!card) {
                                                    player.draw(2);
                                                    event.finish();
                                                }
                                                player.gain(card, 'gain2');
                                                cards.push(card);
                                            }
                                            game.log('单挑王决定助', player, '一臂之力，', player, '获得了', cards);
                                            player.say('惟贤惟德');
                                        } else {
                                            player.recover();
                                            game.log('单挑王决定助', player, '一臂之力');
                                            player.say('能服于人');
                                        }
                                        event.finish();
                                        'step 8'
                                        var list = ['draw', 'reanxu', 'effect'];
                                        if (player.hasSkill('reanxu')) list.remove('reanxu');
                                        event.get = list.randomGet();
                                        if (event.get == 'reanxu') {
                                            player.addSkill('reanxu');
                                            game.log('单挑女王决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('爷也可以成为单条胜率100%的人辣！');
                                        } else if(event.get=='draw'){
                                            player.draw();
                                            game.log('单挑女王决定助', player, '一臂之力');
                                            player.say('好耶');
                                        } else {
                                            player.logSkill('zhuiyi',player);
                                            player.draw(3);
                                            player.recover();
                                            game.log('单挑女王决定助', player, '一臂之力，',player,'成为了【追忆】的目标');
                                            player.say('你就安心去吧呜呜呜');
                                        }
                                        event.finish();
                                        'step 9'
                                        var list = ['+6', 'yaowu', 'effect'];
                                        if (player.hasSkill('yaowu')) list.remove('yaowu');
                                        if(player.maxHp>=6) list.remove('+6');
                                        event.get = list.randomGet();
                                        if (event.get == 'yaowu') {
                                            player.addSkill('yaowu');
                                            game.log('魔将华雄决定助', player, '一臂之力，', player, '获得了', get.translation('yaowu'));
                                            player.say('好大的酒气啊');
                                        } else if(event.get=='+6'){
                                            player.gainMaxHp(6);
                                            game.log('魔将华雄决定助', player, '一臂之力');
                                            player.say('好舒服啊');
                                        } else {
                                            player.changeHujia(1);
                                            game.log('魔将华雄决定助', player, '一臂之力');
                                            player.say('好起来力');
                                        }
                                        event.finish();
                                        'step 10'
                                        var list = ['+8', 'benghuai','effect'];
                                        if (player.hasSkill('benghuai')) list.remove('benghuai');
                                        if(player.maxHp>=8) list.remove('+8');
                                        if (event.get == 'benghuai') {
                                            player.addSkill('benghuai');
                                            game.log('魔将董卓决定助', player, '一臂之力，', player, '获得了', get.translation('benghuai'));
                                            player.say('爷是不是该减肥了...');
                                        } else if(event.get=='+8'){
                                            player.gainMaxHp(8);
                                            game.log('魔将董卓决定助', player, '一臂之力');
                                            player.say('好舒服啊');
                                        } else {
                                            player.useCard({name:'jiu',isCard:true},player);
                                            game.log('魔将董卓决定助', player, '一臂之力');
                                            player.say('再来...嘿嘿嘿再来一杯');
                                        }
                                        event.finish();
                                        'step 11'
                                        var list = ['+15', 'ranshang', 'effect'];
                                        if (player.hasSkill('ranshang')) list.remove('ranshang');
                                        if (!player.hasSkill('ranshang')) list.remove('effect');
                                        if(player.maxHp>=15) list.remove('+15');
                                        event.get = list.randomGet();
                                        if (event.get == 'ranshang') {
                                            player.addSkill('ranshang');
                                            game.log('魔将兀突骨决定助', player, '一臂之力，', player, '获得了', get.translation('ranshang'));
                                            player.say('坏力，爷怕火力');
                                        } else if (event.get == '+15') {
                                            player.gainMaxHp(15);
                                            game.log('魔将兀突决定助', player, '一臂之力');
                                            player.say('好舒服啊');
                                        } else {
                                            player.addMark('ranshang',1);
                                            player.markSkill('ranshang');
                                            game.log(player, '烧起来了');
                                            player.say('烧，太烧了！');
                                        }
                                        event.finish();
                                        'step 12'
                                        var list = ['gain', 'luanji','effect'];
                                        if (player.hasSkill('luanji')) list.remove('luanji');
                                        event.get = list.randomGet();
                                        if (event.get == 'luanji') {
                                            player.addSkill('luanji');
                                            game.log('高贵的名门决定助', player, '一臂之力，', player, '获得了', get.translation('luanji'));
                                            player.say('箭支充足，尽管取用');
                                        } else if (event.get == 'gain') {
                                            var card1=get.cards()[0];
                                            var suit=get.suit(card1);
                                            var card2 = get.cardPile(function (card) {
                                                return get.suit(card)==suit&&card!=card1;
                                            });
                                            if (!card) {
                                                player.draw(2);
                                                event.finish();
                                            }
                                            player.gain([card1,card2], 'gain2');
                                            game.log('高贵的名门决定助', player, '一臂之力，', player, '获得了', [card1,card2]);
                                            player.say('放箭，狠狠地放箭！');
                                        } else {
                                            player.useCard({name:'wanjian',isCard:true},game.filterPlayer(function(target){
                                                return target!=player;
                                            }));
                                            game.log('高贵的名门决定助', player, '一臂之力');
                                            player.say('全都去SPA');
                                        }
                                        event.finish();
                                        'step 13'
                                        var list = ['tao', 'kurou','effect'];
                                        if (player.hasSkill('kurou')) list.remove('kurou');
                                        event.get = list.randomGet();
                                        if (event.get == 'kurou') {
                                            player.addSkill(event.get);
                                            game.log('盖子决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('苦，狠狠滴苦！');
                                        } else if(event.get=='tao'){
                                            var card;
                                            card = get.cardPile(function (card) {
                                                return card.name == event.get ;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('盖子决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('桃来！');
                                        } else {
                                            player.loseHp();
                                            game.log('盖子决定助', player, '一臂之力，他叫来了公瑾...');
                                            player.say('你别tm鞭笞我啊！');
                                        }
                                        event.finish();
                                        'step 14'
                                        var list = ['zhuge', 'lianying','effect'];
                                        if (player.hasSkill('lianying')) list.remove('lianying');
                                        event.get = list.randomGet();
                                        if (event.get == 'lianying') {
                                            player.addSkill(event.get);
                                            game.log('陆神决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('爷已经获得了陆神の信仰');
                                        } else if(event.get=='zhuge'){
                                            var card;
                                            card = get.cardPile(function (card) {
                                                return card.name == event.get ;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('陆神决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('弩来！');
                                        } else {
                                            var cards=player.getCards('h'),card=cards.randomGet();
                                            cards.remove(card);
                                            player.discard(cards);
                                            game.log('陆神决定助', player, '一臂之力，他开始连了嗷');
                                            if(player.hasSkill('lianying')) player.say('桃闪给爷爬，给爷爬！');
                                            else player.say('坏力，牌没力');
                                        }
                                        event.finish();
                                        'step 15'
                                        var list = ['wuzhong', 'xinzhan','effect'];
                                        if (player.hasSkill('xinzhan')) list.remove('xinzhan');
                                        event.get = list.randomGet();
                                        if (event.get == 'xinzhan') {
                                            player.addSkill(event.get);
                                            game.log('马谡决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('三无中爷来咯');
                                        } else if(event.get=='wuzhong'){
                                            var card;
                                            card = get.cardPile(function (card) {
                                                return card.name == event.get ;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('马谡决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('一个也不错');
                                        } else {
                                            player.logSkill('huilei',player);
                                            var cards=player.getCards('he');
                                            player.discard(cards);
                                            game.log('《',player,'（）斩马谡》');
                                            player.say('是你自己撞上来的啊！');
                                        }
                                        event.finish();
                                        'step 16'
                                        var list = ['+1', 'reyicong','-1'];
                                        if (player.hasSkill('reyicong')) list.remove('reyicong');
                                        event.get = list.randomGet();
                                        if (event.get == 'reyicong') {
                                            player.addSkill(event.get);
                                            game.log('白马（真）决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('爷也是有白马的人了');
                                        } else if(event.get=='+1'){
                                            var card;
                                            card = get.cardPile(function (card) {
                                                return get.subtype(card)=='equip3';
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('白马（真）决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('马来！');
                                        } else {
                                            var card;
                                            card = get.cardPile(function (card) {
                                                return get.subtype(card)=='equip4';
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('白马（真）决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('马来！');
                                        }
                                        event.finish();
                                        'step 17'
                                        var list = ['wanjian', 'kuanggu','effect'];
                                        if (player.hasSkill('kuanggu')) list.remove('kuanggu');
                                        event.get = list.randomGet();
                                        if (event.get == 'kuanggu') {
                                            player.addSkill(event.get);
                                            game.log('胃炎决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('也不看看爷是不是人');
                                        } else if(event.get=='wanjian'){
                                            var card;
                                            card = get.cardPile(function (card) {
                                                return card.name == event.get ;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('胃炎决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('哈哈哈哈哈哈哈');
                                        } else {
                                            var targets=game.filterPlayer(function(target){
                                                return get.distance(player,target)<=1&&target!=player;
                                            });
                                            if(targets.length>0) targets.randomGet().damage(1,player);
                                            game.log('胃炎决定助', player, '一臂之力');
                                            player.say('真是美味啊');
                                        }
                                        event.finish();
                                        'step 18'
                                        var list = ['draw', 'xinjushou','effect'];
                                        if (player.hasSkill('xinjushou')) list.remove('xinjushou');
                                        event.get = list.randomGet();
                                        if (event.get == 'xinjushou') {
                                            player.addSkill(event.get);
                                            game.log('蓝高达决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('守城是我长项');
                                        } else if(event.get=='draw'){
                                            player.draw(3);
                                            game.log('蓝高达决定助', player, '一臂之力');
                                            player.say('白嫖捏');
                                        } else {
                                            player.turnOver();
                                            game.log('蓝高达决定助', player, '一臂之力');
                                            player.say('守城？不足挂齿！');
                                        }
                                        event.finish();
                                        'step 19'
                                        var list = ['renwang', 'yizhong','effect'];
                                        if (player.hasSkill('yizhong')) list.remove('yizhong');
                                        event.get = list.randomGet();
                                        if (event.get == 'yizhong') {
                                            player.addSkill(event.get);
                                            game.log('于禁决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('我先去上个厕所');
                                        } else if(event.get=='renwang'){
                                            var card;
                                            card = get.cardPile(function (card) {
                                                return card.name == event.get ;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('于禁决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('有用，但不完全有用...');
                                        } else {
                                            player.addTempSkill('diaohulishan','roundStart');
                                            game.log('于禁决定助', player, '一臂之力');
                                            player.say('这下真可以上厕所了');
                                        }
                                        event.finish();
                                        'step 20'
                                        var list = ['damage', 'buqu','effect'];
                                        if (player.hasSkill('buqu')) list.remove('buqu');
                                        if(!player.hasSkill('buqu')) list.remove('effect');
                                        event.get = list.randomGet();
                                        if (event.get == 'buqu') {
                                            player.addSkill(event.get);
                                            game.log('绿僵尸决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('谁敢杀我？');
                                        } else if(event.get=='damage'){
                                            player.damage('nosource');
                                            game.log('绿僵尸决定与', player, '同甘共苦');
                                            if(player.hasSkill('buqu')) player.say('我会怕你吗？');
                                            else player.say('别打脸别打脸');
                                        } else {
                                            var cards=player.getExpansions('buqu');
                                            var card;
                                            if(cards.length>0)
                                            {
                                                card=cards.randomGet();
                                                player.loseToDiscardpile(card);
                                                player.syncStorage('buqu');
                                            }
                                            game.log('绿僵尸决定助', player, '一臂之力，他打开作弊器...');
                                            player.say('牌--;命++');
                                        }
                                        event.finish();
                                        'step 21'
                                        var list = ['shan', 'leiji','guidao'];
                                        if (player.hasSkill('leiji')) list.remove('leiji');
                                        if(player.hasSkill('guidao')) list.remove('guidao');
                                        event.get = list.randomGet();
                                        if (event.get == 'leiji') {
                                            player.addSkill(event.get);
                                            game.log('妙脆角决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('“杀我”');
                                        } else if(event.get=='shan'){
                                            var card;
                                            card = get.cardPile(function (card) {
                                                return card.name == event.get ;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('妙脆角决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('闪来！');
                                        } else {
                                            player.addSkill(event.get);
                                            game.log('妙脆角决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('快点，杀我');
                                        }
                                        event.finish();
                                        'step 22'
                                        var list = ['sha', 'zhuge','keji'];
                                        if (player.hasSkill('keji')) list.remove('keji');
                                        event.get = list.randomGet();
                                        if (event.get == 'keji') {
                                            player.addSkill(event.get);
                                            game.log('恐惧魔王决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('只要爷活着，敌人就会感受无边的恐惧！');
                                        } else if(event.get=='zhuge'){
                                            var card;
                                            card = get.cardPile(function (card) {
                                                return card.name == event.get ;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('恐惧魔王决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('弩来！');
                                        } else {
                                            var card;
                                            card = get.cardPile(function (card) {
                                                return card.name == event.get ;
                                            });
                                            if (!card) {
                                                player.draw();
                                                event.finish();
                                            }
                                            player.gain(card, 'gain2');
                                            game.log('恐惧魔王决定助', player, '一臂之力，', player, '获得了', card);
                                            player.say('杀来！');
                                        }
                                        event.finish();
                                        'step 23'
                                        var list = ['damage', 'chengxiang','effect'];
                                        if (player.hasSkill('chengxiang')) list.remove('chengxiang');
                                        event.get = list.randomGet();
                                        if (event.get == 'chengxiang') {
                                            player.addSkill(event.get);
                                            game.log('冲儿决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('冲儿冲儿，看父亲的');
                                        } else if(event.get=='damage'){
                                            player.damage('nosource');
                                            game.log('冲儿决定助', player, '一臂之力，他开始卖血了');
                                            if(player.hasSkill('chengxiang')) player.say('这卖血多是件美事');
                                            else player.say('这卖血...我【称象】呢？');
                                        } else {
                                            player.damage(4,'nosource');
                                            game.log('冲儿决定助', player, '一臂之力，但他发现今天过劫');
                                            player.say('我超，今天又是过什么节啊！');
                                        }
                                        event.finish();
                                        'step 24'
                                        var list = ['jueqing', 'shangshi','effect'];
                                        if (player.hasSkill('jueqing')) list.remove('jueqing');
                                        event.get = list.randomGet();
                                        if (event.get == 'jueqing') {
                                            player.addSkill(event.get);
                                            game.log('村花决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('卖血？谁在卖血？');
                                        } else if(event.get=='shangshi'){
                                            player.addSkill(event.get);
                                            game.log('村花决定助', player, '一臂之力，', player, '获得了', get.translation(event.get));
                                            player.say('生生不息，源源不绝');
                                        } else {
                                            player.chooseToDiscard('h',true);
                                            game.log('村花决定助', player, '一臂之力');
                                            player.say('弃，都可以弃');
                                        }
                                        event.finish();
                                        'step 25'
                                        var list = ['-1', 'hunzi','jiang'];
                                        if (player.hasSkill('jiang')) list.remove('jiang');
                                        if(player.hasSkill('hunzi')||player.hasSkill('reyingzi')||player.hasSkill('yinghun')) list.remove('hunzi');
                                        event.get = list.randomGet();
                                        if (event.get == 'jiang') {
                                            player.addSkill(event.get);
                                            game.log('&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;');
                                            player.say('&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;');
                                        } else if(event.get=='hunzi'){
                                            player.addSkill('reyingzi');
                                            player.addSkill('yinghun');
                                            game.log('&ensp;笨&ensp;&ensp;&ensp;助&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;');
                                            player.say('属于爷的时代，开始了！');
                                        } else {
                                            player.loseMaxHp();
                                            game.log('&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;');
                                            player.say('&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;');
                                        }
                                        event.finish();
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhyiming: {
                            audio: "ext:崩崩崩/audio:2",
                            skillAnimation: true,
                            animationColor: "wood",
                            trigger: {
                                source: "damageEnd",
                            },
                            check: function (event, player) {
                                var att = get.attitude(player, event.player);
                                if (att + 7 <= 0) {
                                    return player.hp > 1 || player.countCards('hs', { name: ['tao', 'jiu', 'bhbenghuaijiejing'] });
                                } else if (att < 0 && player.hp > 1) {
                                    return true;
                                } else {
                                    return false;
                                }
                            },
                            filter: function (event, player) {
                                if (!event.player.storage.bhshoulie || event.player.storage.bhshoulie.length < event.player.hp) return false;
                                return event.player.isAlive();
                            },
                            content: function () {
                                'step 0'
                                player.loseHp();
                                'step 1'
                                event.target = trigger.player;
                                event.cards = event.target.getStorage('bhshoulie');
                                player.gain(event.cards, 'gain2', 'fromStorage');
                                game.log(player, '从', event.target, '的角色卡上获得了“猎”：', event.cards);
                                event.target.storage.bhshoulie = [];
                                //remove(event.cards);
                                player.line(event.target);
                                event.target.syncStorage('bhshoulie');
                                event.target.unmarkSkill('bhshoulie');
                                if (event.target.hp > 0) event.target.loseHp(event.target.hp);
                            },
                            prompt: function (event, player) {
                                return '是否收割' + get.translation(event.player) + '的生命？';
                            },
                        },
                        bhshoulie: {
                            audio: "ext:崩崩崩/audio:2",
                            marktext: "猎",
                            intro: {
                                name: "猎",
                                content: "cards",
                                onunmark: function (storage, player) {
                                    if (storage && storage.length) {
                                        player.$throw(storage, 1000);
                                        game.cardsDiscard(storage);
                                        game.log(storage, '被置入了弃牌堆');
                                        storage.length = 0;
                                    }
                                },
                            },
                            enable: "phaseUse",
                            usable: 1,
                            filter: function (event, player) {
                                return player.countCards('he') > 0;
                            },
                            content: function () {
                                'step 0'
                                player.chooseToDiscard(1, 'he').set('ai', function (card) {
                                    return 7 - get.value(card);
                                });
                                'step 1'
                                if (result.bool) {
                                    player.chooseTarget('选择一名角色获得“猎”', function (card, player, target) {
                                        return target != player;
                                    }, true).set('ai', function (target) {
                                        return 20 - get.attitude(player, target) - target.hp - target.countCards('hs')+(!target.storage.bhshoulie?3:0);
                                    });
                                } else event.finish();
                                'step 2'
                                event.target = result.targets[0];
                                event.card = get.cards()[0];
                                game.cardsGotoOrdering(event.card);
                                player.showCards(event.card);
                                player.line(event.target);
                                if (!event.target.storage.bhshoulie) event.target.storage.bhshoulie = [];
                                event.target.storage.bhshoulie.push(event.card);
                                event.target.markSkill('bhshoulie');
                                event.target.syncStorage('bhshoulie');
                                event.trigger("addCardToStorage");
                                game.log(player, '将', event.card, '置于', event.target, '的角色卡上作为“猎”');
                            },
                            mod: {
                                globalFrom: function (from, to) {
                                    if (to.storage.bhshoulie && to.storage.bhshoulie.length > 0) return -Infinity;
                                },
                            },
                            ai: {
                                order: 9,
                                result: {
                                    player: 4,
                                },
                            },
                            group: "bhshoulie_damage",
                            subSkill: {
                                damage: {
                                    audio: "ext:崩崩崩/audio:1",
                                    trigger: {
                                        global: "damage",
                                    },
                                    frequent: true,
                                    filter: function (event, player) {
                                        if (!event.player.storage.bhshoulie || event.player.storage.bhshoulie.length == 0) return false;
                                        return !event.source || (event.source && event.source != player);
                                    },
                                    content: function () {
                                        'step 0'
                                        event.target = trigger.player;
                                        event.cards = event.target.getStorage('bhshoulie');
                                        event.num = event.cards.length;
                                        player.line(event.target);
                                        player.gain(event.cards, 'gain2', 'fromStorage');
                                        game.log(player, '从', event.target, '的角色卡上获得了“猎”：', event.cards);
                                        event.target.storage.bhshoulie = [];
                                        event.target.syncStorage('bhshoulie');
                                        event.target.unmarkSkill('bhshoulie');
                                        'step 1'
                                        player.draw(event.num);
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhfenshen: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            silent: true,
                            trigger: {
                                player: "useCard",
                            },
                            init: function (player) {
                                player.storage.bhfenshen = [0, true];
                            },
                            intro: {
                                content: function (storage, player) {
                                    if (!player.storage.bhfenshen[1]) return '“焚身”失效中';
                                    return '已使用牌数：' + player.storage.bhfenshen[0];
                                },
                                markcount: function (storage, player) {
                                    if (!player.storage.bhfenshen[1]) return 0;
                                    return player.storage.bhfenshen[0];
                                },
                            },
                            filter: function (event, player) {
                                return player.isBurst() && player.storage.bhfenshen[1];
                            },
                            content: function () {
                                'step 0'
                                player.storage.bhfenshen[0]++;
                                player.syncStorage('bhfenshen');
                                'step 1'
                                if (player.storage.bhfenshen[0] >= 3) {
                                    player.loseHp();
                                    if (player.storage.bhxuewu) player.storage.bhxuewu[0]++;
                                    player.syncStorage('bhxuewu');
                                    player.storage.bhfenshen[0] -= 3;
                                    event.trigger('bhfenshen');
                                }
                            },
                            group: ["bhfenshen_dying", "bhfenshen_lose"],
                            subSkill: {
                                lose: {
                                    audio: 'bhxuewu',
                                    forced: true,
                                    trigger: {
                                        player: "bhfenshen",
                                    },
                                    content: function () { },
                                    sub: true,
                                },
                                dying: {
                                    audio: "bhfenshen",
                                    trigger: {
                                        player: "dying",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.storage.bhfenshen[1];
                                    },
                                    content: function () {
                                        'step 0'
                                        player.storage.bhfenshen[1] = false;
                                        player.storage.bhxuewu[1] = false;
                                        'step 1'
                                        player.recover(1 - player.hp);
                                        if (player.isBurst()) player.unBurst();
                                        player.markSkill('bhfenshen');
                                        player.addSkill('bhfenshen_start');
                                        event.trigger('bhxuewu');
                                    },
                                    sub: true,
                                },
                                start: {
                                    trigger: {
                                        player: "phaseZhunbeiBegin",
                                    },
                                    forced: true,
                                    silent: true,
                                    filter: function (event, player) {
                                        return !player.storage.bhfenshen[1];
                                    },
                                    content: function () {
                                        'step 0'
                                        player.storage.bhfenshen[1] = true;
                                        player.storage.bhxuewu[1] = true;
                                        'step 1'
                                        player.removeSkill('bhfenshen_start');
                                        player.unmarkSkill('bhfenshen');
                                    },
                                    sub: true,
                                    popup: false,
                                },
                            },
                            popup: false,
                        },
                        bhzaiyan: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            filter: function (event, player) {
                                return player.countCards('he') > 0;
                            },
                            content: function () {
                                'step 0'
                                player.chooseToDiscard('he', true).set('ai', function (card) {
                                    return 10 - get.value(card);
                                });
                                'step 1'
                                if (player.isBurst()) {
                                    player.unBurst();
                                    player.unmarkSkill('bhfenshen');
                                    event.trigger('bhxuewu');
                                } else {
                                    player.Burst(Infinity);
                                    player.markSkill('bhfenshen')
                                }
                            },
                            ai: {
                                order: 9,
                                result: {
                                    player: function (player, target) {
                                        if (player.isBurst()) return -1;
                                        var hs = player.countCards('hs', function (card) {
                                            return ['sha'].contains(card.name);
                                        });
                                        if (hs > 1 && game.hasPlayer(function (current) {
                                            return get.attitude(player, current) < 0;
                                        })) return hs;
                                        return 1;
                                    },
                                },
                            },
                            group: ["bhzaiyan_usefire", "bhzaiyan_usesha"],
                            subSkill: {
                                usefire: {
                                    audio: "ext:崩崩崩/audio:1",
                                    prompt: "你可以将一张【杀】当做火【杀】使用",
                                    backup: function (links) {
                                        return {
                                            audio: "bhzaiyan_usefire",
                                        }
                                    },
                                    enable: "chooseToUse",
                                    filter: function (event, player) {
                                        return player.isBurst() && player.countCards('h', { name: 'sha' }) > 0;
                                    },
                                    position: "h",
                                    selectCard: 1,
                                    filterCard: function (card) {
                                        return card.name == 'sha';
                                    },
                                    viewAs: {
                                        name: "sha",
                                        nature: "fire",
                                    },
                                    mod: {
                                        cardUsable: function (card, player) {
                                            if (card.name == 'sha' && card.nature == 'fire' && player.isBurst()) return Infinity;
                                        },
                                    },
                                    ai: {
                                        skillTagFilter: function (player) {
                                            if (!player.countCards('hs', { name: 'sha' })) return false;
                                        },
                                        respondSha: true,
                                        effect: {
                                            player: function (card, player, target) {
                                                if (card.name == 'sha' && card.nature && card.nature == 'fire') {
                                                    return [1, 0.5];
                                                }
                                            },
                                        },
                                        yingbian: function (card, player, targets, viewer) {
                                            if (get.attitude(viewer, player) <= 0) return 0;
                                            var base = 0, hit = false;
                                            if (get.cardtag(card, 'yingbian_hit')) {
                                                hit = true;
                                                if (targets.filter(function (target) {
                                                    return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                                })) base += 5;
                                            }
                                            if (get.cardtag(card, 'yingbian_all')) {
                                                if (game.hasPlayer(function (current) {
                                                    return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                                })) base += 5;
                                            }
                                            if (get.cardtag(card, 'yingbian_damage')) {
                                                if (targets.filter(function (target) {
                                                    return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                                        target: target,
                                                        card: card,
                                                    }, true)) && !target.hasSkillTag('filterDamage', null, {
                                                        player: player,
                                                        card: card,
                                                        jiu: true,
                                                    })
                                                })) base += 5;
                                            }
                                            return base;
                                        },
                                        canLink: function (player, target, card) {
                                            if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                            if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                                target: target,
                                                card: card,
                                            }, true)) return false;
                                            if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                            return true;
                                        },
                                        basic: {
                                            useful: [5, 3, 1],
                                            value: [5, 3, 1],
                                        },
                                        order: function (item, player) {
                                            if (player.hasSkillTag('presha', true, null, true)) return 10;
                                            if (lib.linked.contains(get.nature(item))) {
                                                if (game.hasPlayer(function (current) {
                                                    return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                                }) && game.countPlayer(function (current) {
                                                    return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                                }) > 1) return 3.1;
                                                return 3;
                                            }
                                            return 3.05;
                                        },
                                        result: {
                                            target: function (player, target, card, isLink) {
                                                var eff = function () {
                                                    if (!isLink && player.hasSkill('jiu')) {
                                                        if (!target.hasSkillTag('filterDamage', null, {
                                                            player: player,
                                                            card: card,
                                                            jiu: true,
                                                        })) {
                                                            if (get.attitude(player, target) > 0) {
                                                                return -7;
                                                            }
                                                            else {
                                                                return -4;
                                                            }
                                                        }
                                                        return -0.5;
                                                    }
                                                    return -1.5;
                                                }();
                                                if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                                    target: target,
                                                    card: card,
                                                }, true)) return eff / 1.2;
                                                return eff;
                                            },
                                        },
                                        tag: {
                                            respond: 1,
                                            respondShan: 1,
                                            damage: function (card) {
                                                if (card.nature == 'poison') return;
                                                return 1;
                                            },
                                            natureDamage: function (card) {
                                                if (card.nature) return 1;
                                            },
                                            fireDamage: function (card, nature) {
                                                if (card.nature == 'fire') return 1;
                                            },
                                            thunderDamage: function (card, nature) {
                                                if (card.nature == 'thunder') return 1;
                                            },
                                            poisonDamage: function (card, nature) {
                                                if (card.nature == 'poison') return 1;
                                            },
                                        },
                                    },
                                    sub: true,
                                },
                                usesha: {
                                    audio: "ext:崩崩崩/audio:1",
                                    prompt: "你可以将一张手牌当做【杀】使用或打出",
                                    enable: ["chooseToUse", "chooseToRespond"],
                                    backup: function (links) {
                                        return {
                                            audio: "bhzaiyan_usesha",
                                        }
                                    },
                                    position: "h",
                                    selectCard: 1,
                                    filterCard: true,
                                    filter: function (event, player) {
                                        return player.countCards('h') > 0 && player.isBurst();
                                    },
                                    viewAs: {
                                        name: "sha",
                                    },
                                    ai: {
                                        skillTagFilter: function (player) {
                                            if (!player.countCards('hs')) return false;
                                        },
                                        respondSha: true,
                                        yingbian: function (card, player, targets, viewer) {
                                            if (get.attitude(viewer, player) <= 0) return 0;
                                            var base = 0, hit = false;
                                            if (get.cardtag(card, 'yingbian_hit')) {
                                                hit = true;
                                                if (targets.filter(function (target) {
                                                    return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                                })) base += 5;
                                            }
                                            if (get.cardtag(card, 'yingbian_all')) {
                                                if (game.hasPlayer(function (current) {
                                                    return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                                })) base += 5;
                                            }
                                            if (get.cardtag(card, 'yingbian_damage')) {
                                                if (targets.filter(function (target) {
                                                    return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                                        target: target,
                                                        card: card,
                                                    }, true)) && !target.hasSkillTag('filterDamage', null, {
                                                        player: player,
                                                        card: card,
                                                        jiu: true,
                                                    })
                                                })) base += 5;
                                            }
                                            return base;
                                        },
                                        canLink: function (player, target, card) {
                                            if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                            if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                                target: target,
                                                card: card,
                                            }, true)) return false;
                                            if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                            return true;
                                        },
                                        basic: {
                                            useful: [5, 3, 1],
                                            value: [5, 3, 1],
                                        },
                                        order: function (item, player) {
                                            if (player.hasSkillTag('presha', true, null, true)) return 10;
                                            if (lib.linked.contains(get.nature(item))) {
                                                if (game.hasPlayer(function (current) {
                                                    return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                                }) && game.countPlayer(function (current) {
                                                    return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                                }) > 1) return 3.1;
                                                return 3;
                                            }
                                            return 3.05;
                                        },
                                        result: {
                                            target: function (player, target, card, isLink) {
                                                var eff = function () {
                                                    if (!isLink && player.hasSkill('jiu')) {
                                                        if (!target.hasSkillTag('filterDamage', null, {
                                                            player: player,
                                                            card: card,
                                                            jiu: true,
                                                        })) {
                                                            if (get.attitude(player, target) > 0) {
                                                                return -7;
                                                            }
                                                            else {
                                                                return -4;
                                                            }
                                                        }
                                                        return -0.5;
                                                    }
                                                    return -1.5;
                                                }();
                                                if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                                    target: target,
                                                    card: card,
                                                }, true)) return eff / 1.2;
                                                return eff;
                                            },
                                        },
                                        tag: {
                                            respond: 1,
                                            respondShan: 1,
                                            damage: function (card) {
                                                if (card.nature == 'poison') return;
                                                return 1;
                                            },
                                            natureDamage: function (card) {
                                                if (card.nature) return 1;
                                            },
                                            fireDamage: function (card, nature) {
                                                if (card.nature == 'fire') return 1;
                                            },
                                            thunderDamage: function (card, nature) {
                                                if (card.nature == 'thunder') return 1;
                                            },
                                            poisonDamage: function (card, nature) {
                                                if (card.nature == 'poison') return 1;
                                            },
                                        },
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhxuewu: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                source: "damage",
                            },
                            init: function (player) {
                                player.storage.bhxuewu = [0, true];
                            },
                            mark: true,
                            intro: {
                                content: function (storage, player) {
                                    if (!player.storage.bhxuewu[1]) return '“血舞”失效中';
                                    var str = '血舞计数：';
                                    str += player.storage.bhxuewu[0];
                                    return str;
                                },
                                markcount: function (storage, player) {
                                    if (!player.storage.bhxuewu[1]) return 0;
                                    return player.storage.bhxuewu[0];
                                },
                            },
                            frequent: true,
                            filter: function (event, player) {
                                return player.isBurst() && player.storage.bhxuewu[1];
                            },
                            content: function () {
                                player.storage.bhxuewu[0] += trigger.num;
                                player.syncStorage('bhxuewu');
                            },
                            group: "bhxuewu_end",
                            subSkill: {
                                end: {
                                    audio: "bhxuewu",
                                    trigger: {
                                        player: "bhxuewu",
                                    },
                                    frequent: true,
                                    content: function () {
                                        'step 0'
                                        event.num1 = parseInt(player.storage.bhxuewu[0] / 2);
                                        event.num2 = parseInt((player.storage.bhxuewu[0] + 1) / 2);
                                        if (event.num1 > 0) player.recover(event.num1);
                                        player.draw(event.num2);
                                        'step 1'
                                        player.storage.bhxuewu[0] = 0;
                                        player.syncStorage('bhxuewu');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhrenzhe: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            trigger: {
                                player: "useCardAfter",
                            },
                            filter: function (event, player) {
                                return !player.hasSkill('bhrenzhe_im')&&get.tag(event.card,'damage');
                            },
                            content: function () {
                                player.addSkill('bhrenzhe_im');
                                player.markSkill('bhrenzhe');
                            },
                            intro: {
                                name:'忍者',
                                content: function (storage, player) {
                                    return '失效中';
                                },
                                markcount:function(){
                                    return 0;
                                },
                            },
                            mod: {
                                targetEnabled: function (card, player, target) {
                                    if (!target.hasSkill('bhrenzhe_im') && player != target) return false;
                                },
                            },
                            group: "bhrenzhe_zhunbei",
                            subSkill: {
                                zhunbei: {
                                    forced:true,
                                    trigger:{
                                        player:'phaseZhunbei',
                                    },
                                    content:function(){
                                        'step 0'
                                        player.chooseControlList(['视为使用无距离限制的刺【杀】','重置〖忍者〗']).set('prompt','请选择一项执行').set('ai',function(){
                                            if(game.hasPlayer(function(current){
                                                return get.attitude(player,current)<0&&current.hp<=2;
                                            })) return 0;
                                            var list=[0];
                                            if(player.hasSkill('bhrenzhe_im')) list.push(1);
                                            return list.randomGet();
                                        });
                                        'step 1'
                                        if(result.index==1){
                                            player.removeSkill('bhrenzhe_im');
                                            player.unmarkSkill('bhrenzhe');
                                        } else {
                                            player.chooseUseTarget({name:'sha',nature:"stab",isCard:true},true,false).set('nodistance',true);
                                        }
                                    },
                                    sub:true,
                                    audio:'bhrenzhe',
                                },
                                im:{
                                    forced:true,
                                    charlotte:true,
                                    sub:true,
                                },
                            },
                        },
                        bhwoliu: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            trigger: {
                                player: "useCardToPlayered",
                            },
                            filter: function (event, player) {
                                return (event.card.name == 'sha' || event.card.name == 'juedou') && event.target != player;
                            },
                            content: function () {
                                'step 0'
                                player.draw();
                                player.chooseCard('请弃置一张牌', 'he', true).set('ai', function (card) {
                                    if (get.type(card) != 'basic') {
                                        if (player.countCards('hs', { name: 'sha' }) && game.hasPlayer(function (current) {
                                            return get.attitude(player, current) < 0 && player.canUse('sha', current);
                                        }) && card.name == 'zhuge') return -20;
                                        if (get.tag(event.card, 'damage') && get.type(event.card) == 'trick') {
                                            return 12 - get.value(card);
                                        } else {
                                            return 10 - get.value(card);
                                        }
                                    } else if (card.name == 'sha') {
                                        return 3;
                                    } else {
                                        return 6 - get.value(card);
                                    }
                                });
                                'step 1'
                                event.card = result.cards[0];
                                if (get.type(event.card) != 'basic') {
                                    if (player.hasSkill('bhwaidao')) player.storage.bhwaidao[1]++;
                                    player.syncStorage('bhwaidao');
                                }
                                if ((get.tag(event.card, 'damage') && get.type(event.card) == 'trick') || event.card.name == 'sha') {
                                    if (!player.hasSkill('bhwoliu_sha')) player.addTempSkill('bhwoliu_sha', 'useCardAfter');
                                    player.storage.bhwoliu_sha++;
                                }
                                player.discard(event.card);
                            },
                            subSkill: {
                                sha: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        source: "damageBegin",
                                    },
                                    forced: true,
                                    init: function (player) {
                                        player.storage.bhwoliu_sha = 0;
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhwoliu_sha > 0;
                                    },
                                    content: function () {
                                        trigger.num += player.storage.bhwoliu_sha;
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhwaidao: {
                            derivation:'bhbbenghuai',
                            audio: "ext:崩崩崩/audio:2",
                            trigger: { 
                                global: 'phaseBefore', 
                                player: ['enterGame','bhwaidao'],
                            },
                            init: function (player) {
                                player.storage.bhwaidao = [0,1,2]; 
                                player.storage.bhwaidao_count=[];
                            },
                            direct:true,
                            filter: function (event, player) {
                                if(player.hasSkill('bhwaidao_im')) return false;
                                return (event.name != 'phase' || game.phaseNumber == 0);
                            },
                            content:function(){
                                'step 0'
                                event.list=['体力值','手牌数','体力上限'];
                                event.rlist=[];
                                var count=[0,0,0],list=['体力值','手牌数','体力上限'];
                                for(let i of player.storage.bhwaidao_count){
                                    count[i[0]]++;
                                }
                                if(count[0]>1) list.remove('体力值');
                                if(count[1]>1) list.remove('手牌数');
                                if(count[2]>1) list.remove('体力上限');
                                if(!list.length) player.addSkill('bhwaidao_im');

                                player.chooseControl(list).set('prompt','请选择〖外道〗第一项的内容').set('ai',function(){
                                    if(list.contains('手牌数')) return '手牌数';
                                    else if(list.contains('体力值')) return '体力值';
                                    else return '体力上限';
                                });
                                'step 1'
                                if(result.control=='体力值') event.rlist.push(0);
                                else if(result.control=='手牌数') event.rlist.push(1);
                                else event.rlist.push(2);

                                event.list=['体力值','手牌数','体力上限'];
                                event.list.remove(result.control);
                                var count=[0,0,0],list=['体力值','手牌数','体力上限'];
                                for(let i of player.storage.bhwaidao_count){
                                    count[i[1]]++;
                                }
                                if(count[0]>1) list.remove('体力值');
                                if(count[1]>1) list.remove('手牌数');
                                if(count[2]>1) list.remove('体力上限');
                                list.remove(result.control);

                                for(let i of player.storage.bhwaidao_count){
                                    if(['体力值','手牌数','体力上限'][i[0]]==result.control) list.remove(['体力值','手牌数','体力上限'][i[1]]);
                                }

                                player.chooseControl(list).set('prompt','请选择〖外道〗第二项的内容').set('ai',function(){
                                    if(list.contains('体力上限')) return '体力上限';
                                    else if(list.contains('手牌数')) return '手牌数';
                                    else return '体力值';
                                });
                                'step 2'
                                if(result.control=='体力值') event.rlist.push(0);
                                else if(result.control=='手牌数') event.rlist.push(1);
                                else event.rlist.push(2);
                                event.list.remove(result.control);
                                if(event.list[0]=='体力值') event.rlist.push(0);
                                else if(event.list[0]=='手牌数') event.rlist.push(1);
                                else event.rlist.push(2);

                                player.storage.bhwaidao=event.rlist;
                                player.syncStorage('bhwaidao');
                                player.storage.bhwaidao_count.push(event.rlist);
                            },
                            mark:true,
                            intro: {
                                content: function (storage, player) {
                                    var str='<li>当前顺序：';
                                    for(var i=0;i<3;i++){
                                        if(i>0) str+=', '
                                        str+='['+(i+1)+']';
                                        if(player.storage.bhwaidao[i]==0) str+='体力值';
                                        else if(player.storage.bhwaidao[i]==1) str+='手牌数';
                                        else str+='体力上限';
                                    }
                                    str+='<br><li>已使用过顺序：';
                                    if(player.storage.bhwaidao_count.length==0){
                                        str+='无';
                                        return str;
                                    }
                                    for(let i of player.storage.bhwaidao_count){
                                        str+='<br>';
                                        for(let j of i){
                                            str+='|';
                                            if(j==0) str+='体力值';
                                            else if(j==1) str+='手牌数';
                                            else str+='体力上限';
                                        }
                                    }
                                    return str;
                                },
                                markcount: function(){
                                    return 0;
                                },
                            },
                            group: ["bhwaidao2", "bhwaidao3","bhwaidao4"],
                            subSkill: {
                                im:{
                                    forced:true,
                                    charlotte:true,
                                    sub:true, 
                                },
                            },
                        },
                        bhwaidao2:{
                            audio:'bhwaidao',
                            trigger:{
                                player: ['loseHpAfter', 'damageEnd', 'changeHpAfter', 'recoverAfter','loseMaxHpEnd'],
                            },
                            filter:function(event,player){
                                if(player.hasSkill('bhwaidao_im')) return false;
                                if(player.storage.bhwaidao[0]!=0) return false;
                                return player.hp==2;
                            },
                            content:function(){
                                'step 0'
                                event.list = player.storage.bhwaidao;
                                event.trigger('bhwaidao');
                                'step 1'
                                if(event.list[2]==1) event.num=player.countCards('h');
                                else event.num=player.maxHp;

                                if(event.list[1]==1){
                                    if(player.countCards('h')<4) player.draw(4-player.countCards('h'));
                                } else {
                                    if(player.maxHp<4) player.gainMaxHp(4-player.maxHp);
                                }
                                event.count=0;
                                'step 2'
                                player.chooseToUse('请使用一张牌（剩余'+get.cnNumber(event.num-event.count)+'张）');
                                'step 3'
                                if(result.bool){
                                    event.count++;
                                    if(event.count<event.num) event.goto(2);
                                }
                                'step 4'
                                if(event.count<event.num){
                                    player.logSkill('bhbbenghuai');
                                    player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                        if (player.hp == player.maxHp) return 'baonue_hp';
                                        if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                        return 'baonue_hp';
                                    }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                } else event.finish();
                                'step 5'
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                        },
                        bhwaidao3:{
                            audio:'bhwaidao',
                            trigger:{
                                player: ["loseAfter","gainAfter","drawAfter"],
                                global: ["equipAfter", "addJudgeAfter", "gainAfter", "loseAsyncAfter"],
                            },
                            filter:function(event,player){
                                if(player.hasSkill('bhwaidao_im')) return false;
                                if(player.storage.bhwaidao[0]!=1) return false;
                                return player.countCards('h')==2;
                            },
                            content:function(){
                                'step 0'
                                event.list = player.storage.bhwaidao;
                                event.trigger('bhwaidao');
                                'step 1'
                                if(event.list[2]==0) event.num=player.hp;
                                else event.num=player.maxHp;

                                if(event.list[1]==0){
                                    if(player.hp<4) player.recover(4-player.hp);
                                } else {
                                    if(player.maxHp<4) player.gainMaxHp(4-player.maxHp);
                                }
                                event.count=0;
                                'step 2'
                                player.chooseToUse('请使用一张牌（剩余'+get.cnNumber(event.num-event.count)+'张）');
                                'step 3'
                                if(result.bool){
                                    event.count++;
                                    if(event.count<event.num) event.goto(2);
                                }
                                'step 4'
                                if(event.count<event.num){
                                    player.logSkill('bhbbenghuai');
                                    player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                        if (player.hp == player.maxHp) return 'baonue_hp';
                                        if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                        return 'baonue_hp';
                                    }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                } else event.finish();
                                'step 5'
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                        },
                        bhwaidao4:{
                            audio:'bhwaidao',
                            trigger:{
                                player:['loseMaxHpEnd','gainMaxHpEnd'],
                            },
                            filter:function(event,player){
                                if(player.hasSkill('bhwaidao_im')) return false;
                                if(player.storage.bhwaidao[0]!=2) return false;
                                return player.maxHp==2;
                            },
                            content:function(){
                                'step 0'
                                event.list = player.storage.bhwaidao;
                                event.trigger('bhwaidao');
                                'step 1'
                                if(event.list[2]==0) event.num=player.hp;
                                else event.num=player.countCards('h');

                                if(event.list[1]==0){
                                    if(player.hp<4) player.recover(4-player.hp);
                                } else {
                                    if(player.countCards('h')<4) player.draw(4-player.countCards('h'));
                                }
                                event.count=0;
                                'step 2'
                                player.chooseToUse('请使用一张牌（剩余'+get.cnNumber(event.num-event.count)+'张）');
                                'step 3'
                                if(result.bool){
                                    event.count++;
                                    if(event.count<event.num) event.goto(2);
                                }
                                'step 4'
                                if(event.count<event.num){
                                    player.logSkill('bhbbenghuai');
                                    player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                        if (player.hp == player.maxHp) return 'baonue_hp';
                                        if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                        return 'baonue_hp';
                                    }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                } else event.finish();
                                'step 5'
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                        },
                        bhbbenghuai:{
                            audio: "ext:崩崩崩/audio:2",
                            unique:true,
                        },
                        bhcunxin: {
                            audio: "ext:崩崩崩/audio:1",
                            trigger:{
                                player:['bhcunxin1','bhcunxin2','bhcunxin3'],
                            },
                            filter:function(event,player){
                                var num=1;
                                if(event.name=='bhcunxin2') num=2;
                                else if(event.name=='bhcunxin3') num=3
                                return player.countSP()>=num;
                            },
                            content:function(){
                                'step 0'
                                var num=1;
                                if(trigger.name=='bhcunxin2') num=2;
                                else if(trigger.name=='bhcunxin3') num=3
                                player.loseSP(num);
                                'step 1'
                                player.addTempSkill('bhcunxin_buff','bhcunxin4');
                            },
                            group:'bhcunxin_sp',
                            subSkill:{
                                sp:{
                                    audio: "ext:崩崩崩/audio:1",
                                    trigger:{
                                        player:'bhcunxin0',
                                    },
                                    frequent:true,
                                    content:function(){
                                        player.gainSP();
                                    },
                                },
                            },
                        },
                        bhyanpo:{
                            derivation:'bhshanbeng',
                            audio: "ext:崩崩崩/audio:1",
                            trigger:{
                                player:'useCard',
                            },
                            check:function(event,player){
                                return get.attitude(player,event.targets[0])<0;
                            },
                            logTarget:function(event,player){
                                return event.targets[0];
                            },
                            filter:function(event,player){
                                if(!event.targets.length||event.targets.length>1) return false;
                                return event.card.name=='sha'&&event.targets[0]!=player;
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.targets[0];
                                event.trigger('bhcunxin1');
                                'step 1'
                                if(player.hasSkill('bhcunxin_buff')){
                                    player.logSkill('bhshanbeng',event.target);
                                    trigger.directHit.addArray(game.filterPlayer());
                                    player.discardPlayerCard(event.target,'he',true);
                                    event.trigger('bhcunxin4');
                                    event.finish();
                                } else {
                                    player.discardPlayerCard(event.target,'he',true);
                                }
                                'step 2'
                                event.trigger('bhcunxin0');
                            },
                        },
                        bhshanbeng:{
                            audio: "ext:崩崩崩/audio:1",
                            trigger:{
                                player:'useCard',
                            },
                            check:function(event,player){
                                return get.attitude(player,event.targets[0])<0;
                            },
                            logTarget:function(event,player){
                                return event.targets[0];
                            },
                            filter:function(event,player){
                                if(!event.targets.length||event.targets.length>1) return false;
                                return event.card.name=='sha'&&event.targets[0]!=player;
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.targets[0];
                                'step 1'
                                trigger.directHit.addArray(game.filterPlayer());
                                player.discardPlayerCard(event.target,'he',true);
                            },
                        },
                        bhyunlan:{
                            derivation:'bhkaitian',
                            audio: "bhyanpo",
                            trigger:{
                                player:'useCardAfter',
                            },
                            filter:function(event,player){
                                if(!event.targets.length||event.targets.length>1) return false;
                                return get.type(event.card)=='trick'&&event.targets[0]!=player;
                            },
                            logTarget:function(event,player){
                                return event.targets[0];
                            },
                            check:function(event,player){
                                return get.damageEffect(event.targets[0], player, player) > 0;
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.targets[0];
                                event.name='bhcunxin2';
                                event.trigger('bhcunxin2');
                                'step 1'
                                if(player.hasSkill('bhcunxin_buff')){
                                    player.logSkill('bhkaitian',event.target);
                                    event.target.damage();
                                    event.trigger('bhcunxin4');
                                    event.finish();
                                } else {
                                    event.target.damage();
                                    if(player.countCards('he',function(card){
                                        return get.tag(card,'damage');
                                    })){
                                        player.chooseControl('弃伤害牌','失去体力').set('prompt','请选择一项').set('ai',function(){
                                            if(player.hp>=3||player.hasSkill('bhxianfeng')||player.hasSkill('bhjinhua')) return '失去体力';
                                            return '弃伤害牌';
                                        })
                                    } else event.goto(3);
                                }
                                'step 2'
                                if(result.control=='弃伤害牌'){
                                    player.chooseToDiscard('请弃置一张有伤害标签的牌','he',function(card){
                                        return get.tag(card,'damage');
                                    },true).set('ai',function(card){
                                        return 8-get.value(card);
                                    });
                                    event.goto(4);
                                }
                                'step 3'
                                player.loseHp();
                                'step 4'
                                event.trigger('bhcunxin0');
                            },
                        },
                        bhkaitian:{
                            audio: "ext:崩崩崩/audio:1",
                            trigger:{
                                player:'useCardAfter',
                            },
                            filter:function(event,player){
                                if(!event.targets.length||event.targets.length>1) return false;
                                return get.type(event.card)=='trick'&&event.targets[0]!=player;
                            },
                            logTarget:function(event,player){
                                return event.targets[0];
                            },
                            check:function(event,player){
                                return get.damageEffect(target, player, player) > 0;
                            },
                            content:function(){
                                'step 0'
                                event.target=trigger.targets[0];
                                event.target.damage();
                            },
                        },
                        bhluanlei:{
                            audio: "bhyanpo",
                            derivation:'bhspili',
                            trigger:{
                                source:'damageBegin1',
                            },
                            filter:function(event,player){
                                return event.card&&event.card.name=='sha';
                            },
                            forced:true,
                            content:function(){
                                'step 0'
                                event.name='bhcunxin3';
                                event.trigger('bhcunxin3');
                                'step 1'
                                if(player.hasSkill('bhcunxin_buff')){
                                    player.logSkill('bhspili');
                                    player.draw();
                                    if(trigger.player.getExpansions('bhhudun').length>0||trigger.player.countCards('e',{subtype:'equip2'})){
                                        trigger.num*=2;
                                    }
                                    event.trigger('bhcunxin4');
                                    event.finish();
                                } else {
                                    player.chooseCard('请选择一张牌重铸','he',true).set('ai',function(card){
                                        return 8-get.value(card);
                                    });
                                }
                                'step 2'
                                player.loseToDiscardpile(result.cards);
                                player.draw();
                                if(trigger.player.getExpansions('bhhudun').length>0||trigger.player.countCards('e',{subtype:'equip2'})){
                                    trigger.num++;
                                }
                                'step 3'
                                event.trigger('bhcunxin0');
                            },
                        },
                        bhspili:{
                            audio: "ext:崩崩崩/audio:1",
                            trigger:{
                                source:'damageBegin1',
                            },
                            filter:function(event,player){
                                return event.card&&event.card.name=='sha';
                            },
                            forced:true,
                            content:function(){
                                player.draw();
                                if(trigger.player.getExpansions('bhhudun').length>0||trigger.player.countCards('e',{subtype:'equip2'})){
                                    trigger.num*=2;
                                }
                            },
                        },
                        bhguangdian: {
                            trigger: {
                                player: "gainAfter",
                            },
                            usable: 1,
                            filter: function (event, player) {
                                var players = game.filterPlayer();
                                var num = 1;
                                if (players.length > 5) num = 2;
                                return event.cards.length >= num;
                            },
                            check: function (event, player) {
                                return game.hasPlayer(function (current) {
                                    var att = get.attitude(player, current);
                                    if (att < 0) return false;
                                    if (current.countCards('hs') < 2 && att > 0) return true;
                                    if (current == _status.currentPhase && att > 2) return true;
                                    return false;
                                });
                            },
                            content: function () {
                                'step 0'
                                event.cards = trigger.cards;
                                var players = game.filterPlayer();
                                event.num = 0;
                                if (players.length > 5) event.num = 1;
                                var num = event.cards.length - event.num;
                                player.chooseCardButton('请选择至多' + get.cnNumber(num) + '张牌', [1, num], event.cards);
                                'step 1'
                                if (result.bool && result.links) {
                                    event.cards = result.links;
                                    player.chooseTarget('将' + get.translation(event.cards) + '交给一名其他角色', function (card, player, target) {
                                        return target != player;
                                    }, true).set('ai', function (target) {
                                        if (get.attitude(player, target) < 0) return -10;
                                        return get.attitude(player, target) + 5 - target.countCards('hs');
                                    });
                                } else event.finish();
                                'step 2'
                                event.target = result.targets[0];
                                player.line(event.target);
                                event.target.gain(event.cards, player, 'give');
                                game.log(player, '将', event.cards, '交给了', event.target);
                            },
                        },
                        bhjianwang: {
                            init: function (player) {
                                player.storage.bhjianwang = [];
                                if (!player.node.handcards1.cardMod) {
                                    player.node.handcards1.cardMod = {};
                                }
                                if (!player.node.handcards2.cardMod) {
                                    player.node.handcards2.cardMod = {};
                                }
                                var cardMod = function (card) {
                                    if (get.info(card).multitarget) return;
                                    if (player.storage.bhjianwang.contains(card.name)) return ['健忘', '你好像忘记了什么'];
                                };
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    if (get.type(lib.inpile[i]) == 'trick' || get.type(lib.inpile[i]) == 'basic') list.push(lib.inpile[i]);
                                }
                                var list2 = player.storage.bhjianwang;
                                player.node.handcards1.cardMod.bhjianwang = cardMod;
                                player.node.handcards2.cardMod.bhjianwang = cardMod;
                                player.node.handcards1.classList.add('bhjianwang');
                                player.node.handcards2.classList.add('bhjianwang');
                                var str = '';
                                for (var i = 0; i < list.length; i++) {
                                    if (list2.contains(list[i])) {
                                        str += '.handcards.bhjianwang>.card[data-card-name="';
                                        str += list[i];
                                        str += '"]>*,';
                                    }
                                }
                                str += '.handcards.bhjianwang>.card[data-card-name="benbi"]>*{visibility:hidden !important}';
                                //'.handcards.bhjianwang>.card[list.contains(data-card-name)]:not(*[data-card-multitarget="1"])>*,' +
                                //'.handcards.bhjianwang>.card[data-card-name="sha"]>*{visibility:hidden !important}'
                                if (!ui.css.bhjianwang && str != '') {
                                    ui.css.bhjianwang = lib.init.sheet(str);
                                }
                            },
                            onremove: function (player) {
                                player.node.handcards1.classList.remove('bhjianwang');
                                player.node.handcards2.classList.remove('bhjianwang');
                                delete player.node.handcards1.cardMod.bhjianwang;
                                delete player.node.handcards2.cardMod.bhjianwang;
                            },
                            mark: true,
                            marktext: "健忘",
                            intro: {
                                content: function (storage, player) {
                                    if (!player.storage.bhjianwang.length) return '你的记忆力还很好';
                                    if (player.storage.bhjianwang.length == 1) return '你已经忘记了' + get.translation(player.storage.bhjianwang[0]) + '的牌名';
                                    var list = player.storage.bhjianwang;
                                    var str = '你已经忘记了';
                                    for (var i = 0; i < list.length - 1; i++) {
                                        str += get.translation(list[i]);
                                        str += '、';
                                    }
                                    str += get.translation(list[list.length - 1]);
                                    str += '的牌名';
                                    return str;
                                },
                            },
                            trigger: {
                                player: "phaseJieshu",
                            },
                            forced: true,
                            content: function () {
                                'step 0'
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    if (get.type(lib.inpile[i]) == 'trick' || get.type(lib.inpile[i]) == 'basic') list.push(lib.inpile[i]);
                                }
                                var list2 = player.storage.bhjianwang;
                                for (var i = 0; i < list2.length; i++) {
                                    if (list.contains(list2[i])) list.remove(list2[i]);
                                }
                                if (!list.length) {
                                    player.say('我是谁？我在哪？我要干什么？');
                                    event.finish();
                                }
                                event.name = [];
                                var name;
                                while (event.name.length == 0) {
                                    name = list.randomGet();
                                    if (!list2.contains(name)) event.name.push(name);
                                }
                                'step 1'
                                player.storage.bhjianwang.push(event.name[0]);
                                player.syncStorage('bhjianwang');
                                game.log(player, '忘记了', get.translation(event.name[0]), '这一牌名');
                                'step 2'
                                player.say('我又忘记了什么吗？')
                                if (!player.node.handcards1.cardMod) {
                                    player.node.handcards1.cardMod = {};
                                }
                                if (!player.node.handcards2.cardMod) {
                                    player.node.handcards2.cardMod = {};
                                }
                                var cardMod = function (card) {
                                    if (get.info(card).multitarget) return;
                                    if (player.storage.bhjianwang.contains(card.name)) return ['健忘', '你好像忘记了什么'];
                                };
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    if (get.type(lib.inpile[i]) == 'trick' || get.type(lib.inpile[i]) == 'basic') list.push(lib.inpile[i]);
                                }
                                var list2 = player.storage.bhjianwang;
                                player.node.handcards1.cardMod.bhjianwang = cardMod;
                                player.node.handcards2.cardMod.bhjianwang = cardMod;
                                player.node.handcards1.classList.add('bhjianwang');
                                player.node.handcards2.classList.add('bhjianwang');
                                var str = '';
                                for (var i = 0; i < list.length; i++) {
                                    if (list2.contains(list[i])) {
                                        str += '.handcards.bhjianwang>.card[data-card-name="';
                                        str += list[i];
                                        str += '"]>*,';
                                    }
                                }
                                str += '.handcards.bhjianwang>.card[data-card-name="benbi"]>*{visibility:hidden !important}';
                                //'.handcards.bhjianwang>.card[list.contains(data-card-name)]:not(*[data-card-multitarget="1"])>*,' +
                                //'.handcards.bhjianwang>.card[data-card-name="sha"]>*{visibility:hidden !important}'
                                if (str != '') {
                                    ui.css.bhjianwang = lib.init.sheet(str);
                                }
                                'step 3'
                                event.num = parseInt((player.storage.bhjianwang.length + 1) / 2);
                                event.cards = [];
                                for (var i = 0; i < event.num; i++) {
                                    card = get.cardPile(function (card) {
                                        return player.storage.bhjianwang.contains(card.name) && !event.cards.contains(card);
                                    });
                                    if (!card && !event.cards.contains(card)) player.draw();
                                    else {
                                        player.gain(card, 'gain2');
                                        event.cards.push(card);
                                    }
                                }
                                if(event.cards&&event.cards.length>0) game.log(player, '获得了', event.cards);
                            },
                            mod: {
                                cardEnabled: function (card, player) {
                                    if (player.storage.bhjianwang.contains(card.name)) return false;
                                },
                                ignoredHandcard: function (card, player) {
                                    if (player.storage.bhjianwang.contains(card.name)) {
                                        return true;
                                    }
                                },
                                cardDiscardable: function (card, player, name) {
                                    if (name == 'phaseDiscard' && player.storage.bhjianwang.contains(card.name)) return false;
                                },
                            },
                        },
                        bhchenzao: {
                            group: ["bhchenzao_start"],
                            subSkill: {
                                start: {
                                    silent: true,
                                    trigger: {
                                        global: "phaseJieshuEnd",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.storage.bhchenzao.length > 0;
                                    },
                                    content: function () {
                                        'step 0'
                                        player.unmarkSkill('bhchenzao');
                                        'step 1'
                                        player.storage.bhchenzao = [];
                                        player.syncStorage('bhchenzao');
                                    },
                                    sub: true,
                                    popup: false,
                                },
                            },
                            enable: ["chooseToUse"],
                            init: function (player) {
                                player.storage.bhchenzao = [];
                            },
                            intro: {
                                content: function (storage, player) {
                                    if (player.storage.bhchenzao.length == 0) return '本回合还未发动过';
                                    if (player.storage.bhchenzao.length == 1) return '本回合已使用过' + get.translation(player.storage.bhchenzao[0]);
                                    var str = '本回合已使用过';
                                    for (var i = 0; i < player.storage.bhchenzao.length - 1; i++) {
                                        str += get.translation(player.storage.bhchenzao[i]);
                                        str += '、';
                                    }
                                    str += get.translation(player.storage.bhchenzao[player.storage.bhchenzao.length - 1]);
                                    return str;
                                },
                            },
                            filter: function (event, player) {
                                var bool=false;
                                var hs = player.getCards('hs');
                                if (!hs.length) return false;
                                var list = [];
                                for (var i = 0; i < lib.inpile.length; i++) {
                                    if (player.storage.bhjianwang.contains(lib.inpile[i])) continue;
                                    if (player.storage.bhchenzao.contains(lib.inpile[i])) continue;
                                    if (get.type(lib.inpile[i]) == 'trick' ) list.push(['锦囊', '', lib.inpile[i]]);
                                    if (get.type(lib.inpile[i]) == 'basic' ) list.push(['基本', '', lib.inpile[i]]);
                                }
                                if (!list.length) return false;
                                for (var i = 0; i < hs.length; i++) {
                                    if (player.storage.bhjianwang.contains(hs[i].name)) bool= true;
                                }
                                for (var i of lib.inpile) {
                                    if (i != 'du' && !player.storage.bhjianwang.contains(i) && get.type(i) == 'basic' && event.filterCard({ name: i, cards: hs }, player, event)) return bool;
                                    if (i == 'sha') {
                                        var list = ['fire', 'thunder', 'ice'];
                                        for (var j of list) {
                                            if (event.filterCard({ name: i, nature: j, cards: hs }, player, event)) return bool;
                                        }
                                    }
                                }
                                for (var i of lib.inpile) {
                                    if (get.type(i) == 'trick' && !player.storage.bhjianwang.contains(i) && event.filterCard({ name: i, cards: hs }, player, event)) return bool;
                                }
                                return false;
                            },
                            hiddenCard: function (player, name) {
                                if (name != 'du' && get.type(name) == 'basic' && player.countCards('hse') > 0 && !player.storage.bhjianwang.contains(name)) return true;
                                if (get.type(name) == 'trick' && player.countCards('hse') > 0 && !player.storage.bhjianwang.contains(name)) return true;
                                return false;
                            },
                            chooseButton: {
                                dialog: function (event, player) {
                                    var list = [], hs = player.getCards('hse'), s = player.storage.bhjianwang;
                                    for (var i = 0; i < lib.inpile.length; i++) {
                                        if(s.contains(lib.inpile[i])) continue;
                                        if (player.storage.bhchenzao.contains(lib.inpile[i])) continue;
                                        if (lib.inpile[i] != 'du' && get.type(lib.inpile[i]) == 'basic' && event.filterCard({ name: lib.inpile[i], cards: hs }, player, event)) list.push(['基本', '', lib.inpile[i]]);
                                        if (lib.inpile[i] == 'sha') {
                                            var list2 = ['fire', 'thunder', 'ice'];
                                            for (var j of list2) {
                                                if (event.filterCard({ name: lib.inpile[i], nature: j, cards: hs }, player, event)) list.push(['基本', '', lib.inpile[i], j]);
                                            }
                                        }
                                        if (get.type(lib.inpile[i]) == 'trick' && event.filterCard({ name: lib.inpile[i], cards: hs }, player, event)) list.push(['锦囊', '', lib.inpile[i]]);
                                    }
                                    return ui.create.dialog(get.translation('bhchenzao'), [list, 'vcard']);
                                },
                                check: function (button, player) {
                                    //if (_status.event.getParent().type != 'phase') return 1;
                                    return _status.event.player.getUseValue({ name: button.link[2], nature: button.link[3] });
                                },
                                backup: function (links, player) {
                                    return {
                                        filterCard: function (card, player, target) {
                                            return player.storage.bhjianwang.contains(card.name);
                                        },
                                        selectCard: 1,
                                        position: 'hs',
                                        popname: true,
                                        viewAs: { name: links[0][2],nature:links[0][3] },
                                        onuse: function (result, player) {
                                            'step 0'
                                            if (!player.storage.bhchenzao.contains(result.card.name)) player.storage.bhchenzao.push(result.card.name);
                                            player.syncStorage('bhchenzao');
                                            'step 1'
                                            game.log(player, '虽然记不起来原本的牌名，但是他可以把牌当做', get.translation(result.card.name), '来用');
                                            var str = '不管了，我就记得有张牌叫';
                                            str += get.translation(result.card.name);
                                            str += '来着';
                                            player.say(str);
                                            'step 2'
                                            player.markSkill('bhchenzao');
                                        },
                                    }
                                },
                                prompt: function (links, player) {
                                    return '将一张被忘掉牌名的牌当作' + get.translation(links[0][2]) + '使用';
                                },
                            },
                            ai: {
                                threaten:1.2,
                                respondSha: true,
                                respondShan: true,
                                save: true,
                                skillTagFilter: function (player) {
                                    return player.countCards('hes')>0;
                                },
                                order: 5.1,
                                result: {
                                    player: function (player) {
                                        if (_status.event.dying) {
                                            return get.attitude(player, _status.event.dying);
                                        }
                                        if (_status.event.type == 'respondShan') return 1;
                                        if (_status.event.type == 'respondSha') return 1;
                                        var cards = player.storage.bhjianwang;
                                        var val = 0, hs = player.getCards('hse');
                                        for (var i of lib.inpile) {
                                            if(cards.contains(i)) return 0;
                                            val += player.getUseValue({ name: i });
                                            for (var j of hs) {
                                                if (val > get.value(j, player)) return val;
                                            }
                                        }
                                        return 0;
                                    },
                                },
                            },
                        },
                        bhshuya: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "damageBegin",
                            },
                            content: function () {
                                'step 0'
                                trigger.cancel();
                                'step 1'
                                player.loseHp();
                                player.chooseTarget('你可以令至多两名角色摸共计两张牌', [1, 2]);
                                'step 2'
                                if (result.bool && result.targets) {
                                    if (result.targets.length == 1) {
                                        if (result.targets[0] != player) player.line(result.targets[0]);
                                        result.targets[0].draw(2);
                                    } else {
                                        if (result.targets[0] != player) player.line(result.targets[0]);
                                        result.targets[0].draw();
                                        if (result.targets[1] != player) player.line(result.targets[1]);
                                        result.targets[1].draw();
                                    }
                                }
                            },
                        },
                        bhyouzi: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "phaseZhunbei",
                            },
                            marktext: "游",
                            intro: {
                                content: function (storage, player) {
                                    return '结束阶段，与' + get.translation(player.storage.bhyouzi_swap[0]) + '交换位置';
                                },
                            },
                            filter: function (event, player) {
                                return game.players.length > 2;
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('选择一名其他角色，与其交换位置', function (card, player, target) {
                                    return target != player;
                                }).set('ai', function (target) {
                                    return get.attitude(player, target);
                                });
                                'step 1'
                                if (result.bool && result.targets) {
                                    game.broadcastAll(function (target1, target2) {
                                        game.swapSeat(target1, target2);
                                    }, player, result.targets[0]);
                                    player.storage.bhyouzi_swap = [result.targets[0]];
                                    player.addTempSkill('bhyouzi_swap');
                                    player.markSkill('bhyouzi');
                                } else event.finish();
                                'step 2'
                                event.trigger('swapSeat');
                            },
                            subSkill: {
                                swap: {
                                    audio: "bhyouzi",
                                    trigger: {
                                        global: "phaseJieshu",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.storage.bhyouzi_swap && player.storage.bhyouzi_swap.length > 0 && player.storage.bhyouzi_swap[0].isAlive();
                                    },
                                    content: function () {
                                        'step 0'
                                        game.broadcastAll(function (target1, target2) {
                                            game.swapSeat(target1, target2);
                                        }, player, player.storage.bhyouzi_swap[0]);
                                        player.unmarkSkill('bhyouzi');
                                        'step 1'
                                        event.trigger('swapSeat');
                                    },
                                    sub: true,
                                },
                                yswap: {
                                    audio: "bhyouzi",
                                    trigger: {
                                        player: "phaseZhunbei",
                                    },
                                    prompt: function (event, player) {
                                        var str = '你可以与';
                                        var players = game.filterPlayer(function (current) {
                                            return current.hasSkill('bhyouzi');
                                        });
                                        if (players.length == 1) str += get.translation(players[0]);
                                        else str += '拥有“游子”技能的一名其他角色';
                                        str += '交换位置';
                                        return str;
                                    },
                                    marktext: "游",
                                    intro: {
                                        content: function (storage, player) {
                                            return '结束阶段，与' + get.translation(player.storage.bhyouzi_swap[0]) + '交换位置';
                                        },
                                    },
                                    filter: function (event, player) {
                                        return game.players.length > 2 && player.countMark('bhyayan') > 0 && game.hasPlayer(function (current) {
                                            return current.hasSkill('bhyouzi');
                                        });
                                    },
                                    content: function () {
                                        'step 0'
                                        var players = game.filterPlayer(function (current) {
                                            return current.hasSkill('bhyouzi');
                                        });
                                        if (players.length == 1) {
                                            event.target = players[0];
                                            event.goto(2);
                                        }
                                        player.chooseTarget('选择一名其他角色，与其交换位置', function (card, player, target) {
                                            return target != player && target.hasSkill('bhyouzi');
                                        }).set('ai', function (target) {
                                            return get.attitude(player, target);
                                        });
                                        'step 1'
                                        if (result.bool && result.targets) {
                                            event.target = result.targets[0];
                                        } else event.finish();
                                        'step 2'
                                        game.broadcastAll(function (target1, target2) {
                                            game.swapSeat(target1, target2);
                                        }, player, event.target);
                                        event.target.storage.bhyouzi_swap = [player];
                                        event.target.addTempSkill('bhyouzi_swap');
                                        event.target.markSkill('bhyouzi');
                                        'step 3'
                                        event.trigger('swapSeat');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhyayan: {
                            audio: "ext:崩崩崩/audio:2",
                            enable: "phaseUse",
                            usable: 1,
                            intro: {
                                content: "奥兹在注视着你",
                            },
                            content: function () {
                                'step 0'
                                event.targets = game.filterPlayer(function (target) {
                                    return target.countMark('bhyayan') > 0;
                                });
                                var list = [];
                                if (event.targets.length == 1) {
                                    list.push('移动');
                                    list.push('移去');
                                } else event.goto(3);
                                player.chooseControl(list).set('prompt', '对鸦眼进行操作').set('ai', function () {
                                    if (game.hasPlayer(function (target) {
                                        return get.attitude(player, target) > 0;
                                    })) return '移动';
                                    else return '移去';
                                });
                                'step 1'
                                if (result.control == '移动') {
                                    player.chooseTarget('将“鸦眼”移动至一名其他角色处', function (card, player, target) {
                                        return target != player && !target.countMark('bhyayan');
                                    }).set('ai', function (target) {
                                        return get.attitude(player, target);
                                    });
                                } else {
                                    event.target = event.targets[0];
                                    event.target.removeMark('bhyayan');
                                    event.target.unmarkSkill('bhyayan');
                                    event.target.removeSkill('bhyouzi_yswap');
                                    player.line(event.target);
                                    event.finish();
                                }
                                'step 2'
                                if (result.bool && result.targets) {
                                    event.target = result.targets[0];
                                    event.targets[0].removeMark('bhyayan');
                                    event.targets[0].unmarkSkill('bhyayan');
                                    event.targets[0].removeSkill('bhyouzi_yswap');
                                    event.targets[0].line(event.target);
                                    event.target.addMark('bhyayan');
                                    event.target.addSkill('bhyouzi_yswap');
                                    event.target.markSkill('bhyayan');
                                    event.finish();
                                }
                                'step 3'
                                player.chooseTarget('选择一名其他角色获得“鸦眼”', function (card, player, target) {
                                    return target != player && !target.countMark('bhyayan');
                                }).set('ai', function (target) {
                                    return get.attitude(player, target);
                                });
                                'step 4'
                                if (result.bool && result.targets) {
                                    event.target = result.targets[0];
                                    event.target.addMark('bhyayan');
                                    event.target.addSkill('bhyouzi_yswap');
                                    event.target.markSkill('bhyayan');
                                    player.line(event.target);
                                }
                            },
                            ai: {
                                order: 5,
                                result: {
                                    player: 4,
                                },
                            },
                            group: "bhyayan_draw",
                            subSkill: {
                                draw: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        global: "swapSeat",
                                    },
                                    filter: function (event, player) {
                                        return player.storage.bhyouzi_swap && player.storage.bhyouzi_swap.length > 0 && player.storage.bhyouzi_swap[0].countMark('bhyayan') > 0;
                                    },
                                    check: function (event, player) {
                                        var target = player.storage.bhyouzi_swap[0];
                                        return get.attitude(player, target) > 0;
                                    },
                                    prompt: function (event, player) {
                                        return '你可以与' + get.translation(player.storage.bhyouzi_swap[0]) + '各摸一张牌';
                                    },
                                    content: function () {
                                        'step 0'
                                        event.target = player.storage.bhyouzi_swap[0];
                                        player.line(event.target);
                                        player.draw();
                                        event.target.draw();
                                        'step 1'
                                        player.chooseBool('是否移去' + get.translation(event.target) + '的“鸦眼”？').set('ai', function () {
                                            return get.attitude(player, target) < 0;
                                        });
                                        'step 2'
                                        if (result.bool) {
                                            event.target.removeMark('bhyayan');
                                            event.target.unmarkSkill('bhyayan');
                                        }
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhhundian: {
                            audio: "ext:崩崩崩/audio:1",
                            trigger: {
                                source: "die",
                                player: "phaseDrawBegin2",
                            },
                            forced: true,
                            preHidden: true,
                            filter: function (event, player) {
                                return (!event.numFixed || event.source == player) && player.isBurst();
                            },
                            content: function () {
                                if (trigger.name == 'die' && player.countMark('bhfeixue') < 4) player.addMark('bhfeixue', 4 - player.countMark('bhfeixue'));
                                else trigger.num++;
                            },
                            ai: {
                                threaten: 1.5,
                            },
                            group: ["bhhundian_dis", "bhhundian_sha"],
                            subSkill: {
                                sha: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: "useCard",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return event.card.name == 'sha' && player.isBurst();
                                    },
                                    content: function () { },
                                    sub: true,
                                },
                                dis: {
                                    audio: "bhhundian",
                                    trigger: {
                                        player: "phaseDiscardBegin",
                                    },
                                    filter: function (event, player) {
                                        return !player.isBurst();
                                    },
                                    sub: true,
                                    forced: true,
                                    content: function () { },
                                },
                            },
                            mod: {
                                cardUsable: function (card, player, num) {
                                    if (card.name == 'sha' && player.isBurst()) return Infinity;
                                },
                                maxHandcardBase: function (player, num) {
                                    if (!player.isBurst()) return player.maxHp;
                                },
                            },
                        },
                        bhfeixue: {
                            audio: "ext:崩崩崩/audio:1",
                            subSkill: {
                                sou: {
                                    audio: "bhfeixue_use",
                                    trigger: {
                                        source: "damageEnd",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return !player.isBurst() && player.countMark('bhfeixue') < 4;
                                    },
                                    content: function () {
                                        var num = trigger.num;
                                        if (num > 4 - player.countMark('bhfeixue')) num = 4 - player.countMark('bhfeixue');
                                        player.addMark('bhfeixue', num);
                                        player.syncStorage('bhfeixue');
                                    },
                                    sub: true,
                                },
                                use: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: "useCard",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return (event.card.name == 'sha') && !player.isBurst() && player.countMark('bhfeixue') < 4;
                                    },
                                    content: function () {
                                        player.addMark('bhfeixue');
                                        player.syncStorage('bhfeixue');
                                    },
                                    sub: true,
                                },
                                burst: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: "phaseZhunbei",
                                    },
                                    prompt: "你可以进入沸血状态直到“活化”归零",
                                    filter: function (event, player) { return player.countMark('bhfeixue') >= 4 && !player.isBurst(); },
                                    content: function () {
                                        player.Burst(Infinity)
                                    },
                                    sub: true,
                                },
                            },
                            marktext: "沸血",
                            intro: {
                                name: "活化",
                                content: "当前有#个“活化”",
                            },
                            trigger: {
                                player: "damageEnd",
                            },
                            forced: true,
                            filter: function (event, player) {
                                return !player.isBurst() && player.countMark('bhfeixue') < 4;
                            },
                            content: function () {
                                var num = trigger.num;
                                if (num > 4 - player.countMark('bhfeixue')) num = 4 - player.countMark('bhfeixue');
                                player.addMark('bhfeixue', num);
                                player.syncStorage('bhfeixue');
                            },
                            group: ["bhfeixue_burst", "bhfeixue_use", "bhfeixue_sou"],
                        },
                        bhmuguang: {
                            subSkill: {
                                stat: {
                                    onremove: true,
                                    init: function (player) {
                                        player.storage.bhmuguang_stat = 0;
                                    },
                                    sub: true,
                                },
                            },
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: ["useCard"],
                            },
                            filter: function (event, player) {
                                return get.type(event.card) == 'trick';
                            },
                            content: function () {
                                "step 0"
                                if (!player.hasSkill('bhmuguang_stat')) player.addTempSkill('bhmuguang_stat');
                                game.log(player.isBurst(), '/', player.countMark('bhfeixue') >= Math.max(1, player.storage.bhmuguang_stat), player.storage.bhmuguang_stat);
                                if (player.isBurst()) {
                                    event.num = Math.max(1, player.storage.bhmuguang_stat);
                                    var str = '是否弃置' + get.cnNumber(event.num) + '枚“活化”并执行全部对应效果';
                                    if (player.countMark('bhfeixue') >= event.num) player.chooseBool(str);
                                } else result.bool = false;
                                "step 1"
                                if (result.bool) {
                                    if (!player.hasSkill('bhmuguang_stat')) player.addTempSkill('bhmuguang_stat');
                                    player.storage.bhmuguang_stat++;
                                    player.removeMark('bhfeixue', event.num);
                                    player.syncStorage('bhfeixue');
                                    if (player.countMark('bhfeixue') == 0) player.unBurst();
                                    var card = { name: 'sha', isCard: true }
                                    player.chooseUseTarget(card, false);
                                    player.draw();
                                    event.finish();
                                } else player.judge();
                                "step 2"
                                if (result.color == 'black') {
                                    var card = { name: 'sha', isCard: true }
                                    player.chooseUseTarget(card, false);
                                } else player.draw();
                            },
                        },
                        bhaoye: {
                            group: ["bhaoye_judge", "bhaoye_zhunbei"],
                            subSkill: {
                                phase: {
                                    trigger: {
                                        player: "phaseJieshuEnd",
                                    },
                                    direct: true,
                                    content: function () {
                                        'step 0'
                                        if (!player.storage.bhyexing || !player.storage.bhyexing[1]) {
                                            var next = player.phaseDiscard();
                                            event.next.remove(next);
                                            trigger.next.push(next);
                                        }
                                        'step 1'
                                        if (!player.storage.bhyexing || !player.storage.bhyexing[1]) {
                                            var next = player.phaseUse();
                                            event.next.remove(next);
                                            trigger.next.push(next);
                                        }
                                        'step 2'
                                        player.storage.bhyexing[1] = true;
                                        var next = player.phaseDraw();
                                        event.next.remove(next);
                                        trigger.next.push(next);
                                        'step 3'
                                        var next = player.phaseZhunbei();
                                        event.next.remove(next);
                                        trigger.next.push(next);
                                        'step 4'
                                        player.storage.bhaoye[0] = true;
                                        player.removeSkill('bhaoye_phase');
                                    },
                                    sub: true,
                                },
                                skip: {
                                    popup: false,
                                    trigger: {
                                        player: ["phaseZhunbeiBefore", "phaseDrawBefore", "phaseUseBefore", "phaseDiscardBefore", "phaseJieshuBefore"],
                                    },
                                    forced: true,
                                    content: function () {
                                        trigger.cancel();
                                        //game.log(player, '跳过了判定阶段');
                                    },
                                    sub: true,
                                },
                                zhunbei: {
                                    trigger: {
                                        player: "phaseZhunbeiEnd",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.storage.bhaoye[0];
                                    },
                                    content: function () {
                                        player.addTempSkill('bhaoye_skip');
                                    },
                                    sub: true,
                                },
                                judge: {
                                    init: function (player) {
                                        player.disableJudge();
                                    },
                                    popup: false,
                                    trigger: {
                                        player: "phaseJudgeBefore",
                                    },
                                    forced: true,
                                    content: function () {
                                        trigger.cancel();
                                        game.log(player, '跳过了判定阶段');
                                    },
                                    sub: true,
                                },
                            },
                            trigger: {
                                player: "phaseBegin",
                            },
                            init: function (player) {
                                player.storage.bhaoye = [false];
                            },
                            forced: true,
                            content: function () {
                                'step 0'
                                var next = player.phaseJieshu();
                                event.next.remove(next);
                                trigger.next.push(next);
                                'step 1'
                                player.addTempSkill('bhaoye_phase');
                                player.storage.bhyexing[1] = false;
                            },
                        },
                        bhyexing: {
                            group: ["bhyexing_zhunbei", "bhyexing_jieshu"],
                            subSkill: {
                                im: {
                                    sub: true,
                                },
                                lose: {
                                    trigger: {
                                        player: "recoverAfter",
                                    },
                                    direct: true,
                                    content: function () {
                                        'step 0'
                                        if (player.hp < player.storage.bhyexing_lose) player.recover(player.storage.bhyexing_lose - player.hp);
                                        'step 1'
                                        player.removeSkill('bhyexing_lose');
                                    },
                                    sub: true,
                                },
                                zhunbei: {
                                    trigger: {
                                        player: "phaseZhunbei",
                                    },
                                    check: function (event, player) {
                                        return player.storage.bhyexing[0] <= 40;
                                    },
                                    prompt: "是否坚持进行一个清醒的白天（有概率当场猝死）",
                                    filter: function (event, player) {
                                        return player.storage.bhaoye[0];
                                    },
                                    content: function () {
                                        'step 0'
                                        player.storage.bhaoye[0] = false;
                                        player.storage.bhyexing[0] += 10;
                                        'step 1'
                                        var bool = false;
                                        var num = Math.ceil(Math.random() * 100);
                                        bool = (num <= player.storage.bhyexing[0]);
                                        //game.log('!@',num,'|',bool);
                                        if (bool) {
                                            player.say('早知道...就好好休息了...');
                                            game.log(player, '因熬夜而突发猝死');
                                        } else event.finish();
                                        'step 2'
                                        player.storage.bhyexing_lose = parseInt(player.hp / 2);
                                        player.addTempSkill('bhyexing_lose');
                                        player.loseHp(player.hp);
                                        player.loseMaxHp();
                                    },
                                    sub: true,
                                },
                                jieshu: {
                                    trigger: {
                                        player: "phaseJieshu",
                                    },
                                    check: function (event, player) {
                                        return player.storage.bhyexing[0] > 40;
                                    },
                                    prompt: "是否今晚好好睡觉（可以减少猝死率）",
                                    filter: function (event, player) {
                                        return !player.storage.bhyexing[1];
                                    },
                                    content: function () {
                                        'step 0'
                                        player.storage.bhyexing[1] = true;
                                        if (player.storage.bhyexing[0] <= 5) player.storage.bhyexing[0] = 0;
                                        else player.storage.bhyexing[0] -= 5;
                                        'step 1'
                                        player.say('今晚，还是好好睡觉吧');
                                        game.log(player, '决定今晚好好睡觉');
                                    },
                                    sub: true,
                                },
                            },
                            mark: true,
                            init: function (player) {
                                player.storage.bhyexing = [0, false];
                            },
                            intro: {
                                name: "猝死率",
                                content: function (storage, player) {
                                    var str = '<style type="text/css"> .cusi{width:30px;height:50px;margin:0 auto;}</style><class="cusi">';
                                    str += player.storage.bhyexing[0];
                                    str += '%<br>';
                                    if (player.storage.bhyexing[0] == 0) str += '带将军的身体非常健康';
                                    else if (player.storage.bhyexing[0] > 0 && player.storage.bhyexing[0] <= 10) str += '带将军也许要注意休息了';
                                    else if (player.storage.bhyexing[0] > 10 && player.storage.bhyexing[0] <= 20) str += '带将军要注意好好休息';
                                    else if (player.storage.bhyexing[0] > 20 && player.storage.bhyexing[0] <= 30) str += '带将军今天还是先休息吧';
                                    else if (player.storage.bhyexing[0] > 30 && player.storage.bhyexing[0] <= 50) str += '带将军为了身体想想啊';
                                    else if (player.storage.bhyexing[0] > 50 && player.storage.bhyexing[0] <= 75) str += '带将军小命要紧啊';
                                    else if (player.storage.bhyexing[0] > 75) str += '带将军还请自求多福';
                                    return str;
                                },
                            },
                            enable: "phaseUse",
                            filter: function (event, player) {
                                return !player.hasSkill('bhyexing_im');
                            },
                            content: function () {
                                'step 0'
                                player.addTempSkill('bhyexing_im');
                                event.list = ['1:00-2:00', '2:00-3:00', '3:00-4:00', '4:00-5:00', '睡觉'];
                                event.targets = game.filterPlayer();
                                event.targets.remove(player);
                                event.targets.sortBySeat();
                                player.chooseControl(event.list).set('ai', function () {
                                    var list = event.list;
                                    //list.remove('睡觉');
                                    var str = list.randomGet();
                                    while (str == '睡觉')
                                        str = list.randomGet();
                                    return str;
                                }).set('prompt', '请选择行动时间');
                                'step 1'
                                event.index = result.control;
                                if (event.index == '睡觉') event.finish();
                                event.chooseList = [];
                                event.num = 0;
                                'step 2'
                                event.target = event.targets[event.num];
                                event.target.chooseControl(event.list).set('ai', function () {
                                    if (get.attitude(event.target, player) > 0) return '睡觉';
                                    var list = event.list;
                                    var str = list.randomGet();
                                    while (str == '睡觉')
                                        str = list.randomGet();
                                    return str;
                                }).set('prompt', '请选择巡逻时间');
                                'step 3'
                                event.chooseList.push(result.control);
                                event.num++;
                                if (event.num < event.targets.length) event.goto(2);
                                'step 4'
                                event.cards = [];
                                game.log(player, '选择在', event.index, '行动');
                                event.num = 0
                                'step 5'
                                if (event.chooseList[event.num] == '睡觉') game.log(event.targets[event.num], '选择今晚睡大觉');
                                else game.log(event.targets[event.num], '选择在', event.chooseList[event.num], '去巡逻');
                                if (event.chooseList[event.num] != event.index) {
                                    var card = get.cardPile2(function (card) {
                                        return !event.cards.contains(card);
                                    });
                                    event.cards.push(card);
                                    if (card) player.gain(card, 'gain2');
                                    else player.draw();
                                } else {
                                    game.log(player, '被', event.targets[event.num], '逮到了');
                                }
                                'step 6'
                                event.num++;
                                if (event.num < event.targets.length) event.goto(5);
                            },
                            ai: {
                                order: 9,
                                result: {
                                    player: 7,
                                },
                            },
                        },
                        bhlvzhe: {
                            group: 'bhlvzhe_use',
                            subSkill: {
                                use: {
                                    trigger: { target: 'useCardToBefore' },
                                    forced: true,
                                    priority: 15,
                                    filter: function (event, player) {
                                        return (event.card.name == 'bhbenghuaibaofa');
                                    },
                                    content: function () {
                                        trigger.cancel();
                                    },
                                },
                            },
                            trigger: {
                                global: 'useCardAfter'
                            },
                            forced: true,
                            filter: function (event, player) {
                                return (event.card.name == 'bhbenghuaibaofa');
                            },
                            content: function () {
                                'step 0'
                                player.chooseControl('回血', '摸牌').set('prompt', '律者：请选择一项').set('ai', function () {
                                    if (player.hp < player.maxHp) return '回血';
                                    else return '摸牌';
                                });
                                'step 1'
                                if (result.control == '回血') {
                                    player.recover();
                                } else {
                                    player.draw();
                                }
                            },
                            ai: {
                                effect: {
                                    target: function (card, player, target, current) {
                                        if (card.name == 'bhbenghuaibaofa') return 'zerotarget';
                                    }
                                },
                            },
                        },
                        bhanlei: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "useCardAfter",
                            },
                            forced: true,
                            filter: function (event, player) {
                                return event.card.name == 'sha' && event.card.nature && event.card.nature == 'thunder';
                            },
                            content: function () {
                                player.draw();
                            },
                            mod: {
                                cardUsable: function (card) {
                                    if (card.name == 'sha' && card.nature && card.nature == 'thunder') return Infinity;
                                },
                            },
                        },
                        bhcunzhi: {
                            audio: "ext:崩崩崩/audio:1",
                            trigger: {
                                global: "damage",
                            },
                            filter: function (event, player) {
                                if (player.hasSkill('bhcunzhi_im')) return false;
                                return event.source && event.source.isPhaseUsing() && player.countCards('he', { type: 'basic' }) > 0;
                            },
                            silent: true,
                            frequent: true,
                            subSkill: {
                                im: {
                                    charlotte: true,
                                },
                            },
                            content: function (event, player) {
                                'step 0'
                                event.target = trigger.player;
                                player.chooseToDiscard('弃置一张基本牌令' + get.translation(event.target) + '进行判定', 'he', function (card) {
                                    return get.type(card) == 'basic';
                                }).set('ai', function (card) {
                                    return 2 - get.attitude(player, event.target) - get.value(card);
                                });
                                'step 1'
                                if (result.bool) {
                                    player.logSkill('bhcunzhi');
                                    player.addTempSkill('bhcunzhi_im');
                                    player.line(event.target);
                                    event.target.judge();
                                } else event.finish();
                                'step 2'
                                if (result.color == 'red') {
                                    player.draw();
                                    if (player != _status.currentPhase) player.line(_status.currentPhase);
                                    _status.currentPhase.draw();
                                } else {
                                    player.useCard({ name: 'sha', nature: 'thunder', isCard: true }, event.target, false);
                                }
                            },
                        },
                        bhhuntian: {
                            trigger: {
                                player: "phaseZhunbei",
                            },
                            content: function () {
                                'step 0'
                                if (game.hasPlayer(function (target) {
                                    return target.countCards('j') > 0;
                                })) {
                                    player.draw();
                                    event.goto(1);
                                } else {
                                    player.draw(3);
                                    event.goto(6);
                                }
                                'step 1'
                                player.chooseTarget('请选择一名角色，移动其判定区内的牌', function (card, player, target) {
                                    return target.countCards('j') > 0;
                                }, true).set('ai', function (target) {
                                    return get.attitude(player, target);
                                });
                                'step 2'
                                event.target1 = result.targets[0];
                                event.cards = event.target1.getCards('j');
                                player.chooseCardButton([1, Infinity], '选择任意张判定牌进行移动', event.cards, true);
                                'step 3'
                                event.cards = result.links;
                                game.log(event.cards);
                                player.chooseTarget('将判定牌移动至另一名角色的判定区', function (card, player, target) {
                                    var cardname = '';
                                    if (target == event.target1) return false;
                                    for (var i = 0; i < event.cards.length; i++) {
                                        if (event.cards[i].viewAs) {
                                            cardname = event.cards[i].viewAs;
                                        } else {
                                            cardname = event.cards[i].name;
                                        }
                                        if (target.countCards('j', { name: cardname })) return false;
                                    }
                                    return true;
                                }, true).set('ai', function (target) {
                                    return -get.attitude(player, target);
                                });
                                'step 4'
                                event.target2 = result.targets[0];
                                event.target1.lose(event.cards, ui.ordering, 'visible');
                                event.target1.$give(event.cards, event.target2, false);
                                'step 5'
                                var cardname = '';
                                for (var i = 0; i < event.cards.length; i++) {
                                    if (event.cards[i].viewAs) {
                                        cardname = event.cards[i].viewAs;
                                        event.target2.addJudge({ name: cardname }, [event.cards[i]]);
                                    } else {
                                        player.addJudge(event.cards[i]);
                                    }
                                }
                                game.log(player, '将', event.cards, '从', event.target1, '的判定区移动到了', event.target2, '的判定区');
                                event.finish();
                                'step 6'
                                player.chooseCard('将一张手牌作为【闪电】置于你的判定区', 'h', true).set('ai', function (card) {
                                    return 20 - get.value(card);
                                });
                                'step 7'
                                event.cards = result.cards[0];
                                player.useCard({ name: 'shandian' }, player, [event.cards]);
                                game.log(player, '将', event.cards, '作为【闪电】置于了自己的判定区内');
                            },
                        },
                        bhdidong: {
                            enable: "phaseUse",
                            init: function (player) {
                                player.storage.bhdidong = false;
                            },
                            intro: {
                                content: "limited",
                            },
                            unique: true,
                            limited: true,
                            skillAnimation: true,
                            animationStr: "地动",
                            animationColor: "gray",
                            content: function () {
                                'step 0'
                                player.awakenSkill('bhdidong');
                                player.storage.bhdidong = true;
                                event.targets = game.filterPlayer();
                                event.targets.remove(player);
                                event.targets.sortBySeat();
                                player.line(event.targets);
                                event.num = event.targets.length;
                                'step 1'
                                event.target = event.targets[event.targets.length - event.num];
                                event.target.judge();
                                'step 2'
                                if (result.color == 'red') {
                                    if (event.target.countCards('he') > 0) {
                                        event.cards = event.target.getCards('he');
                                        event.target.discard(event.cards);
                                    } else {
                                        event.target.damage('nosource');
                                    }
                                } else {
                                    event.target.turnOver();
                                }
                                'step 3'
                                if (event.num > 1) {
                                    event.num--;
                                    event.goto(1);
                                }
                            },
                            mark: true,
                            ai:{
                                order:8.9,
                                result:{
                                    player:function(player,target){
                                        var targets=game.filterPlayer(function(target){
                                            return get.attitude(player,target)>0&&target.hp<=2&&target.countCards('he')<=4;
                                        });
                                        var targets2=game.filterPlayer(function(target){
                                            return get.attitude(player,target)<0&&target.hp>2&&target.countCards('he')>4;
                                        });
                                        if(targets2.length>targets.length) return 10;
                                        return 0;
                                    },
                                },
                            },
                        },
                        bhguaijie: {
                            trigger: {
                                player: ["chooseToRespondBegin", "chooseToUseBegin"],
                            },
                            filter: function (event, player) {
                                if (player == _status.currentPhase) return false;
                                if (event.responded) return false;
                                if (event.bhguaijie) return false;
                                if (!event.filterCard || (!event.filterCard({ name: 'shan' }, player, event) &&
                                    !event.filterCard({ name: 'sha' }, player, event) &&
                                    !event.filterCard({ name: 'tao' }, player, event) &&
                                    !event.filterCard({ name: 'jiu' }, player, event))) return false;
                                if (event.name == 'chooseToRespond' && !lib.filter.cardRespondable({ name: ['shan', 'sha', 'tao', 'jiu'] }, player, event)) return false;
                                return true;
                            },
                            check: function (event, player) {
                                if (_status.event.dying) {
                                    return get.attitude(player, _status.event.dying) > 0
                                }
                                else return true;
                            },
                            content: function () {
                                "step 0"
                                event.cardname = '';
                                if (trigger.filterCard({ name: 'sha' }, player, trigger)) event.cardname = 'sha';
                                else if (trigger.filterCard({ name: 'shan' }, player, trigger)) event.cardname = 'shan';
                                else if (trigger.filterCard({ name: 'tao' }, player, trigger)) event.cardname = 'tao';
                                else if (trigger.filterCard({ name: 'jiu' }, player, trigger)) event.cardname = 'jiu';
                                trigger.bhguaijie = true;
                                player.judge();
                                "step 1"
                                event.suit = get.suit(result.card);
                                event.num = result.number;
                                event.name = result.card.name;
                                player.judge();
                                "step 2"
                                if (event.suit == get.suit(result.card) || event.num == result.number || event.name == result.card.name) {
                                    trigger.untrigger();
                                    trigger.set('responded', true);
                                    trigger.result = { bool: true, card: { name: event.cardname, isCard: true } }
                                    if (_status.event.dying) player.useCard({ name: event.cardname, isCard: true }, _status.event.dying);
                                }
                            },
                            ai: {
                                respondShan: true,
                                respondSha: true,
                                save: true,
                                effect: {
                                    target: function (card, player, target, effect) {
                                        if (get.tag(card, 'respondShan')) return 0.5;
                                    },
                                },
                            },
                        },
                        bhpiping: {
                            trigger: {
                                global: "phaseEnd",
                            },
                            check: function (event, player) {
                                var targets = game.filterPlayer(function (target) {
                                    return target != player && target != event.target;
                                });
                                var num = 0;
                                if (!targets.length) return true;
                                for (var i = 0; i < targets.length; i++) {
                                    if (get.attitude(player, targets[i]) > 0) num++;
                                    else num--;
                                }
                                return num >= 0;
                            },
                            filter: function (event, player) {
                                return event.player != player && !player.hasSkill('bhpiping_im');
                            },
                            content: function () {
                                'step 0'
                                player.addTempSkill('bhpiping_im', 'roundStart');
                                event.target = trigger.player;
                                event.list = ['好', '坏'];
                                event.targets = game.filterPlayer(function (target) {
                                    return target != player && target != event.target;
                                });
                                event.targets.sortBySeat();
                                event.num = event.targets.length;
                                event.choice = [];
                                player.line(event.targets);
                                player.chooseControl(event.list).set('prompt', '请评价' + get.translation(trigger.player) + '本回合的表现').set('ai', function () {
                                    if (get.attitude(player, event.target) > 0) {
                                        return '好';
                                    } else {
                                        return '坏';
                                    }
                                });
                                'step 1'
                                event.pchoice = result.control;
                                event.choice.push(result.control);
                                if (result.control == '好') player.say('好，很有精神！');
                                else player.say('没有精神，重来！');
                                game.log(player, '对', event.target, '本回合表现的评价是：', result.control);
                                if (!event.targets.length) event.goto(4);
                                'step 2'
                                event.targets[event.targets.length - event.num].chooseControl(event.list).set('prompt', '请评价' + get.translation(trigger.player) + '本回合的表现').set('ai', function () {
                                    if (get.attitude(event.targets[event.targets.length - event.num], event.target) > 0) {
                                        return '好';
                                    } else {
                                        return '坏';
                                    }
                                });
                                'step 3'
                                var target = event.targets[event.targets.length - event.num];
                                event.choice.push(result.control);
                                if (result.control == '好') target.say('好，很有精神！');
                                else target.say('没有精神，重来！');
                                game.log(target, '对', event.target, '本回合表现的评价是：', result.control);
                                'step 4'
                                if (event.num > 1) {
                                    event.num--;
                                    event.goto(2);
                                } else {
                                    var num = 0;
                                    if (event.choice.length) {
                                        for (var i = 0; i < event.choice.length; i++) {
                                            if (event.choice[i] == '好') num++;
                                            else num--;
                                        }
                                    }
                                    //game.log(event.choice.length,'|',num);
                                    if (num > 0) {
                                        event.target.draw(2);
                                        game.log(event.target, '受到好评');
                                        if (event.pchoice == '好') {
                                            player.draw(2);
                                        }
                                        event.finish();
                                    } else if (num < 0) {
                                        event.target.chooseToDiscard(2, 'he', true);
                                        game.log(event.target, '受到痛骂');
                                        if (event.pchoice == '坏') player.draw(2);
                                        event.finish();
                                    } else {
                                        game.log(event.target, '毁誉参半');
                                        player.chooseControl('摸牌', '弃牌', '取消').set('prompt', '你可以令' + get.translation(event.target) + '执行一项');
                                    }
                                }
                                'step 5'
                                if (result.control == '摸牌') {
                                    event.target.draw();
                                } else if (result.control == '弃牌') {
                                    event.target.chooseToDiscard('he', true);
                                }
                                if (player.hasSkill('bhpiping_im')) player.removeSkill('bhpiping_im');
                            },
                            subSkill: {
                                im: {
                                    sub: true,
                                },
                            },
                        },
                        bhkumiao: {
                            trigger: {
                                player: "dieBegin",
                            },
                            check: function (event, player) {
                                return game.hasPlayer(function (target) {
                                    return get.attitude(player, target) > 0;
                                });
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('选择一名其他角色，令其获得“核桃”', function (card, player, target) {
                                    return target != player;
                                }).set('ai', function (target) {
                                    return get.attitude(player, target);
                                });
                                'step 1'
                                if (result.bool) {
                                    event.target = result.targets[0];
                                    player.line(event.target);
                                    event.target.addSkill('bhhetao');
                                    game.log(player, '令', event.target, '获得了技能', '#g【核桃】');
                                }
                            },
                        },
                        bhhetao: {
                            enable: ["chooseToUse", "chooseToRespond"],
                            hiddenCard: function (player, name) {
                                if (!['sha', 'shan', 'tao', 'jiu'].contains(name)) return false;
                                if (player.countCards('hes', { type: 'basic' }) < 2) return false;
                                return true;
                            },
                            filter: function (event, player) {
                                if (player.countCards('hes', { type: 'basic' }) < 2) return false;
                                if (event.filterCard({ name: 'sha' }, player, event) ||
                                    event.filterCard({ name: 'shan' }, player, event) ||
                                    event.filterCard({ name: 'jiu' }, player, event) ||
                                    event.filterCard({ name: 'tao' }, player, event)) {
                                    return player.hasCard(function (card) {
                                        return get.type(card) == 'basic';
                                    }, 'hs');
                                }
                                return false;
                            },
                            chooseButton: {
                                dialog: function (event, player) {
                                    var list = [];
                                    if (event.filterCard({ name: 'sha' }, player, event)) {
                                        list.push(['基本', '', 'sha']);
                                        for (var j of lib.inpile_nature) list.push(['基本', '', 'sha', j]);
                                    }
                                    if (event.filterCard({ name: 'shan' }, player, event)) {
                                        list.push(['基本', '', 'shan']);
                                    }
                                    if (event.filterCard({ name: 'tao' }, player, event)) {
                                        list.push(['基本', '', 'tao']);
                                    }
                                    if (event.filterCard({ name: 'jiu' }, player, event)) {
                                        list.push(['基本', '', 'jiu']);
                                    }
                                    return ui.create.dialog('核桃', [list, 'vcard'], 'hidden');
                                },
                                check: function (button) {
                                    var player = _status.event.player;
                                    var card = { name: button.link[2], nature: button.link[3] };
                                    if (_status.event.getParent().type != 'phase' || game.hasPlayer(function (current) {
                                        return player.canUse(card, current) && get.effect(current, card, player, player) > 0;
                                    })) {
                                        switch (button.link[2]) {
                                            case 'tao': case 'shan': return 5;
                                            case 'jiu': {
                                                if (player.storage.yizan && player.countCards('hs', { type: 'basic' }) > 2) return 3;
                                            };
                                            case 'sha':
                                                if (button.link[3] == 'fire') return 2.95;
                                                else if (button.link[3] == 'thunder' || button.link[3] == 'ice') return 2.92;
                                                else return 2.9;
                                        }
                                    }
                                    return 0;
                                },
                                backup: function (links, player) {
                                    return {
                                        filterCard: function (card, player, target) {
                                            return get.type(card) == 'basic' && card.name != links[0][2];
                                        },
                                        complexCard: true,
                                        selectCard: 2,
                                        check: function (card, player, target) {
                                            if (!ui.selected.cards.length && get.type(card) == 'basic') return 6;
                                            else return 6 - get.value(card);
                                        },
                                        viewAs: { name: links[0][2], nature: links[0][3] },
                                        position: 'hes',
                                        popname: true,
                                    }
                                },
                                prompt: function (links, player) {
                                    var str = '两张基本牌';
                                    return '将' + str + '当做' + get.translation(links[0][3] || '') + get.translation(links[0][2]) + '使用或打出';
                                },
                            },
                            ai: {
                                order: function () {
                                    var player = _status.event.player;
                                    var event = _status.event;
                                    if (event.filterCard({ name: 'jiu' }, player, event) && get.effect(player, { name: 'jiu' }) > 0 && player.storage.yizan && player.countCards('hs', { type: 'basic' }) > 2) {
                                        return 3.3;
                                    }
                                    return 3.1;
                                },
                                skillTagFilter: function (player, tag, arg) {
                                    if (tag == 'fireAttack') return true;
                                    if (!player.storage.yizan && player.countCards('hes') < 2) return false;
                                    if (!player.hasCard(function (card) {
                                        return get.type(card) == 'basic';
                                    }, 'hes')) {
                                        return false;
                                    }
                                },
                                result: {
                                    player: 1,
                                },
                                respondSha: true,
                                respondShan: true,
                                fireAttack: true,
                            },
                        },
                        bhdifang: {
                            enable: ["chooseToUse", "chooseToRespond"],
                            usable: 1,
                            filter: function (event, player) {
                                if (player.countCards('h') < 2) return false;
                                var cards = player.getCards('h');
                                var suitlist = [];
                                var numlist = [];

                                for (var i = 0; i < cards.length; i++) {
                                    if (!suitlist.contains(get.suit(cards[i]))) suitlist.push(get.suit(cards[i]));
                                    if (!numlist.contains(cards[i].number)) numlist.push(cards[i].number);
                                }
                                if (suitlist.length <= 1 || numlist.length <= 1) return false;
                                for (var i = 0; i < cards.length; i++) {
                                    if (event.filterCard && event.filterCard({ name: cards[i].name }, player, event)) return true;
                                }
                                return false;
                            },
                            chooseButton: {
                                dialog: function (event, player) {
                                    var cards = player.getCards('h');
                                    var list = [];
                                    for (var i of cards) {
                                        if (get.type(i) == 'basic' && event.filterCard({ name: i.name }, player, event)) {
                                            list.push(i);
                                        }
                                        if (get.type(i) == 'trick' && event.filterCard({ name: i.name }, player, event)) {
                                            list.push(i)
                                        }
                                    }
                                    return ui.create.dialog('狄方', list);
                                },
                                backup: function (links, player) {
                                    return {
                                        selectCard: 1,
                                        filterCard: function (card, player) {
                                            return get.suit(card) != get.suit(links[0]) && card.number != links[0].number;
                                        },
                                        viewAs: {
                                            name: links[0].name,
                                            nature: links[0].nature,
                                        },
                                        //check: function (card) {},
                                        onuse: function (result, player) {
                                            player.showCards(links);
                                        },
                                    }
                                },
                                prompt: function (links, player) {
                                    return '将一张其他手牌当做' + get.translation(links) + '使用或打出';
                                },
                            },
                        },
                        bhchanglun: {
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            check: function (event, player) {
                                var suits = [];
                                var cards = player.getCards('h');
                                for (var i = 0; i < cards.length; i++) {
                                    if (!suits.contains(get.suit(cards[i]))) suits.push(get.suit(cards[i]));
                                }
                                return suits.length <= 2;
                            },
                            filter: function (event, player) {
                                return player.countCards('h') > 0;
                            },
                            content: function () {
                                'step 0'
                                event.suit = [];
                                var cards = player.getCards('h');
                                for (var i = 0; i < cards.length; i++) {
                                    if (!event.suit.contains(get.suit(cards[i]))) event.suit.push(get.suit(cards[i]));
                                }
                                event.num = event.suit.length;
                                player.chooseToDiscard(event.num, 'hesj').set('ai', function (card) {
                                    if (player.getCards('j') && player.getCards('j').contains(card)) return 12;
                                    else return 7 - get.value(card);
                                });
                                'step 1'
                                if (result.bool && event.num < 4) {
                                    player.draw(4 - event.num);
                                }
                            },
                        },
                        bhanhai: {
                            trigger: {
                                global: ["loseAfter"],
                            },
                            forced: true,
                            filter: function (event, player) {
                                if (player == _status.currentPhase) return false;
                                if (event.type != 'discard') return false;
                                if (!event.cards) return false;
                                var suit = '';
                                for (var i = 0; i < event.cards.length; i++) {
                                    suit = get.suit(event.cards[i]);
                                    if (!player.countCards('h', { suit: suit })) return true;
                                }
                                return false;
                            },
                            content: function () {
                                'step 0'
                                event.cards = trigger.cards;
                                event.num = event.cards.length;
                                event.suit = '';
                                if (trigger.delay == false) game.delay();
                                'step 1'
                                event.card = event.cards[event.cards.length - event.num];
                                event.suit = get.suit(event.card);
                                if (!player.countCards('h', { suit: event.suit })) {
                                    player.gain(event.card, 'gain2', 'log');
                                }
                                'step 2'
                                if (event.num > 1) {
                                    event.num--;
                                    event.goto(1);
                                }
                            },
                        },
                        bhbaquan: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "damageEnd",
                            },
                            filter: function (event, player) {
                                if (!event.source) return false;
                                return true;
                            },
                            content: function () {
                                'step 0'
                                player.draw(Math.max(player.hp, 1));
                                'step 1'
                                if (player.canCompare(trigger.source)) {
                                    player.addTempSkill('bhbaquan_compare');
                                    player.chooseToCompare(trigger.source);
                                } else event.finish();
                                'step 2'
                                if (result.bool) {
                                    player.recover();
                                }
                            },
                            ai: {
                                maixie: true,
                                "maixie_hp": true,
                                threaten: 0.8,
                                effect: {
                                    target: function (card, player, target) {
                                        if (get.tag(card, 'damage')) {
                                            if (player.hasSkillTag('jueqing', false, target)) return [1, -2];
                                            if (!target.hasFriend()) return;
                                            if (target.hp >= 4) return [0.5, get.tag(card, 'damage') * 2];
                                            if (!target.hasSkill('hengsha') && target.hp > 1) return [0.5, get.tag(card, 'damage') * 1.5];
                                            if (target.hp == 3) return [0.5, get.tag(card, 'damage') * 1.5];
                                            if (target.hp == 2) return [1, get.tag(card, 'damage') * 0.5];
                                        }
                                    },
                                },
                            },
                            subSkill: {
                                compare: {
                                    trigger: {
                                        player: ["chooseToCompareAfter", "compareMultipleAfter"],
                                    },
                                    direct: true,
                                    filter: function (event, player) {
                                        if (event.preserve) return false;
                                        if (event.num1 < event.num2) {
                                            return !get.owner(event.card1);
                                        }
                                        else {
                                            return !get.owner(event.card2);
                                        }
                                    },
                                    content: function () {
                                        'step 0'
                                        if (trigger.num1 < trigger.num2) {
                                            player.gain(trigger.card1, 'gain2', 'log');
                                        }
                                        else {
                                            //player.gain(trigger.card2, 'gain2', 'log');
                                        }
                                        'step 1'
                                        player.removeSkill('bhbaquan_compare');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhaizeng: {
                            dutySkill: true,
                            derivation: ["bhexi", "bhpojian", "bhtiancheng"],
                            group: ["bhaizeng_achieve", "bhaizeng_fail"],
                            subSkill: {
                                achieve: {
                                    skillAnimation: true,
                                    animationColor: "gray",
                                    audio: "ext:崩崩崩/audio:1",
                                    trigger: {
                                        global: "phaseBefore",
                                        player: "enterGame",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (event.name == 'phase' && game.phaseNumber != 0) return false;
                                        var targets = game.filterPlayer();
                                        targets.remove(player);
                                        var namelist = ['heixi', 'baixi', 'bhhuanhaimengdie'];
                                        for (var i = 0; i < targets.length; i++) {
                                            if (namelist.contains(targets[i].name)) return true;
                                        }
                                        return false;
                                    },
                                    content: function () {
                                        'step 0'
                                        game.log(player, '成功完成使命');
                                        player.awakenSkill('bhaizeng');
                                        'step 1'
                                        player.storage.bhaizeng = true;
                                        player.addSkill('bhpojian');
                                        game.log(player, '获得了技能', '#g【破茧】');
                                        'step 2'
                                        event.targets = [];
                                        var targets = game.filterPlayer();
                                        targets.remove(player);
                                        var namelist = ['heixi', 'baixi', 'bhhuanhaimengdie'];
                                        for (var i = 0; i < targets.length; i++) {
                                            if (namelist.contains(targets[i].name)) event.targets.push(targets[i]);
                                        }
                                        event.targets.sortBySeat();
                                        event.num = 0;
                                        'step 3'
                                        player.line(event.targets[event.num]);
                                        event.targets[event.num].storage.bhtiancheng = [player];
                                        event.targets[event.num].addSkill('bhtiancheng');
                                        game.log(event.targets[event.num], '获得了技能', '#g【天秤】');
                                        'step 4'
                                        event.num++;
                                        if (event.num < event.targets.length) event.goto(3);
                                    },
                                    sub: true,
                                },
                                fail: {
                                    audio: "ext:崩崩崩/audio:1",
                                    skillAnimation: true,
                                    animationColor: "fire",
                                    trigger: {
                                        global: "phaseBefore",
                                        player: "enterGame",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (event.name == 'phase' && game.phaseNumber != 0) return false;
                                        var targets = game.filterPlayer();
                                        targets.remove(player);
                                        var namelist = ['heixi', 'baixi', 'bhhuanhaimengdie'];
                                        for (var i = 0; i < targets.length; i++) {
                                            if (namelist.contains(targets[i].name)) return false;
                                        }
                                        return true;
                                    },
                                    content: function () {
                                        'step 0'
                                        game.log(player, '使命失败');
                                        player.awakenSkill('bhaizeng');
                                        //player.node.avatar.setBackgroundImage('extension/崩崩崩/image/bhyanyexingyuan2.jpg');
                                        'step 1'
                                        player.addSkill('bhexi');
                                        game.log(player, '获得了技能', '#g【恶戏】');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhexi: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                global: "damageEnd",
                            },
                            filter: function (event, player) {
                                return player.countMark('bhyanye') < 6 && ((event.source && event.source == player) || (event.player == player));
                            },
                            frequent: true,
                            content: function () {
                                if (trigger.num > 6 - player.countMark('bhyanye')) player.addMark('bhyanye', 6 - player.countMark('bhyanye'));
                                else {
                                    player.addMark('bhyanye', trigger.num);
                                    player.markSkill('bhyanye');
                                }
                            },
                            group: "bhexi_draw",
                            subSkill: {
                                draw: {
                                    audio: "ext:崩崩崩/audio:1",
                                    trigger: {
                                        source: "damageBegin2",
                                    },
                                    check: function (event, player) {
                                        return get.attitude(player, event.player) > 0;
                                    },
                                    prompt: function (event, player) {
                                        var str = '是否防止本次伤害并摸';
                                        str += 2 * event.num;
                                        str += '张牌？';
                                        return str;
                                    },
                                    filter: function (event, player) {
                                        return event.num >= event.player.hp;
                                    },
                                    content: function () {
                                        event.num = 2 * trigger.num;
                                        player.draw(event.num);
                                        trigger.cancel();
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhyanye: {
                            audio: "ext:崩崩崩/audio:2",
                            forced: true,
                            trigger: {
                                global: "damageBegin3",
                            },
                            init: function (player) {
                                player.storage.bhyanye = 0;
                            },
                            marktext: "痕",
                            intro: {
                                name: "赤痕",
                                content: "mark",
                            },
                            filter: function (event, player) {
                                if (!event.source || event.source == player) return false;
                                var namelist = ['heixi', 'baixi', 'bhhuanhaimengdie'];
                                if (namelist.contains(event.player.name)) return event.player.hp <= player.hp;
                                return false;
                            },
                            content: function () {
                                'step 0'
                                game.log(player, '替', trigger.player, '承受了伤害');
                                trigger.player.line(player);
                                'step 1'
                                trigger.player = player;
                            },
                            group: "bhyanye_damage",
                            subSkill: {
                                damage: {
                                    audio: "ext:崩崩崩/audio:1",
                                    forced: true,
                                    trigger: {
                                        source: "damageBegin1",
                                    },
                                    filter: function (event, player) {
                                        var namelist = ['heixi', 'baixi', 'bhhuanhaimengdie'];
                                        if (namelist.contains(event.player.name)) return false;
                                        return player.countMark('bhyanye') > 0;
                                    },
                                    content: function () {
                                        'step 0'
                                        event.num = parseInt((player.countMark('bhyanye') + 1) / 2);
                                        trigger.num += event.num;
                                        'step 1'
                                        player.removeMark('bhyanye', player.countMark('bhyanye'));
                                        player.unmarkSkill('bhyanye');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhpojian: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "damageEnd",
                            },
                            frequent: true,
                            content: function () {
                                'step 0'
                                event.num = trigger.num;
                                'step 1'
                                if (player.countMark('bhyanye') >= 6) {
                                    result.control = '摸牌';
                                    event.goto(2);
                                }
                                player.chooseControl('获得“赤痕”', '摸牌').set('ai', function () {
                                    var num = 0;
                                    var namelist = ['heixi', 'baixi', 'bhhuanhaimengdie'];
                                    var targets = game.filterPlayer(function (target) {
                                        return namelist.contains(target.name);
                                    });
                                    if (!targets.length) return '获得“赤痕”';
                                    for (var i = 0; i < targets.length; i++) {
                                        if (get.attitude(player, targets[i]) > 0) num++;
                                        else num--;
                                    }
                                    return num > 0 ? '摸牌' : '获得“赤痕”';
                                });
                                'step 2'
                                var namelist = ['heixi', 'baixi', 'bhhuanhaimengdie'];
                                if (result.control == '摸牌') {
                                    event.targets = game.filterPlayer(function (target) {
                                        return namelist.contains(target.name);
                                    });
                                    player.draw(Math.max(player.maxHp - player.hp, 1));
                                    if (!event.targets.length) event.goto(3);
                                    for (var i = 0; i < event.targets.length; i++) {
                                        player.line(event.targets[i]);
                                        event.targets[i].draw(Math.max(player.maxHp - player.hp, 1));
                                    }
                                } else {
                                    player.draw();
                                    player.addMark('bhyanye');
                                    player.markSkill('bhyanye');
                                }
                                'step 3'
                                event.num--;
                                if (event.num > 0) event.goto(1);
                            },
                        },
                        bhtiancheng: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "phaseDiscardEnd",
                            },
                            check: function (event, player) {
                                return get.attitude(player, player.storage.bhtiancheng[0]) > 0;
                            },
                            filter: function (event, player) {
                                if (!player.storage.bhtiancheng[0].isAlive()) return false;
                                return player.hasHistory('lose', function (evt) {
                                    return evt.type == 'discard' && evt.cards2.filterInD('d').length > 0 && evt.getParent('phaseDiscard') == event;
                                });
                            },
                            content: function () {
                                'step 0'
                                event.target = player.storage.bhtiancheng[0];
                                var cards = [];
                                player.getHistory('lose', function (evt) {
                                    if (evt.type == 'discard' && evt.getParent('phaseDiscard') == trigger) cards.addArray(evt.cards2.filterInD('d'));
                                });
                                player.chooseButton(['天秤：你可以将其中至多两张牌交给' + get.translation(event.target), cards], [1, 2]).set('ai', function (button) {
                                    if (!ui.selected.buttons.length) return get.value(button.link);
                                    else {
                                        if (get.type(button.link) != get.type(ui.selected.buttons[0])) return get.value(button.link) + 4;
                                        else return get.value(button.link);
                                    }
                                });
                                'step 1'
                                if (result.bool) {
                                    event.cards = result.links;
                                    //player.logSkill('bhtiancheng',event.target);
                                    player.line(event.target);
                                    event.target.gain(event.cards, 'gain2');
                                } else event.finish();
                                'step 2'
                                if (event.cards.length == 2 && get.type(event.cards[0]) != get.type(event.cards[1])) event.target.recover();
                            },
                        },
                        bhhuanshe: {
                            audio: "ext:崩崩崩/audio:1",
                            trigger: {
                                player: ["loseHpEnd", "damageEnd", "loseMaxHpEnd"],
                            },
                            forced: true,
                            init: function (player) {
                                if (!player.storage.bhsp) player.storage.bhsp = 0;
                                if (player.hp < 9){
                                    player.gainSP(9-player.hp);
                                    // player.storage.bhsp += (9 - player.hp);
                                    // player.markSkill('bhsp');
                                }
                                //player.syncStorage('bhsp');
                            },
                            priority: 3,
                            content: function () {
                                player.gainSP(trigger.num);
                                // player.addMark('bhsp', trigger.num);
                            },
                            group: ["bhhuanshe_dying", "bhhuanshe_maxhp"],
                            subSkill: {
                                dying: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: "dying",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.countSP()>= 9;
                                    },
                                    content: function () {
                                        'step 0'
                                        event.num = player.countSP();
                                        player.loseSP(event.num);
                                        // player.removeMark('bhsp', event.num);
                                        if (player.hp < 1) player.recover(1 - player.hp);
                                        if (player.maxHp > 8) player.loseMaxHp(player.maxHp - 8);
                                        else if (player.maxHp < 8) player.gainMaxHp(8 - player.maxHp);
                                        'step 1'
                                        if (event.num > 9) player.recover(event.num - 9);
                                    },
                                    sub: true,
                                },
                                maxhp: {
                                    audio: "bhhuanshe_dying",
                                    trigger: {
                                        player: "loseMaxHpBegin",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        if (event.num < player.maxHp) return false;
                                        return player.countSP() >= 9;
                                    },
                                    content: function () {
                                        'step 0'
                                        trigger.cancel();
                                        'step 1'
                                        event.num = player.countSP();
                                        player.loseSP(event.num);
                                        //player.removeMark('bhsp', event.num);
                                        if (player.hp < 1) player.recover(1 - player.hp);
                                        if (player.maxHp > 8) player.loseMaxHp(player.maxHp - 8);
                                        else if (player.maxHp < 8) player.gainMaxHp(8 - player.maxHp);
                                        'step 2'
                                        if (event.num > 9) player.recover(event.num - 9);
                                    },
                                    sub: true,
                                },
                            },
                            ai:{
                                threaten:2.3,
                            },
                        },
                        bhwuxian: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: ["damage", "loseHpEnd", "loseMaxHpEnd", "recoverEnd", "gainMaxHpEnd"],
                            },
                            priority: 2,
                            frequent: true,
                            content: function (event, player) {
                                event.num = Math.min(4, Math.max(1, parseInt(trigger.num / 2)));
                                player.draw(event.num);
                            },
                            ai:{
                                threaten:2.5,
                            },
                        },
                        bhjinhua: {
                            //silent:true,
                            trigger: {
                                global: "damageEnd",
                            },
                            filter: function (event, player) {
                                return event.source && ((event.source == player && event.player != player) || (event.player == player && event.source != player)) && player.countMark('bhsp') >= 2;
                            },
                            check: function (event, player) {
                                if (get.attitude(player, event.player) > 0) return player.maxHp > 8 || player.countSP() >= 11;
                                return player.maxHp > 4 || player.countSP()>= 11;
                            },
                            priority: 2,
                            content: function () {
                                'step 0'
                                if (trigger.source == player) event.target = trigger.player;
                                else event.target = trigger.source;
                                var bannedList = [
                                    'bhjinhua', 'bifa', 'buqu', 'bhbuqu', 'songci', 'funan', 'xinfu_guhuo', 'reguhuo', 'huashen', 'rehuashen', 'old_guhuo', 'shouxi', 'xinpojun', 'taoluan', 'xintaoluan', 'yinbing', 'xinfu_yingshi', 'zhenwei', 'zhengnan', 'xinzhengnan', 'zhoufu',
                                ];
                                var list = event.target.getSkills(null, false, false).filter(function (skill) {
                                    var info = lib.skill[skill];
                                    var _info = skill + '_info'
                                    if (skill == 'benghuai' && player.hasSkill('bhsbenghuai')) return false;
                                    if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                    if (bannedList.contains(skill)) return false;
                                    return info && !info.juexingji && !info.limited && !info.zhuSkill;
                                });
                                var list2 = player.getSkills(null, false, false).filter(function (skill) {
                                    var info = lib.skill[skill];
                                    var _info = skill + '_info'
                                    if (get.translation(_info) == _info || get.translation(skill) == '酒') return false;
                                    if (bannedList.contains(skill)) return false;
                                    return info && !info.juexingji && !info.limited && !info.zhuSkill;
                                });
                                event.list = [];
                                event.list2 = [];
                                for (var i = 0; i < list.length; i++) {
                                    if (!player.hasSkill(list[i])) event.list.push(list[i]);
                                }
                                for (var i = 0; i < list2.length; i++) {
                                    if (!event.target.hasSkill(list2[i])) event.list2.push(list2[i]);
                                }
                                // game.log(list);
                                // game.log(list2);
                                // game.log(event.list);
                                // game.log(event.list2);
                                if (!event.list.length && !event.list2.length) event.finish();
                                else if (event.list.length > 0 && !event.list2.length) {
                                    result.control = '获得技能';
                                } else if (!event.list.length && event.list2.length > 0 && event.target.isAlive()) {
                                    result.control = '给出技能';
                                } else {
                                    player.chooseControl('获得技能', '给出技能', '取消').set('prompt', '进化：请选择一项').set('ai', function () {
                                        var ylist = ['bhhuanshe', 'bhsbenghuai', 'bhwuxian'];
                                        var bool = false;
                                        for (i in ylist) {
                                            if (!player.hasSkill(i) && event.target.hasSkill(i)) bool = true;
                                        }
                                        if (player.hasSkill('bhsbenghuai') && !event.target.hasSkill('bhbenghuai') && !event.target.hasSkill('bhsbenghuai') && (player.maxHp > 4 || player.countSP() >= 9) && get.attitude(player, event.target) < 0) {
                                            return '给出技能';
                                        } else if (bool && (player.maxHp > 8 || player.countSP() >= 11)) {
                                            return '获得技能';
                                        } else if (player.hasSkill('bhwuxian') && event.target.hasSkill('bhhuanshe') && !event.target.hasSkill('bhwuxian')) {
                                            return '给出技能';
                                        } else {
                                            return (player.maxHp > 4 || player.countSP() >= 11) ? '获得技能' : '取消';
                                        }
                                    });
                                }
                                'step 1'
                                event.index = (result.control == '给出技能' ? 1 : 2);
                                if (result.control == '给出技能') {
                                    event.trigger('bhjinhua_give');
                                    player.chooseControl(event.list2).set('prompt', '请选择你想给出的技能').set('ai', function () {
                                        if (get.attitude(player, event.target) < 0 && event.list2.contains('bhsbenghuai')) return 'bhsbenghuai';
                                        else {
                                            var skill = event.list2.randomGet();
                                            while (skill == 'bhsbenghuai') {
                                                skill = event.list2.randomGet();
                                            }
                                            return skill;
                                        }
                                    });
                                } else if (result.control == '获得技能') {
                                    event.trigger('bhjinhua_gain');
                                    player.chooseControl(event.list).set('prompt', '请选择你想获得的技能').set('ai', function () {
                                        var ylist = ['bhhuanshe', 'bhsbenghuai', 'bhwuxian'];
                                        for (i in ylist) {
                                            if (!player.hasSkill(i) && event.list.contains(i)) i;
                                        }
                                        return event.list.randomGet();
                                    });
                                } else {
                                    event.finish();
                                }
                                'step 2'
                                event.skillname = result.control;
                                player.line(event.target);
                                player.loseSP(2);
                                // player.removeMark('bhsp', 2);
                                // player.syncStorage('bhsp');
                                if (event.index == 1) {
                                    player.loseMaxHp(4);
                                    player.removeSkill(event.skillname);
                                    event.target.addSkill(event.skillname);
                                    game.log(player, '失去了技能', '#g【', get.translation(event.skillname), '】');
                                    game.log(player, '令', event.target, '获得了技能', '#g【', get.translation(event.skillname), '】');
                                } else {
                                    player.loseMaxHp(8);
                                    player.addSkill(event.skillname);
                                    game.log(player, '获得了技能', '#g【', get.translation(event.skillname), '】');
                                }
                            },
                            group: ['bhjinhua_give', 'bhjinhua_gain'],
                            subSkill: {
                                give: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: 'bhjinhua_give',
                                    },
                                    forced: true,
                                    content: function () { },
                                },
                                gain: {
                                    audio: "ext:崩崩崩/audio:2",
                                    trigger: {
                                        player: 'bhjinhua_gain',
                                    },
                                    forced: true,
                                    content: function () { },
                                },
                            },
                        },
                        bhsbenghuai: {
                            audio: "ext:崩崩崩/audio:2",
                            trigger: {
                                player: "phaseJieshuBegin",
                            },
                            forced: true,
                            check: function () {
                                return false;
                            },
                            filter: function (event, player) {
                                return !player.isMinHp() && !player.hasSkill('rejiuchi_air') && !player.hasSkill('oljiuchi_air');
                            },
                            content: function () {
                                "step 0"
                                player.chooseControl('baonue_hp', 'baonue_maxHp', function (event, player) {
                                    if (player.hp == player.maxHp) return 'baonue_hp';
                                    if (player.hp < player.maxHp - 1 || player.hp <= 2) return 'baonue_maxHp';
                                    return 'baonue_hp';
                                }).set('prompt', '崩坏：失去1点体力或减1点体力上限');
                                "step 1"
                                if (result.control == 'baonue_hp') {
                                    player.loseHp();
                                }
                                else {
                                    player.loseMaxHp(true);
                                }
                            },
                            ai: {
                                threaten: 0.5,
                                neg: true,
                            },
                        },
                        bhshuangxiang: {
                            trigger: {
                                player: "useCardAfter",
                            },
                            filter: function (event, player) {
                                if (get.type(event.card) != 'equip' || get.subtype(event.card) != 'equip1') return false;
                                return !player.getEquip(7) || !['bhtianehu'].contains(player.getEquip(7).name);
                            },
                            forced: true,
                            content: function () {
                                var card;
                                if (!lib.inpile.contains('bhtianehu')) {
                                    card = game.createCard2('bhtianehu', 'spade', 3);
                                    lib.inpile.push('bhtianehu');
                                }
                                else card = get.cardPile(function (card) {
                                    return card.name == 'bhtianehu';
                                });
                                player.gain(card, 'gain2');
                                player.chooseUseTarget(card, true, 'nopopup');
                            },
                        },
                        bhjiumeng: {
                            forced: true,
                            trigger: {
                                player: "phaseZhunbei",
                            },
                            marktext: "梦",
                            intro: {
                                content: function (storage, player) {
                                    var str = '<li>天鹅湖：';
                                    if (player.storage.bhkuangre_mark[0]) str += '已发动';
                                    else str += '未发动';
                                    str += '<br><li>睡美人：';
                                    if (player.storage.bhkuangre_mark[1]) str += '已发动';
                                    else str += '未发动';
                                    return str;
                                },
                            },
                            mark: true,
                            content: function () {
                                'step 0'
                                if (player.hasSkill('bhjiansheng')) player.removeSkill('bhjiansheng');
                                if (player.hasSkill('bhjiumeng_draw')) player.removeSkill('bhjiumeng_draw');
                                if (player.hasSkill('bhjiumeng_use')) player.removeSkill('bhjiumeng_use');
                                if (player.hasSkill('bhjiumeng_gain')) player.removeSkill('bhjiumeng_gain');
                                player.chooseControl('天鹅湖', '睡美人').set('prompt', '旧梦：请选择一项').set('ai', function () {
                                    if (player.countCards('h', { name: ['sha', 'juedou', 'shunshou', 'guohe', 'huogong'] }) >= 2 || (!player.storage.bhkuangre_mark[0] && player.storage.bhkuangre_mark[1])) return '天鹅湖';
                                    if (player.countCards('h', { name: 'sha' }) == 0 || (player.storage.bhkuangre_mark[0] && !player.storage.bhkuangre_mark[0])) return '睡美人';
                                    return '天鹅湖';
                                });
                                'step 1'
                                game.log(player, '选择了', result.control);
                                if (result.control == '天鹅湖') {
                                    player.addSkill('bhjiansheng');
                                    player.addSkill('bhjiumeng_draw');
                                    player.storage.bhkuangre_mark[0] = true;
                                } else {
                                    player.addSkill('bhjiumeng_use');
                                    player.addSkill('bhjiumeng_gain');
                                    player.storage.bhkuangre_mark[1] = true;
                                }
                            },
                            group: "bhjiumeng_change",
                            subSkill: {
                                change: {
                                    trigger: {
                                        global: "gameDrawAfter",
                                        player: "enterGame",
                                    },
                                    direct: true,
                                    content: function () {
                                        'step 0'
                                        if (game.hasPlayer(function (target) {
                                            return target.name == 'bhlanmeitegong';
                                        })) {
                                            player.chooseBool('旧梦：要回到过去吗，萝莎莉亚？');
                                        } else {
                                            player.removeSkill('bhjiumeng_change');
                                            event.finish();
                                        }
                                        'step 1'
                                        if (result.bool) {
                                            player.reinit('bhkuangrelandiao', 'bhyingtaozhadan', player.maxHp);
                                        }
                                        player.removeSkill('bhjiumeng_change');
                                    },
                                    sub: true,
                                },
                                draw: {
                                    init: function (player) {
                                        player.storage.bhjiuri_draw = player.countCards('h');
                                    },
                                    trigger: {
                                        player: "phaseJieshu",
                                    },
                                    forced: true,
                                    filter: function (event, player) {
                                        return player.countCards('h') != player.storage.bhjiuri_draw;
                                    },
                                    content: function () {
                                        if (player.countCards('h') < player.storage.bhjiuri_draw) player.draw(player.storage.bhjiuri_draw - player.countCards('h'));
                                        else player.chooseToDiscard('h', player.countCards('h') - player.storage.bhjiuri_draw, true);
                                    },
                                    sub: true,
                                },
                                use: {
                                    mod: {
                                        playerEnabled: function (card, player, target) {
                                            if (player != target && player.isPhaseUsing()) return false;
                                        },
                                    },
                                    sub: true,
                                },
                                gain: {
                                    trigger: {
                                        player: "phaseJieshu",
                                    },
                                    forced: true,
                                    content: function () {
                                        'step 0'
                                        player.draw(2);
                                        'step 1'
                                        var card = get.cardPile(function (card) {
                                            return card.name == 'sha';
                                        });
                                        player.gain(card, 'gain2');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhkuangre: {
                            enable: "phaseUse",
                            init: function (player) {
                                player.storage.bhkuangre = false;
                            },
                            intro: {
                                content: "limited",
                            },
                            unique: true,
                            limited: true,
                            skillAnimation: true,
                            animationStr: "狂热",
                            animationColor: "gray",
                            filter: function (event, player) {
                                return player.storage.bhkuangre_mark[0] && player.storage.bhkuangre_mark[1];
                            },
                            content: function () {
                                'step 0'
                                player.awakenSkill('bhkuangre');
                                player.storage.bhkuangre = true;
                                player.unmarkSkill('bhkuangre');
                                if (player.hasSkill('bhjiansheng')) player.removeSkill('bhjiansheng');
                                if (player.hasSkill('bhjiumeng_draw')) player.removeSkill('bhjiumeng_draw');
                                if (player.hasSkill('bhjiumeng_use')) player.removeSkill('bhjiumeng_use');
                                if (player.hasSkill('bhjiumeng_gain')) player.removeSkill('bhjiumeng_gain');
                                'step 1'
                                player.removeSkill('bhjiumeng');
                                player.addSkill('bhjiansheng');
                                player.addSkill('bhkuangre_sha');
                                player.addSkill('bhkuangre_damage')
                            },
                            group: "bhkuangre_mark",
                            subSkill: {
                                sha: {
                                    init: function (player) {
                                        player.storage.bhkuangre_sha = '';
                                    },
                                    prompt: function () {
                                        var player = _status.event.player;
                                        var str = '你可以将一张';
                                        if (player.storage.bhkuangre_sha == '红') str += '红色';
                                        else if (player.storage.bhkuangre_sha == '黑') str += '黑色';
                                        str += '基本牌当做杀使用或打出';
                                        return str;
                                    },
                                    enable: ["chooseToUse", "chooseToRespond"],
                                    filter: function (event, player) {
                                        if (!player.countCards('hes', { type: 'basic' })) return false;
                                        if (player.storage.bhkuangre_sha == '') return true;
                                        else if (player.storage.bhkuangre_sha == '红') return player.countCards('hse', { type: 'basic', color: 'red' });
                                        else return player.countCards('hse', { type: 'basic', color: 'black' });
                                    },
                                    backup: function (links) {
                                        return {
                                            //audio: "bhtianjin",
                                        }
                                    },
                                    position: "hes",
                                    selectCard: 1,
                                    filterCard: function (card, player) {
                                        if (player.storage.bhkuangre_sha == '') return get.type(card) == 'basic';
                                        else if (player.storage.bhkuangre_sha == '红') return get.type(card) == 'basic' && get.color(card) == 'red';
                                        else return get.type(card) == 'basic' && get.color(card) == 'black';
                                    },
                                    viewAs: {
                                        name: "sha",
                                    },
                                    onuse: function (result, player) {
                                        if (get.color(result.cards[0]) == 'red') player.storage.bhkuangre_sha = '黑';
                                        else player.storage.bhkuangre_sha = '红';
                                    },
                                    ai: {
                                        skillTagFilter: function (player) {
                                            if (!player.countCards('hes', { type: 'basic' })) return false;
                                        },
                                        respondSha: true,
                                        yingbian: function (card, player, targets, viewer) {
                                            if (get.attitude(viewer, player) <= 0) return 0;
                                            var base = 0, hit = false;
                                            if (get.cardtag(card, 'yingbian_hit')) {
                                                hit = true;
                                                if (targets.filter(function (target) {
                                                    return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                                })) base += 5;
                                            }
                                            if (get.cardtag(card, 'yingbian_all')) {
                                                if (game.hasPlayer(function (current) {
                                                    return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                                })) base += 5;
                                            }
                                            if (get.cardtag(card, 'yingbian_damage')) {
                                                if (targets.filter(function (target) {
                                                    return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                                        target: target,
                                                        card: card,
                                                    }, true)) && !target.hasSkillTag('filterDamage', null, {
                                                        player: player,
                                                        card: card,
                                                        jiu: true,
                                                    })
                                                })) base += 5;
                                            }
                                            return base;
                                        },
                                        canLink: function (player, target, card) {
                                            if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                            if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                                target: target,
                                                card: card,
                                            }, true)) return false;
                                            if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                            return true;
                                        },
                                        basic: {
                                            useful: [5, 3, 1],
                                            value: [5, 3, 1],
                                        },
                                        order: function (item, player) {
                                            if (player.hasSkillTag('presha', true, null, true)) return 10;
                                            if (lib.linked.contains(get.nature(item))) {
                                                if (game.hasPlayer(function (current) {
                                                    return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                                }) && game.countPlayer(function (current) {
                                                    return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                                }) > 1) return 3.1;
                                                return 3;
                                            }
                                            return 3.05;
                                        },
                                        result: {
                                            target: function (player, target, card, isLink) {
                                                var eff = function () {
                                                    if (!isLink && player.hasSkill('jiu')) {
                                                        if (!target.hasSkillTag('filterDamage', null, {
                                                            player: player,
                                                            card: card,
                                                            jiu: true,
                                                        })) {
                                                            if (get.attitude(player, target) > 0) {
                                                                return -7;
                                                            }
                                                            else {
                                                                return -4;
                                                            }
                                                        }
                                                        return -0.5;
                                                    }
                                                    return -1.5;
                                                }();
                                                if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                                    target: target,
                                                    card: card,
                                                }, true)) return eff / 1.2;
                                                return eff;
                                            },
                                        },
                                        tag: {
                                            respond: 1,
                                            respondShan: 1,
                                            damage: function (card) {
                                                if (card.nature == 'poison') return;
                                                return 1;
                                            },
                                            natureDamage: function (card) {
                                                if (card.nature) return 1;
                                            },
                                            fireDamage: function (card, nature) {
                                                if (card.nature == 'fire') return 1;
                                            },
                                            thunderDamage: function (card, nature) {
                                                if (card.nature == 'thunder') return 1;
                                            },
                                            poisonDamage: function (card, nature) {
                                                if (card.nature == 'poison') return 1;
                                            },
                                        },
                                    },
                                    sub: true,
                                },
                                damage: {
                                    trigger: {
                                        source: "damageEnd",
                                    },
                                    init: function (player) {
                                        player.storage.bhkuangre_damage = '';
                                    },
                                    prompt: function () {
                                        var player = _status.event.player;
                                        var str;
                                        if (player.storage.bhkuangre_damage == '') str = '你可以弃置一张非基本牌，';
                                        else if (player.storage.bhkuangre_damage == '红') str = '你可以弃置一张红色非基本牌，';
                                        else str = '你可以弃置一张黑色非基本牌，';
                                        str += '对受伤角色造成一点伤害';
                                        return str;
                                    },
                                    check: function (event, player) {
                                        return get.attitude(player, event.player) < 0;
                                    },
                                    filter: function (event, player) {
                                        if (!event.card || event.card.name != 'sha' || !event.player.isAlive()) return false;
                                        if (player.storage.bhkuangre_damage == '') return player.countCards('hes', { type: ['trick', 'delay', 'equip'] });
                                        else {
                                            var color;
                                            if (player.storage.bhkuangre_damage == '红') color = 'red';
                                            else color = 'black';
                                            return player.countCards('hes', { color: color, type: ['trick', 'delay', 'equip'] });
                                        }
                                    },
                                    content: function () {
                                        'step 0'
                                        event.target = trigger.player;
                                        var str = '';
                                        if (player.storage.bhkuangre_damage != '') str = player.storage.bhkuangre_damage + '色';
                                        player.chooseToDiscard('hes', '弃置一张' + str + '非基本牌', function (card) {
                                            if (get.type(card) == 'basic') return false;
                                            if (player.storage.bhkuangre_damage == '') return true;
                                            else if (player.storage.bhkuangre_damage == '红') return get.color(card) == 'red';
                                            else return get.color(card) == 'black';
                                        }).set('ai', function (card) {
                                            return 9 - get.value(card);
                                        });
                                        'step 1'
                                        if (result.bool) {
                                            player.line()
                                            event.target.damage();
                                            player.storage.bhkuangre_damage = get.color(result.cards[0]) == 'red' ? '黑' : '红';
                                        }
                                    },
                                    sub: true,
                                },
                                mark: {
                                    init: function (player) {
                                        player.storage.bhkuangre_mark = [false, false];
                                    },
                                    sub: true,
                                },
                            },
                            mark: true,
                        },
                        bhyouxia: {
                            enable: ["chooseToUse", "chooseToRespond"],
                            filter: function (event, player) {
                                if (player == _status.currentPhase) return false;
                                return player.countCards('hs');
                            },
                            viewAs: {
                                name: "sha",
                            },
                            selectCard: 1,
                            filterCard: true,
                            position: "hs",
                            precontent: function () {
                                player.draw();
                            },
                            mod: {
                                attackFrom: function (from, to, distance) {
                                    if (_status.currentPhase != from) return distance - 1;
                                    else return distance;
                                },
                            },
                            ai: {
                                respondSha: true,
                                skillTagFilter: function (player) {
                                    if (!player.countCards('hs') && player == _status.currentPhase) return false;
                                },
                                yingbian: function (card, player, targets, viewer) {
                                    if (get.attitude(viewer, player) <= 0) return 0;
                                    var base = 0, hit = false;
                                    if (get.cardtag(card, 'yingbian_hit')) {
                                        hit = true;
                                        if (targets.filter(function (target) {
                                            return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                        })) base += 5;
                                    }
                                    if (get.cardtag(card, 'yingbian_all')) {
                                        if (game.hasPlayer(function (current) {
                                            return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                        })) base += 5;
                                    }
                                    if (get.cardtag(card, 'yingbian_damage')) {
                                        if (targets.filter(function (target) {
                                            return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                                target: target,
                                                card: card,
                                            }, true)) && !target.hasSkillTag('filterDamage', null, {
                                                player: player,
                                                card: card,
                                                jiu: true,
                                            })
                                        })) base += 5;
                                    }
                                    return base;
                                },
                                canLink: function (player, target, card) {
                                    if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                    if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                        target: target,
                                        card: card,
                                    }, true)) return false;
                                    if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                    return true;
                                },
                                basic: {
                                    useful: [5, 3, 1],
                                    value: [5, 3, 1],
                                },
                                order: function (item, player) {
                                    if (player.hasSkillTag('presha', true, null, true)) return 10;
                                    if (lib.linked.contains(get.nature(item))) {
                                        if (game.hasPlayer(function (current) {
                                            return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                        }) && game.countPlayer(function (current) {
                                            return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                        }) > 1) return 3.1;
                                        return 3;
                                    }
                                    return 3.05;
                                },
                                result: {
                                    target: function (player, target, card, isLink) {
                                        var eff = function () {
                                            if (!isLink && player.hasSkill('jiu')) {
                                                if (!target.hasSkillTag('filterDamage', null, {
                                                    player: player,
                                                    card: card,
                                                    jiu: true,
                                                })) {
                                                    if (get.attitude(player, target) > 0) {
                                                        return -7;
                                                    }
                                                    else {
                                                        return -4;
                                                    }
                                                }
                                                return -0.5;
                                            }
                                            return -1.5;
                                        }();
                                        if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) return eff / 1.2;
                                        return eff;
                                    },
                                },
                                tag: {
                                    respond: 1,
                                    respondShan: 1,
                                    damage: function (card) {
                                        if (card.nature == 'poison') return;
                                        return 1;
                                    },
                                    natureDamage: function (card) {
                                        if (card.nature) return 1;
                                    },
                                    fireDamage: function (card, nature) {
                                        if (card.nature == 'fire') return 1;
                                    },
                                    thunderDamage: function (card, nature) {
                                        if (card.nature == 'thunder') return 1;
                                    },
                                    poisonDamage: function (card, nature) {
                                        if (card.nature == 'poison') return 1;
                                    },
                                },
                            },
                        },
                        bhchenge: {
                            trigger: {
                                global: "phaseJieshu",
                            },
                            direct: true,
                            filter: function (event, player) {
                                return event.player.isAlive() && player.inRange(event.player) && event.player.getStat('damage') &&
                                    lib.filter.targetEnabled({ name: 'sha' }, player, event.player) && player.countCards('h') > 0;
                            },
                            content: function () {
                                'step 0'
                                player.addTempSkill('bhchenge_damage', 'useCardAfter');
                                player.chooseToUse(function (card, player, event) {
                                    if (get.name(card) != 'sha') return false;
                                    return lib.filter.filterCard.apply(this, arguments);
                                }, '惩恶：是否对' + get.translation(trigger.player) + '使用一张杀？').set('logSkill', 'bhchenge').set('complexSelect', true).set('filterTarget', function (card, player, target) {
                                    if (target != _status.event.sourcex && !ui.selected.targets.contains(_status.event.sourcex)) return false;
                                    return lib.filter.targetEnabled.apply(this, arguments);
                                }).set('sourcex', trigger.player);
                                'step 1'
                                player.removeSkill('bhchenge_damage');
                            },
                            group: ["bhchenge_die"],
                            subSkill: {
                                die: {
                                    trigger: {
                                        global: "dieAfter",
                                    },
                                    filter: function (event, player) {
                                        return event.player != player && event.source && event.source.isAlive() && player.isAlive() && event.source != player;
                                    },
                                    prompt: "惩恶：是否视为对凶手使用一张【决斗】？",
                                    check: function (event, player) {
                                        return get.attitude(player, event.source) < 0;
                                    },
                                    content: function () {
                                        player.addTempSkill('bhchenge_damage', 'useCardAfter');
                                        player.useCard({ name: 'juedou', isCard: true }, trigger.source);
                                    },
                                    sub: true,
                                },
                                damage: {
                                    trigger: {
                                        source: "damage",
                                    },
                                    filter: function (event, player) {
                                        // var evt=event.getParent(2);
                                        // if(!evt||!['bhchenge','bhchenge_die'].contains(evt.name)) return false;
                                        return event.player.isAlive() && event.player.countCards('he');
                                    },
                                    prompt: "你可以令受伤角色选择一项：交给你一张牌；或弃置两张牌。",
                                    content: function () {
                                        'step 0'
                                        event.target = trigger.player;
                                        var str='交给' + get.translation(player) + '一张牌';
                                        event.target.chooseControl([str, '弃两张牌']).set('ai',function(){
                                            var att=get.attitude(event.target,player);
                                            if(att>0||(event.target.countCards('h')>1&&event.target.countCards('h')<5)) return str;
                                            else return '弃两张牌';
                                        });
                                        'step 1'
                                        if (result.control == '弃两张牌') {
                                            event.target.chooseToDiscard('he', 2, true).set('ai',function(card){
                                                return 8-get.value(card);
                                            });
                                            player.removeSkill('bhchenge_damage');
                                            event.finish();
                                        } else {
                                            event.target.chooseCard('交给'+get.translation(player)+'一张牌','he', true).set('ai',function(card){
                                                return 8-get.value(card);
                                            });
                                        }
                                        'step 2'
                                        player.gain(result.cards[0], event.target, 'give2');
                                        //player.removeSkill('bhchenge_damage');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhbeichen: {
                            trigger: {
                                player: "useCard",
                            },
                            frequent: true,
                            filter: function (event, player) {
                                return player == _status.currentPhase && event.card.name == 'sha';
                            },
                            init: function (player) {
                                player.storage.bhbeichen = 0;
                            },
                            intro: {
                                content: function (storage, player) {
                                    var str = '本回合已使用过';
                                    str += get.cnNumber(player.storage.bhbeichen);
                                    str += '张杀';
                                    return str;
                                },
                            },
                            content: function () {
                                'step 0'
                                player.storage.bhbeichen++;
                                player.markSkill('bhbeichen');
                                player.addTempSkill('bhbeichen_im');
                                'step 1'
                                if (player.storage.bhbeichen == 2) {
                                    trigger.directHit.addArray(game.filterPlayer());
                                    event.finish();
                                } else if (player.storage.bhbeichen > 2) {
                                    event.num = 0;
                                    event.targets = trigger.targets;
                                    event.targets.sortBySeat();
                                } else event.finish();
                                'step 2'
                                event.target = event.targets[event.num];
                                event.target.chooseToDiscard('弃一张牌，或令' + get.translation(player) + '摸一张牌', 'he').set('ai', function (card) {
                                    return 8 - get.value(card) - get.attitude(event.target, player);
                                });
                                'step 3'
                                if (!result.bool) {
                                    player.draw();
                                }
                                'step 4'
                                event.num++;
                                if (event.num < event.targets.length) event.goto(2);
                            },
                            mod: {
                                cardUsable: function (card, player, num) {
                                    if (card.name == 'sha') {
                                        if (player.hasSkill('bhbeichen_im')) return num + 1;
                                        return num;
                                    }
                                },
                            },
                            subSkill: {
                                im: {
                                    forced:true,
                                    charlotte:true,
                                    onremove: function (player) {
                                        player.storage.bhbeichen = 0;
                                        player.syncStorage('bhbeichen');
                                        player.unmarkSkill('bhbeichen');
                                    },
                                    sub: true,
                                },
                            },
                        },
                        bhbace: {
                            trigger: {
                                player: "phaseZhunbei",
                            },
                            frequent: true,
                            filter: function (event, player) {
                                return player.hp > 0;
                            },
                            content: function () {
                                'step 0'
                                player.chooseTarget('你可以令至多' + get.cnNumber(player.hp) + '名角色各摸一张牌', [1, player.hp]).set('ai', function (target) {
                                    return get.attitude(player, target) > 0;
                                });
                                'step 1'
                                if (result.bool && result.targets.length) {
                                    event.targets = result.targets;
                                    event.targets.sortBySeat();
                                    event.num = 0;
                                    player.line(event.targets);
                                } else event.finish();
                                'step 2'
                                event.target = event.targets[event.num];
                                event.target.draw();
                                'step 3'
                                event.num++;
                                if (event.num < event.targets.length) event.goto(2);
                                else event.num = 0;
                                event.addnum=0;
                                'step 4'
                                event.target = event.targets[event.num];
                                if(event.target.countCards('h')>event.target.hp){ 
                                    event.target.chooseToDiscard('请弃置一张牌','he', true).set('ai',function(card){
                                        var val;
                                        val-=get.value(card);
                                        if(val<-8) return -8;
                                        val+=get.number(card);
                                        return val;
                                    });
                                } else {
                                    event.target.chooseToDiscard('你可以弃置一张牌','he').set('ai',function(card){
                                        var val;
                                        val-=get.value(card);
                                        if(val<-8) return -8;
                                        val+=get.number(card);
                                        return val;
                                    });
                                }
                                'step 5'
                                if(result.bool){
                                    event.addnum+=get.number(result.cards[0]);
                                }
                                'step 6'
                                event.num++;
                                if (event.num < event.targets.length) event.goto(4);
                                'step 7'
                                if(event.addnum>=14){
                                    player.chooseUseTarget({ name: 'sha' }, '你可以视为使用一张【杀】', false,'nodistance');
                                }
                            },
                        },
                        bhmoou: {
                            marktext: "偶",
                            intro: {
                                content: "expansion",
                                markcount: 0,
                            },
                            onremove: function (player, skill) {
                                var cards = player.getExpansions(skill);
                                if (cards.length) player.loseToDiscardpile(cards);
                            },
                            discard: false,
                            enable: 'phaseUse',
                            usable: 1,
                            filter: function (event, player) {
                                return player.countCards('h');
                            },
                            selectCard: 1,
                            position: "h",
                            filterCard: true,
                            selectTarget: 1,
                            filterTarget: function (card, player, target) {
                                return target != player;
                            },
                            content: function () {
                                'step 0'
                                if (targets[0].getExpansions('bhmoou') && targets[0].getExpansions('bhmoou').length > 0) {
                                    var card = targets[0].getExpansions('bhmoou')[0];
                                    targets[0].discard(card);
                                    //game.cardsDiscard(card);
                                    //game.log(card, '被置入了弃牌堆');
                                }
                                'step 1'
                                //if (!targets[0].storage.bhmoou) targets[0].storage.bhmoou = [];
                                targets[0].addToExpansion(cards[0], player, 'give').gaintag.add('bhmoou');
                                //targets[0].storage.bhmoou.push(cards[0]);
                                targets[0].markSkill('bhmoou');
                                // game.log(player, '将', cards[0], '置于', targets[0], '的角色卡上作为“魔偶”');
                            },
                            mod:{
                                maxHandcard:function(player,num){
                                    var players=game.filterPlayer(function(target){
                                        return target.getExpansions('bhmoou').length>0;
                                    });
                                    return num+players.length;
                                },
                            },
                            ai: {
                                order: 10,
                                result: {
                                    player: function (player, target, card) {
                                        var att = get.attitude(player, target);
                                        if (target.getExpansions('bhmoou') && target.getExpansions('bhmoou').length > 0) return 0;
                                        return 4;
                                    },
                                },
                            },
                        },
                        bhcaolian: {
                            forced: true,
                            trigger: {
                                player: "useCardAfter",
                            },
                            filter: function (event, player) {
                                if (!['trick', 'basic'].contains(get.type(event.card)) || event.targets.length > 1||!event.targets.length) return false;
                                var suit = get.suit(event.card);
                                return game.hasPlayer(function (current) {
                                    if (!current.getExpansions('bhmoou') || current.getExpansions('bhmoou').length == 0) return false;
                                    return get.suit(current.getExpansions('bhmoou')[0]) == suit;
                                });
                            },
                            content: function () {
                                'step 0'
                                var suit = get.suit(trigger.card);
                                event.cardname = trigger.card.name;
                                event.target = trigger.targets[0];
                                event.targets = game.filterPlayer(function (current) {
                                    if (!current.getExpansions('bhmoou') || current.getExpansions('bhmoou').length == 0) return false;
                                    return get.suit(current.getExpansions('bhmoou')[0]) == suit;
                                });
                                event.num = 0;
                                'step 1'
                                event.targets[event.num].useCard({ name: event.cardname, isCard: true }, event.target, false);
                                player.draw(1,event.targets[event.num]);
                                'step 2'
                                event.num++;
                                if (event.num < event.targets.length) event.goto(1);
                            },
                        },
                        bhchuangshi: {
                            enable: 'phaseUse',
                            usable: 1,
                            position: 'hes',
                            check: function (card) {
                                var player = _status.currentPhase;
                                var targets = game.filterPlayer();
                                var num = 0;
                                var num2 = 0;
                                for (var i = 0; i < targets.length; i++) {
                                    if (get.attitude(player, targets[i]) > 0) num++;
                                    else num2++;
                                }
                                if (Math.max(1, ui.selected.cards.length + (player.maxHp - player.hp)) >= num) return -2;
                                if (get.type(card) == 'basic') return 8 - get.value(card);
                                return 5 - get.value(card);
                            },
                            selectCard: function () {
                                var player = _status.currentPhase;
                                var num = player.maxHp - player.hp;
                                return [num, Infinity];
                            },
                            filterCard: function (card) {
                                return get.color(card) == 'red';
                            },
                            filter: function (event, player) {
                                return player.countCards('hes', { color: 'red' }) >= (player.maxHp - player.hp);
                            },
                            content: function () {
                                'step 0'
                                var num = cards.length ? cards.length : 0;
                                var num2 = game.filterPlayer().length;
                                event.num = num + Math.max(1, player.maxHp - player.hp);
                                if (event.num > num2) event.num = num2;
                                player.chooseTarget(event.num, true).set('ai', function (target) {
                                    var att = get.attitude(player, target);
                                    if (att < 0) return att;
                                    if (target.isLinked() || target.isTurnedOver()) return att + target.isLinked() ? 2 : 4;
                                    return att;
                                });
                                'step 1'
                                event.targets = result.targets;
                                event.targets.sortBySeat();
                                player.line(event.targets);
                                'step 2'
                                event.target = event.targets[event.targets.length - event.num];
                                event.target.chooseControl('摸牌', '重置角色卡').set('ai', function () {
                                    if (event.target.isTurnedOver()) return '重置角色卡';
                                    if (event.target.countCards('hs') >= 2 && event.target.isLinked()) return '重置角色卡';
                                    return '摸牌';
                                });
                                'step 3'
                                if (result.control == '摸牌') event.target.draw();
                                else {
                                    if (event.target.isLinked()) event.target.link();
                                    if (event.target.isTurnedOver()) event.target.turnOver();
                                }
                                'step 4'
                                event.num--;
                                if (event.num > 0) event.goto(2);
                            },
                            ai: {
                                order: 6.5,
                                result: {
                                    player: 2,
                                },
                            },
                        },
                        bhshenpan: {
                            trigger: {
                                player: 'damageEnd',
                            },
                            check: function (event, player) {
                                var player = _status.currentPhase;
                                var targets = game.filterPlayer();
                                var num = 0;
                                var num2 = 0;
                                var num3 = 0;
                                var num4 = 0;
                                for (var i = 0; i < targets.length; i++) {
                                    if (get.attitude(player, targets[i]) > 0) {
                                        num++;
                                        if (targets[i].hp <= 2) num3++;
                                    }
                                    else {
                                        num2++;
                                        if (targets[i].hp <= 2) num4++;
                                    }
                                }
                                if (num > num2) return true;
                                else {
                                    if (num3 <= num4) return true;
                                    return false;
                                }
                            },
                            content: function () {
                                'step 0'
                                var str1, str2;
                                event.target = null;
                                if (trigger.source) {
                                    event.target = trigger.source;
                                    str1 = '令除' + get.translation(event.target) + '以外的角色各摸两张牌';
                                } else str1 = '令所有角色各摸两张牌';
                                str2 = '令除你以外的角色各失去1点体力';
                                player.chooseControlList('审判：请选择一项', str1, str2, true, function () {
                                    var targets = game.filterPlayer();
                                    var num = 0;
                                    var num2 = 0;
                                    var num3 = 0;
                                    var num4 = 0;
                                    for (var i = 0; i < targets.length; i++) {
                                        if (get.attitude(player, targets[i]) > 0) {
                                            num++;
                                            if (targets[i].hp <= 2) num3++;
                                        }
                                        else {
                                            num2++;
                                            if (targets[i].hp <= 2) num4++;
                                        }
                                    }
                                    if (num > num2) return 0;
                                    if (num <= num2 && num3 <= num4) return 1;
                                    return 0;
                                });
                                'step 1'
                                if (result.index == 1) event.target = player;
                                event.targets = game.filterPlayer(function (target) {
                                    return target != event.target;
                                });
                                player.line(event.targets);
                                event.targets.sortBySeat();
                                if (result.index == 0) {
                                    while (event.targets.length) {
                                        event.targets.shift().draw(2);
                                    }
                                } else {
                                    while (event.targets.length) {
                                        event.targets.shift().loseHp();
                                    }
                                }
                            },
                        },
                        bhsanjiao: {
                            trigger: {
                                player: 'damageEnd',
                            },
                            filter: function (event, player) {
                                return event.source && event.source.isAlive();
                            },
                            content: function () {
                                'step 0'
                                event.target1 = trigger.source;
                                var targets = game.filterPlayer();
                                if (targets.length >= 3) {
                                    player.chooseTarget('三角：请选一名其他角色作为第三角', function (card, player, target) {
                                        return target != player && target != event.target1;
                                    }).set('ai', function (target) {
                                        return get.attitude(player, target);
                                    });
                                } else {
                                    player.draw(2);
                                    event.finish();
                                }
                                'step 1'
                                if (result.bool) {
                                    event.target2 = result.targets[0];
                                    player.line(event.target1);
                                    player.line(event.target2);
                                    event.list = [get.translation(player), get.translation(event.target1), get.translation(event.target2)];
                                    event.choice = [-1, -1, -1];
                                    player.chooseControl(event.list).set('ai', function () {
                                        var att1 = get.attitude(player, event.target1);
                                        var att2 = get.attitude(player, event.target2);
                                        if (att1 > 0) return [event.list[0], event.list[1]].randomGet();
                                        else {
                                            if (att2 > 0) return [event.list[0], event.list[2]].randomGet();
                                            else return event.list[0];
                                        }
                                    });
                                } else event.finish();
                                'step 2'
                                if (result.control == event.list[0]) event.choice[0] = 0;
                                else if (result.control == event.list[1]) event.choice[0] = 1;
                                else event.choice[0] = 2;
                                event.target1.chooseControl(event.list).set('ai', function () {
                                    var att1 = get.attitude(event.target1, player);
                                    var att2 = get.attitude(event.target1, event.target2);
                                    if (att1 > 0) return [event.list[0], event.list[1]].randomGet();
                                    else {
                                        if (att2 > 0) return [event.list[1], event.list[2]].randomGet();
                                        else return event.list[1];
                                    }
                                });
                                'step 3'
                                if (result.control == event.list[0]) event.choice[1] = 0;
                                else if (result.control == event.list[1]) event.choice[1] = 1;
                                else event.choice[1] = 2;
                                event.target2.chooseControl(event.list).set('ai', function () {
                                    var att1 = get.attitude(event.target2, player);
                                    var att2 = get.attitude(event.target2, event.target1);
                                    if (att1 > 0) return [event.list[0], event.list[2]].randomGet();
                                    else {
                                        if (att2 > 0) return [event.list[1], event.list[2]].randomGet();
                                        else return event.list[2];
                                    }
                                });
                                'step 4'
                                if (result.control == event.list[0]) event.choice[2] = 0;
                                else if (result.control == event.list[1]) event.choice[2] = 1;
                                else event.choice[2] = 2;
                                if (event.choice[0] == event.choice[1] && event.choice[1] == event.choice[2]) {
                                    if (event.choice[0] == 0) player.draw(4);
                                    else if (event.choice[0] == 1) event.target1.draw(4);
                                    else event.target2.draw(4);
                                } else if (event.choice[0] == event.choice[1] && event.choice[1] != event.choice[2]) {
                                    if (event.choice[0] == 0) player.draw();
                                    else if (event.choice[0] == 1) event.target1.draw();
                                    else event.target2.draw();
                                    if (event.choice[2] == 0) {
                                        if (event.choice[1] == 1) event.target2.draw(2);
                                        else event.target1.draw(2);
                                    } else if (event.choice[2] == 1) {
                                        if (event.choice[1] == 0) event.target2.draw(2);
                                        else player.draw(2);
                                    } else {
                                        if (event.choice[1] == 0) event.target1.draw(2);
                                        else player.draw(2);
                                    }
                                } else if (event.choice[0] == event.choice[2] && event.choice[1] != event.choice[2]) {
                                    if (event.choice[0] == 0) player.draw();
                                    else if (event.choice[0] == 1) event.target1.draw();
                                    else event.target2.draw();
                                    if (event.choice[1] == 0) {
                                        if (event.choice[2] == 1) event.target2.draw(2);
                                        else event.target1.draw(2);
                                    } else if (event.choice[1] == 1) {
                                        if (event.choice[2] == 0) event.target2.draw(2);
                                        else player.draw(2);
                                    } else {
                                        if (event.choice[2] == 0) event.target1.draw(2);
                                        else player.draw(2);
                                    }
                                } else if (event.choice[1] == event.choice[2] && event.choice[0] != event.choice[1]) {
                                    if (event.choice[1] == 0) player.draw();
                                    else if (event.choice[1] == 1) event.target1.draw();
                                    else event.target2.draw();
                                    if (event.choice[0] == 0) {
                                        if (event.choice[1] == 1) event.target2.draw(2);
                                        else event.target1.draw(2);
                                    } else if (event.choice[0] == 1) {
                                        if (event.choice[1] == 0) event.target2.draw(2);
                                        else player.draw(2);
                                    } else {
                                        if (event.choice[1] == 0) event.target1.draw(2);
                                        else player.draw(2);
                                    }
                                } else {
                                    player.draw();
                                    event.target1.draw();
                                    event.target2.draw();
                                }
                            },
                        },
                        bhxinsheng: {
                            init: function (player) {
                                if(!player.storage.bhsp) player.storage.bhsp=0;
                            },
                            trigger: {
                                player: 'phaseZhunbei',
                            },
                            forced: true,
                            filter: function (event, player) {
                                return player.countSP()> 0;
                            },
                            content: function () {
                                'step 0'
                                event.num = player.countSP();
                                if (player.countCards('hs') >= 2 * event.num) {
                                    if (event.num > 1) player.draw(event.num - 1);
                                    player.chooseToDiscard('hs', 2 * event.num, true);
                                    player.loseSP(event.num);
                                    // player.removeMark('bhsp', event.num);
                                    // player.syncStorage('bhsp');
                                    event.finish();
                                } else {
                                    event.targets = game.filterPlayer(function (target) {
                                        return target != player;
                                    });
                                    event.targets.sortBySeat();
                                    event.index = 0;
                                }
                                'step 1'
                                event.target = event.targets[event.index];
                                player.line(event.target);
                                event.target.damage();
                                event.target.draw(2 * event.num - player.countCards('hs'));
                                'step 2'
                                event.index++
                                if (event.index < event.targets.length) event.goto(1);
                                else player.discard(player.getCards('hs'))
                                'step 3'
                                player.loseSP(event.num);
                                // player.removeMark('bhsp', event.num);
                                // player.unmarkSkill('bhsp');
                                // player.syncStorage('bhsp');
                            },
                        },
                        bhshenqu: {
                            forced: true,
                            trigger: {
                                player: ['phaseJieshuBegin', 'useCardAfter', 'respondAfter'],
                            },
                            filter: function (event, player) {
                                if (event.name == 'phaseJieshu') return true;
                                return player != _status.currentPhase;
                            },
                            content: function () {
                                player.draw(2);
                                player.gainSP();
                                // if(!player.storage.bhsp) player.storage.bhsp=0;
                                // player.storage.bhsp++;
                                // player.markSkill('bhsp');
                                // player.syncStorage('bhsp');
                            },
                        },
                    },
                    characterReplace: {
                        baixi: ['baixi', 'heixi'],
                        bhyouxia: ['bhyouxia', 'bhtianqiongyouxia'],
                        bhqiangxi: ['bhqiangxi', 'bhpoxiaoqiangxi'],
                        bhshanchui: ['bhshanchui', 'bhhuixingqudong'],
                        bhyingtaozhadan: ['bhyingtaozhadan', 'bhkuangrelandiao'],
                        bhyingwuchongji: ['bhyingwuchongji', 'bhduanzuiyingwu'],
                        bhziyuan:['bhziyuan','bhyuehuang'],
                    },
                    characterIntro: {},
                    characterTitle: {
                        bhbailian: '领域装·白练',
                        baixi: '希儿',
                        heixi: '[希儿]',
                        bhjidizhanren: '极地战刃',
                        bhdiliuyexiangqu: '骚话莲',
                        bhzhenyanxinghun: '真炎幸魂',
                        bhshizhilvzhe: '识之律者',
                        bhrongguang: '女武神·荣光',
                        bhsu: '觉者',
                        bhzhanche: '女武神·战车',
                        bhaotuoweila: '天命骑士',
                        bhmenjieliefu: '元素的使徒',
                        bhtianqiongyouxia: '女武神·游侠（界）',
                        bhfeihong: "脉冲装·绯红",
                        bhaotuo: "天命主教",
                        bhyang: "逆熵盟主",
                        bhyueshi: "真红骑士",
                        "bhqizongzui_baonu": "七宗罪·暴怒",
                        "bhqizongzui_landuo": "七宗罪·懒惰",
                        "bhqizongzui_baoshi": "七宗罪·暴食",
                        bhhuixingqudong: "驱动装·山吹（界）",
                        bhxinyanzhilvzhe: "薪炎之律者",
                        bhkalian: "远东的圣骑士",
                        bhxilin: "第二律者",
                        bhyuanzuilieren: "原罪猎人",
                        bhmichenghaitu: "迷城骇兔",
                        bhnishenwunv: "逆神巫女",
                        bhyinghuolunwu: "樱火轮舞",
                        bhyuexiachuyong: "月下初拥",
                        bhshengnvqidao: "圣女祈祷",
                        bhshanchui: "驱动装·山吹",
                        bhyueguang: "白骑士",
                        bhciyuan: "次元边界突破",
                        bhguikai: "雷电女王的鬼铠",
                        bhaidisheng: "北美发明家",
                        bhtesila: "正弦双马尾",
                        bhshenhong: "融核装·深红",
                        bhjialilue: "星海观察者",
                        bhqianjie: "狂王",
                        bhnuobeier: "如雷的轰响",
                        bhlanmeitegong: "蓝莓特工",
                        bhyingtaozhadan: "樱桃炸弹",
                        bhchiling: "炽翎",
                        bhyunmodanxin: "云墨丹心",
                        bhqiangxi: "女武神·强袭",
                        bhzhanchangjifeng: "战场疾风",
                        bhkaixuan: "女武神·凯旋",
                        bhshiyue: "女武神·誓约",
                        bhyouxia: "女武神·游侠",
                        bhpoxiaoqiangxi: "女武神·强袭（界）",
                        bhyingwuchongji: "影舞冲击",

                        bhkaipule: "天空立法者",
                        bhxialuote: "射手",
                        bhshalianna: "剑士",
                        bhweiduoliya: "放逐骑士",
                        bhlinaerduo: "狂暴骑士",
                        bhshenensongge: "神恩颂歌",
                        bhyuepo: "辉骑士",

                        bhyiduheiheqinshi: "异度黑核侵蚀",
                        bhyinlangdeliming: "银狼的黎明",
                        bhliewenhuke: '小人国公主',
                        bhhua: "战士",
                        bhxi: '非酋',

                        bhkongzhilvzhe: "空之律者",
                        bhafujiadeluo: "物质探究者",
                        bhxuedijuji: "雪地狙击",

                        Ezie: '小道',
                        bhyingtie: "猎袭装·影铁",
                        bhxuesemeigui: "血色玫瑰",
                        bhyeyinchongxia: "夜隐重霞",
                        bhcxunyu: "女武神·迅羽",
                        bhaiyinsitan: "相对天然卷",

                        bhwumianliming: "健忘",
                        bhanqiangwei: "暗蔷薇",
                        bhduanzuihuangnv: "串门的",
                        bhyuehuang: "暮光骑士",

                        Argon: "熬夜",
                        bhyuelun: "影骑士·月轮",
                        bhzhangheng: "木圣",
                        bhjinshengtan: "鲲鹏散人",
                        bhdilake: "深海的少女",

                        bhjinyang: "圣仪装·今样",
                        bhyanyexingyuan: "天秤崩落之时",

                        bhmeibiwusi: "蛇主",
                        bhkuangrelandiao: "Δ",
                        bhzuoluo: "假面义侠",
                        bhbanbenlongma: "船中八策",

                        bhdanzhu: "人偶师",
                        bhmikailangjiluo: "文艺复兴之心",

                        bhtailesi: "烈阳先知",
                        bhdanding: "文艺复兴之祖",
                        bhkaiwen: "英雄",
                        bhyidian: "歌者",

                        bhleizhilvzhe: "雷之律者",
                        bhlizhilvzhe: "理之律者",
                        bhshashibiya: "超限界复兴",
                        bhchaliman: "欧洲之父",
                        bhaojier: "丹麦王子",

                        bhatila: "上帝之鞭",
                        bhzhijiangjianxu: "重锤将军",
                        bhzhentianxingcun: "战国第一兵",
                        bhyuanfeihua: "条顿骑士",

                        bhhuanhaimengdie: "童谣",
                        bhduanzuiyingwu: "影舞冲击（界）",
                        bhweierwei: "愚人",
                        bhyilishabai: "吸血鬼伯爵夫人",
                        bhlier: "上清止水",
                        bhshichuan: "剑心侠胆",
                        bhmalixuelai: "科学怪人",
                        bhfulankensitan: "怪物",

                        bhgeleixiu: "画家",
                        bhaboniya: "苦修",
                        bhcishengyinyi: "大鸭鸭",
                        bhkesimo: "少年",

                        bhqigefei: "孤心浪子",
                        bhsaixiliya: "无双圣女",
                        bhying: "落樱",
                        bhyuehun: "苍骑士·月魂",
                        bhailixiya: "无暇",

                        bhdigengsi: "批判之笔",
                        bhzhinuo: "悖论之辩",
                        bhtugeniefu: "反抗之枪",
                        bhluxiya: "圣殿骑士",
                        bhnongji: "斋藤归蝶",
                        bhpaduo: "凡人",
                        bhpagenini: "琴魔",

                        bhjingwei: "填海壮志",
                        bhdaerwen: "骑犬的巨人",
                        bhsikete: "南极英魂",
                        bhbaiyezhishi: "物理战神",
                        bhpili: "北极征服者",

                        bhgusitafu: "诅咒之影",
                        bhcs:"扭曲",
                        bhlinnai:"自然分类者",
                        bhtianyuanqiying:"二律背反",

                        bhyekajielinna:"大帝",
                        bhdegula:"鲜血亲王",
                        bhwangzhenyi:"芳岁望星",
                        bhanna:"冰之律者",
                        bhchentianwu:"夜枭",

                        bhjiechuanlongzhijie:"澄江堂主人",
                        bhchangguang:"天命之刃",

                        bhshuoyeguanxing:"圣贤王",
                        bhhulang:"胡狼",
                        bhlagena:"永远的教官",
                        bhyuehen:"玉骑士",

                        bhbumiexingmao:"烧鹅",
                        bhliaoluanxingji:"烤箱",
                        bhbasite:"猫神",

                        bhziyuan:"极东的学园长",
                        bhtimiduo:"待绽的冰花",
                        bhyadang:"爷",
                        bhhoubengyayi:"翀云雷影",

                        bhweioula:"医院骑士",
                        bhlaier:"最佳第四人",
                        bhkaluoer:"狂怒巨锤",
                        bhluolan:"神圣骑士",

                        bhshiluomidie:"冥府魔女",
                        bhwangzhaojun:"明妃",
                        bhchaikefusiji:"冬日旋律",
                        bhkekeliya:"逆熵的枭雄",

                        bhalading:"灯神之眷",
                        bhhabo:"宇宙开拓者",
                        bhailunpo:"黑暗低语",

                        bhsushana:"英侠伴侣",
                        bhzhenlizhilvzhe:"真·理之律者",
                        bhresha:"女武神·热砂",

                        bhzhongyanzhilvzhe:"终焉之律者",
                        bhaiyi:"爱衣·休伯利安",

                        bhbeiduofen:"扼住命运咽喉之人",
                    },
                    translate: {
                        ///////角色翻译
                        baixi: "彼岸双生",
                        heixi: "彼岸双生",
                        bhjidizhanren: "极地战刃",
                        bhdiliuyexiangqu: "第六夜想曲",
                        bhzhenyanxinghun: "真炎幸魂",
                        bhshizhilvzhe: "识之律者",
                        bhrongguang: "荣光",
                        bhsu: "苏",
                        bhzhanche: "战车",
                        bhaotuoweila: "奥托薇拉",
                        bhmenjieliefu: "门捷列夫",
                        bhtianqiongyouxia: "天穹游侠",
                        bhfeihong: "绯红",
                        bhbailian: "白练",
                        bhaotuo: "奥托",
                        bhyang: "瓦尔特·杨",
                        bhyueshi: "月蚀",
                        "bhqizongzui_baonu": "暴怒",
                        "bhqizongzui_landuo": "懒惰",
                        "bhqizongzui_baoshi": "暴食",
                        bhhuixingqudong: "彗星驱动",
                        bhxinyanzhilvzhe: "薪炎之律者",
                        bhkalian: "卡莲",
                        bhxilin: "西琳",
                        bhyuanzuilieren: "原罪猎人",
                        bhmichenghaitu: "迷城骇兔",
                        bhnishenwunv: "逆神巫女",
                        bhyinghuolunwu: "樱火轮舞",
                        bhyuexiachuyong: "月下初拥",
                        bhshengnvqidao: "圣女祈祷",
                        bhshanchui: "山吹",
                        bhyueguang: "月光",
                        bhciyuan: "次元",
                        bhguikai: "鬼铠",
                        bhaidisheng: "爱迪生",
                        bhtesila: "特斯拉",
                        bhshenhong: "深红",
                        bhjialilue: "伽利略",
                        bhqianjie: "千劫",
                        bhnuobeier: "诺贝尔",
                        bhlanmeitegong: "蓝莓特工",
                        bhyingtaozhadan: "樱桃炸弹",
                        bhchiling: "炽翎",
                        bhyunmodanxin: "云墨丹心",
                        bhqiangxi: "强袭",
                        bhzhanchangjifeng: "战场疾风",
                        bhkaixuan: "凯旋",
                        bhshiyue: "誓约",
                        bhyouxia: "游侠",
                        bhpoxiaoqiangxi: "破晓强袭",
                        bhyingwuchongji: "影舞冲击",

                        bhkaipule: "开普勒",
                        bhxialuote: "夏洛特",
                        bhshalianna: "莎莲娜",
                        bhweiduoliya: "维多利亚",
                        bhlinaerduo: "里纳尔多",
                        bhshenensongge: "神恩颂歌",
                        bhyuepo: "月魄",

                        bhyiduheiheqinshi: "异度黑核侵蚀",
                        bhyinlangdeliming: "银狼的黎明",
                        bhliewenhuke: "列文虎克",
                        bhhua: "华",
                        bhxi: "汐",

                        bhkongzhilvzhe: "空之律者",
                        bhafujiadeluo: "阿伏伽德罗",
                        bhxuedijuji: "雪地狙击",

                        Ezie: "Ezie",
                        bhyingtie: "影铁",
                        bhxuesemeigui: "血色玫瑰",
                        bhyeyinchongxia: "夜隐重霞",
                        bhcxunyu: "迅羽",
                        bhaiyinsitan: "爱因斯坦",

                        bhwumianliming: "无冕黎明",
                        bhanqiangwei: "暗蔷薇",
                        bhduanzuihuangnv: "断罪皇女！！",
                        bhyuehuang: "月煌",

                        Argon: "Argon",
                        bhyuelun: "月轮",
                        bhzhangheng: "张衡",
                        bhjinshengtan: "金圣叹",
                        bhdilake: "狄拉克",

                        bhjinyang: "今样",
                        bhyanyexingyuan: "魇夜星渊",

                        bhmeibiwusi: "梅比乌斯",
                        bhkuangrelandiao: "狂热蓝调",
                        bhzuoluo: "佐罗",
                        bhbanbenlongma: "坂本龙马",

                        bhdanzhu: "丹朱",
                        bhmikailangjiluo: "米开朗基罗",

                        bhtailesi: "泰勒斯",
                        bhdanding: "但丁",
                        bhkaiwen: "凯文",
                        bhyidian: "伊甸",

                        bhleizhilvzhe: "雷之律者",
                        bhlizhilvzhe: "理之律者",
                        bhshashibiya: "莎士比亚",
                        bhchaliman: "查理曼",
                        bhaojier: "奥吉尔",

                        bhatila: "阿提拉",
                        bhzhijiangjianxu: "直江兼续",
                        bhzhentianxingcun: "真田幸村",
                        bhyuanfeihua: "汉娜",

                        bhhuanhaimengdie: "幻海梦蝶",
                        bhduanzuiyingwu: "断罪影舞",
                        bhweierwei: "维尔薇",
                        bhyilishabai: "伊丽莎白",
                        bhlier: "李耳",
                        bhshichuan: "石川五右卫门",
                        bhmalixuelai: "玛丽 雪莱",
                        bhfulankensitan: "弗兰肯斯坦",

                        bhgeleixiu: "格蕾修",
                        bhaboniya: "阿波尼亚",
                        bhcishengyinyi: "次生银翼",
                        bhkesimo: "科斯魔",

                        bhqigefei: "齐格飞",
                        bhsaixiliya: "塞西莉亚",
                        bhying: "樱",
                        bhyuehun: "月魂",
                        bhailixiya: "爱莉希雅",

                        bhdigengsi: "狄更斯",
                        bhzhinuo: "芝诺",
                        bhtugeniefu: "屠格涅夫",
                        bhluxiya: "露西亚",
                        bhnongji: "浓姬",
                        bhpaduo: "帕朵菲莉丝",
                        bhpagenini: "帕格尼尼",

                        bhjingwei: "精卫",
                        bhdaerwen: "达尔文",
                        bhsikete: "斯科特",
                        bhbaiyezhishi: "白夜执事",
                        bhpili: "皮里",

                        bhgusitafu: "古斯塔夫",
                        bhcs: "曲率引擎",
                        bhlinnai:"林奈",
                        bhtianyuanqiying:"天元骑英",

                        bhyekajielinna:"叶卡捷琳娜",
                        bhdegula:"德古拉",
                        bhcsf:"测试",
                        bhwangzhenyi:"王贞仪",
                        bhanna:"安娜",
                        bhchentianwu:"陈天武",

                        bhjiechuanlongzhijie:"芥川龙之介",
                        bhchangguang:"长光",

                        bhshuoyeguanxing:"朔夜观星",
                        bhhulang:"克利欧",
                        bhlagena:"拉格纳",
                        bhyuehen:"月痕",

                        bhbumiexingmao:"不灭星锚",
                        bhliaoluanxingji:"缭乱星棘",
                        bhbasite:"芭斯特",

                        bhziyuan:"紫苑",
                        bhtimiduo:"缇米朵",
                        bhyadang:"亚当",
                        bhhoubengyayi:"雷电芽衣",

                        bhweioula:"薇欧拉",
                        bhlaier:"莱尔",
                        bhkaluoer:"卡罗尔",
                        bhluolan:"罗兰",

                        bhshiluomidie:"失落迷迭",
                        bhwangzhaojun:"王昭君",
                        bhchaikefusiji:"柴可夫斯基",
                        bhkekeliya:"可可利亚",

                        bhalading:"阿拉丁",
                        bhhabo:"哈勃",
                        bhailunpo:"爱伦·坡",

                        bhsushana:"苏莎娜",
                        bhzhenlizhilvzhe:"真理之律者",
                        bhresha:"热砂",

                        bhzhongyanzhilvzhe:"终焉之律者",
                        bhaiyi:"爱衣",

                        bhbeiduofen:"贝多芬",
                        ////////////技能翻译
                        bhchuanming:"舛命",
                        "bhchuanming_info":"锁定技，回合技，轮次技，限定技，一名角色的准备或结束阶段，你进行【闪电】判定并获得判定牌。若结果为♠2-9，你删除此技能最后一个标签，均删除后，你获得〖乐圣〗。",
                        bhluoluo:"珞珞",
                        "bhluoluo_info":"锁定技，当你进入濒死状态时或受到非致命伤害后，你抉择：发动一次〖不屈〗，重置〖舛命〗；回复1点体力，失去〖珞珞〗。",
                        bhyuesheng:"乐圣",
                        "bhyuesheng_info":"你可以将点数同“创”的牌视为对应其字典序的锦囊使用，此牌按照你与之同点的“创”结算，然后你获得该“创”。<br><br><li>字典序：<br>1兵粮寸断，2过河拆桥，3火攻，4决斗，5借刀杀人，6乐不思蜀，7南蛮入侵，8闪电，9顺手牵羊，10铁索连环，11桃园结义，12五谷丰登，13万箭齐发，14无懈可击，15无中生有",
                        bhshilv:"时旅",
                        "bhshilv_info":"锁定技，游戏开始时或你翻面后，你将角色卡翻至背面朝上。其他角色的回合结束或因翻回正面而终止回合时，你可以额外进行该回合被跳过的所有阶段。",
                        bhxiangshe:"相涉",
                        "bhxiangshe_info":"其他角色未使用/弃置过牌的额定出牌/弃牌阶段结束时，你可与其各摸一张牌，然后你可以与其交换一张手牌令该阶段视为已跳过。",
                        bhxiangshe2:"相涉",
                        "bhxiangshe2_info":"其他角色未使用/弃置过牌的额定出牌/弃牌阶段结束时，你可与其各摸一张牌，然后你可以与其交换一张手牌令该阶段视为已跳过。",
                        "bhbenghuai1":"崩坏",
                        "bhbenghuai2":"崩坏",
                        "bhbenghuai3":"崩坏",
                        "bhbenghuai4":"崩坏",
                        "bhbenghuai5":"崩坏",
                        "bhbenghuai6":"崩坏",
                        "bhbenghuai7":"崩坏",
                        "bhbenghuai8":"崩坏",
                        "bhbenghuai1_info":"锁定技，回合结束阶段，若你的体力值不为全场最少（或之一），你选择1项：失去1点体力，或失去1点上限。",
                        "bhbenghuai2_info":"锁定技，回合结束阶段，若你的体力值不为全场最少（或之一），你选择1项：失去1点体力，或失去1点上限。",
                        "bhbenghuai3_info":"锁定技，回合结束阶段，若你的体力值不为全场最少（或之一），你选择1项：失去1点体力，或失去1点上限。",
                        "bhbenghuai4_info":"锁定技，回合结束阶段，若你的体力值不为全场最少（或之一），你选择1项：失去1点体力，或失去1点上限。",
                        "bhbenghuai5_info":"锁定技，回合结束阶段，若你的体力值不为全场最少（或之一），你选择1项：失去1点体力，或失去1点上限。",
                        "bhbenghuai6_info":"锁定技，回合结束阶段，若你的体力值不为全场最少（或之一），你选择1项：失去1点体力，或失去1点上限。",
                        "bhbenghuai7_info":"锁定技，回合结束阶段，若你的体力值不为全场最少（或之一），你选择1项：失去1点体力，或失去1点上限。",
                        "bhbenghuai8_info":"锁定技，回合结束阶段，若你的体力值不为全场最少（或之一），你选择1项：失去1点体力，或失去1点上限。",
                        bhzhongtu:"终途",
                        "bhzhongtu_info":"锁定技（此技能于角色离场后仍生效），游戏开始时所有角色获得〖崩坏〗。每名角色每回合限一次，造成伤害后来源可以获得受伤角色的所有〖崩坏〗，然后回复等量点体力或增加等量点体力上限。",
                        bhzhilin:"至临",
                        "bhzhilin_info":"锁定技（此技能于角色离场后仍生效），每名角色每回合限一次，你或拥有〖崩坏〗数唯一最大的角色可以失去一个〖崩坏〗以视为使用一张基本牌或普通锦囊，并于结算后依次发动剩余的。",
                        bhmingtian:"明天",
                        "bhmingtian_info":"锁定技（此技能于角色离场后仍生效），一名角色的回合开始时，若场上不存在〖崩坏〗，所有存活玩家获得胜利。  ",
                        bhlingwu:"铃舞",
                        "bhlingwu_info":"锁定技，转换技，游戏开始时主公将一张手牌至于角色卡上称为“熠”。你使用牌时摸一张牌，若①颜色②类型③花色④点数⑤牌名与“熠”不同，则转换至①且本回合失效；此技能自然转换三次后你可以移动场上一张牌；此技能转换一周后你可以用一张手牌交换“熠”。",
                        bhyili:"轶理",
                        "bhyili_info":"阶段技，你可以与一名其他角色同时选择一张手牌，依次展示之，然后重复亮出牌堆顶的一张牌直到与展示牌补齐所有花色（至多8张）。若如此做，你与该角色分别可以获得一种花色的亮出牌，然后你可以将剩余牌中一张的牌名填入〖延拓〗的空项中。",
                        bhyantuo:"延拓",
                        "bhyantuo_info":"转换技，你可以{弃置}一张牌视为使用①【闪】②【无懈可击】③【】，将以此法响应的牌名填入空项中。当此技能的所有项均有牌名后，{}内容改为“分配”，且填入牌名时可以改为重铸项目数的一半（向下取整）张牌以获得一个新项。",
                        bhxiachen:"侠忱",
                        "bhxiachen_info":"其他角色发动“侠忱”时，你可以摸一张牌。当一名你攻击范围内的角色使用【杀】或受到伤害后，你可以交给其一张牌面含有“杀”字的非基本牌，然后其可以使用之并获得带有限定技标签的“侠忱”（若其已有则重置之）。",
                        bhxiachen_limited:"侠忱",
                        "bhxiachen_limited_info":"限定技，其他角色发动“侠忱”时，你可以摸一张牌。当一名你攻击范围内的角色使用【杀】或受到伤害后，你可以交给其一张牌面含有“杀”字的非基本牌，然后其可以使用之并获得带有限定技标签的“侠忱”（若其已有则重置之）。",
                        bhhuiyu:"晦喻",
                        "bhhuiyu_info":"你使用有/无伤害标签的锦囊指定唯一目标后，可以令一名未/已受伤的其他角色也成为目标。",
                        bhhuiyan:"诙言",
                        "bhhuiyan_info":"每回合限一次，一名其他角色使用目标为角色的基本牌或普通锦囊后，你可以交给其与目标各一张牌，然后视为对其使用一张同名牌。",
                        bhbuqu:"不屈",
                        "bhbuqu_info":"①当你扣减1点体力时，若你的体力值小于1，你可以将牌堆顶的一张牌置于你的武将牌上；②若你武将牌上的“不屈”牌点数均不相同，你不会死亡（当你回复1点体力后，你移去一张“不屈”牌）。",
                        bhqunxing:"群星",
                        "bhqunxing_info":"每回合限一次，你可以将攻击范围内的其他角色出牌阶段使用的非转化普通锦囊牌于结算后置于角色卡上。你可以展示手牌并移去一张“群星”牌以视为使用手牌中没有的同名牌。",
                        bhjiwang:"极望",
                        "bhjiwang_info":"出牌阶段，你可以将至少x张手牌当做【知己知彼】使用。结算后，你的攻击范围加1，且目标角色可以将等量手牌当做【远交近攻】或无距离限制的【杀】对你使用。（x为你的攻击范围且至多为5）",
                        bhshenkong:"深空",
                        "bhshenkong_info":"锁定技，其他角色到你、你到其他角色的距离均+2。",
                        bhshendeng:"神灯",
                        "bhshendeng_info":"神灯能够使你的至多三个愿望变为现实。业务熟练的神灯已经将纷复庞杂的愿望按照所属命途打包好，所以只需要许愿踏上所选的命途就可以了！每个出牌阶段只能许愿一次。<br>神灯打包好的选项有：<br><br>1. 拥有无穷的「财富」- 草原的不死青蛇<br>2. 领悟无极的「知识」- 赤色的夺魂蝙蝠<br>3. 驾驭无际的「空间」- 蛰伏深渊的巨蝎<br>4. 身怀无匹的「伟力」- 赤发血眼的魔王<br>5. 掌握无限的「时刻」- 宇宙的守护战士<br>6. 超越无果的「轮回」- 深海的蓄爆大龟<br>7. 进阶无尽的「生命」- 盘结大地的霸主<br>8. 登入无上的「法门」- 辽远苍穹的雷神<br><li>以上选项不可以重复选择。在选择上述任意一项后，神灯将解锁第九个选项，且该选项可以重复选择！但是，掌管某些命途的星神可能会因此要求你支付一些代价……<br><br>9. 相遇无数的「未来」- 全知全能的圣者",
                        "bhshendeng_caifu":"财富",
                        "bhshendeng_zhishi":"知识",
                        "bhshendeng_kongjian":"空间",
                        "bhshendeng_weili":"伟力",
                        "bhshendeng_shike":"时刻",
                        "bhshendeng_lunhui":"轮回",
                        "bhshendeng_shengming":"生命",
                        "bhshendeng_famen":"法门",
                        "bhshendeng_weilai":"未来",
                        "bhshendeng_caifu_info":"拥有无穷的「财富」- 草原的不死青蛇",
                        "bhshendeng_zhishi_info":"领悟无极的「知识」- 赤色的夺魂蝙蝠",
                        "bhshendeng_kongjian_info":"驾驭无际的「空间」- 蛰伏深渊的巨蝎",
                        "bhshendeng_weili_info":"身怀无匹的「伟力」- 赤发血眼的魔王",
                        "bhshendeng_shike_info":"掌握无限的「时刻」- 宇宙的守护战士",
                        "bhshendeng_lunhui_info":"超越无果的「轮回」- 深海的蓄爆大龟",
                        "bhshendeng_shengming_info":"进阶无尽的「生命」- 盘结大地的霸主",
                        "bhshendeng_famen_info":"登入无上的「法门」- 辽远苍穹的雷神",
                        "bhshendeng_weilai_info":"相遇无数的「未来」- 全知全能的圣者",
                        bhtiexue:"铁血",
                        "bhtiexue_info":"出牌阶段限两次，你可以交给一名其他角色一张【杀】，若该角色体力值不小于你，其须将此牌对与其距离最近的合法角色使用，若此牌造成了伤害，你摸两张牌；否则，该角色的出牌阶段开始时，其将“铁血”牌当做【崩坏结晶】对自己使用，其失去“铁血”牌时须交给你一张牌。",
                        bhjiaoxiang:"交响",
                        "bhjiaoxiang_info":"转换技，每回合限一次，阳：你弃置一次牌时，可以将其中一张作为“奖”置于角色卡上；阴：你获得一次牌后，可以将角色卡上的一张“奖”交给一名其他角色。",
                        bhhutao:"胡桃夹子",
                        "bhhutao_info":"你可以将一张牌当作任意基本牌使用或打出。若如此做，使用或打出该牌后你进行判定：若判定牌的花色与此牌不同，你弃置一张牌。",
                        bhluoyan:"落雁",
                        "bhluoyan_info":"一名角色的判定阶段开始时，若其判定区内有【乐不思蜀】，你可以进行一次判定：若判定牌的点数不大于当前存活的角色数，你获得此【乐不思蜀】；否则，你令该角色弃置此【乐不思蜀】并跳过本回合出牌阶段。",
                        bhchusai:"出塞",
                        "bhchusai_info":"摸牌阶段开始时，你可以少摸一张牌并将一张红色手牌当作【乐不思蜀】置于你的判定区内。若如此做，你与你的下家/上家交换位置，然后令其摸/弃两张牌。",
                        bhdiyue:"缔约",
                        "bhdiyue_info":"锁定技，每名其他角色限一次，一名角色出牌阶段结束时，若该角色为你/不为你，该角色须重铸/交给你一张牌，然后根据牌的种类获得对应标记（移除已有的）：基本牌，狼灵；锦囊牌，蛇灵；装备牌，枭灵。洗牌时，你重置此技能。（狼克枭，蛇克狼，枭克蛇）",
                        bhyiling:"役灵",
                        "bhyiling_info":"轮次开始时，你可以令所有有“缔约”标记的其他角色可以依次选择是否摸三张牌并在此技能结算完毕后移除自身的印记。若有角色选择摸牌，你须将这些角色两两分组（若选择摸牌角色的数量为奇数，则你也执行摸牌并参与分组），执行摸牌结束后，这些角色按照分组顺序依次拼点。以此法进行拼点时，印记克制对方的角色的拼点牌点数+3而被克制方-3。拼点全部结束后，你可以在没赢的角色中分配x点雷电伤害。（x为选择摸牌角色数量的一半）",
                        bhhunshou:"魂守",
                        "bhhunshou_info":"一名角色的准备阶段，你可以弃置一张牌，然后所有你攻击范围内的角色可以依次交给你一张手牌。若如此做，你选择获得“神气”或者“鬼气”直到当前回合结束。",
                        bhshenqi:"神气",
                        "bhshenqi_info":"锁定技，手牌数不小于你的角色可以于出牌阶段额外使用x张【杀】。（x为该角色的体力上限-1）",
                        bhguiqi:"鬼气",
                        "bhguiqi_info":"锁定技，手牌数小于你且攻击范围内有你的角色使用【杀】时仅能指定你为目标。",
                        bhchongdou:"冲斗",
                        "bhchongdou_info":"你使用【杀】和【决斗】指定目标时，你可以移去一至三张“盾”，然后根据你移去的“盾”数量至少1/2/3张，你获得效果：此牌无法响应/此牌造成伤害后弃置受伤角色一张牌/此牌对有“盾”的角色造成伤害时，此伤害+x。（x为该角色“盾”数量的一半，向下取整）",
                        bhzhenbi:"枕臂",
                        "bhzhenbi_info":"出牌阶段各限一次，你可以将一张武器牌或【杀】作为“盾”置于一名其他角色的角色牌上。若如此做，其从牌堆顶获得一张“盾”，然后你摸一张牌。若你没有“盾”，你可以对自己发动此技能，且你额外从牌堆顶获得一张“盾”。",
                        bhyexi:"野袭",
                        "bhyexi_info":"锁定技，你使用【杀】实际指定的目标仅自己可见。你使用【杀】指定目标后，你攻击范围内的所有角色均需选择是否使用一张【闪】，然后你公示此【杀】实际指定的目标：未使用【闪】的目标无法响应此【杀】，已使用【闪】的目标正常抵消此【杀】对其的效果。",
                        bhanbing:"暗兵",
                        "bhanbing_info":"每回合限一次，其他角色使用的【杀】结算完毕后，你可以与其交换一张手牌，然后其可以展示一张具伤害标签的手牌并令你对此【杀】的一个目标使用之。",
                        bhshengge:"圣歌",
                        "bhshengge_info":"锁定技，当你对一名角色发动“斠剑”后，若你令其摸牌/弃牌，其增加2点体力上限（至多+4）/减少1点体力上限（至多-2）。准备阶段，所有角色依次减少/增加1点以此法获得/损失的体力上限，然后你获得1点SP。",
                        bhleisuo:"雷锁",
                        "bhleisuo_info":"你使用非虚拟的【杀】或普通锦囊指定其他角色作为目标时，可以将你至多等同于你体力值的牌扣置于角色卡旁。若如此做，你可以此法扣置该牌每名目标角色各至多x张牌（x为你“雷锁”牌的数量，若此牌指定了唯一目标，则x的值额外+1）。一名角色的回合结束时，所有以此法被扣置牌的角色依次获得其角色牌旁的牌。",
                        bhtianji:"天殛",
                        "bhtianji_info":"出牌阶段限一次，你可以交换两名角色因“雷锁”而被扣置的牌（二者的“雷锁”牌数差距不可超过一张）。若这两名角色的“雷锁”牌数相等，你可以视为对这两名角色使用了一张【铁索连环】，然后将此技能改为“出牌阶段限两次”",
                        bhranneng:"燃能",
                        "bhranneng_info":"①每回合限两次，当一名与你距离不大于x的角色造成伤害后，你获得1点SP。（x为本次伤害值）②当你使用【杀】时/对一名其他角色造成火焰伤害后，你可以消耗2点SP，将该【杀】改为不可响应的火【杀】并摸一张牌/视为对受伤角色使用了一张【杀】。",
                        bhxiaoguang:"晓光",
                        "bhxiaoguang_info":"出牌阶段限一次，你可以消耗5点SP，对攻击范围内的一名其他角色造成2点火焰伤害。若如此做，直到该阶段结束，你发动“燃能”的消耗SP减半且无次数限制。若你的SP不足以发动此技能，你可以重复失去1点体力并获得1点SP直到SP数足够。",
                        bhpianran:"翩然",
                        "bhpianran_info":"锁定技，当你于回合内使用红色/黑色牌后，你的攻击范围-1/+1。出牌阶段开始时，你可以交换本技能描述中“红色”与“黑色”的位置。",
                        bhbingdian:"冰点",
                        "bhbingdian_info":"当你对一名处于你攻击范围边缘（你的攻击范围内你到其距离最远的角色）的其他角色使用牌时，你可以弃置其一张牌。本回合因此技能弃置的牌类别/花色数达到2时，你可以摸两张牌/弃置一张手牌并对所有你攻击范围边缘的其他角色各造成一点伤害。",
                        bhbanxue:"办学",
                        "bhbanxue_info":"每轮限一次，一名非休伯利安势力的角色对休伯利安势力的角色造成一次伤害后，你可以令伤害来源角色选择一项：受到来自你的一点伤害，然后弃置一张牌；或交给你一张手牌并将势力变更为“休伯利安”。",
                        bhjiancai:"荐才",
                        "bhjiancai_info":"限定技，出牌阶段，你可以将一张【杀】交给一名休伯利安势力的其他角色，令其选择一项：翻面并摸一张牌，然后令本技能的可用次数+1；或失去1点体力并将势力改为“崩坏”。",
                        bhjingwu:"荆舞",
                        "bhjingwu_info":"当你造成/受到伤害后，你可以弃置一张{【闪】}，然后视为对受伤角色/伤害来源使用一张不计入次数限制的【杀】。若受伤角色/伤害来源的势力为“崩坏”，你将{}内的内容改为“手牌”。",
                        bhtiexin:"铁心",
                        "bhtiexin_info":"主公技，每回合限一次，一名休伯利安势力或天命势力的其他角色受到伤害时，其可以交给你一张牌，然后你可以令该伤害-1。若如此做，你受到一点与该伤害来源一致的物理伤害。",
                        bhfangxiang:"芳香",
                        "bhfangxiang_info":"每轮每名角色各限一次，当一名角色获得SP后，你可以重铸x倍于SP变化量的牌，然后摸一张牌。（x为本技能本轮已发动的次数且至少为1）",
                        bhyuezhao:"月照",
                        "bhyuezhao_info":"出牌阶段，你可以记录一张本回合未记录过的类型的手牌。一名角色参与由牌造成的伤害结算后，你可以弃置一张与造成伤害的牌颜色相同的“月照”牌，然后令该角色选择一项：1.获得你弃置的“月照”牌并获得1点SP；2.回复1点体力。",
                        bhshensi:"神嗣",
                        "bhshensi_info":"锁定技，判定阶段开始时，若你的判定区内有【兵粮寸断】，你摸一张牌；若你的判定区内有【乐不思蜀】，本回合你跳过弃牌阶段。",
                        bhhuangxing:"煌星",
                        "bhhuangxing_info":"①一名角色的准备阶段，你可以将一张手牌扣置于你的角色牌上，称为“耀变”。②当一名角色使用或打出了一张牌后，你可以亮出一张与之花色相同的“耀变”牌，将此“耀变”牌改称为“璀光”并摸一张牌，然后令你或该角色视为使用了该“璀光”牌的同名牌。③一名角色的结束阶段，你弃置所有“璀光”，然后若你的“耀变”牌数大于1，你选择弃置一张牌或“耀变”牌。",
                        bhtiangong:"天宫",
                        "bhtiangong_info":"①你将你的技能“圣剑”中的数字分别改为“璀光”牌中最大和最小的点数。②当前回合角色/非当前回合角色使用或打出与“璀光”牌牌名或点数相同的牌时，你可以令你/当前回合角色摸一张牌。",
                        bhcrystal:"补给",
                        bhxinghai:"星海",
                        "bhxinghai_info":"锁定技，①游戏开始时，你从牌堆中依次获得点数为A-K的牌各一张，将其置于你的角色卡上，然后你将“星位”置为7。②当你“星位”为13上升星位时，你获得所有“星海”牌，然后重新执行星海①并令“巡宇”本回合失效。当你“星位”为1下降星位时，你失去此技能。③你将“圣剑”中的两个数字依次改为“星位”、13-“星位”。",
                        bhxunyu:"巡宇",
                        "bhxunyu_info":"当你使用或打出一张与“星位”对应的“星海”牌点数、花色或牌名相同的牌时，你可以选择一项：获其他角色其区域内一张牌并交给其一张点数不小于此牌的手牌，然后令“星位”上升1；摸一张牌，然后令“星位”下降1。",
                        bhfeifeng:"飞锋",
                        "bhfeifeng_info":"当你/你攻击范围内的一名角色需要使用或打出一张【闪】时，你可以与攻击范围内包含你的一名角色/该角色交换武器（你与该角色的武器栏内需总共有至少一张牌），然后若你的攻击范围因此减少，则视为你/该角色使用或打出了一张【闪】。",
                        bhhuanjian:"唤剑",
                        "bhhuanjian_info":"出牌阶段各限一次，你可以①将一张武器牌置于一名其他角色的装备区内（取代原装备），然后可以视为对其使用了一张不计入次数限制的【杀】，若该武器来源不为你的装备区，此项视为未发动。②若你的武器栏为空，你随机使用一张武器牌。",
                        bhxueying:"血樱",
                        "bhxueying_info":"当你使用非红色/红色伤害牌后，你可以弃置与之花色相同的所有手牌（无则不弃）并摸一张牌。若如此做，你将牌堆顶的一张牌置于角色卡上，称为“残心”（至多5张）/弃置一名目标角色的一张牌且本回合可使用【杀】次数+1。",
                        "bhheminga":"赫铭",
                        "bhheminga_info":"锁定技，①你使用有伤害标签的牌指定唯一目标时，若你有与之花色相同的“赫铭”牌，你令目标角色无法响应此牌。②你使用对应实体牌数为一的牌造成伤害时，若你没有与之花色相同的“赫铭”牌，你可以令此伤害+1，然后将该牌置于你的角色卡上。③你的手牌上限+x（x为你“赫铭”牌的数量）。",
                        bhxianfeng:"先锋",
                        "bhxianfeng_info":"出牌阶段开始时，你可以失去1点体力。当你失去体力后，你可以亮出牌堆顶的一张牌，若该牌有伤害标签，你无视距离且不计入次数限制的使用之，然后本回合到目标角色的距离视为1。否则你将其交给一名角色并令其摸一张牌，然后若你有“赫铭”，则你令该角色与你共享“赫铭“①直到其回合结束。",
                        bhguibing:"诡兵",
                        "bhguibing_info":"一名其他角色失去体力后，你可以弃置一张黑色牌。若如此做，该角色选择一项：展示所有手牌并令你选择获得其中一种花色的所有牌；失去1点体力。",
                        bhshenyi:"神医",
                        "bhshenyi_info":"出牌阶段，你可以重铸♥牌，若你此阶段内已发动过此技能，你可以重铸红色牌。你失去过至少两张红色牌的回合结束阶段，你可以令一名其他角色回复1点体力。若如此做，该角色选择一项：交给你一张牌并视为对你指定的令一名其他角色使用一张【决斗】；或视为使用了一张【崩坏结晶】。",
                        bhqixing:"七星",
                        "bhqixing_info":"游戏开始时，你将牌堆顶的七张牌扣置于你的角色卡上，称为“星”，然后/摸牌阶段结束时，你可以用任意张手牌替换等量的“星”。",
                        bhhuangyue:"煌月",
                        "bhhuangyue_info":"①一名角色使用或打出一张非装备非虚拟牌时，你随机用一张“星”交换其对应的一张实体牌。②当你受到1点伤害后，你将牌堆顶的两张牌扣置于你的角色卡上，若你的“星”不少于7，则改为摸等量的牌。③每轮限一次，一名角色的回合结束时，你可以用任意数量的牌替换等量的“星”，然后令此技能失效直到你的回合结束。",
                        bhxingzhen:"星阵",
                        "bhxingzhen_info":"结束阶段，你可以展示任意张点数之和为7正整数倍的“星”并选择一名角色。若如此做，你依次执行：1.对其造成x点伤害；2.将其移出游戏y回合；3.若z不小于2，你令其翻面；4.将这些牌中的z张交给其并弃置剩余的。（x/y为其中装备/锦囊牌总数的一半，向上取整，z为其中基本牌的总数）",
                        bhdaijiang:"大匠",
                        "bhdaijiang_info":"锁定技，每回合限三次，当你你使用、打出或弃置牌时，根据对应牌的类型，你获得1枚对应“附魔”标记：1.基本牌 - “欢欣”之附魔；2.锦囊牌 - “圣谕”之附魔；3.装备牌 - “决起”之附魔。",
                        bhmengen:"蒙恩",
                        "bhmengen_info":"一名其他角色的回合结束时，其可以随机将一张于此回合内弃置的牌交给你。",
                        bhfumo:"附魔",
                        "bhfumo_info":"出牌阶段限两次，你可以弃置一张手牌，然后据此牌的颜色将1级对应“附魔”赋予场上的一张装备牌（视为重构，会改变原牌名，若已有同名附魔则改为令其等级+1）：红色 - 赋予“铭记”之附魔；黑色 - 赋予“崩毁”之附魔。",
                        "bhfumo1":"铭记",
                        "bhfumo2":"崩毁",
                        "bhfumo3":"欢欣",
                        "bhfumo4":"圣谕",
                        "bhfumo5":"决起",
                        "bhfumo1_info":"“铭记”之附魔：①赋予此“附魔”时，若赋予者有“大匠”，其可以选择依次移去角色卡上每个种类随机数量的“附魔”标记，记录被移去各“附魔”的个数（若已有某种“附魔”的记录，则将其修改为原记录值加上当前值）。②当装备者造成或受到一次伤害后，将此“附魔”记录的“附魔”赋予当前装备，然后失去此“附魔”。装备者失去此装备时，失去此“附魔”。③失去此“附魔”时，装备者摸一张牌。",
                        "bhfumo2_info":"“崩毁”之附魔：赋予此“附魔”后，若其等级为1，该装备的一切技能和除此“附魔”以外的一切“附魔”失效，并锁定因此失效的“附魔”的状态。赋予此“附魔”后，若其等级大于1，立即失去此“附魔”。",
                        "bhfumo3_info":"“欢欣”之附魔：失去此装备时，装备者摸x/2张牌（{向下取整且至少为1}，x为此“附魔”的等级）。若此“附魔”被施加于坐骑牌上，将{}内容改为“向上取整”。",
                        "bhfumo4_info":"“圣谕”之附魔：装备者的手牌上限+y/2（向上取整，y为此“附魔”的等级）。若此“附魔”被施加于防具牌上，摸牌阶段，装备者额外摸y/2张牌（向下取整）。",
                        "bhfumo5_info":"“决起”之附魔：装备者的攻击范围+z（z为此“附魔”的等级）。若此“附魔”被施加于武器牌上，装备者的【杀】造成的伤害+z/3（向下取整）。",
                        "bhfumo3_draw":"欢欣",
                        "bhfumo31":"欢欣",
                        "bhfumo31_info":"",
                        "bhfumo_add":"附魔",
                        bhrenjian:"人间",
                        "bhrenjian_info":"结束阶段，你可以将一张♠牌当作【小道消息】使用。你使用的【小道消息】结算完毕后你摸一张牌。	",
                        bhluosheng:"罗生",
                        "bhluosheng_info":"出牌阶段限一次，你可以将一张手牌扣置于一名角色的角色卡旁，称为“罗生门”。角色卡旁有“罗生门”的角色在【小道消息】的结算中获得牌后，需立即随机展示一张“罗生门”牌，然后选择一项：获得此“罗生门”牌并翻面；或弃置一张花色与“罗生门”牌相同的手牌并令你摸两张牌，然后弃置该“罗生门”。",
                        "bhxiongxing2":"凶星",
                        "bhxiongxing2_info":"",
                        bhmingen:"铭恩",
                        "bhmingen_info":"当你一次性获得至少两张牌后，你可以选择一项令一名其他角色执行：1.摸一张牌；2.获得1点SP；3.弃置一张手牌并回复一点体力。",
                        bhzhuifang:"追芳",
                        "bhzhuifang_info":"使命技，当一名角色即将使用【崩坏爆发】时，你可以失去1点体力并防止之，然后你将该【崩坏爆发】对应的所有实体牌置入弃牌堆。<br><li>失败：本局游戏的第二张【崩坏爆发】结算完后，你回复1点体力，然后失去“铭恩”并获得“泉杖”和“凶星”。",
                        bhquanzhang:"泉杖",
                        "bhquanzhang_info":"当你受到伤害后或一名角色的回合结束时，你可以令一名其他角色获得1点SP并重铸一张牌。若该角色因此失去黑色牌，你令其失去1点体力。",
                        bhxiongxing:"凶星",
                        "bhxiongxing_info":"锁定技，你死亡时，你选择一名其他角色，将除该角色外的所有其他角色移出游戏直到下轮游戏开始。",
                        bhshenmeng:"深梦",
                        "bhshenmeng_info":"觉醒技，本局游戏第二张【崩坏爆发】结算完毕后，你将势力改为“崩坏”，然后失去1点体力上限和“斠剑”并回复体力至上限，获得“尖啸”、“寒星”和“诀岩”。",
                        bhjianxiao:"尖啸",
                        "bhjianxiao_info":"锁定技，一名角色的回合结束时，你的SP随机波动x点（x∈{-3, -2, -1, 0, 1, 2, 3, 4}，最低降至0）。",
                        bhhanxing:"寒星",
                        "bhhanxing_info":"当你一次性失去至少两张牌或回复1点体力或受到1点伤害后，你获得1点SP。一名角色的回合开始时，若你的SP数比上回合此时机减少了至少3点，你可以选择一项：弃置一张红色牌，然后增加1点体力上限；或令一名角色摸两张牌。",
                        bhjueyan:"诀岩",
                        "bhjueyan_info":"觉醒技，一名角色死亡后或你的准备阶段，若场上存活角色仅有两人或不多于整局游戏的一半（向上取整），你失去1点上限和“圣血”并获得“陨冰”和“律者”。",
                        bhyunbing:"陨冰",
                        "bhyunbing_info":"出牌阶段，你可以消耗7点SP，然后指定一名其他角色并选择一项：对其造成4点物理伤害；或弃两张黑色牌并对其造成3点冰冻伤害。若你以此法令一名角色进入了濒死状态，结算完后你失去1点体力且该技能失效直到你的下个回合开始。",
                        bhyuejie:"月解",
                        "bhyuejie_info":"你造成或受到伤害时，可将造成伤害的牌置于你的角色卡上。出牌阶段，你可以弃置一张“月解”牌，然后你获得一张“月解”牌。",
                        bhyaokong:"遥控",
                        "bhyaokong_info":"锁定技，出牌阶段开始时，若你在γ世界线且你的区域内没有【虚空万藏】，你从场上、牌堆或弃牌堆获得之。",
                        bhshenguan:"神棺",
                        "bhshenguan_info":"①出牌阶段限一次，你可以将任意张手牌置于你的角色卡上，称为“棺”。②你获得此技能后的第一个准备阶段，你可以指定任意名与你座次相邻的存活角色，使你、所指定角色和任意【卡莲】角色可以如手牌般使用或打出“棺”中的牌。③你指定的角色和任意【卡莲】角色的出牌阶段各限一次，其可以将一张手牌置入“棺”中。",
                        bhxiuqi:"朽奇",
                        "bhxiuqi_info":"①结束阶段，你可以指定一种牌的类别，然后弃置“棺”中的两张类别和你所选择的类别均不相同的牌。若如此做，你的下个准备阶段，你随机将牌堆中两张指定类别的牌加入“棺”中。②你和能够通过“神棺”调用“棺”中牌的角色受到一次伤害后，你{将牌堆顶的一张牌}加入“棺”中。你的回合外，若你的上个回合发动过朽奇①，则将{}内改为“从牌堆中随机将一张所选类别的牌”。",
                        bhhuixian:"会仙",
                        "bhhuixian_info":"使命技，任意【符华】角色可以如手牌般使用或打出你“棺”中的牌。<br><li>成功：准备阶段，若所有【符华】角色累计使用或打出了不少于4张“棺”中的牌，你增加1点体力上限并回复1点体力，然后解锁“折跃”的星门“β-1”。<br><li>失败：出牌阶段开始时，若全场没有任何【符华】角色存活，你弃置两张颜色不同的手牌（无则改为失去1点体力），然后获得一枚“惨变”标记并解锁“折跃”的星门“β-2”。",
                        bhshenghai:"圣骸",
                        "bhshenghai_info":"出牌阶段，你可以弃置任意系列的任意【神之键】（【虚空万藏】系除外），然后获得该系任一形态的全部装备技能（重构相关技能无法获得，每系【神之键】各限一次）。若如此做，你失去1点体力上限。",
                        bhhunzuo:"魂座",
                        "bhhunzuo_info":"锁定技，当你进入濒死状态时，你选择一项：失去1点上限并回复体力至1点；或增加1点体力上限。",
                        bhshenmian:"哂面",
                        "bhshenmian_info":"觉醒技，出牌阶段开始时，若你的区域内没有【虚空万藏】，你从场上、牌堆或弃牌堆获得【虚空万藏】并失去1点体力上限。然后你获得技能“遥控”。",
                        bhtianqi:"天启",
                        "bhtianqi_info":"觉醒技，结束阶段，若你已至少发动过3次“圣骸”，你根据情况执行一项：若你没有“靓变”标记且势力为“崩坏”，你解锁“折跃”的星门“γ-1”；否则，你解锁“折跃”的星门“γ-2”。",
                        bhzhibao:"至宝",
                        "bhzhibao_info":"结束阶段，若你有“惨变”标记，你可以将手牌补至体力上限减2（至多补至8张）。你以此法一次性摸的牌数不多于你的“惨变”标记数时，若你已损失的体力值不小于你的体力值，你可以选择一项：回复1点体力，或再摸一张牌。",
                        bhxushen:"虚神",
                        "bhxushen_info":"你受到一次伤害后，若你有“惨变”标记，你可以令一名角色摸三张牌并翻面，然后你可以弃置其x张牌。（x为你“惨变”标记的数量且至多为2）",
                        bhchuanzhou:"舛宙",
                        "bhchuanzhou_info":"出牌阶段，你可以关闭当前世界线。若如此做，你将势力改为“天命”，然后根据你当前持有“靓变”与“惨变”标记的情况执行对应项：<br>①无“靓变”也无“惨变”：开启δ世界线；<br>②有“靓变”也有“惨变”：开启任意一条世界线；<br>③有“靓变”且无“惨变”：开启SG世界线；<br>④有“惨变”且无“靓变”：开启β世界线。",
                        bhlingxing:"灵行",
                        "bhlingxing_info":"有“伴侣”标记的其他角色的弃牌阶段结束时，若你有“靓变”标记，你可以选择一项：令其执行一个额外的出牌阶段；或摸一张牌并执行一个额外的结束阶段。",
                        bhzhongwang:"终望",
                        "bhzhongwang_info":"阶段技，若你有“靓变”标记，你可以失去1点体力上限并令你或一名有“伴侣”标记的其他角色获得“丰祈”“神棺”“圣骸”“崩心”中一个其未拥有的技能。",
                        bhzhengguo:"正果",
                        "bhzhengguo_info":"每轮各限一次，①当你发动“终望”涉及的技能时，你可以令一名有“伴侣”标记的其他角色摸一张牌。②一名有“伴侣”标记的其他角色发动“终望”涉及的技能时，其可以令你摸一张牌。",
                        bhnishi:"逆世",
                        "bhnishi_info":"限定技，出牌阶段，若你有“靓变”标记，你可以选择一名【卡莲】角色并令其获得一枚“伴侣”标记。",
                        bhweinian:"伪念",
                        "bhweinian_info":"出牌阶段，若你有且仅有两张颜色不同的手牌，你可以弃置之并回复1点体力。若如此做，你指定一名其他角色，其先对你造成1点伤害，然后你对其造成1点伤害（不论你是否死亡）。",
                        bhshuhai:"树海",
                        "bhshuhai_info":"阶段技，你可以失去x点体力（x为全场“崩心”标记的总数），然后弃置区域内所有牌。若如此做，你关闭当前世界线，然后从α、β、γ和Ω世界线中随机开启一条未被你开启过的世界线。（若上述世界线均被开启过……很遗憾，你只能开启α世界线）",
                        bhjiandian:"荐奠",
                        "bhjiandian_info":"锁定技，将你受到的伤害改为失去等量的体力。",
                        bhzhengxing:"征行",
                        "bhzhengxing_info":"使命技，准备阶段，你令一名没有“东征”的【卡莲】角色失去1点体力并获得技能“东征”；此时若不存在尚获得“东征”的【卡莲】，你选择一项：获得“东征”（整局游戏限一次）；或摸一张牌。<br><li>成功：准备阶段，若场上至少有一名【卡莲】角色存活且你有“靓变”标记但没有“惨变”标记，你解锁“折跃”的星门“α-1”。<br><li>失败：准备阶段，若场上没有任何【卡莲】角色存活，你弃置两张颜色不同的手牌（无则改为失去1点体力），然后获得一枚“惨变”标记并解锁“折跃”的星门“α-2”。",
                        bhbengxin:"崩心",
                        "bhbengxin_info":"①你受到一次伤害后，可以令一名其他角色回复y点体力或增加y点体力上限（y为此伤害的点数），然后该角色获得等量的“崩心”标记。②你回复1点体力后，须移去一名有“崩心”标记的角色的一个“崩心”，然后选择一项：令其失去1点体力；或令其失去1点上限。",
                        bhzheyue:"折跃",
                        "bhzheyue_info":"阶段技，你可以选择一个可用的星门，然后关闭当前世界线并开启星门指向的世界线（如果指向多条不同的世界线，则按照星门的叙述选择一条开启）。所有的星门初始均为锁定状态，只有已经解锁完毕、且当前正处于其名称对应的世界线时，其才可用。<br>全部星门总计6个，如下：<br>α-1：选择前往β线、δ线或Ω线；<br>α-2：固定前往γ线；<br>β-1：选择前往γ线或Ω线；<br>β-2：固定前往γ线；<br>γ-1：固定前往α线；<br>γ-2：选择前往δ线或Ω线。",
                        bhzhunqiong:"迍穷",
                        "bhzhunqiong_info":"锁定技，【新药】不计入你的手牌上限。一名其他角色对你造成伤害后，其可以随机获得你手牌中的一瓶【新药】。当第三及以上次有一名【卡莲】角色使用【新药】时，若其没有“荐奠”，你获得一枚“靓变”标记并失去1点上限。",
                        bhxuedu:"血毒",
                        "bhxuedu_info":"此技能静默发动且必须发起询问。当一名其他角色获得你的【新药】时，你可以偷偷尝试将此【新药】转变为除效果外与之完全相同的【假药】。该尝试基础成功率为20%，且你每有1点体力，成功率提升15%。（当此技能被设置为自动发动时，此技能失效）",
                        bhfengqi:"丰祈",
                        "bhfengqi_info":"出牌阶段每种花色限一次，你可以弃置一张手牌，然后制备一张花色和点数均与之相同的【新药】。你制备了一张【新药】后，可以将其交给一名其他角色。",
                        bhzhuinian:"追念",
                        "bhzhuinian_info":"使命技，①当你的体力上限变化或你对其他角色造成伤害时，防止之。②你的体力值变化后，你失去/回复体力至4点。<br><li>成功：你获得此技能的第二轮游戏开始时，若场上有至少一名【卡莲】角色存活，你选择一条“卡莲存活的世界线”开启（SG线除外），然后获得技能“折跃”。<br><li>失败：你获得此技能的第二轮游戏开始时，若场上没有任何【卡莲】角色存活，你选择一条“卡莲不在的世界线”开启（Ω线除外），然后获得技能“折跃”。<br><li>锁定技，你开启/关闭一条世界线时，你获得/失去其中包含的/开启时获得的所有技能。你获得过的“靓变”标记或“惨变”标记永久保留，无法因切换世界线而消除。",
                        bhjuanzu:"眷族",
                        "bhjuanzu_info":"每回合限一次，你于非濒死状态回复一次体力时，你可以改为令一名其他角色回复等量体力。若如此做，你摸一张牌，然后该角色可以交给你一张牌。",
                        bhxueyong:"血拥",
                        "bhxueyong_info":"限定技，当你令一名其他角色回复体力后，若其没有“眷属”，你可以令其获得“眷属”。",
                        bhqiangquan:"强权",
                        "bhqiangquan_info":"阶段技，你可以与一名体力值不大于你的其他角色交换手牌，若你的手牌数因此增多，你失去一点体力。",
                        bhtiewan:"铁腕",
                        "bhtiewan_info":"你可以将场上的一张黑色牌当做【无懈可击】或者【杀】使用，你以此法使用牌后，该牌的所有者可以弃置你的一张牌。",
                        bhzhengcheng:"征程",
                        "bhzhengcheng_info":"使命技，你可以弃置一张红色/黑色牌，然后摸一张牌并发动一次“圣护”/“救世”。<br>成功：当你令一名其他角色脱离濒死状态或你杀死一名其他角色时，若你已发动“圣护”与“救世”的次数相等且不小于2，你将【卫士】置入你的装备区，然后将手牌与体力值均补至体力上限并获得“英耀”。<br>失败：当你发动“征程”后，若你已发动“圣护”与“救世”的次数之差的绝对值不小于3，且你发动“圣护”的次数更多，则你获得“圣血”，然后失去体力至1点，否则你获得“滞冷”，然后弃置所有手牌。",
                        bhyingyao:"英耀",
                        "bhyingyao_info":"①每轮限一次，当你攻击范围内的一名其他角色成为【杀】目标时，若其体力值不大于你，你可以与其交换位置并将此【杀】的目标改为你。②当你使用【杀】指定目标时，你可以依次展示此【杀】的所有目标各一张手牌。若如此做，根据其被展示手牌与此【杀】的花色：相同，你获得该角色被展示的牌，且其无法响应此【杀】；不同，其弃置被展示的牌。",
                        bhjiukun:"救困",
                        "bhjiukun_info":"每回合限一次，一名角色的物种濒危等级降低后，若其当前物种濒危等级为“濒危”或“易危”，你可以令你和与该角色同属的其他角色依次选择是否交给其一张牌。",
                        bhenfan:"恩返",
                        "bhenfan_info":"一名角色从“极危”或“濒危”回复到“易危”乃至更良好级别时，可以令一名与其同属的角色和你各摸一张牌。",
                        bhsanjie:"三阶",
                        "bhsanjie_info":"觉醒技，准备阶段，若有角色的手牌数与其体力上限之差大于等于3，你失去“金鱼”，然后增加6点体力上限并回复3点体力。",
                        bhjinyu: "金鱼",
                        "bhjinyu_info": "每回合限一次，当你或到你距离1以内的一名其他角色受到一次伤害后，你可以展示牌堆顶的四张牌，令伤害来源（若无则改为受伤者）选择其中任意张花色相同的牌交给受伤者，然后你获得余下的牌。",
                        bhyuanjing: "渊鲸",
                        "bhyuanjing_info": "阶段技，你可以展示至多x名（x为你已损失的体力值）其他角色的各一张手牌并令此牌保持明示直到该角色失去此牌。场上每有一种因此被明示的花色，你的手牌上限便+1，若你已发动过“冰熊”，将此效果改为“每轮限x次，你可视为使用一张以此法被明示的基本牌或普通锦囊”。",
                        bhbingxiong: "冰熊",
                        "bhbingxiong_info": "限定技，出牌阶段，你可以选择一名其他角色并依次弃置所有手牌。若如此做，你每弃置一张手牌就令其进行一次判定：若判定牌与你本次弃置的手牌颜色不同，你令y值+1（y初始为0且至多为4）。你弃置所有手牌后，你对该角色造成y点伤害，然后你修改“雪狼”。",
                        bhxuelang: "雪狼",
                        "bhxuelang_info": "锁定技，你受到的冰冻伤害-1。",
                        "bhxuelang2": "雪狼·改",
                        "bhxuelang3": "雪狼",
                        "bhxuelang2_info": "锁定技，你受到一次物理伤害前，将其改为冰冻伤害。你受到的冰冻伤害-1。当你获得一次牌后，你弃置所有手牌。",
                        bhbaiye: "白夜",
                        "bhbaiye_info": "摸牌阶段开始时，你可以放弃摸牌，若如此做，你摸一张牌并进入爆发状态直到出牌阶段结束。当你处于爆发状态时，你于出牌阶段使用【杀】没有距离和次数限制。",
                        bhqianxing: "千星",
                        "bhqianxing_info": "锁定技，一名角色的回合开始时，你获得1个“千星”标记，然后其可以弃置一张牌令你额外获得1个“千星”。当你的“千星”数量不小于x时，你移去x个“千星”并选择一项：摸一张牌；或将一张手牌视为【杀】。（x为场上角色数的一半且至少为2，向上取整）。",
                        bhranyou: "燃油",
                        "bhranyou_info": "锁定技，摸牌阶段，你额外摸（x+y）张牌（x为你的体力值且至多为4，y为你装备区内的牌数且至多为4）。你受到的火焰伤害+（x-1），当你受到一次冰冻伤害后，下个摸牌阶段你少摸y张牌（至少摸0张）。",
                        bhbaoxue: "暴雪",
                        "bhbaoxue_info": "锁定技，出牌阶段开始时，你使用一张手牌与牌堆顶第一张牌进行拼点：若你赢，本回合你跳过弃牌阶段；若你没赢，你受到1点无来源的冰冻伤害。当你以此法拼点时，你的拼点牌点数-z（z为游戏轮数）。",
                        bhbaima: "白马",
                        "bhbaima_info": "锁定技，你计算与其他角色的距离时-1。当你受到的冰冻伤害后，你弃置一张牌。",
                        bhyanhua: "演化",
                        "bhyanhua_info": "出牌阶段限一次，你可以弃置四种花色的手牌各一张，指定一名有符合条件的技能的其他角色，令其选择一项：1. 失去一项非觉醒非限定技，然后增加一点体力上限并回复1点体力；2. 重置一项已发动的限定技或觉醒技，并摸两张牌。",
                        bhtubian:"突变",
                        "bhtubian_info":"锁定技，结束阶段，你随机记录一种未记录的花色，你发动“演化”时视为已弃置了记录花色的牌。当你发动“演化”后，你清除记录。",
                        bhtianhai: "填海",
                        "bhtianhai_info": "当你于出牌阶段对一名角色使用仅指定唯一目标的牌时，你可以摸x张牌并弃置x张牌。（x为本阶段内你已对该角色使用过的牌数+1，至多为你的体力上限）",
                        bhlihuo: "离火",
                        "bhlihuo_info": "你可以将一张基本牌当作【火攻】使用，或当作火【杀】使用或打出。每回合限三次，你以此法使用了一张【火攻】时，你可以摸一张牌。",
                        bhqinyin: "琴音",
                        "bhqinyin_info": "弃牌阶段，若你至少弃置了两张牌，你选择一项：所有存活角色各失去1点体力，或各回复1点体力。",
                        bhdutu: "赌徒",
                        "bhdutu_info": "你使用或打出一张牌时，若你的手牌上限大于0，你可以摸一张牌。若如此做，根据此牌与所摸牌的点数、花色和类型不同的项数，你执行：0.摸一张牌；2.本回合手牌上限-1；3.失去1点体力。",
                        "bhlingshou2": "零售",
                        "bhlingshou2_info": "",
                        bhqiongji:"琼集",
                        "bhqiongji_info":"回合技，你使用牌时，可将牌名改为【顺手牵羊】。若目标因此：数量不为一，目标改为牌堆；距离不合法，此牌不可响应。  ",
                        bhkongmeng: "空梦",
                        "bhkongmeng_info": "锁定技，你不进行濒死结算，你使用造成过伤害的牌结算后或体力值绝对值不小于13时，此技能失效直到结算完毕。  ",
                        bhweizang:"未藏",
                        "bhweizang_info":" 锁定技，点数为A，K和你体力值绝对值的牌不计入你的手牌上限。你获得符合此条件的牌后，重置〖琼集〗。",
                        bhlingshou: "零售",
                        "bhlingshou_info": "每名其他角色的出牌阶段限一次，该角色可以向你申请购物。若你同意，该角色可以挑选“店”里的任意张牌，然后计算所选牌的总价（牌的单价为：牌的点数+3）并交给你若干张牌，这些牌的总价不得小于其从你“店”里所选牌的，然后该角色获得其选择的牌。",
                        bhbingying: "冰影",
                        "bhbingying_info": "每当你于出牌阶段内使用了一张非基本牌后，你可以进行一次判定，若结果为：红色，你摸一张牌并弃一张牌；黑色，你弃置一张手牌并摸两张牌。你于每个出牌阶段内第一次发动此技能时，判定后可改为按照如下叙述执行：红色，你回复1点体力；黑色，你对攻击范围内的一名角色造成1点冰冻伤害，然后该角色摸一张牌。",
                        bhzhixu: "秩序",
                        "bhzhixu_info": "你弃置一名角色的牌时，若你已受伤，你可以获得其中的至多x张。（x为你当前已损失的体力值且至多为5）",
                        bhyaojing: "妖精",
                        "bhyaojing_info": "出牌阶段限x次，你于出牌阶段使用了一张牌后，你可以令一名角色重铸一张与此牌花色和点数均不同的牌。（x为你的体力值）",
                        bhsushi: "愫诗",
                        "bhsushi_info": "当你成为其他角色使用【杀】的目标时，若此【杀】的使用者体力上限或体力值不小于你，你可以令其选择一项：令你获得此【杀】；无效此【杀】。",
                        bhdizhu: "地主",
                        "bhdizhu_info": "准备阶段，你可以获得距离为1的一名其他角色的一张手牌。",
                        bhqianye: "前夜",
                        "bhqianye_info": "觉醒技，当你的体力值变为1时，若场上没有濒死角色，你终止一切结算并结束当前回合，然后你摸4张牌并进行一个额外的回合。此回合的出牌阶段内你使用【杀】没有次数限制，且回合结束时，你失去“地主”。",
                        bhbudong: "不动",
                        "bhbudong_info": "一名角色对你造成一次伤害前，你可以防止之，改为该角色再对你造成一次值为原伤害一半的同属性伤害（向下取整）。若如此做，你须重复此流程。你以此法将一次伤害的值改为0时，此技能失效直到下一轮游戏开始。",
                        bhbuji: "不及",
                        "bhbuji_info": "当你成为一名其他角色使用牌的目标后，你可以令该角色与你依次弃置一张手牌直到一方放弃。若无人弃牌或最后弃牌的角色是你，你令该角色本回合内到你的距离+3且该牌对你无效，然后此技能失效直到下一轮游戏开始。",
                        bhbujin: "不尽",
                        "bhbujin_info": "你摸一次牌后，可以再进行一次摸牌，摸牌数量等同于上次的一半（向下取整）。若如此做，你须重复此流程。你以此法即将进行一次数量为0的摸牌时，此技能失效直到下一轮游戏开始。",
                        bhwudu: "雾都",
                        "bhwudu_info": "锁定技，游戏场地被光化学烟雾笼罩，3的整数倍轮次开始时，全场角色依次选择一项：失去1点SP；或失去1点体力。",
                        bhdawei: "大卫",
                        "bhdawei_info": "你每于出牌阶段使用三张牌，就可以弃置一张牌并获得2点SP。摸牌阶段，若你有SP，则你消耗所有SP，然后额外摸等量的牌。",
                        bhshuangcheng: "双城",
                        "bhshuangcheng_info": "锁定技，游戏开始时，你指定一名其他角色并令其获得“巴黎”标记或“伦敦”标记，然后你获得另一枚。“巴黎”角色每受到1点伤害，“伦敦”角色就获得1点SP；“伦敦”角色每失去1点体力，“巴黎”角色就获得1点SP。",
                        bhhuaniao: "花鸟",
                        "bhhuaniao_info": "锁定技，当你使用或打出一张牌时，若此牌与你任意因“花鸟”记录的牌的花色或点数相同，你摸一张牌。",
                        bhzhenwo: "真我",
                        "bhzhenwo_info": "出牌阶段，你可以弃置一张手牌并选择一名没有“刻印”效果的角色，然后选择一项：<br>1. 选择该角色的一项有触发时机的技能，令其增加效果“此技能发动时，你弃一张牌”；<br>2. 选择该角色的一项有触发时机的技能，令其增加效果“此技能发动时，你摸一张牌”；<br>3. 令该角色获得技能“花鸟”，然后该角色记录你以此法弃置的牌；<br>4. 令该角色获得技能“崩坏”，然后该角色获得你以此法弃置的牌。",
                        bhshenjib: "神机",
                        "bhshenjib_info": "当你使用普通锦囊牌指定其他角色为目标时，你可以对其使用一张不计入次数限制的【杀】。",
                        bhbinglao: "冰牢",
                        "bhbinglao_info": "你使用【杀】对一名角色造成伤害后，可以令其摸x张牌并翻面（x为其已损失的体力值且至多为5）。",
                        bhyinyue: "银月",
                        "bhyinyue_info": "你使用锦囊指定其他角色作为唯一目标后，可以令其选择一项：将两张颜色与之相同的牌交给你并于此牌结算后获得此牌；或令你摸一张牌且下一次发动“神机”时可以将任意牌当作【杀】使用。",
                        bhfengshuang:"封霜",
                        "bhfengshuang_info":"你可视为使用仅能触发指定效果的冰【杀】，若未被响应，结算后你须执行另一效果。",
                        bhchana: "刹那",
                        "bhchana_info": "轮次技，当你需要使用牌时，你可执行一个所有角色共可最多使用3张牌（无距离与次数限制）的出牌阶段。直到该阶段结束，所有其他角色的非锁定技失效。",
                        bhshuangxing: "双星",
                        "bhshuangxing_info": "锁定技，准备阶段，你失去“创生”并进行一次判定，若结果为：黑色，你获得“黑渊”；红色，你获得“白花”。然后若你同时拥有“黑渊”和“白花”，你失去“黑渊”和“白花”并获得“创生”。",
                        bhtongde: "同德",
                        "bhtongde_info": "锁定技，你令任意【齐格飞】角色回复一次体力后，你令其获得1点SP。",
                        bhchuangsheng: "创生",
                        "bhchuangsheng_info": "锁定技，你视为拥有技能“黑渊”和“白花”。结束阶段，你可以将牌堆中所有的【创生之键】交给一名角色。",
                        bhheiyuan: "黑渊",
                        "bhheiyuan_info": "锁定技，你视为拥有【黑渊】的技能。你使用的【杀】需要额外的一张【闪】才能响应。",
                        bhbaihua: "白花",
                        "bhbaihua_info": "锁定技，你视为拥有【白花】的技能。你令一名其他角色回复一次体力时，你摸一张牌。",
                        bhlangzi: "浪子",
                        "bhlangzi_info": "出牌阶段限一次，你可以弃置两张颜色相同的手牌，对攻击范围内的一名其他角色造成1点火焰伤害，若你以此法造成了一次不小于2的伤害，则你失去x点体力（x为本次伤害值的一半，向下取整）。",
                        bhshengcai: "圣裁",
                        "bhshengcai_info": "当你造成火焰伤害时，你可以消耗y点SP并弃置y张牌，然后令此伤害值+y（y为你的SP数且最多为3）。",
                        bhtongxin: "同心",
                        "bhtongxin_info": "锁定技，你每失去1点体力或体力上限，就获得1点SP；任意【塞西莉亚】角色令你回复一次体力后，你可以与其各摸一张牌。",
                        bhxuguang: "旭光",
                        "bhxuguang_info": "回合技，其他角色即将受到致命伤害时，你可以获得一个〖噬魔〗以防止之，然后伤害来源与你依次对对方造成1点伤害。",
                        bhshimo: "噬魔",
                        "bhshimo_info": "锁定技，此技能于出牌阶段/结束阶段视为无距离/体力限制的〖狂骨〗/〖崩坏〗。",
                        bhshimo1:"噬魔",
                        bhshimo2:"噬魔",
                        bhyinyi: "银翼",
                        "bhyinyi_info": "结束阶段，你可以使用或收回一张装备牌。若你的区域内没有坐骑牌，你视为拥有技能“马术”。",
                        bhyuji: "驭极",
                        "bhyuji_info": "当你于回合内使用一张牌后，若你区域内牌的总数未因使用此牌而变化，你可以进行一次判定：若判定牌无法被使用或无合法目标，你获得之；否则，你须为此牌指定合法目标并使用之。",
                        bhjielv: "戒律",
                        "bhjielv_info": "锁定技，你与其他角色之间的距离+1，你对自己造成的伤害-1。  ",
                        bhluanwu:"乱武",
                        "bhluanwu_info":"限定技，出牌阶段，你可以令所有其他角色依次选择一项：1.对其攻击范围内距离最近的另一名角色使用一张【杀】；2.失去1点体力。",
                        bhyujian: "予槛",
                        "bhyujian_info": "出牌阶段每名角色限一次，你可将一张你当前无法使用的手牌视为【桃】或【无中生有】对你或攻击范围内的角色使用。若如此做，其获得〖戒律〗直到其造成或进入濒死状态。",
                        bhzhongzhao: "终兆",
                        "bhzhongzhao_info": "锁定技，首次洗牌时，你发动〖乱武〗并翻倍〖戒律〗数值。你第二次进入濒死状态时，你分配所有牌并减半〖戒律〗数值。",
                        bhfanxing: "繁星",
                        "bhfanxing_info": "当你成为一名其他角色使用牌的唯一目标时，你可以将一张【画卷】交给一名其他角色（不能是牌的使用者），若如此做，该角色代替你成为此牌的目标，且其可以令你摸一张牌。",
                        bhbaijuan: "白卷",
                        "bhbaijuan_info": "锁定技，【画卷】不计入你的手牌上限。当你第三次成为同一名其他角色使用牌的目标（或之一）时或受到来自其的伤害后，你摸一张牌，然后记录该角色。",
                        bhhuishi: "绘世",
                        "bhhuishi_info": "出牌阶段限一次，你可以以一名本局游戏未登场的【崩崩崩】扩展包角色为参照进行绘画。若你因“白卷”记录了角色，则你改为以被“白卷”记录的角色为参照进行绘画并删除该项记录，且该次绘画不计入次数限制。",
                        bhshanghen: "伤痕",
                        "bhshanghen_info": "限定技，当你进入濒死状态时，你可以依次执行以下操作：1. 将你的角色卡更换为【弗兰肯斯坦】；2. 在凶手和已阵亡的其他角色中选择这些角色角色卡上的至多4项技能获得之；3. 你将体力上限重置为x（x为5减去你选择的技能数）；4. 你将体力回复至上限。",
                        bhyouguo: "油锅",
                        "bhyouguo_info": "锁定技，你即将受到的大于你的体力值的伤害改为火焰伤害。你死亡时，你分配任意张牌至任意名横置角色。",
                        bhzhuangyi: "壮义",
                        "bhzhuangyi_info": "出牌阶段限一次，你可以横置并选择一名手牌最多的其他角色。若如此做，本阶段内你可以不限次数地与其拼点：若你赢，你将其手牌尽可能的平均分配给该角色以外的角色，因此获得牌的未横置角色横置。本阶段结束时，若你本阶段你以此技能发起过拼且未赢过，该角色可以视为对你使用一张伤害值为x的【决斗】（x为本阶段你以此技能发起拼点的次数）。",
                        bhgangrou: "刚柔",
                        "bhgangrou_info": "转换技，阳：当你使用一张基本牌或普通锦囊牌时，你可以令其不可被响应；阴：弃牌阶段结束时，你可以将你本阶段内弃置的牌交给一名其他角色。",
                        bhyouwu: "有无",
                        "bhyouwu_info": "转换技，出牌阶段限一次，阳：你可以将一张牌当作【无中生有】使用；阴：你可以将所有手牌（至少两张）当作一张【无中生有】使用。",
                        bhningjing: "宁静",
                        "bhningjing_info": "转换技，锁定技，阳：你的手牌数变化后，你立即将其补至你的体力上限（至多补至5张）；阴：当你受到一次伤害后，你弃置所有手牌。",
                        bhwuwei: "无为",
                        "bhwuwei_info": "转换技，锁定技，阳：一名角色的回合开始时，你本回合造成的伤害-1；阴：一名角色的回合开始时，你的防具牌失效直到本回合结束。",
                        bhziran: "自然",
                        "bhziran_info": "转换技，出牌阶段限一次，阳：若你至少拥有3个“阳”状态的转换技，你可以将你的所有技能转换为“阴”；阴：若你至少拥有3个“阴”状态的转换技，你可以将你的所有技能转换为“阳”。",
                        bhyehuang: "夜煌",
                        "bhyehuang_info": "一名其他角色造成一次伤害前，你可以将一张牌交给该角色，若如此做，你成为此伤害的来源。",
                        bhhongyu: "红浴",
                        "bhhongyu_info": "当你进入濒死状态时，你可以立即对一名女性其他角色使用一张没有距离限制的【杀】，然后将体力值回复至1点，若如此做，此【杀】结算完毕后你失去1点体力，若此【杀】造成了伤害，你增加1点体力上限并回复1点体力。",
                        bhwuhai: "雾海",
                        "bhwuhai_info": "锁定技，结束阶段，你失去体力至0，然后你可以令一名其他角色失去1点体力。",
                        bhweiguang: "微光",
                        "bhweiguang_info": "当你进入濒死状态时，你可以摸x张牌，然后展示至少一张手牌并将其交给一名其他角色。若如此做，你交出的牌中每有一张黑色牌，你回复1点体力。（x为场上存活的【可可利亚】和【可可利亚孤儿院】角色总数的一半，向上取整）",
                        bhmimeng: "谧梦",
                        "bhmimeng_info": "锁定技，你的体力值变化时，若你的手牌数少于体力的变化值，你立即将手牌补至此变化值。",
                        bhluoxuan: "螺旋",
                        "bhluoxuan_info": "转换技，锁定技，阳：当有装备牌进入你的装备区时，你摸一张牌，然后失去“巧工”并获得“魔术”。阴：当有装备牌离开你的装备区时，你摸一张牌，然后失去“魔术”并获得“巧工”。",
                        bhmoshu: "魔术",
                        "bhmoshu_info": "出牌阶段限一次，你可以与一名攻击范围内的其他角色交换装备区的牌，然后若你装备区的牌数未因此增加，你选择一项：摸两张牌；或你令一张“驱动”牌的“硬直”归零。",
                        bhqiaogong: "巧工",
                        "bhqiaogong_info": "当你摸牌前，若本次摸牌数不小于2，你可以放弃摸牌并改为从牌堆中随机获得一张装备牌和一张锦囊牌，然后你选择一项：立即使用该装备牌；或令你任意张“驱动”牌的“硬直”依次减2或加2。",
                        bhqudong: "驱动",
                        "bhqudong_info": "锁定技，你不能使用【无懈可击】以外的普通锦囊。出牌阶段，你可以选择一张普通锦囊，记录此牌的“硬直”值（等于其原始点数），然后将其扣置于你的角色卡上。当一张“驱动”牌的“硬直”降至0及更低时，你为此牌指定合理的目标（若无合法目标，则改为你获得此牌），然后亮出并使用之。当有多张“驱动”牌可被同时使用时，后放置的先使用；一名角色的回合开始时，所有“驱动”牌的“硬直”依次减1。",
                        bhreyuedu: "月读",
                        "bhreyuedu_info": "你可以将你使用或打出并结算完毕的【无懈可击】、黑色的【杀】或红色的【闪】（对应的实体牌均必须严格为1张）置于角色卡上，称为“分身”，然后你摸一张牌，“分身”最多同时存在8张。",
                        bhcaiduan: "裁断",
                        "bhcaiduan_info": "阶段技，你可以移去四张花色各不相同的“分身”，若如此做，你对攻击范围内的一名其他角色造成2点物理伤害。",
                        bhshizui: "誓罪",
                        "bhshizui_info": "一名其他角色即将获得或弃置你的一张牌时，你可以移去一张“分身”并摸一张牌。若如此做，取消之。",
                        bhchuiai: "垂爱",
                        "bhchuiai_info": "主公的回合开始时，若你不为主公，其可以令你摸一张牌。",
                        bhlangke: "浪客",
                        "bhlangke_info": "你每使用一张锦囊牌，你本回合到其他角色的距离便-1。出牌阶段限一次，若你与所有其他角色的距离都为1，你可以摸两张牌并令你本回合可多使用一张【杀】。",
                        bhshoufeng: "受封",
                        "bhshoufeng_info": "觉醒技，一名天命势力的角色令你回复体力后，你增加1点体力上限并将势力改为天命，然后回复1点体力，失去“浪客”、获得“斠剑”并将“影杀”改为阶段技。",
                        bhyingsha: "影杀",
                        "bhyingsha_info": "出牌阶段，你可以将一张黑色手牌当作【暗杀】使用。",
                        bhduzhan: "独战",
                        "bhduzhan_info": "锁定技，x为当前存活的与你身份相同的角色数。①x不大于5时，准备阶段，你令一名其他角色执行一项：摸x张牌并弃一张牌；或弃x张牌并摸一张牌。②x不大于3时，摸牌阶段，你额外摸一张牌。③x不大于1时，跳过你的弃牌阶段。",
                        bhmingwang: "明王",
                        "bhmingwang_info": "当你使用【杀】指定一名角色为目标/成为【杀】的目标后，可以进行判定：若不为♥，你弃置其区域内的一张牌/你摸一张牌。若此【杀】的目标/使用者的体力值大于你，你可额外弃置其一张牌/摸一张牌。",
                        bhweicheng: "围城",
                        "bhweicheng_info": "当你对装备区内有牌或手牌数小于你的角色使用【杀】时，你可以令该角色选择一项：弃置一张装备牌；或令你摸两张牌。",
                        bhtieti: "铁蹄",
                        "bhtieti_info": "你可以将两张牌当作一张【杀】使用或打出，你使用的对应实体牌数大于1的【杀】不可被响应。",
                        bhlingzhu: "灵祝",
                        "bhlingzhu_info": "一轮游戏开始时，你可以从牌堆中随机获得两张♠J牌，然后此技能失效直到两轮后。",
                        bhhuangting: "皇庭",
                        "bhhuangting_info": "你可以将一张♠牌或J牌当作【杀】或【决斗】使用，你以此法使用了一张【杀】时，你摸一张牌。",
                        bhguixiang: "归乡",
                        "bhguixiang_info": "觉醒技，你杀死了一名角色后，你减1点体力上限并获得“寒都”。",
                        bhhandu: "寒都",
                        "bhhandu_info": "一名角色受到一次伤害前，若你到其或其到你距离为1，你可以摸一张牌并交给其一张牌，然后防止此伤害多于1的部分。",
                        bhshengjian: "圣剑",
                        "bhshengjian_info": "锁定技，你使用点数不大于7的牌时无距离限制；你使用点数大于7的牌没有次数限制。",
                        bhliedi: "烈帝",
                        "bhliedi_info": "锁定技，一轮游戏开始时，你从牌堆中随机获得两张♥K牌，然后此技能失效直到两轮后。",
                        bhwutong: "武统",
                        "bhwutong_info": "你可以将一张♥牌或K点牌当作【酒】使用。",
                        bhfuchou: "复仇",
                        "bhfuchou_info": "一名角色在受到一次有来源的伤害后可以立即对伤害来源使用一张【决斗】。当需要以此法使用【决斗】时或在以此法使用的【决斗】的结算中，欲使用【决斗】或即将成为其目标的角色可以将一张黑色牌当作【决斗】使用或【杀】打出。一名角色以此法使用了一张【决斗】时，【决斗】的结算双方各摸一张牌。	",
                        bhshishi: "史诗",
                        "bhshishi_info": "你的摸牌阶段开始时或有角色通过“复仇”造成了一次伤害后，你可以令一名角色摸一张牌。然后若该角色不处于爆发状态，你令其进入爆发状态直到其回合结束。",
                        bhqishi: "启示",
                        "bhqishi_info": "准备阶段，若你已受伤，你可以弃置一张手牌并亮出牌堆顶的x+1张牌（x为你已损体力值），若你有技能“构造”，你记录这些牌中未“构造”记录牌名的基本牌或普通锦囊牌并将其置入弃牌堆，然后你获得剩余牌。你通过“启示”获得的牌不计入当前回合的手牌上限。",
                        bhmengzhu: "盟主",
                        "bhmengzhu_info": "主公技，一名逆熵其他角色的出牌阶段开始时，其可以弃置一张牌并令你摸一张牌。若你有技能“构造”，你记录其以此法弃置的未被你“构造”记录牌名的基本牌或普通锦囊牌的牌名。",
                        bhjiexi: "解析",
                        "bhjiexi_info": "锁定技，一名角色的回合结束时，若你在本回合内没有受到过伤害，你摸一张牌并弃置一张牌。若你有技能“构造”，你以此法弃置未被“构造”记录牌名的基本牌或普通锦囊牌时，你记录其牌名；否则你令“构造”可使用次数+1。",
                        bhgouzao: "构造",
                        "bhgouzao_info": "你获得此技能时，你记录【杀】和【闪】的牌名。每局游戏限一次，你可以将一张牌当做“构造”记录过且本回合未以此法使用过的牌使用或打出。",
                        bhxinzhan: "心斩",
                        "bhxinzhan_info": "当你使用雷【杀】指定目标时，你可以令该【杀】不可响应。当你造成伤害时，你可以摸一张牌，然后终止一切结算并结束当前回合。",
                        bhwange: "挽歌",
                        "bhwange_info": "限定技，当一名本局游戏没有受到过以你为来源的伤害的其他角色进入濒死状态时，你可以令其回复1点体力，若如此做，你增加1点体力上限并将势力改为“世界蛇”，然后获得“律者”和“心斩”。",
                        bhqianniao: "千鸟",
                        "bhqianniao_info": "出牌阶段限一次，你可以摸一张牌并视为对一名其他角色使用一张没有距离限制且不计入次数限制的雷【杀】，若此【杀】造成了伤害，你弃置x张牌（x为你到目标角色的距离且至少为1）。",
                        bhxinyang: "信仰",
                        "bhxinyang_info": "锁定技，你的回合内，当你失去体力或受到伤害时，或其他角色于非濒死状态回复体力时，防止之。",
                        bhniuqu: "扭曲",
                        "bhniuqu_info": "锁定技，你的手牌有概率是扭曲的。回合结束时，你将手牌补至体力上限。",
                        bhfuge:"赋格",
                        "bhfuge_info":"法则技，你使用和弦后，若该和弦的点数构成首次出现，你记录其点数与牌名。连续三张被使用的牌结算后，若这些牌点数构成与记录一致，最后一张牌的使用者可以视为使用该记录对应牌名的牌。",
                        bhhuangjin: "黄金",
                        "bhhuangjin_info": "锁定技，所有角色摸牌阶段的摸牌数+1。此阶段结束时，其交给你一张牌，此牌不计入你的手牌上限。",
                        bhyelv:"烨律",
                        "bhyelv_info":"锁定技，除当前轮次数外，令十二点数为音律。于出牌阶段内，你仅以三和弦发声。使用时，若和弦为："
                            + "<br>&ensp;①大三和弦，和弦中每张基本牌令你分配之至一名其他角色；"
                            + "<br>&ensp;②小三和弦，和弦中每张黑色牌令你弃置目标一张牌；"
                            + "<br>&ensp;③增三和弦，和弦中每张伤害牌令你额外指定一个目标；"
                            + "<br>&ensp;④减三和弦，你改为重铸和弦。"
                            + "<br>若音律崩毁，你亦随之落幕。",
                        bhtianxing: "天星",
                        "bhtianxing_info": "当你需要你使用或打出一张手牌中存在的基本牌或普通锦囊前，你可以将此牌称为“<span style=\"color: red\">根音</span>”，然后将“<span style=\"color: red\">根音</span>”和至少2张至多4张其他手牌（所选牌及“<span style=\"color: red\">根音</span>”牌的点数须各不相同）当作“<span style=\"color: red\">根音</span>”的同名牌使用或打出，以此法使用的牌称为“<span style=\"color: yellow\">和弦</span>”。<br><li>在“<span style=\"color: yellow\">和弦</span>”牌中，点数A~4的牌为“<span style=\"color: #00ccff\">低音</span>”、5~8为“<span style=\"color: #66ff66\">中音</span>”、9~K为“<span style=\"color: #ff6666\">高音</span>”，红色牌为“<span style=\"color: #ffcccc\">升调</span>”、黑色为“<span style=\"color: #d1d1d1\">降调</span>”。<br><li>你以此法使用或打出“<span style=\"color: yellow\">和弦</span>”牌时，按照下列顺序进行结算：<br>&nbsp&nbsp&nbsp&nbsp1. “<span style=\"color: #ffcccc\">升调</span>”不少于3张时，此技能的摸牌效果翻倍；<br>&nbsp&nbsp&nbsp&nbsp2. “<span style=\"color: #d1d1d1\">降调</span>”不少于3张时，此技能的弃牌效果翻倍；<br>&nbsp&nbsp&nbsp&nbsp3. “<span style=\"color: #00ccff\">低音</span>”居多时，你选择一名角色，“<span style=\"color: yellow\">和弦</span>”中每存在一张“<span style=\"color: #00ccff\">低音</span>”，你令其摸一张牌；<br>&nbsp&nbsp&nbsp&nbsp4. “<span style=\"color: #66ff66\">中音</span>”居多时，“<span style=\"color: yellow\">和弦</span>”中每存在一张“<span style=\"color: #66ff66\">中音</span>”，你获得一名角色的一张牌，然后其摸一张牌；<br>&nbsp&nbsp&nbsp&nbsp5. “<span style=\"color: #ff6666\">高音</span>”居多时，你选择一名其他角色，“<span style=\"color: yellow\">和弦</span>”中每存在一张“<span style=\"color: #ff6666\">高音</span>”，你令其弃一张牌；<br>&nbsp&nbsp&nbsp&nbsp6. 若“<span style=\"color: #00ccff\">低音</span>”、“<span style=\"color: #66ff66\">中音</span>”和“<span style=\"color: #ff6666\">高音</span>”至少各存在一张，你可以移动场上一张牌；<br>&nbsp&nbsp&nbsp&nbsp7. 若“<span style=\"color: #ffcccc\">升调</span>”与“<span style=\"color: #d1d1d1\">降调</span>”均不少于两张，你可以移动场上一张牌。",
                        bhjuexin: "觖新",
                        "bhjuexin_info": "觉醒技，准备阶段，若场上没有其他世界蛇势力的角色或没有身份为忠臣的角色，你失去“”，增加1点体力上限并回复1点体力，然后你获得“滞冷”、“救世”和“孤影”。",
                        bhwangjian: "王剑",
                        "bhwangjian_info": "主公技，出牌阶段结束时，一名世界蛇势力的其他角色可以将自己区域内的【破坏之键】置入你的装备区。",
                        bhzhileng: "滞冷",
                        "bhzhileng_info": "锁定技，准备阶段，若你的装备区没有【破坏之键】，你对所有到你距离为1的其他角色各造成一点伤害。当你即将失去体力时，若此时是你的回合内，防止之。",
                        "bhzhileng2": "凝寒",
                        "bhzhileng2_info": "锁定技，当你即将失去体力时，防止之。",
                        bhjiushi: "救世",
                        "bhjiushi_info": "出牌阶段限一次，你可以将三张手牌当作一张不限次数且伤害+1的冰【杀】对一名其他角色使用。然后若此【杀】未造成伤害，你摸两张牌，且本回合此技能的可用次数+1。",
                        bhguying: "孤影",
                        "bhguying_info": "觉醒技，结束阶段，若你本局游戏已发动过“救世”的次数不小于3，你将手牌补至体力上限，失去“滞冷”并获得“凝寒”，然后你从牌堆或弃牌堆中获得【破坏之键】。",
                        Burst: "爆发",
                        "Burst_info": "",
                        bhsp: "SP",
                        "bhsp_info": "",
                        bhshengxue: "圣血",
                        "bhshengxue_info": "锁定技，【崩坏爆发】对你无效。你对崩坏势力的角色造成伤害时，该伤害+1。",
                        bhtianzhao: "天照",
                        "bhtianzhao_info": "锁定技，你使用的非虚拟【杀】结算后，若你的手牌中没有【杀】，你重铸所有手牌并视为使用【杀】。结算后，本回合你使用下一张牌无距离和次数限制，且造成伤害后分配受伤角色1点SP（无则改为一张牌）。",
                        bhqiangdou: "枪斗",
                        "bhqiangdou_info": "你使用【杀】/使用【闪】响应【杀】时获得1点SP，若目标角色/该【杀】的使用者与此技能上次发动时相同，你获得其一张牌。你可将数量合计为2的手牌或SP视为【杀】或【闪】使用。",
                        bhqiangdou3:"枪斗",
                        jiexi: "解析",
                        "jiexi_info": "准备阶段，你可以令一名其他角色选择一项：1.展示一张锦囊；2.展示所有手牌。若如此做，本回合内你发动【构造】时，可转化的牌增加该角色所展示的所有锦囊。",
                        zhizhe: "智者",
                        "zhizhe_info": "出牌阶段限一次，你可以将至多x张牌置于牌堆顶，然后令至多x名角色依次从牌堆底摸一张牌（x为你的体力上限）。",
                        fushen: "附身",
                        "fushen_info": "锁定技，游戏开始时，你增加x点体力上限并回复x点体力（x为场上势力数的一半，向上取整）。当你进入濒死状态且体力上限大于1时，你减一点体力上限并回复2点体力。",
                        yemu: "夜幕",
                        "yemu_info": "出牌阶段限一次，当你使用的一张牌结算完毕后，你可以立即摸一张牌并弃一张牌。若你以此法弃置非基本牌，则你可以视为使用了一张无距离限制且不计入使用次数的【杀】。",
                        "k_xingluo": "星落",
                        "k_xingluo_info": "锁定技，你发动“夜幕”后，增加其1次使用次数并获得一枚“沌”标记。“沌”达到6枚时，弃置6枚“沌”并获得【侵蚀】直到你的下个准备阶段,然后令至多2名其他角色各摸1张牌。（侵蚀：锁定技，你不能使用【夜幕】，且无法使用或打出手牌。）",
                        sanyi: "散逸",
                        "sanyi_info": "当你使用的【杀】未造成伤害时，你可以观看牌堆顶的一张牌并将其交给一名角色。准备阶段，若你“沌”的数量不少于2，你移去2枚“沌”。",
                        gouzhao: "构造",
                        "gouzhao_info": "每回合限三次，你可以将两张牌当做任意基本牌或【铁索连环】使用或打出，若这两张牌：均为红色，你摸一张牌；均为黑色，你令一名其他角色弃一张牌。",
                        mengzhu: "盟主",
                        "mengzhu_info": "主公技，当一名逆熵角色的角色卡被横置或翻面时，你可以令其摸一张牌。",
                        shuangsheng: "双生",
                        "shuangsheng_info": "转化技，锁定技，准备阶段，阳：你获得【如一】并失去【连理】，将自身角色卡调整为里人格；阴：你获得【连理】并失去【如一】，将自身角色卡调整为表人格。",
                        lianli: "连理",
                        "lianli_info": "①出牌阶段限一次，当你使用非装备和延时锦囊牌指定了自己为目标时，你可以在该牌结算完毕后弃置一张手牌，视为你仅对自己再使用一次该牌。②摸牌阶段，你额外摸一张牌。你使用【杀】时，可以额外指定一个目标。",
                        ruyi: "如一",
                        "ruyi_info": "①出牌阶段限一次，当你使用【杀】仅指定了一名其他角色为目标时，你可以在该牌结算毕后弃置一张手牌，视为你对其再使用一次不计入使用次数的【杀】。②你到其他角色的距离-1，每回合可使用【杀】的次数+1。",
                        laoyin: "烙印",
                        "laoyin_info": "每回合限一次，当你使用【杀】指定其他角色为目标时，若其没有“印记”，你可以令其获得一枚“印记”。有“印记”的角色：受到非来自你伤害时，你摸一张牌；受到来自你的伤害时，你令此伤害+1并移去“印记”。你的准备阶段，移去所有其他角色的“印记”。",
                        "lianli_im": "连理",
                        "lianli_im_info": "",
                        "ruyi_im": "如一",
                        "ruyi_im_info": "",
                        "laoyin_im": "烙印",
                        "laoyin_im_info": "",
                        huali: "化理",
                        "huali_info": "出牌阶段限一次，你可以指定一名其他角色并展示双方共计2x张手牌（你至少展示一张，x为你已损失的体力值）。然后，在被以此法展示的牌中，选择下列操作中的一项或多项依次序执行： 1.弃置其中四种花色的牌各一张，该角色受到1点伤害且非锁定技失效直到回合结束； 2.弃置其中所有♥牌，你回复1点体力； 3.弃置其中所有♠牌，该角色失去1点体力； 4.弃置其中所有♣牌，你弃置该角色一张未被展示的手牌； 5.弃置其中所有♦牌，你摸一张牌。 若你展示的手牌比目标角色少，结算完毕后你弃置所有手牌；若你选择了不少于3项，结算完毕后你翻面。",
                        zhoulv: "周律",
                        "zhoulv_info": "一名角色的回合开始前，若该角色的手牌数或体力值与你相同，你可以摸一张牌。",
                        tiandao: "天道",
                        "tiandao_info": "你受到一次伤害后，可以指定一名其他角色并选择一项：令其摸x张牌并弃两张牌，或令其弃x张牌并摸两张牌。（x为你当前已损失的体力值且至多为5）",
                        bhyinneng: "引能",
                        "bhyinneng_info": "出牌阶段，你可以消耗1点SP或于非横置状态横置，然后横置一名其他角色。若如此做，直到本阶段结束或其竖置，你对其使用牌无距离限制。",
                        bhzshijie: "视界",
                        "bhzshijie_info": "锁定技，非横置角色于出牌阶段可以额外使用一张仅能指定横置角色的【杀】。一次伤害首次被传导时，你摸一张牌并获得1点SP。",
                        xumi: "须弥",
                        "xumi_info": "须弥：当你受到一次伤害后，你可以摸y张牌。若如此做，摸牌后你立即展示所有手牌，然后将任意张的点数各不相同且均与已有“智”点数不同的手牌置于你的角色卡上，称为“智”。你的手牌上限+x（x为你“智”的数量且至少为1，至多为13；y为13-x与x中较小的值）。",
                        tianhui: "天慧",
                        "tianhui_backup": "天慧",
                        "tianhui_info": "出牌阶段限一次，你可以弃置四种花色的“智”各一张并指定一名其他角色，你声明一种花色和一个点数，然后令该角色获得“千界”（若该角色已有“千界”，则移去原有的）。",
                        hengsha: "恒沙",
                        "hengsha_info": "准备阶段或结束阶段，你可以将一张“智”扣置于一名其他角色的角色卡旁，当有“智”的其他角色使用与其一张“智”花色、点数或牌名相同的牌时，你可以选择一项并移去该“智”：1.令该牌无效，然后你弃置该角色一张牌；2.令该角色对你造成一点伤害，然后其可以令你回复1点体力；3.令该角色摸两张牌。",
                        "tianhui_card": "千界",
                        "tianhui_card_info": "你的所有牌的花色均视为天慧的拥有者发动技能时声明的花色",
                        bhhuihong: "恢弘",
                        "bhhuihong_info": "当你造成或受到伤害后，你可以令所有角色各摸一张牌。",
                        bhzhongzhi: "忠直",
                        "bhzhongzhi_info": "主公技，觉醒技，一名忠臣或内奸或天命势力的角色阵亡时，你获得〖棐业〗。",
                        bhfeiye: "棐业",
                        "bhfeiye_info": "使命技，一名角色的准备阶段，你可以对自己造成1点伤害，然后本回合获得〖狂骨〗。<br><li>成功：轮次开始时，你的手牌数与体力值均为最大，你修改〖恢弘〗为令指定角色摸牌。<br><li>失败：轮次结束时，你的手牌数与体力值均为最小，你修改〖棐业〗为删去可以的锁定技。",
                        bhfeiye2: "棐业",
                        "bhfeiye2_info": "锁定技，一名角色的准备阶段，你对自己造成1点伤害，然后本回合获得〖狂骨〗。",
                        bhkuanggu:"狂骨",
                        "bhkuanggu_info":"当你对距离1以内的角色造成1点伤害后，你可以回复1点体力或摸一张牌。",
                        nicai: "逆才",
                        "nicai_info": "锁定技，计算你已损失的体力值时，始终为3。当你成为其他角色的牌的目标时，你失去x点体力上限；当你对自己使用牌时，你增加x点体力上限。（x为此牌的点数）",
                        niuzhuan: "扭转",
                        "niuzhuan_info": "锁定技，你的体力上限变化后，若你的体力上限小于9/大于99，你增加/减少9点体力上限，然后回复/失去1点体力。当一个效果即将使你的体力上限小于1时，你增加9点体力上限。",
                        wanshi: "万识",
                        "wanshi_info": "锁定技，你的体力上限变化时，你选择从牌堆顶/底模一张牌，然后除非这张牌的点数小于x，否则你将一张牌放在牌堆底/顶。（x为你本次体力上限的变化量）",
                        qianwu: "千武",
                        "qianwu_info": "出牌阶段限一次，你可以选择增加或减少9点体力上限，并弃一张牌，然后选择至多x名角色，你视为对这些角色使用了一张没有距离限制且不计入使用次数的【杀】。（x为你体力上限除以9的商且至少为1）",
                        bhzuiye: "罪业",
                        "bhzuiye_info": "锁定技，你每造成1点伤害，就摸一张牌。你以此法每获得三张牌，就需立即弃置三张牌，否则失去1点体力。",
                        bhshasheng: "杀生",
                        "bhshasheng_info": "结束阶段，若本回合有四种花色的牌进入弃牌堆，你可以将x张“残心”当做无距离限制的火【杀】使用，然后你须重复此流程直至“残心”数量不足x（x为本回合以此法使用的火【杀】数量且至少为1）。否则你获得一张“残心”。",
                        bhguaidao: "怪盗",
                        "bhguaidao_info": "结束阶段开始时，你可以选择一名其他角色并将一张手牌盖在其角色卡上，称为“预告”。角色卡上有“预告”的角色的出牌阶段结束时，若其手牌数不为全场唯一最少，你获得其至多(x+1)张手牌（x为该角色的体力值），若其装备区有牌，你获得其一张装备牌。然后该角色获得其“预告”牌。",
                        "bhguaidao2": "怪盗",
                        "bhguaidao2_info": "",
                        bhyouye: "幽夜",
                        "bhyouye_info": "锁定技，你不能成为【兵粮寸断】和【乐不思蜀】的目标。",
                        bhjiaojian: "斠剑",
                        "bhjiaojian_info": "①当你受到1点伤害后，你获得1点SP。②出牌阶段限一次或当你受到一次伤害后，你可以消耗2点SP，然后令一名角色执行一项：1.将手牌补至你的体力上限（至多摸至8张）；2.将手牌弃至你的体力值（一次性至多弃4张）。",
                        bhchongfeng: "冲锋",
                        "bhchongfeng_info": "出牌阶段，你可以失去1点体力，然后摸x张牌（x为当前你已损失的体力值且至少为2，至多为5）。每回合限一次，你以此法失去体力后，若你是全场唯一的体力值最低的角色，摸牌后你回复1点体力。",
                        bhjinmie: "烬灭",
                        "bhjinmie_info": "每回合限一次，你可以视为使用【火攻】，<br>结算后若未造成伤害则可弃置一张手牌，以视为对原目标使用【决斗】，<br>结算后若未造成伤害则可于回合结束时失去一个技能，以视为对其使用火【杀】，<br>结算后若未造成伤害则可于当前轮次结束时死亡，以对其造成你已损体力值点火焰伤害。",
                        bhshenyun: "神陨",
                        "bhshenyun_info": "锁定技，一名其他角色的回合结束时，若你已受伤，你减1点体力上限并执行一个额外的回合。",
                        bhzhongmu: "终幕",
                        "bhzhongmu_info": "你死亡时，可以分配你拥有的数值为1的任意元素。",
                        bhtiemu: "铁幕",
                        "bhtiemu_info": "准备阶段，你可以将任意张手牌分配给任意名角色作为“盾”置于角色卡上。一名角色失去护盾前，你可以令其重铸一张牌，若被重铸的牌与其一张“盾”花色相同，你获得之。轮次开始时，若你的“盾”数量小于4，你将牌堆顶的两张牌作为“盾”置于你的角色卡上。",
                        bhnilin: "逆鳞",
                        "bhnilin_info": "锁定技，到你距离为1的角色无法响应你使用的【杀】；当你受到一次伤害后，你的下一张【杀】的基础伤害+1（至多以此法增加3点伤害）。",
                        bhdaiduo: "怠惰",
                        "bhdaiduo_info": "锁定技，其他角色的结束阶段，你获得1点SP。你的结束阶段，你失去所有SP。你在回合内使用牌时，若你有SP，你失去1点SP并摸一张牌。若你没有SP，你造成的伤害-1。",
                        bhtangguo: "糖果",
                        "bhtangguo_info": "当你使用牌指定其他角色为目标时，你进行一次判定，若结果为红色，你获得一个“糖”标记（最多5个）。一名角色的结束阶段或进入濒死状态时，你可以移去一个“糖”，视为该角色使用了一张【桃】。准备阶段，若你有“糖”，你移去所有“糖”并摸x张牌（x为你移去“糖”数量的一半，向上取整）。",
                        bhsuixing: "碎星",
                        "bhsuixing_info": "当你使用【杀】或【决斗】指定目标时，你可以令其获得“衰弱”。若目标角色已经有“衰弱”，你改为弃置其一张牌。",
                        bhshuairuo: "衰弱",
                        "bhshuairuo_info": "锁定技，当你即将对有“盾”的角色造成物理伤害时，该角色护盾的额定消耗减半。你的回合结束时，你失去此技能。",
                        bhyiyu: "熠煜",
                        "bhyiyu_info": "锁定技，防止你受到的火焰伤害。当你进入濒死状态时，若你的体力上限大于1，则你减1点体力上限并回复体力至1点。",
                        bhshenju: "身炬",
                        "bhshenju_info": "锁定技，当你的体力上限变化时，若你未拥有以此法可获得的全部技能，则你选择以下技能中的一个获得：“锲翎”，“执握”，“具像”，“凯旋”。准备阶段/结束阶段/你受到一次伤害时，你获得1个“薪炎”标记（至多5个）。",
                        bhzhiwo: "执握",
                        "bhzhiwo_info": "当你使用【杀】指定一名其他角色为目标时，你可以移去1个“薪炎”，然后令此【杀】不可被响应。",
                        bhjuxiang: "具像",
                        "bhjuxiang_info": "每回合限两次，你可以移去1个“薪炎”，然后将一张手牌当做【杀】或【铁索连环】使用。",
                        bhkaixuan: "凯旋",
                        "bhkaixuan_info": "当你造成非属性伤害时，你可以移去1个“薪炎”并将该伤害改为火焰伤害。你造成一次火焰伤害后，你摸一张牌。",
                        bhxinhuo: "薪火",
                        "bhxinhuo_info": "其他角色阵亡时，其可以令你增加1点体力上限并回复1点体力。摸牌阶段，你额外摸(x-3)张牌。（x为你当前的体力上限且至少为3）",
                        bhqieling: "锲翎",
                        "bhqieling_info": "当你受到一次伤害后，你可以移去1个“薪炎”，然后摸三张牌。",
                        bhtianyu: "天谕",
                        "bhtianyu_info": "使命技，每名角色限一次，准备阶段或你发动了一次“斠剑”②后，你令一名其他角色选择一项：交给你两张牌并获得“东征”；或弃置两张牌。<br><li>成功：出牌阶段开始时，若场上至少有两名其他角色拥有“东征”或仅有一名其他角色存活，使命成功，你获得“东征”。<br><li>失败：准备阶段，若场上已没有可以发动“天谕”的目标且你的使命尚未成功，使命失败，你减少1点体力上限且本回合使用牌仅能指定自己为目标。",
                        bhdongzheng: "东征",
                        "bhdongzheng_info": "出牌阶段限一次，你可以弃置两张花色相同的手牌，对一名其他角色造成1点伤害，然后直到你的下个回合结束，你到其的距离视为为1。",
                        "bhdongzheng2": "东征",
                        "bhdongzheng2_info": "",
                        bhshengtu:"圣途",
                        "bhshengtu_info":"主公技，一名天命势力的角色发动“东征”后，若其因此弃置了两张红色牌，你可以令其摸一张牌。",
                        bhzhujiao: "主教",
                        "bhzhujiao_info": "主公技，出牌阶段限一次，你可以弃一张手牌并选择一名天命势力角色，该角色可以弃置一张手牌并令你选择其武将牌上的一个技能（主公技，限定技，觉醒技，隐匿技、使命技等特殊技能除外）获得之。若如此做，你减一点体力上限，该角色失去这个技能并加一点体力上限。",
                        bhzaiyao: "灾耀",
                        "bhzaiyao_info": "锁定技，当你即将受到伤害时，若你未拥有以此法可获得的全部技能且已受伤，则你减1点体力上限并防止该伤害，然后从“征服”，“疫疾”，“静谧”和“渴望”中选择一个技能获得之。",
                        "bhzaiyao_zhengfu": "征服",
                        "bhzaiyao_zhengfu_info": "锁定技，防止你受到的雷电伤害。你使用的♠伤害牌改为造成雷电伤害且无法响应。",
                        "bhzaiyao_yiji": "疫疾",
                        "bhzaiyao_yiji_info": "出牌阶段限一次，你可以弃置两张手牌，然后对一名其他角色造成1点火焰伤害。",
                        "bhzaiyao_jingmi": "静谧",
                        "bhzaiyao_jingmi_info": "锁定技，有角色处于濒死状态时，你的♡牌均视为【桃】。",
                        "bhzaiyao_kewang": "渴望",
                        "bhzaiyao_kewang_info": "每回合限一次，当你使用伤害牌指定其他角色为目标时，你可以获得其一张牌或摸一张牌。",
                        "bhzaiyao_jingmi3": "静谧",
                        "bhzaiyao_jingmi3_info": "",
                        bhyakong: "亚空",
                        "bhyakong_info": "每轮限x次，出牌阶段，你可以指定一名其他角色并选择一项，直到你的下一个出牌阶段：1.你到其距离视为1；2.其到你距离+1；3.你无视其防具。（x为你的体力上限）",
                        "bhyakong_1": "亚空",
                        "bhyakong_1_info": "",
                        "bhyakong_2": "亚空",
                        "bhyakong_2_info": "",
                        "bhyakong_3": "亚空",
                        "bhyakong_3_info": "",
                        bhyuanzui: "原罪",
                        "bhyuanzui_info": "锁定技，一名角色造成1点伤害后获得1个“罪”标记，杀死一名角色后获得6个“罪”。“罪”标记数：不少于8的角色手牌上限-1；第一次大于等于16的角色失去一点体力上限；不少于24的角色立即死亡。",
                        "bhyuanzui2": "原罪",
                        "bhyuanzui2_info": "",
                        "bhyuanzui3": "原罪",
                        "bhyuanzui3_info": "",
                        bhanyi: "暗裔",
                        "bhanyi_info": "锁定技，当你受到来自其他角色的伤害时，若此伤害有来源且伤害来源与你的“罪”数之差不小于4，则此伤害-1，然后你获得2个“罪”。",
                        bhzhuilie: "追猎",
                        "bhzhuilie_info": "当你使用【杀】指定一名角色为目标时，你可以令该角色获得或失去2个“罪”。当你受到一点伤害后，你移去1个“罪”。",
                        bhbaofaceshi: "膨胀",
                        "bhbaofaceshi_info": "准备阶段，你可以像河豚一样膨胀直到回合结束。",
                        bhhairu: "骇入",
                        "bhhairu_info": "出牌阶段限一次，你可以选择一名其他角色观看其手牌，然后你可以选择其中的一张并选择一项：1.获得此牌；2.令该角色立即选择合法的目标然后使用此牌。",
                        bhtouying: "投影",
                        "bhtouying_info": "出牌阶段限一次，你可以进行随机投影直到你的下个准备阶段：<br>1.猎兔人，你对距离不大于2的角色使用【杀】没有次数限制；<br>2.碎骨兔，你使用的【杀】不能被响应；<br>3.啮齿兔，你对距离大于2的角色使用的【杀】造成的伤害+1；<br>4.追猎者，你使用【杀】没有距离限制；<br>5.蹦蹦兔，当你使用【杀】指定其他角色为目标时，你可以弃一张牌，然后令与该角色距离为1的所有其他角色也成为此【杀】的目标。",
                        "bhtouying1": "投影",
                        "bhtouying1_info": "",
                        "bhtouying2": "投影",
                        "bhtouying2_info": "",
                        "bhtouying3": "投影",
                        "bhtouying3_info": "",
                        "bhtouying4": "投影",
                        "bhtouying4_info": "",
                        "bhtouying5": "投影",
                        "bhtouying5_info": "",
                        "bhtouying5_im": "投影i",
                        "bhtouying5_im_info": "",
                        bhyongbing: "佣兵",
                        "bhyongbing_info": "",
                        "bhyongbing2": "佣兵",
                        "bhyongbing2_info": "每名其他角色的出牌阶段限一次，其可以选择交给你2张牌，然后指定一名除你和其以外的角色，令你选择是否对其选择的角色使用一张【杀】。若你拒绝使用【杀】或该角色无法成为你使用【杀】的合法目标，你交还1张牌。",
                        bhfeiying: "绯樱",
                        "bhfeiying_info": "每回合限一次，你使用牌时可以取消之，令目标获得一个“樱”标记。你对有“樱”的角色使用牌无视距离限制，若数量大于1则此牌无法响应。",
                        "bhfeiying2": "樱",
                        "bhfeiying2_info": "",
                        bhrenfan: "刃反",
                        "bhrenfan_info": "当你造成伤害后，你可以移去一名角色的所有“樱”并对其造成1点伤害，结算后若此时为你的出牌阶段，你摸一张牌并结束之。",
                        bhhuling: "狐灵",
                        "bhhuling_info": "限定技，当你进入濒死状态时，你可以将体力值回复至1点，然后摸三张牌。",
                        bhhuhuo: "狐火",
                        "bhhuhuo_info": "出牌阶段限一次，你可以选择至多体力上限名有“樱”的角色，你移去其1个“樱”并对其造成1点火焰伤害。若以此法受伤的角色数大于1，你失去1点体力。",
                        bhxueyin: "血印",
                        "bhxueyin_info": "锁定技，你对其他角色造成一次伤害后，你进行一次判定，若结果：为红，你{回复一点体力}；为黑，你摸一张牌。若你未受伤，你可以将{}内容改为增加一点体力上限直到你下个回合开始。",
                        bhchuyong: "初拥",
                        "bhchuyong_info": "限定技，当你对其他角色造成伤害时，若其没有“眷属”，你可以交给其一张红色牌，然后令其获得“眷属”和“渴血”。",
                        bhjuanshu: "眷属",
                        "bhjuanshu_info": "锁定技，①当你的亲族进入濒死状态时，你令其回复体力至1点并失去等量体力。②当你回复体力时，你令你的亲族摸等量的牌。③当你进入濒死状态时，你可以失去“眷属”。",
                        bhkexue: "渴血",
                        "bhkexue_info": "锁定技，准备阶段，若你体力值不大于上限的一半（向下取整），则你本回合使用基本牌没有次数限制，你的锦囊牌视为【杀】。",
                        "bhkexue2": "渴血",
                        "bhkexue2_info": "",
                        bhshenghu: "圣护",
                        "bhshenghu_info": "当一名角色进入濒死状态时，你可以弃置自己或该角色装备区内的所有牌（无牌则不弃）。若如此做，你令该角色的体力值回复至1点，然后你选择一项：1.弃置(y-x)张红色牌；2.失去y点体力；3.摸(x-y)张牌。（x为以此法弃置的装备数，y为该角色以此法回复的体力值数，值小于0的选项不可选择）",
                        bhtiebi: "铁壁",
                        "bhtiebi_info": "当{你}因弃置而失去牌后，你可以将其分配给任意名角色置于角色卡上作为“盾”。你的回合内，你将{}内容改为“一名角色”。",
                        bhhudun: "护盾",
                        "bhhudun_info": "",
                        bhtongdiao: "同调",
                        "bhtongdiao_info": "出牌阶段限一次，你可以与一名其他角色同时弃置一张牌，若这两张牌颜色相同，你与其各摸两张牌，然后同时弃置一张牌，若这两张牌颜色仍相同，你令你或该角色回复1点体力；否则，你将此技能改为“出牌阶段限两次”。",
                        bhyueshengy: "月升",
                        "bhyueshengy_info": "一名其他角色每回合首次进入你的攻击范围后，你和其均可交给对方一张手牌。因此获得的牌本回合可视为无次数限制的【杀】使用。",
                        bhjiaoyi: "皎翼",
                        "bhjiaoyi_info": "锁定技，你的攻击范围+X（X为你手牌数的一半，向下取整），若包含所有其他角色，你使用【杀】无目标数限制。",
                        bhhejin: "合金",
                        "bhhejin_info": "当你即将受到一次伤害时，你可以进行一次判定，若结果为：红色，你防止此伤害；黑色，你摸两张牌。",
                        bhshijie: "世界",
                        "bhshijie_info": "当你受到一次伤害后或你的准备阶段开始时，你可以指定一名其他角色令其判定：若为♦或♣，该角色摸两张牌并翻面；若为♥或♠，该角色摸一张牌并受到1点伤害。",
                        bhhuangguan: "皇冠",
                        "bhhuangguan_info": "锁定技，你对角色卡背面朝上的角色造成伤害时，此伤害+1。",
                        bhqinglei: "青雷",
                        "bhqinglei_info": "①你使用或打出了一张【闪】后，可以令一名没有“感电”的其他角色获得“感电”。②你对其他角色造成伤害后，若受伤角色没有“感电”，你可以进行一次判定：若为黑色，你令其获得“感电”。③你的准备阶段开始时，全场角色依次失去“感电”。",
                        bhgandian: "感电",
                        "bhgandian_info": "锁定技，你受到的雷电伤害+1。",
                        bhlongming: "龙鸣",
                        "bhlongming_info": "一名角色获得或失去“感电”时，你可以进行一次判定：若为红色，你摸一张牌；若为黑色，你对一名其他角色造成1点雷电伤害。",
                        bhzhiliu: "直流",
                        "bhzhiliu_info": "锁定技，你可以将一张黑色牌当作雷【杀】使用或打出。你对距离为1的角色造成的雷电伤害+1；你对距离3及以上的角色造成雷电伤害-1。",
                        bhzhuanli: "专利",
                        "bhzhuanli_info": "一名其他角色使用了一张雷【杀】或造成了1点雷电伤害时，你可以令其选择一项：弃一张牌；或令你摸一张牌。",
                        bhjiaoliu: "交流",
                        "bhjiaoliu_info": "你可以将一张红色牌当作雷【杀】使用或打出。锁定技，你造成一次雷电伤害时需进行判定：若为A~4，此伤害-1；若为10~K，此伤害+1。",
                        bhtaitan: "泰坦",
                        "bhtaitan_info": "限定技，出牌阶段，你可以记录当前的体力值和上限，失去“交流”并获得“铁拳”。若如此做，将你的体力上限置为3并回满体力值。此后，当你第一次进入濒死状态时，你失去“铁拳”并获得“交流”，然后立即将体力回复至记录值，体力上限重置为记录值。",
                        "bhtaitan2": "泰坦",
                        "bhtaitan2_info": "",
                        bhtiequan: "铁拳",
                        "bhtiequan_info": "你使用【杀】对目标造成一次物理伤害时可以判定：若为黑色，此伤害+1。",
                        bhronghe: "融核",
                        "bhronghe_info": "出牌阶段开始时，你可以摸/弃一张牌，然后你进入/退出爆发状态。结束阶段，若你不处于爆发状态，你摸一张牌。",
                        bhleiren:"雷刃",
                        "bhleiren_info":"锁定技，你使用牌对一名其他角色造成伤害后，若你处于爆发状态，你对其追加1点雷电伤害，然后你失去1点体力。 处于爆发状态时，你使用的黑色【杀】没有距离限制且不可响应。",
                        bhhaoling: "号令",
                        "bhhaoling_info": "主公技，每名角色的回合限一次，一名休伯利安势力的角色可以展示一张手牌，然后交给你。若此牌是【杀】，你可以令该角色摸一张牌。",
                        "bhhaoling2": "号令",
                        "bhhaoling2_info": "",
                        "bhhaoling3": "号令",
                        "bhhaoling3_info": "",
                        bhxiangdui: "相对",
                        "bhxiangdui_info": "锁定技，当你成为一张牌的目标时，若此牌的使用者无法成为当前你使用此牌时的合法目标，此牌对你无效。",
                        bhyinbian: "隐变",
                        "bhyinbian_info": "每回合限一次，当其他角色对你使用的牌结算完毕后，你可以计算变量k的值（k=x-y），若k为正，你摸k张牌。（x为使用者当前的手牌数且至多为5，y为你当前的手牌数）",
                        bhdanbai: "单摆",
                        "bhdanbai_info": "当你失去最后的手牌时，你可以选择一项：令至多x名角色各摸一张牌，或令至多x名角色各弃一张牌。（x为你当前的体力值）",
                        bhluoti: "落体",
                        "bhluoti_info": "出牌阶段开始时，你可以摸两张牌。若如此做，你将至少两张手牌以任意顺序置于牌堆底。",
                        bhguanxing: "惯性",
                        "bhguanxing_info": "锁定技，防止你在每个回合受到的第一次伤害，你在每个回合非第一次受到伤害时，该伤害+1。",
                        "bhguanxing2": "惯性",
                        "bhguanxing2_info": "",
                        bhaomie: "鏖灭",
                        "bhaomie_info": "锁定技，你为使用者或目标的伤害牌结算后，若此牌的使用者未造成伤害，其须使用一张伤害牌。否则，你摸一张牌并对其造成1点伤害，你因此对自己造成伤害后，视为使用触发此技能的牌。",
                        bhfanji:"燔祭",
                        "bhfanji_info":"锁定技，你令一名角色进入濒死状态时，弃置其所有手牌。你为濒死角色时，发动〖涅槃〗。",
                        bhniepan:"涅槃",
                        "bhniepan_info":"限定技，当你处于濒死状态时，你可以弃置你区域里所有的牌，复原武将牌，摸三张牌，将体力值回复至3点。",
                        bhbaopo: "爆破",
                        "bhbaopo_info": "当你使用基本牌或普通锦囊牌指定唯一其他角色为目标时，你可以进行一次判定：若判定牌的{颜色}与你使用的牌不同，此牌不可被响应，且你可为此牌额外指定一名与原目标距离为1的角色为目标；否则，你也成为此牌的目标，且下一次发动此技能时{}内的描述改为“花色”。",
                        bhdajiang: "大奖",
                        "bhdajiang_info": "锁定技，你的判定牌进入弃牌堆前，你将其置于自己的角色卡上，称为“奖”（至多16张，达到上限后再次获取时先随机弃置一张）。当你获得两张“奖”后，你摸一张牌。你死亡时，你可以分配“奖”（每人至多分配两张），然后弃置剩余牌。",
                        bhjiansheng: "剑圣",
                        "bhjiansheng_info": "每名角色的回合限一次，当你成为其他角色【杀】或伤害类锦囊的目标时，你可以令其展示一张手牌，然后你亮出牌堆顶的一张牌并与其展示的手牌比较，若这两张牌的颜色：1.相同，该牌对你无效，且视为你已对该角色使用了一张无距离限制且不计入使用次数的【杀】，然后你将此技能改为“每回合限两次”；2.不同，你可以对该角色使用一张无距离限制且不计入使用次数的【杀】。",
                        "bhjiansheng2": "剑圣",
                        "bhjiansheng2_info": "",
                        bhtouchui: "头槌",
                        "bhtouchui_info": "出牌阶段开始时，你可以弃一张牌并选择一名其他角色，你对其造成1点伤害，然后横置该角色及所有到该角色距离为1的其他角色的角色卡。若如此做，本回合出牌阶段内你不能使用锦囊牌。",
                        bhmoqi: "默契",
                        "bhmoqi_info": "每回合限一次，当你成为其他角色【杀】或伤害类锦囊的目标时，你可以弃置一张手牌并选择一名未成为此牌目标的其他角色（不能是此牌的使用者），你将此牌的目标转移给该角色。若如此做，你可以令该角色摸一张牌。你以此法指定任意【莉莉娅】角色时无需弃牌。",
                        "bhtouchui2": "头槌",
                        "bhtouchui2_info": "",
                        "bhchongfeng_im": "冲锋",
                        "bhchongfeng_im_info": "",
                        bhduchen: "渡尘",
                        "bhduchen_info": "每阶段结束时，若本阶段进入弃牌堆的伤害牌均未造成过伤害，你可令当前回合角色获得其中一张，然后其可以失去1点体力以执行一个额外的此阶段。",
                        bhzhonghuo:"种火",
                        "bhzhonghuo_info":"每轮开始时，你可赠予任意名已/未受伤的角色1点体力值/上限，若其因此符合另一项，则其摸两张牌/回复1点体力。",
                        bhhuiming: "晦明",
                        "bhhuiming_info": "锁定技，当你使用一张基本牌/锦囊牌时，你获得一个“阳”/“阴”标记（两种标记共最多3个）。当你的“阴”、“阳”达到上限时，你摸一张牌。",
                        bhxianfa: "仙法",
                        "bhxianfa_info": "出牌阶段，若你的“阴”、“阳”构成某一卦象，你可以执行本对应卦象的效果，然后移去所有“阴”、“阳”：<br>1.乾（阳阳阳），摸两张牌；<br>2.坤（阴阴阴），回复一点体力；<br>3.离（阳阴阳），你对一名其他角色造成一点火焰伤害；<br>4.坎（阴阳阴），你可以弃置至多3张手牌，并摸等量的牌；<br>5.震（阳阴阴），你对一名其他角色造成一点雷电伤害；<br>6.巽（阴阳阳），你弃置一名角色的一张牌，然后本回合使用牌没有距离限制；<br>7.艮（阴阴阳），你下一次受到的伤害-1（不可叠加）；<br>8.兑（阳阳阴），本回合你使用【杀】没有次数限制。",
                        "bhxianfa6": "仙法·巽",
                        "bhxianfa6_info": "",
                        "bhxianfa7": "仙法·艮",
                        "bhxianfa7_info": "",
                        "bhxianfa8": "仙法·兑",
                        "bhxianfa8_info": "",
                        bhzhexian: "谪仙",
                        "bhzhexian_info": "觉醒技，当你进入濒死状态时，你减一点体力上限并回复体力至上限，然后失去【仙法】并获得【折剑】。",
                        bhzhejian: "折剑",
                        "bhzhejian_info": "结束阶段，若你的“阴”、“阳”达到上限，你可以弃一张牌并移去所有标记，然后弃置一名角色各区域各一张牌。",
                        bhwuyu: "雾雨",
                        "bhwuyu_info": "出牌阶段，当你使用一张牌时，若此牌与你所使用的上一张牌花色相同，你可以摸一张牌；若不同，每回合限一次，你可以将其花色修改为你指定的花色并摸一张牌。",
                        bhxuzuo: "须佐",
                        "bhxuzuo_info": "你每发动2次“雾雨”，你的攻击范围+1直到回合结束。你每发动3次“雾雨”，便可以令攻击范围内的一名其他角色摸一张牌。",
                        bhyadao: "压倒",
                        "bhyadao_info": "当你使用【杀】指定目标时，你可以弃置一张牌，令目标角色展示任意张与此牌同色的牌，其无法使用这些牌直到回合结束。此【杀】结算后，若你的体力值大于其，其选择弃置体力值张展示牌；或受到1点伤害。",
                        bhtuji: "突击",
                        "bhtuji_info": "你未受到或造成过伤害的出牌阶段，你可以与一名其他角色拼点，若你赢，你视为对该角色使用一张【杀】；否则你获得其一张牌，若不是本阶段首次发动此技能，你受到来自其的1点伤害。",
                        "bhtuji2": "突击",
                        "bhtuji2_info": "",
                        bhjianjie: "剑界",
                        "bhjianjie_info": "出牌阶段限一次，你可以弃置所有手牌，然后选择至多x名到你的距离不大于2且座次相邻的其他角色，令这些角色处于“结界”状态直到其受到伤害或你的下一个出牌阶段开始。处于“结界”状态的角色在受到伤害时，该伤害+1。（x为你当前体力值且至多为3）",
                        "bhjianjie2": "剑界",
                        "bhjianjie2_info": "",
                        bhjianren: "坚韧",
                        "bhjianren_info": "锁定技，当你受到一次大于1的物理伤害时，若你没有手牌，防止此伤害多于1的部分。",
                        bhyouda: "犹大",
                        "bhyouda_info": "当你使用【杀】或伤害性锦囊指定了至少一个目标时，你可以亮出牌堆顶的一张牌，然后将其置于其中一个目标的角色卡上，称为“誓约”，若其已有“誓约”牌，则弃置原“誓约”牌。你的准备阶段开始时，全场角色依次弃置“誓约”牌。",
                        bhyueshu: "约束",
                        "bhyueshu_info": "锁定技，根据“誓约”牌的花色，角色卡上有“誓约”牌的角色：1.♤，在其受到一次伤害（以此法造成的伤害除外）后，你对其造成1点雷电伤害；2.♧，当前所有非锁定技失效；3.♢，在其受到一次伤害后，你摸一张牌；4.♡，你对其造成一次伤害时，你回复1点体力。",
                        bhxingluo:"星落",
                        "bhxingluo_info":"转换技，锁定技，你使用与本回合你使用的上一张伤害牌颜色相同的【杀】无①次数②距离③目标数④伤害值限制，且结算后你摸一张牌。若本回合你使用的上一张伤害牌造成过伤害，首项至当前项均生效。",
                        bhyuedu: "月读",
                        bhyuedu2:"月读",
                        "bhyuedu_info": "未造成伤害的【杀】结算后，你可以将使用者的一张手牌扣置于你的角色卡上，称为“分身”（至多四张）。<br>你可以将一张“分身”背面朝上当做无次数限制的【杀】使用，即将造成伤害时亮出之，若不为伤害牌则改为令下张【杀】伤害+1且附魔刺属性。",
                        bhfengyu: "锋雨",
                        "bhfengyu_info": "出牌阶段，当你使用一张牌时，若此牌与你所使用的上一张牌花色或点数相同，你可以摸一张牌；若均不同，每回合限四次，你获得一个“闪刃”标记。（最多同时持有4个）",
                        bhliudian: "流电",
                        "bhliudian_info": "当你有“闪刃”时，你的攻击范围+1。每回合每个选项限两次，你可以弃置一个“闪刃”然后选择一项：1.视为使用了一张不计入使用次数的【杀】；2.令一名角色摸一张牌。",
                        bhmianji: "面积",
                        "bhmianji_info": "一名其他角色可以在其出牌阶段开始时交给你一张牌。若如此做，你可以选择一项：1.令其摸一张牌；2.将“轨道”中“-1”与“+1”交换位置。",
                        bhguidao: "轨道",
                        "bhguidao_info": "锁定技，一名未受伤角色到已受伤角色的距离-1，一名已受伤角色到未受伤角色的距离+1。",
                        "bhguidao2": "轨道",
                        "bhguidao2_info": "",
                        bhzhouqi: "周期",
                        "bhzhouqi_info": "锁定技，游戏开始时或本技能发动后的第三个回合开始时，你摸一张牌。",
                        bhshengong: "神弓",
                        "bhshengong_info": "锁定技，你使用的【杀】无距离限制；你对攻击范围内的角色使用【杀】时，此【杀】不可被响应。",
                        bhlvlin: "绿林",
                        "bhlvlin_info": "锁定技，你不能成为♣牌的目标，你对其他角色使用♣牌时摸一张牌。",
                        bhjianwu: "剑舞",
                        "bhjianwu_info": "每个回合限3次，当你需要使用或打出一张【杀】或你使用一张【杀】时，你可以摸一张牌，然后若你的手牌数不小于你的体力上限，你弃一张牌。",
                        bhduanren: "断刃",
                        "bhduanren_info": "锁定技，你受到一次元素伤害时，若你处于连环状态，此伤害+1；若你没有手牌，此伤害+1。",
                        bhshaji: "杀击",
                        "bhshaji_info": "当你使用【杀】指定目标时，你可以对自己造成1点伤害。若如此做，此【杀】无视目标防具且不可被响应，然后你摸两张牌。",
                        bhmuen: "沐恩",
                        "bhmuen_info": "出牌阶段限一次，你可以弃置两张牌并指定一名其他角色，然后亮出牌堆顶的四张牌：该角色可以选择并获得其中的一类，你获得剩下的牌。若你以此法一次性获得的牌不多于两张，你回复1点体力。",
                        bhshengyu: "圣域",
                        "bhshengyu_info": "主公技，每名角色的回合限一次，一名休伯利安势力的其他角色造成一次物理伤害时，该角色可以将造成该伤害的牌交给你。",
                        bhshenji: "神机",
                        "bhshenji_info": "当你使用普通锦囊牌指定其他角色为目标时，你可以对其使用一张不计入次数限制的【杀】。",
                        bhkanluan: "戡乱",
                        "bhkanluan_info": "当你造成或受到一次伤害、使用一张【杀】或普通锦囊后，你获得1个“魄”。出牌阶段开始时，你进行一次判定：若为红色，你移去1枚“魄”并摸一张牌；若为黑色，你移去2枚“魄”并摸两张牌。出牌阶段，你可以移去10个“魄”，然后对攻击范围内的一名角色造成3点物理伤害。",
                        bhheliu: "核流",
                        "bhheliu_info": "当你的角色卡从背面翻至正面后，你可以执行一个额外的出牌阶段。",
                        bhshunbao: "瞬爆",
                        "bhshunbao_info": "锁定技，当你的角色卡背面朝上时，你使用【杀】造成的伤害+1。",
                        bhanying: "黯影",
                        "bhanying_info": "阶段技，你可以摸三张牌。若如此做，你翻面。",
                        bhmoxiang: "魔像",
                        "bhmoxiang_info": "游戏开始时分发你5张手牌，你将其中一张置于自己的角色卡上，称为“小兔”。“小兔”进入弃牌堆时，你立即摸一张牌，然后将一张手牌当作“小兔”置于你的角色卡上。阶段技，你可以将“小兔”移动到任意角色的角色卡上。",
                        bhgongming: "共鸣",
                        "bhgongming_info": "你或有“小兔”的角色受到一次伤害后，你可以摸一张牌。若如此做，当前拥有“小兔”的其他角色（若有）也摸一张牌。",
                        bhyueqian: "跃迁",
                        "bhyueqian_info": "一名其他角色的出牌阶段开始时，若其拥有“小兔”，你可以立即获得其区域内的一张牌。若如此做，你进行一次判定：红色，将“小兔”移动到该角色下家的角色卡上；黑色，将“小兔”移动到你上家的角色卡上。",
                        bhmojing: "磨镜",
                        "bhmojing_info": "转换技，①一名角色的回合②你的出牌阶段③轮次结束时，若期间你未使用过牌指定其他角色为目标，你可以摸项目编号张牌并将一张手牌置于角色卡上，称为“镜”。",
                        bhxianwei: "显微",
                        "bhxianwei_info": "出牌阶段每名角色限一次，你可以弃置一张“镜”和一张手牌，然后指定一名其他角色，若放大倍数：不小于150，你观看其手牌；不小于300且该角色当前为所弃置“镜”的合法目标，你视为对其使用了该“镜”；不小于450，你可以分配其区域内一张牌。（放大倍数：50x你“镜”的数量x弃置牌的点数÷你到所选角色的距离）",
                        bhfusheng: "浮生",
                        "bhfusheng_info": "一名角色于你未使用过牌的回合内受到伤害后，其可判定伤害值次。若结果：为红色，其摸两张牌：不为【闪】，你获得之。若该伤害：致命，判定前你可打出手牌作为判定结果；致死，结算后你可代为执行此技能效果。",
                        bhshenyin: "神音",
                        "bhshenyin_info": "锁定技，出牌阶段开始时，你将①手牌数②体力值③体力上限分别向全场最大值调整1。若已为最大，则改为令下一项调整数值+1。  ",
                        bhfeiqiu: "非酋",
                        "bhfeiqiu_info": "锁定技，当你获得非基本牌后，弃置之，然后你摸等量于弃置牌数的牌。",
                        bhbaodi: "保底",
                        "bhbaodi_info": "保底：锁定技，你每因“非酋”弃置9张非基本牌，下一次发动“非酋”时，你少摸一张牌并随机获得“卡池”中的一个技能。一名其他角色的结束阶段或当你受到1点伤害后，你视为因“非酋”弃置了1张牌。",
                        "bhfeiqiu2": "非酋",
                        "bhfeiqiu2_info": "当你获得非基本牌后，你可以弃置之，然后你摸等量于弃置牌数的牌。",
                        "bhfeiqiu_give": "非酋",
                        "bhfeiqiu_give_info": "锁定技，当你获得非基本牌后，弃置之，然后你摸等量于弃置牌数的牌。",
                        bhhaibao: "海豹",
                        "bhhaibao_info": "锁定技，你每次因“非酋”弃牌时，有20%的概率获得“卡池”中的一个技能，你以此法获得技能时，重置“保底”的次数。",
                        bhtonghua: "同化",
                        "bhtonghua_info": "出牌阶段限一次，你可以失去一点体力上限，令一名其他角色获得“非酋”直到其第一次进入濒死状态。",
                        bhkejin: "氪金",
                        "bhkejin_info": "当你发动“非酋”后，你可以废除自己的一个装备区，然后摸四张牌。若你已废除武器区，你使用【杀】没有距离限制。",
                        bhxuanxue: "玄学",
                        "bhxuanxue_info": "准备阶段，你可以亮出牌堆顶一张牌，若该牌颜色为红，你本回合将“非酋”改为非锁定技。",
                        bhzengou: "憎欧",
                        "bhzengou_info": "锁定技，你到没有“非酋”的其他角色的距离视为1。你使用【杀】没有次数限制。",
                        bhbeici: "背刺",
                        "bhbeici_info": "当你因“海豹”获得技能时，你可以对一名有“非酋”的其他角色造成2点伤害。",
                        bhtongbao: "同胞",
                        "bhtongbao_info": "锁定技，你与有“非酋”的其他角色之间互相造成的伤害-1，当一名有“非酋”的其他角色回复体力时，你摸等量的牌。（当你同时拥有此技能和“海豹”时，你将失去此技能并获得“伐异”）",
                        bhtianyi: "天意",
                        "bhtianyi_info": "限定技，你可以将至多2张牌随机交给等量的角色，获得该牌的角色获得“非酋”直到其第一次进入濒死状态。",
                        bhzhufu: "祝福",
                        "bhzhufu_info": "出牌阶段结束时，你可以弃两张牌并选择一名有“非酋”的角色，其下个摸牌阶段随机多摸1-4张牌。",
                        bhjiqu: "汲取",
                        "bhjiqu_info": "锁定技，当你杀死了一名没有“非酋”的其他角色时，你增加1点体力上限并回复一点体力，然后摸三张牌。",
                        bhchoumao: "仇矛",
                        "bhchoumao_info": "当你对一名没有“非酋”的其他角色使用【杀】时，你可以失去一点体力然后令该【杀】伤害+1且不可响应。（当你同时拥有此技能和“海豹”时，你将失去此技能并获得“嘲讽”）",
                        bhxichaofeng: "嘲讽",
                        "bhxichaofeng_info": "当你对一名有“非酋”的其他角色使用【杀】时，你可以弃置其一张牌。",
                        bhdatong: "大同",
                        "bhdatong_info": "使命技，你的手牌上限+x。<br>成功：当一名其他角色获得“非酋”时，若场上所有角色均拥有“非酋”，你增加x点体力上限并回复等量体力，然后将手牌补至上限。<br>失败：当你进入濒死状态时，若你拥有“同化”，你失去之，然后你回复体力至1点。（x为场上人数的一半，向下取整）",
                        bhqiuzhang: "酋长",
                        "bhqiuzhang_info": "觉醒技，准备阶段，若场上拥有“非酋”的角色数不少于当前人数的一半（向下取整），你减一点体力上限并将手牌补至上限，然后获得“号召”。",
                        bhhaozhao: "号召",
                        "bhhaozhao_info": "出牌阶段限一次，你可以令一名拥有“非酋”的其他角色选择一项：1.交给你一张牌；2.失去一点体力，然后令你摸2张牌。",
                        bhfayi: "伐异",
                        "bhfayi_info": "锁定技，你与有“非酋”的其他角色之间互相造成的伤害+1，当你对一名有“非酋”的其他角色造成伤害时，你摸等量的牌。",
                        bhlvling: "律令",
                        "bhlvling_info": "出牌阶段各限两次：1.你可以将一张手牌置于一名角色的角色卡上，称为“门”，然后摸一张牌；2.你可以将场上的一张“门”移动到另一名角色的角色卡上；3.你可以收回场上的一张“门”。（每种花色的“门”在场上至多存在两张，同一角色不可同时拥有两张同花色“门”）",
                        bhxujie: "虚界",
                        "bhxujie_info": "锁定技，拥有“门”的角色成为【杀】的目标时，此【杀】将立即被转移给拥有同花色“门”的另一名角色（若有）。成功转移时，起点处的同花色“门”立即进入弃牌堆，然后你摸一张牌。不同花色的“门”同在一处时，按照下列优先级进行【杀】的转移：♢ > ♧ > ♡ > ♤。当一张【杀】被黑色的“门”转移给另一名角色时，此【杀】的伤害+1，当一张【杀】被红色的“门”转移给另一名角色时，此【杀】不可响应。",
                        bhachang: "阿常",
                        "bhachang_info": "出牌阶段各限一次，你可以将所有手牌或所有装备区的牌（至少一张）当作任意普通锦囊使用。",
                        bhmoer: "摩尔",
                        "bhmoer_info": "定义一种牌的计量方式，当场上有牌被使用或打出时，不论其对应的实体牌数量为何，只作为一张牌的效果结算时即可视为一摩尔牌。当一名角色使用一摩尔牌时，若这一摩尔牌对应的实体牌不少于两张，你可以摸(x-1)张牌。（x为这一摩尔牌对应的实体牌的数量）",
                        bhjuji: "狙击",
                        "bhjuji_info": "出牌阶段限x次，你可以将一张手牌扣置于自己的角色牌旁，称为“子弹”。其他角色使用牌时，若其使用的牌与你“子弹”中的一张牌花色相同且场上没有处于濒死状态的角色，你可以移去该“子弹”牌。若如此做，你对该角色造成1点物理伤害，若你移去的牌与该角色使用的牌类型相同，你弃置其区域内一张牌。（x为你的体力值且至少为1）",
                        bhdongtu: "冻土",
                        "bhdongtu_info": "锁定技，其他角色到你的距离+1。当你使用“狙击”令一名其他角色进入濒死状态时，你选择一项：1.令其减少1点体力上限；2.获得该角色的所有手牌；3.获得该角色的所有装备区的牌。",
                        bhexiaodao: "小道",
                        "bhexiaodao_info": "锁定技，当你受到不小于3点的伤害时或一名手牌数与体力值之和大于你的手牌数与体力值之和的其他角色的准备阶段，你走小道直到一名角色的结束阶段。一名角色的出牌阶段开始时，你可以偷偷走小道。",
                        bheqiyu: "奇遇",
                        "bheqiyu_info": "锁定技，当你走小道时，你须选择一个小道卡池进行抽卡，与你有缘のTa也许会助你一臂之力？（亦或者将你击而破之？）",
                        bhyiming: "刈命",
                        "bhyiming_info": "当你对一名角色造成一次伤害后，若其角色卡上“猎”的数量不小于其体力值，你可以失去1点体力，若如此做，你获得其角色卡上的所有“猎”，然后该角色失去x点体力（x为其体力值）。",
                        bhshoulie: "狩猎",
                        "bhshoulie_info": "出牌阶段限一次，你可以弃置一张牌并选择一名其他角色，然后亮出牌堆顶一张牌并置于其角色卡上，称为“猎”。你到角色卡上有“猎”的角色的距离视为1，当其受到伤害来源不为你的伤害时，你获得其角色卡上的“猎”并摸等量的牌。",
                        bhfenshen: "焚身",
                        "bhfenshen_info": "锁定技，爆发状态下，你每使用三张手牌就失去1点体力并获得1点血舞的计数。当你进入濒死状态时，你立即将体力回复至1点并退出爆发状态，且“焚身”和“血舞”失效直到你的下个回合开始。",
                        bhzaiyan: "灾炎",
                        "bhzaiyan_info": "出牌阶段，你可以弃一张牌以进入或退出爆发状态。爆发状态下，你可以将一张【杀】当作火【杀】使用，将一张手牌当作普通【杀】使用或打出，你使用火【杀】没有次数限制。",
                        bhxuewu: "血舞",
                        "bhxuewu_info": "你于爆发状态内每造成一点伤害，你获得1点血舞计数，退出爆发状态时你回复x点体力（x为血舞计数的一半，向下取整）并摸y张牌（y为血舞计数的一半，向上取整），然后将计数的值归零。",
                        bhrenzhe: "忍者",
                        "bhrenzhe_info": "锁定技，其他角色不能对你使用伤害牌直到你使用过伤害牌。准备阶段，你选择一项：视为使用无距离限制的刺【杀】；重置此技能。",
                        bhwoliu: "我流",
                        "bhwoliu_info": "锁定技，当你使用【杀】指定一名其他角色为目标时，你摸一张牌，然后弃置一张牌，若你弃置的牌为非基本牌，你令本回合“外道”的可使用次数+1；若你弃置的牌为【杀】或伤害类锦囊，此【杀】造成的伤害+1。",
                        bhwaidao: "外道",
                        "bhwaidao_info": "游戏开始时或此技能发动后，你排列①体力值②手牌数③体力上限的顺序（每种顺序限一次）。当第一项变为2后，你可以将第二项补至4，然后使用第三项张牌，否则发动一次〖崩坏〗。",
                        bhwaidao2:"外道",
                        "bhwaidao2_info":"当你的体力值变为2后，你可以将第二项补至4，然后使用第三项张牌，否则发动一次〖崩坏〗。",
                        bhwaidao3:"外道",
                        "bhwaidao3_info":"当你的手牌数变为2后，你可以将第二项补至4，然后使用第三项张牌，否则发动一次〖崩坏〗。",
                        bhwaidao4:"外道",
                        "bhwaidao4_info":"当你的体力上限变为2后，你可以将第二项补至4，然后使用第三项张牌，否则发动一次〖崩坏〗。",
                        bhbbenghuai:"崩坏",
                        "bhbbenghuai_info":"锁定技，回合结束阶段，若你的体力值不为全场最少（或之一），你选择1项：失去1点体力，或失去1点上限。",
                        bhcunxin:"寸心",
                        "bhcunxin_info":"当你发动“岩破”、“云岚”或“乱雷”后，你获得1点SP。当你发动“岩破”/“云岚”/“乱雷”时，你可以消耗1/2/3点SP，改为发动“山崩”/“开天”/“霹雳”。",
                        bhyanpo:"岩破",
                        "bhyanpo_info":"你使用【杀】指定唯一其他角色为目标时，你可以弃置其一张牌。",
                        bhshanbeng:"山崩",
                        "bhshanbeng_info":"你使用【杀】指定唯一其他角色为目标时，你可以令该牌无法响应且弃置其一张牌。",
                        bhyunlan:"云岚",
                        "bhyunlan_info":"你对唯一其他角色使用普通锦囊后，你可以对其造成1点伤害。若如此做，你须弃置一张有伤害标签的牌，否则失去1点体力。",
                        bhkaitian:"开天",
                        "bhkaitian_info":"你对唯一其他角色使用普通锦囊后，你可以对其造成1点伤害。",
                        bhluanlei:"乱雷",
                        "bhluanlei_info":"锁定技，你使用【杀】造成伤害时，你重铸一张牌，若受伤角色有“盾”或装备区内有防具，该伤害+1。",
                        bhspili:"霹雳",
                        "bhspili_info":"锁定技，你使用【杀】造成伤害时，你摸一张牌，若受伤角色有“盾”或装备区内有防具，该伤害翻倍。",
                        bhguangdian: "光电",
                        "bhguangdian_info": "每回合限一次，当你一次性获得至少2张牌时（若人数不大于5则改为1，x），你可以将其中至多（x-1）张交给一名其他角色。（x为你本次获得的牌数）",
                        bhjianwang: "健忘",
                        "bhjianwang_info": "锁定技，结束阶段，你遗忘一种普通锦囊或基本牌的牌名,然后获得x张你已经忘记牌名的牌。（你不能使用或打出牌名为你已经遗忘的牌，被你遗忘牌名的牌对你不可见，但因为你忘记了，这些牌不占用你的手牌上限。x为你已经忘记的牌名数量的一半，向上取整）",
                        bhchenzao: "趁早",
                        "bhchenzao_info": "每回合每个牌名限一次，你已经忘记了很多东西，不如趁着你还记得一些牌的牌名，把那些被你忘掉牌名的牌当做你还记得牌名的一张牌使用吧。（如果你遗忘了所有牌名....非常抱歉）",
                        bhshuya: "淑雅",
                        "bhshuya_info": "当你即将受到一次伤害时，你可以防止之。若如此做，你失去1点体力，然后你可以令至多两名角色摸共计两张牌。",
                        bhyouzi: "游子",
                        "bhyouzi_info": "准备阶段，你可以与一名其他角色交换位置；若如此做，结束阶段，你们交换位置。拥有“鸦眼”标记的其他角色在其准备阶段可以与你交换位置；若如此做，该角色的结束阶段，你们交换位置。",
                        bhyayan: "鸦眼",
                        "bhyayan_info": "出牌阶段限一次，你可以令一名角色获得或失去“鸦眼”标记或移动场上的“鸦眼”标记。（全场至多同时存在1枚“鸦眼”）当你与持有“鸦眼”标记的其他角色交换位置时，你可以与其各摸一张牌，然后你可以移去其“鸦眼”。",
                        bhhundian: "魂典",
                        "bhhundian_info": "锁定技，当你处于爆发状态时，你拥有：1.摸牌阶段额外摸一张牌；2.出牌阶段使用【杀】没有次数限制。3.不会因“沸血”获得“活化”；4.当你杀死一名其他角色时，你将“活化”补充至4个。当你不处于爆发状态时，你的手牌上限等于你的体力上限。",
                        bhfeixue: "沸血",
                        "bhfeixue_info": "当你使用了一张【杀】、受到或造成1点伤害后，你获得一个“活化”标记（至多4个）。准备阶段，若你的“活化”数量为4，你可以进入爆发状态直至“活化”数量为0。",
                        bhmuguang: "暮光",
                        "bhmuguang_info": "你使用一张锦囊牌后，你可以进行一次判定：若为黑色，你可以视为对你攻击范围内的一名角色使用了一张【杀】（不计入次数限制）；若为红色，你可以摸一张牌。若你处于爆发状态，你可以移去x个“活化”并执行两种结果的对应效果。（x为你本阶段已移去“活化”的次数且至少为1）。",
                        bhaoye: "熬夜",
                        "bhaoye_info": "锁定技，你的作息十分混乱，白天不醒，晚上不睡（你的回合按照以下阶段顺序进行：结束-弃牌-出牌-摸牌-准备），且废除你的判定区并始终跳过你的判定阶段。",
                        bhyexing: "夜行",
                        "bhyexing_info": "每回合各限一次： 1.出牌阶段，你可以趁夜幕黑暗，选一个良好时机，从牌堆和弃牌堆中偷偷拿走一些牌，但有概率被当场抓住（其他人会预测你行动的时间）； 2.准备阶段，你可以选择接下来度过一个清醒的白天（进行摸牌-出牌-弃牌-结束阶段），但如果你没有好好休息，就有概率当场猝死； 3.结束阶段，你可以选择今晚好好睡觉（跳过接下来的弃牌-出牌阶段）并降低你的猝死率。",
                        bhlvzhe: "律者",
                        "bhlvzhe_info": "锁定技，【崩坏爆发】对你无效；场上的【崩坏爆发】结算完后，你选择一项：回复1点体力，或摸一张牌。",
                        bhanlei: "暗雷",
                        "bhanlei_info": "锁定技，你使用雷【杀】没有次数限制，且当你使用了一张雷【杀】后，你摸一张牌。",
                        bhcunzhi: "存志",
                        "bhcunzhi_info": "每名角色的回合限一次，一名角色在其出牌阶段内造成伤害时，你可以弃一张基本牌并令受伤角色进行判定：若为红色，当前回合角色和你各摸一张牌；若为黑色，你视为对受伤角色使用了一张雷【杀】。",
                        bhhuntian: "浑天",
                        "bhhuntian_info": "准备阶段，你可以摸一张牌并将一名角色判定区内任意数量的牌移动到令一名角色的判定区内任何合理的位置。若此时全场角色的判定区内均无可移动的牌，你可以摸三张牌并选择一张手牌当作【闪电】置于你的判定区内。",
                        bhdidong: "地动",
                        "bhdidong_info": "限定技，出牌阶段，你可以令所有其他角色依次进行判定：若为红色，弃置所有牌（无牌者受到1点无来源的伤害）；若为黑色，其翻面。",
                        bhguaijie: "怪杰",
                        "bhguaijie_info": "你的回合外，当你需要使用或打出一张基本牌时，你可以进行两次判定；若两次判定牌的花色、点数或牌名相同，则视为你使用或打出了所需的基本牌。",
                        bhpiping: "批评",
                        "bhpiping_info": "轮次技，一名其他角色的回合结束时，你可以评价该角色在本回合内的表现是“好”或“坏”，并请除该角色以外的所有其他角色一并评价之。若该角色获得多半好评，你令其摸两张牌；若该角色获得多半差评，你令其弃两张牌；若该角色毁誉参半，你可以令其摸一张牌或弃一张牌，然后若该角色最终的评价与你一致，你摸两张牌，若该角色毁誉参半，你令本轮本技能可使用次数+1。",
                        bhkumiao: "哭庙",
                        "bhkumiao_info": "你死亡时，可以令一名其他角色获得技能“核桃”。",
                        bhhetao: "核桃",
                        "bhhetao_info": "你可以将两张基本牌当作一张与这两张牌的牌名都不相同的任意基本牌使用。",
                        bhdifang: "狄方",
                        "bhdifang_info": "每回合限一次，当你需要使用或打出一张手牌中的基本牌或普通锦囊时，你可以展示此牌，然后将一张花色与点数均不相同的手牌当作此牌使用或打出。",
                        bhchanglun: "场论",
                        "bhchanglun_info": "结束阶段开始时，你可以弃置你区域内的x张牌，然后摸4-x张牌。（x为你手牌当前包含的花色数）。",
                        bhanhai: "暗海",
                        "bhanhai_info": "锁定技，你的回合外，当一张你手牌中没有的花色的牌不从你的区域进入弃牌堆后，你获得之。",
                        bhbaquan: "霸权",
                        "bhbaquan_info": "当你受到一次有来源的伤害后，你可以模x张牌然后与伤害来源拼点：若你赢，你回复1点体力；若你没赢，你收回拼点牌。（x为你的体力值且至少为1）",
                        bhaizeng: "爱憎",
                        "bhaizeng_info": "使命技，成功：游戏开始时，若场上存在存活的其他【希儿·芙乐艾】角色，你获得技能“破茧”，并令所有【希儿·芙乐艾】角色获得“天秤”。失败：游戏开始时，若场上不存在存活的其他【希儿·芙乐艾】角色，你获得技能“恶戏”。",
                        bhexi: "恶戏",
                        "bhexi_info": "当你造成或受到1点伤害后，你获得一个“赤痕”标记（至多6个）。当你即将对一名其他角色造成的伤害值不小于其体力值时，你可以防止该伤害，然后摸2y张牌（y为该伤害的伤害值）。",
                        bhyanye: "魇夜",
                        "bhyanye_info": "锁定技，若场上有任意其他【希儿·芙乐艾】角色存活，当这名/这些角色即将受到不来源于你的伤害时，若其体力值不大于你，则将该伤害转移给你。当你对非【希儿·芙乐艾】角色造成伤害时，若你有“赤痕”，你移去所有“赤痕”并令该伤害+x（x为你本次移去“赤痕”数的一半，向上取整）。",
                        bhpojian: "破茧",
                        "bhpojian_info": "当你受到1点伤害后，你可以摸一张牌然后选择一项：获得一个“赤痕”标记（至多6个）；或与所有存活的【希儿·芙乐艾】角色各摸一张牌。",
                        bhtiancheng: "天秤",
                        "bhtiancheng_info": "弃牌阶段，你可以将你于本阶段弃置的牌中至多两张牌交给【魇夜星渊】，若你以此法给出了两张类别不同的牌，其回复1点体力。",
                        bhhuanshe: "环蛇",
                        "bhhuanshe_info": "锁定技，当你失去1点体力、受到1点伤害或失去1点体力上限后，你获得1点SP。 当你进入濒死状态或体力上限降至1以下时，若你的SP不小于9，你立即消耗所有SP（至多计算16点），将体力回复至1点并将体力上限重置为8点，然后计算你以此法消耗的SP超过9的部分：每有1点，你便额外回复1点体力。 游戏开始时或你获得此技能时，你获得x点SP（x为9减去你当前的体力值）。",
                        bhwuxian: "无限",
                        "bhwuxian_info": "你的体力值或上限变化时，你可以立即摸等同于本次变化量一半（向下取整且至少为1，至多为4）的牌。",
                        bhjinhua: "进化",
                        "bhjinhua_info": "当你造成一次伤害/受到一次有来源的且受伤角色/伤害来源不为你的伤害后，你可以消耗2点SP然后选择一项： 1. 获得受伤角色/伤害来源的一项你没有的技能，然后你的体力上限-8； 2. 选择你已有的一项技能，令受伤角色/伤害来源获得之，然后你失去该技能且体力上限-4。",
                        bhsbenghuai: "崩坏",
                        "bhsbenghuai_info": "锁定技，回合结束阶段，若你的体力值不为全场最少（或之一），你选择1项：失去1点体力，或失去1点上限。",
                        bhshuangxiang: "双相",
                        "bhshuangxiang_info": "锁定技，当你使用一张武器牌后，若你的装备区没有【寂静天鹅湖】，你将一张【寂静天鹅湖】置入你的装备区，当该牌离开你的准备区时，你销毁之。你的装备区可以同时装备一把主武器和【寂静天鹅湖】。",
                        "bhtianehu_skill": "天鹅湖",
                        "bhtianehu_skill_info": "",
                        bhjiumeng: "旧梦",
                        "bhjiumeng_info": "锁定技，准备阶段，你选择一项：1.天鹅湖：你视为拥有技能“剑圣”直到你的下一个准备阶段，结束阶段，你将手牌数调整至等于你本回合准备阶段记录的手牌数。2.睡美人：出牌阶段，你使用牌时不能指定其他角色为目标，结束阶段，你摸两张牌并从牌堆中获得一张【杀】。",
                        bhkuangre: "狂热",
                        "bhkuangre_info": "限定技，出牌阶段，若你已选择过“旧梦”的两个不同选项，你可以失去“旧梦”并获得“剑圣”，然后直到你第一次进入濒死状态：①你可以将一张与上次发动此技能时颜色不同（初次发动无限制）的基本牌当做【杀】使用或打出；②当你使用【杀】造成伤害后，你可以弃置一张与上次发动此技能时颜色不同（初次发动无限制）的非基本牌，然后对受伤角色造成一点伤害。",
                        bhyouxia: "游侠",
                        "bhyouxia_info": "你的回合外，你的攻击范围+1，且你可以将一张手牌当作【杀】使用或打出。你以此法使用或打出【杀】时，你摸一张牌。",
                        bhchenge: "惩恶",
                        "bhchenge_info": "一名其他角色的结束阶段，若其于回合内造成过伤害且在你的攻击范围内，你可以对其使用一张【杀】；一名其他角色杀死一名角色后，你可以视为对其使用了一张【决斗】。你以此法造成伤害后，你令受伤角色选择一项：交给你一张牌；或弃置两张牌。",
                        bhbeichen: "北辰",
                        "bhbeichen_info": "当你于出牌阶段内使用【杀】时，若此【杀】是你本回合内使用的：1. 第一张【杀】，你可以令你本回合使用【杀】的次数+1；2. 第二张【杀】，此【杀】不可被响应；3. 第三张及以上的【杀】，成为此【杀】目标的角色需选择一项——弃一张牌，或令你摸一张牌。",
                        bhbace: "八策",
                        "bhbace_info": "准备阶段，你可以令至多x名角色依次摸一张牌，然后这些角色依次弃置一张牌，手牌数不大于体力值的角色可以不弃牌。若本次以此法弃置的牌点数之和不小于14，你可以视为使用了一张无距离限制的【杀】（x为你的体力值）。",
                        bhmoou: "魔偶",
                        "bhmoou_info": "出牌阶段限一次，你可以将一张手牌置于一名角色的角色卡上，称为“魔偶”（替换原有的）。你的手牌上限+X（X为全场“魔偶”的数量）",
                        bhcaolian: "操练",
                        "bhcaolian_info": "锁定技，当你使用了仅指定了唯一目标的基本牌或普通锦囊后，全场拥有花色与此牌相同的“魔偶”的其他角色依次视为对此牌的目标使用了一张与此牌同名的牌并令你摸一张牌。",
                        bhchuangshi: "创世",
                        "bhchuangshi_info": "出牌阶段限一次，你可以弃置至少x张红色牌，然后令y名角色各选择一项执行：摸一张牌，或重置角色卡（x为你已损失的体力值，y为你以此法弃置的牌数与你已损体力值之和且至少为1）。",
                        bhshenpan: "审判",
                        "bhshenpan_info": "当你受到一次伤害后，你可以选择一项：令除伤害来源以外的所有角色各摸两张牌;或令除你以外的所有角色各失去1点体力。",
                        bhsanjiao: "三角",
                        "bhsanjiao_info": "当你受到一次有来源的伤害后，若场上至少有三名角色存活，你可以令你、伤害来源和除你们以外的一名其他角色各自独立地从你们三人中选择一人，然后统计每个人被选中的次数：1.若有一人被选中三次，此人摸四张牌；2.若有一人被选中两次，该角色摸一张牌，另两人中未被选中的摸一张牌；3.若三人均被选中一次，三人各摸一张牌。若场上存活角色不足三名，你摸两张牌。",
                        bhxinsheng: "新生",
                        "bhxinsheng_info": "锁定技，准备阶段，若你有SP，则你失去所有SP并摸x-1张牌，然后你弃置2x张手牌（x为你移去的标记数）。若摸牌前你的手牌数小于需弃置的牌数，则你对所有其他角色各造成1点伤害并令其摸y张牌（y为你需要弃置的牌数与你当前的手牌数之差），然后你弃置所有手牌。	",
                        bhshenqu: "神曲",
                        "bhshenqu_info": "锁定技，结束阶段开始时或当你于回合外使用或打出了一张手牌后，你摸两张牌并获得1点SP。",
                        /////包名翻译
                        bh_kiana: "琪亚娜·卡斯兰娜",
                        bh_mei: "雷电芽衣",
                        bh_bronya: "布洛妮娅",
                        bh_himeko: "无量塔姬子",
                        bh_theresa: '德莉莎',
                        bh_sakura: '八重樱',
                        bh_kallen: '卡莲·卡斯兰娜',
                        bh_hua: '符华',
                        bh_rita: '丽塔',
                        bh_vodka: '伏特加女孩',
                        bh_seele: '希儿·芙乐艾',
                        bh_durandal: '幽兰戴尔',
                        bh_linkage: '联动',
                        bh_xiubolian:'休伯利安一家人',
                        bh_stigmata_tianming: '天命骑士',
                        bh_stigmata_yuanchuang: '原创之魂',
                        bh_stigmata_shenzhou: '神州英灵',
                        bh_stigmata_zhanguo: '战国幕府',
                        bh_stigmata_oulu: '欧陆风云',
                        bh_stigmata_kexue: '科学革命',
                        bh_stigmata_ziyi: '恣意文豪',
                        bh_stigmata_tangcai: '淌彩流音',
                        bh_stigmata_buyi: '布衣贤勇',
                        bh_stigmata_xuxu: '栩栩如生',
                        bh_stigmata_zhejian:'神州折剑',
                        bh_ex_zhuhuo: '逐火之蛾',
                        bh_ex_qizongzui: '七宗罪',
                        bh_ex_shishen:'噬身之蛇',
                        bh_ex_houbeng:'后崩坏书',
                        bh_dai: '带将军',
                    },
                    perfectPair: {},
                };
                if (lib.device || lib.node) {
                    for (var i in bbb.character) { bbb.character[i][4].push('ext:崩崩崩/image/' + i + '.jpg'); }
                } else {
                    for (var i in bbb.character) { bbb.character[i][4].push('db:extension-崩崩崩:' + i + '.jpg'); }
                }
                return bbb;
            });
            game.addMode('bhzhanchang', {
                name: '记忆战场',
                start: function () {
                    "step 0"
                    var playback = localStorage.getItem(lib.configprefix + 'playback');
                    if (playback) {
                        ui.create.me();
                        ui.arena.style.display = 'none';
                        ui.system.style.display = 'none';
                        _status.playback = playback;
                        localStorage.removeItem(lib.configprefix + 'playback');
                        var store = lib.db.transaction(['video'], 'readwrite').objectStore('video');
                        store.get(parseInt(playback)).onsuccess = function (e) {
                            if (e.target.result) {
                                game.playVideoContent(e.target.result.video);
                            }
                            else {
                                alert('播放失败：找不到录像');
                                game.reload();
                            }
                        }
                        event.finish();
                        return;
                    }
                    for (var i in lib.characterPack.mode_boss) {
                        lib.character[i] = lib.characterPack.mode_boss[i];
                        if (!lib.character[i][4]) {
                            lib.character[i][4] = [];
                        }
                    }
                    // for(var i in lib.cardPack.mode_boss){
                    //		lib.card[i]=lib.cardPack.mode_boss[i];
                    // }
                    for (var i in lib.skill) {
                        if (lib.skill[i].changeSeat) {
                            lib.skill[i] = {};
                            if (lib.translate[i + '_info']) {
                                lib.translate[i + '_info'] = '此模式下不可用';
                            }
                        }
                    }
                    lib.translate.restart = '返回';
                    lib.init.css(lib.assetURL + 'layout/mode', 'boss');
                    game.delay(0.1);
                    "step 1"
                    var bosslist = ui.create.div('#bosslist.hidden');
                    event.bosslist = bosslist;
                    lib.setScroll(bosslist);
                    // bosslist.ontouchmove = ui.click.touchScroll;
                    // bosslist.style.WebkitOverflowScrolling='touch';
                    if (!lib.config.touchscreen && lib.config.mousewheel) {
                        bosslist._scrollspeed = 30;
                        bosslist._scrollnum = 10;
                        bosslist.onmousewheel = ui.click.mousewheel;
                    }
                    // var bosslistlinks={};
                    // var toggleBoss=function(bool){
                    //		game.saveConfig(this._link.config._name,bool,true);
                    //		var node=bosslistlinks[this._link.config._name];
                    //		if(bool){
                    //			node.style.display='';
                    //		}
                    //		else{
                    //			node.style.display='none';
                    //		}
                    // };
                    var onpause = function () {
                        ui.window.classList.add('bosspaused');
                    }
                    var onresume = function () {
                        ui.window.classList.remove('bosspaused');
                    }
                    game.onpause = onpause;
                    game.onpause2 = onpause;
                    game.onresume = onresume;
                    game.onresume2 = onresume;
                    ui.create.div(bosslist);

                    event.current = null;
                    var list = [];
                    for (var i in lib.character) {
                        var info = lib.character[i];
                        if (info[4].contains('boss')) {
                            // var cfg=i+'_bossconfig';
                            // if(get.config(cfg)==undefined){
                            //		game.saveConfig(cfg,true,true);
                            // }
                            // lib.translate[cfg+'_config']=lib.translate[i];
                            // lib.mode.boss.config[cfg]={
                            //		name:get.translation(i),
                            //		onclick:toggleBoss,
                            //		init:true,
                            // }
                            var player = ui.create.player(bosslist).init(i);
                            if (lib.characterPack.mode_boss[i] && get.config(i + '_boss_config') == false) {
                                player.style.display = 'none';
                            }
                            if (player.hp == 0) {
                                player.node.hp.style.display = 'none';
                            }
                            list.push(player);
                            player.node.hp.classList.add('text');
                            player.node.hp.dataset.condition = '';
                            player.node.hp.innerHTML = info[2];
                            if (info[2] == Infinity) {
                                player.node.hp.innerHTML = '∞';
                            }
                            player.setIdentity(player.name);
                            player.node.identity.dataset.color = info[5];
                            // bosslistlinks[cfg]=player;
                            player.classList.add('bossplayer');

                            if (lib.storage.current == i) {
                                event.current = player;
                                player.classList.add('highlight');
                                if (!lib.config.continue_name_boss && lib.boss[i] && lib.boss[i].control) {
                                    _status.bosschoice = lib.boss[i].control();
                                    _status.bosschoice.name = i;
                                    _status.bosschoice.link = lib.boss[i].controlid || i;
                                }
                            }

                            // if(!get.config(cfg)){
                            //		player.style.display='none';
                            // }
                        }
                    }
                    if (!list.length) {
                        alert('没有可挑战的BOSS');
                        event.finish();
                        lib.init.onfree();
                        _status.over = true;
                        return;
                    }
                    if (!event.current) {
                        event.current = bosslist.childNodes[1];
                        event.current.classList.add('highlight');
                    }
                    ui.create.div(bosslist);
                    ui.create.cardsAsync();
                    game.finishCards();
                    game.addGlobalSkill('autoswap');
                    ui.arena.setNumber(8);
                    ui.control.style.transitionProperty = 'opacity';
                    ui.control.classList.add('bosslist');
                    setTimeout(function () {
                        ui.control.style.transitionProperty = '';
                    }, 1000);

                    ui.window.appendChild(bosslist);

                    setTimeout(function () {
                        if (event.current) {
                            var left = event.current.offsetLeft - (ui.window.offsetWidth - 180) / 2;
                            if (bosslist.scrollLeft < left) {
                                bosslist.scrollLeft = left;
                            }
                        }
                        bosslist.show();
                    }, 200);
                    game.me = ui.create.player();
                    if (lib.config.continue_name_boss) {
                        event.noslide = true;
                        lib.init.onfree();
                    }
                    else {
                        game.chooseCharacter(function (target) {
                            if (event.current) {
                                event.current.classList.remove('highlight');
                            }
                            event.current = target;
                            game.save('current', target.name);
                            target.classList.add('highlight');
                            if (_status.bosschoice) {
                                var name = target.name;
                                if (lib.boss[target.name] && lib.boss[target.name].controlid) {
                                    name = lib.boss[target.name].controlid;
                                }
                                if (_status.bosschoice.link != name) {
                                    lib.boss[_status.bosschoice.name].control('cancel', _status.bosschoice);
                                    _status.bosschoice.classList.remove('disabled');
                                    _status.bosschoice.close();
                                    delete _status.bosschoice;
                                }
                                else {
                                    return;
                                }
                            }
                            if (lib.boss[target.name] && lib.boss[target.name].control) {
                                _status.createControl = ui.control.firstChild;
                                _status.bosschoice = lib.boss[target.name].control();
                                _status.bosschoice.name = target.name;
                                _status.bosschoice.link = lib.boss[target.name].controlid || target.name;
                                if (ui.cheat2 && ui.cheat2.dialog == _status.event.dialog) {
                                    _status.bosschoice.classList.add('disabled');
                                }
                                delete _status.createControl;
                            }
                        });
                    }
                    if (lib.config.test_game) {
                        event.current.classList.remove('highlight');
                        if (event.current.nextSibling && event.current.nextSibling.classList.contains('player')) {
                            event.current = event.current.nextSibling;
                        }
                        else {
                            event.current = event.current.parentNode.childNodes[1];
                        }
                        game.save('current', event.current.name);
                    }
                    "step 2"
                    game.bossinfo = lib.boss.global;
                    for (var i in lib.boss[event.current.name]) {
                        game.bossinfo[i] = lib.boss[event.current.name][i];
                    }

                    setTimeout(function () {
                        ui.control.classList.remove('bosslist');
                    }, 500);
                    var boss = ui.create.player();
                    boss.getId();
                    game.boss = boss;
                    boss.init(event.current.name);
                    boss.side = true;
                    if (!event.noslide) {
                        var rect = event.current.getBoundingClientRect();
                        boss.animate('bossing');
                        boss.node.hp.animate('start');
                        boss.bossinginfo = [rect.left + rect.width / 2, rect.top + rect.height / 2];
                        boss.style.transition = 'all 0s';
                        boss.node.equips.style.opacity = '0';
                    }
                    else {
                        boss.animate('start');
                    }
                    boss.setIdentity('zhu');
                    boss.identity = 'zhu';
                    if (lib.config.continue_name_boss) {
                        result = lib.config.continue_name_boss;
                        game.saveConfig('continue_name_boss');
                    }
                    for (var i = 0; i < result.links.length; i++) {
                        var player = ui.create.player();
                        player.getId();
                        player.init(result.links[i]).animate('start');
                        player.setIdentity('cai');
                        player.identity = 'cai';
                        player.side = false;
                        game.players.push(player);
                        if (result.boss) {
                            if (game.bossinfo.minion) {
                                player.dataset.position = i + 3;
                            }
                            else {
                                player.dataset.position = (i + 1) * 2;
                            }
                        }
                        else {
                            player.dataset.position = i + 1;
                        }
                        ui.arena.appendChild(player);
                    }
                    if (result.boss) {
                        game.players.unshift(boss);
                        boss.dataset.position = 0;
                    }
                    else {
                        game.players.push(boss);
                        boss.dataset.position = 7;
                    }
                    if (game.bossinfo.minion) {
                        if (!result.boss) {
                            boss.dataset.position = 6;
                        }
                        for (var i in game.bossinfo.minion) {
                            var player = ui.create.player();
                            player.getId();
                            player.init(game.bossinfo.minion[i]);
                            if (boss.bossinginfo) {
                                player.animate('bossing');
                                player.node.hp.animate('start');
                                player.style.transition = 'all 0s';
                            }
                            else {
                                player.animate('start');
                            }
                            player.setIdentity('zhong');
                            player.identity = 'zhong';
                            player.side = true;
                            game.players.push(player);
                            var num = parseInt(i);
                            if (result.boss) {
                                player.dataset.position = num - 1;
                            }
                            else {
                                if (num == 2) {
                                    player.dataset.position = 7;
                                }
                                else {
                                    player.dataset.position = num - 3;
                                }
                            }
                            ui.arena.appendChild(player);
                            if (boss.bossinginfo) {
                                var rect = player.getBoundingClientRect();
                                player.style.transform = 'translate(' + (boss.bossinginfo[0] - rect.left - rect.width / 2) + 'px,' + (boss.bossinginfo[1] - rect.top - rect.height / 2) + 'px) scale(1.1)';
                                ui.refresh(player);
                                player.style.transition = '';
                                player.style.transform = '';
                            }
                        }
                    }
                    ui.create.me();
                    ui.fakeme = ui.create.div('.fakeme.avatar', ui.me);
                    if (game.me !== boss) {
                        game.singleHandcard = true;
                        ui.arena.classList.add('single-handcard');
                        ui.window.classList.add('single-handcard');
                        game.onSwapControl();

                        if (lib.config.show_handcardbutton) {
                            lib.setPopped(ui.create.system('手牌', null, true), function () {
                                var uiintro = ui.create.dialog('hidden');

                                var players = game.players.concat(game.dead);
                                for (var i = 0; i < players.length; i++) {
                                    if (players[i].side == game.me.side && players[i] != game.me) {
                                        uiintro.add(get.translation(players[i]));
                                        var cards = players[i].getCards('h');
                                        if (cards.length) {
                                            uiintro.addSmall(cards, true);
                                        }
                                        else {
                                            uiintro.add('（无）');
                                        }
                                    }
                                }

                                return uiintro;
                            }, 220);
                        }
                    }
                    else {
                        ui.fakeme.style.display = 'none';
                    }
                    if (game.bossinfo.chongzheng) {
                        lib.setPopped(ui.create.system('重整', null, true), function () {
                            var uiintro = ui.create.dialog('hidden');

                            uiintro.add('重整');
                            var table = ui.create.div('.bosschongzheng');

                            var tr, td, added = false;
                            for (var i = 0; i < game.dead.length; i++) {
                                if (typeof game.dead[i].storage.boss_chongzheng !== 'number') continue;
                                added = true;
                                tr = ui.create.div(table);
                                td = ui.create.div(tr);
                                td.innerHTML = get.translation(game.dead[i]);
                                td = ui.create.div(tr);
                                if (game.dead[i].maxHp > 0) {
                                    td.innerHTML = '剩余' + (game.bossinfo.chongzheng - game.dead[i].storage.boss_chongzheng) + '回合';
                                }
                                else {
                                    td.innerHTML = '无法重整'
                                }
                            }

                            if (!added) {
                                uiintro.add('<div class="text center">（无重整角色）</div>');
                                uiintro.add(ui.create.div('.placeholder.slim'))
                            }
                            else {
                                uiintro.add(table);
                            }

                            return uiintro;
                        }, 180);
                    }
                    ui.single_swap = ui.create.system('换人', function () {
                        var players = get.players(game.me);
                        players.remove(game.boss);
                        if (players.length > 1) {
                            if (ui.auto.classList.contains('hidden')) {
                                game.me.popup('请稍后换人');
                                return;
                            }
                            if (_status.event.isMine()) {
                                ui.click.auto();
                                setTimeout(function () {
                                    ui.click.auto();
                                }, 500);
                            }
                            game.modeSwapPlayer(players[1]);
                        }
                    }, true);
                    if (get.config('single_control') || game.me == game.boss) {
                        ui.single_swap.style.display = 'none';
                    }

                    ui.arena.appendChild(boss);
                    if (boss.bossinginfo) {
                        var rect = boss.getBoundingClientRect();
                        boss.style.transform = 'translate(' + (boss.bossinginfo[0] - rect.left - rect.width / 2) + 'px,' + (boss.bossinginfo[1] - rect.top - rect.height / 2) + 'px) scale(1.1)';
                        ui.refresh(boss);
                        boss.style.transition = '';
                        boss.style.transform = '';
                        delete boss.bossinginfo;
                        setTimeout(function () {
                            boss.node.equips.style.opacity = '';
                        }, 500);
                    }

                    event.bosslist.delete();

                    game.arrangePlayers();
                    for (var i = 0; i < game.players.length; i++) {
                        game.players[i].node.action.innerHTML = '行动';
                    }

                    var players = get.players(lib.sort.position);
                    var info = [];
                    for (var i = 0; i < players.length; i++) {
                        info.push({
                            name: players[i].name1,
                            identity: players[i].identity,
                            position: players[i].dataset.position
                        });
                    }
                    _status.videoInited = true,
                        info.boss = (game.me == game.boss);
                    game.addVideo('init', null, info);
                    if (game.bossinfo.init) {
                        game.bossinfo.init();
                    }
                    delete lib.boss;
                    "step 3"
                    if (get.config('single_control')) {
                        for (var i = 0; i < game.players.length; i++) {
                            if (game.players[i].side == game.me.side) {
                                game.addRecentCharacter(game.players[i].name);
                            }
                        }
                    }
                    else {
                        game.addRecentCharacter(game.me.name);
                    }
                    event.trigger('gameStart');
                    game.gameDraw(game.boss, game.bossinfo.gameDraw || 4);
                    game.bossPhaseLoop();
                    setTimeout(function () {
                        ui.updatehl();
                    }, 200);
                },
                element: {
                    player: {
                        dieAfter: function () {
                            if (this != game.boss) {
                                this.storage.boss_chongzheng = 0;
                            }
                            if (game.bossinfo.checkResult && game.bossinfo.checkResult(this) === false) {
                                return;
                            }
                            if (this == game.boss || !game.hasPlayer(function (current) {
                                return !current.side;
                            })) {
                                game.checkResult();
                            }
                        },
                    }
                },
                card: {
                },
                characterPack: {
                    mode_boss: {
                        //bhbeinalesi: ["none", "bhbenghuai", 16, ["bhhuanlong", "bhaokong"], ['bhbenghuai', 'boss', 'bossallowed'], ["des:战场贝贝龙"]],
                        bhhaimudaer: ["none", "bhtianming", 16, ["bhhudunb", "bhtujinb", "bhhuixuanb", "bhchaozaib", "bhtianqib"], ['bhtianming', 'boss', 'bossallowed'], ["des:战场海大胖"]],
                        //bhkongzhilvzheb: ["female", "bhbenghuai", 12, ["bhzaiyaob", "bhxukong", "bhjianglin", "bhzhendang", "bhlvzhe"], ['bhbenghuai', 'boss', 'bossallowed'], ["des:战场女王"]],
                        bhshizhilvzheb: ["female", "bhbenghuai", "3/99", ["nicai", "niuzhuanb", "wanshi", "qianwu", "bhlvzhe"], ['bhbenghuai', 'boss', 'bossallowed'], ["des:太虚剑派现任CEO，兼任第八律者"]],
                        bhyuehunb: ["female", "bhtianming", 10, ["bhshenjib", "bhshuanghenb", "bhbinglaob", "bhbingjiab"], ['bhbenghuai', 'boss', 'bossallowed'], ["des:战场贝贝龙"]],
                    }
                },
                cardPack: {
                },
                init: function () {
                    for (var i in lib.characterPack.mode_boss) {
                        if (lib.characterPack.mode_boss[i][4].contains('hiddenboss')) continue;
                        lib.mode.boss.config[i + '_boss_config'] = {
                            name: get.translation(i),
                            init: true,
                            unfrequent: true,
                        }
                    }
                    // !@
                    for (var i in lib.characterPack.mode_boss) {
                        lib.characterPack.mode_boss[i][4].push('ext:崩崩崩/boss/boss_' + i + '.jpg');
                    }
                },
                game: {
                    reserveDead: true,
                    addBossFellow: function (position, name) {
                        var fellow = game.addFellow(position, name, 'zoominanim');
                        fellow.directgain(get.cards(4));
                        fellow.side = true;
                        fellow.identity = 'zhong';
                        fellow.setIdentity('zhong');
                        game.addVideo('setIdentity', fellow, 'zhong');
                    },
                    changeBoss: function (name, player) {
                        if (!player) {
                            if (game.additionaldead) {
                                game.additionaldead.push(game.boss);
                            }
                            else {
                                game.additionaldead = [game.boss];
                            }
                            player = game.boss;
                            delete game.boss;
                        }

                        player.delete();
                        game.players.remove(player);
                        game.dead.remove(player);
                        var boss = ui.create.player();
                        boss.getId();
                        boss.init(name);
                        boss.side = true;
                        game.addVideo('bossSwap', player, (game.boss ? '_' : '') + boss.name);
                        boss.dataset.position = player.dataset.position;
                        if (game.me == player) {
                            game.swapControl(boss);
                        }
                        game.players.push(boss.animate('zoominanim'));
                        game.arrangePlayers();
                        if (!game.boss) {
                            game.boss = boss;
                            boss.setIdentity('zhu');
                            boss.identity = 'zhu';
                        }
                        else {
                            boss.setIdentity('zhong');
                            boss.identity = 'zhong';
                        }
                        ui.arena.appendChild(boss);
                        boss.directgain(get.cards(4));
                    },
                    checkResult: function () {
                        // var fso;
                        // try { 
                        //     fso=new ActiveXObject("Scripting.FileSystemObject"); 
                        // } catch (e) { 
                        //     alert("当前浏览器不支持");
                        // } 

                        // //alert("方法已执行2");
                        // var openf1;
                        // try{
                        //     openf1 = fso.OpenTextFile(lib.assetURL + 'extension/崩崩崩/bossData');
                        // } catch(e){
                        //     openf1 = fso.createtextfile(lib.assetURL + 'extension/崩崩崩/bossData',true);
                        // }
                        //str = openf1.ReadLine();
                        //alert("里面的内容为'" + str + "'");

                        var scoresList = [31946, 31893, 31840, 31786, 31733, 31680, 31626, 31573, 31520, 31466, 31413, 31360, 31306, 31253, 31200, 31146, 31093, 31040, 30986, 30933, 30880, 30826, 30773, 30720, 30666, 30613, 30560, 30506, 30453, 30400, 30346, 30293, 30240, 30186, 30133, 30080, 30026, 29973, 29920, 29866, 29813];
                        var str = '挑战胜利\n\n';
                        str += '本次得分：';
                        if (game.roundNumber < scoresList.length) {
                            str += scoresList[game.roundNumber];
                            // var rstr='.';
                            // while(str!=''){
                            //     rstr = openf1.ReadLine();
                            //     if(rstr==game.boss&&game.boss != game.me){
                            //         rstr = openf1.ReadLine();
                            //         if(scoresList[game.roundNumber]>Math.parseInt(rstr)){
                            //             openf1.write(game.boss+"\n");
                            //             openf1.write(scoresList[game.roundNumber]+"\n");
                            //         }
                            //     }
                            // }
                        } else str += '无';
                        str += '\n用时：';
                        str += game.roundNumber;
                        str += 's';
                        var str2 = '挑战失败\n\n';
                        str2 += '\n用时：';
                        str2 += game.roundNumber;
                        str2 += 's';
                        if (game.boss == game.me) {
                            if (game.boss.isAlive()) {
                                // if(lib.config.supplySystem){
                                //     game.me.gainCrystal(60);
                                // }
                                alert(str);
                            } else {
                                alert(str2);
                            }
                            game.over(game.boss.isAlive());
                        }
                        else {
                            if (!game.boss.isAlive()) {
                                // if(lib.config.supplySystem){
                                //     if(game.roundNumber<=5){
                                //         game.me.gainCrystal(1000);
                                //     } else if(game.roundNumber<=10&&game.roundNumber>5){
                                //         game.me.gainCrystal(500);
                                //     } else {
                                //         game.me.gainCrystal(300);
                                //     }
                                // }
                                alert(str);
                            } else {
                                alert(str2);
                            }
                            game.over(!game.boss.isAlive());
                        }
                    },
                    getVideoName: function () {
                        var str = get.translation(game.me.name);
                        if (game.me.name2) {
                            str += '/' + get.translation(game.me.name2);
                        }
                        var str2 = '挑战';
                        if (game.me != game.boss) {
                            str2 += ' - ' + get.translation(game.boss);
                        }
                        var name = [str, str2];
                        return name;
                    },
                    bossPhaseLoop: function () {
                        var next = game.createEvent('phaseLoop');
                        if (game.bossinfo.loopFirst) {
                            next.player = game.bossinfo.loopFirst();
                        }
                        else {
                            next.player = game.boss;
                        }
                        _status.looped = true;
                        next.setContent(function () {
                            "step 0"
                            if (player.chongzheng) {
                                player.chongzheng = false;
                            }
                            else if (player.isDead()) {
                                if (player.hp < 0) player.hp = 0;
                                player.storage.boss_chongzheng++;
                                if (player.maxHp > 0 && game.bossinfo.chongzheng) {
                                    if (player.hp < player.maxHp) {
                                        player.hp++;
                                    }
                                    else if (player.countCards('h') < 4) {
                                        var card = get.cards()[0];
                                        var sort = lib.config.sort_card(card);
                                        var position = sort > 0 ? player.node.handcards1 : player.node.handcards2;
                                        card.fix();
                                        card.animate('start');
                                        position.insertBefore(card, position.firstChild);
                                    }
                                    player.update();
                                    if (player.storage.boss_chongzheng >= game.bossinfo.chongzheng) {
                                        player.revive(player.hp);
                                    }
                                }
                                if (game.bossinfo.loopType == 2) {
                                    game.boss.chongzheng = true;
                                }
                            }
                            else {
                                if (player.identity == 'zhu' && game.boss != player) {
                                    player = game.boss;
                                }
                                player.phase();
                            }
                            "step 1"
                            if (game.bossinfo.loopType == 2) {
                                _status.roundStart = true;
                                if (event.player == game.boss) {
                                    if (!_status.last || _status.last.nextSeat == game.boss) {
                                        event.player = game.boss.nextSeat;
                                    }
                                    else {
                                        event.player = _status.last.nextSeat;
                                    }
                                }
                                else {
                                    _status.last = player;
                                    event.player = game.boss;
                                    if (player.nextSeat == game.boss) {
                                        delete _status.roundStart;
                                    }
                                }
                            }
                            else {
                                event.player = event.player.nextSeat;
                            }
                            event.goto(0);
                        });
                    },
                    onSwapControl: function () {
                        if (game.me == game.boss) return;
                        game.addVideo('onSwapControl');
                        var name = game.me.name;
                        if (ui.fakeme && ui.fakeme.current != name) {
                            ui.fakeme.current = name;
                            if (ui.versushighlight && ui.versushighlight != game.me) {
                                ui.versushighlight.classList.remove('current_action');
                            }
                            ui.versushighlight = game.me;
                            game.me.classList.add('current_action');
                            // game.me.line(ui.fakeme,{opacity:0.5,dashed:true});

                            ui.fakeme.style.backgroundImage = game.me.node.avatar.style.backgroundImage;
                            // ui.fakeme.style.backgroundSize='cover';
                        }
                        ui.updatehl();
                    },
                    modeSwapPlayer: function (player) {
                        var bool = (game.me == game.boss || player == game.boss);
                        game.swapControl(player);
                        game.onSwapControl();
                        if (!bool) return;
                        if (game.me == game.boss) {
                            game.singleHandcard = false;
                            ui.arena.classList.remove('single-handcard');
                            ui.window.classList.remove('single-handcard');
                            ui.fakeme.style.display = 'none';
                            game.me.dataset.position = 0;
                            game.me.nextSeat.dataset.position = 2;
                            game.me.nextSeat.nextSeat.dataset.position = 4;
                            game.me.nextSeat.nextSeat.nextSeat.dataset.position = 6;
                        }
                        else {
                            game.singleHandcard = true;
                            ui.arena.classList.add('single-handcard');
                            ui.window.classList.add('single-handcard');
                            ui.fakeme.style.display = '';
                            game.boss.dataset.position = 7;
                            game.boss.nextSeat.dataset.position = 1;
                            game.boss.nextSeat.nextSeat.dataset.position = 2;
                            game.boss.nextSeat.nextSeat.nextSeat.dataset.position = 3;
                            if (game.me && game.me.node.handcards2.childNodes.length) {
                                while (game.me.node.handcards2.childNodes.length) {
                                    game.me.node.handcards1.appendChild(game.me.node.handcards2.firstChild);
                                }
                            }
                        }
                    },
                    chooseCharacter: function (func) {
                        var next = game.createEvent('chooseCharacter', false);
                        next.showConfig = true;
                        next.customreplacetarget = func;
                        next.ai = function (player, list) {
                            if (get.config('double_character')) {
                                player.init(list[0], list[1]);
                            }
                            else {
                                player.init(list[0]);
                            }
                        }
                        next.setContent(function () {
                            "step 0"
                            var i;
                            var list = [];
                            event.list = list;
                            var bhlist = ['bhtianming', 'bhnishang', 'bhxiubolian', 'bhshijieshe', 'bhbenghuai', 'bhzhongyingjie'];
                            for (i in lib.character) {
                                if (lib.character[i][4].contains('minskin')) continue;
                                if (lib.character[i][4].contains('boss')) continue;
                                if (lib.character[i][4].contains('hiddenboss')) continue;
                                if (lib.character[i][4] && lib.character[i][4].contains('forbidai')) continue;
                                if (!bhlist.contains(lib.character[i][1])) continue;
                                if (lib.config.forbidboss.contains(i)) continue;
                                if (lib.filter.characterDisabled(i)) continue;
                                list.push(i);
                            }
                            list.randomSort();
                            var dialog = ui.create.dialog('选择参战角色', 'hidden');
                            dialog.classList.add('fixed');
                            ui.window.appendChild(dialog);
                            dialog.classList.add('bosscharacter');
                            dialog.classList.add('modeshortcutpause');
                            dialog.classList.add('withbg');
                            // dialog.add('0/3');
                            dialog.add([list.slice(0, 20), 'character']);
                            dialog.noopen = true;
                            var next = game.me.chooseButton(dialog, true).set('onfree', true);
                            next._triggered = null;
                            next.custom.replace.target = event.customreplacetarget;
                            next.selectButton = [3, 3];
                            // next.custom.add.button=function(){
                            //		if(ui.cheat2&&ui.cheat2.backup) return;
                            //		_status.event.dialog.content.childNodes[1].innerHTML=
                            //		ui.selected.buttons.length+'/3';
                            // };
                            event.changeDialog = function () {
                                if (ui.cheat2 && ui.cheat2.dialog == _status.event.dialog) {
                                    return;
                                }
                                if (game.changeCoin) {
                                    game.changeCoin(-3);
                                }
                                list.randomSort();

                                var buttons = ui.create.div('.buttons');
                                var node = _status.event.dialog.buttons[0].parentNode;
                                _status.event.dialog.buttons = ui.create.buttons(list.slice(0, 20), 'character', buttons);
                                _status.event.dialog.content.insertBefore(buttons, node);
                                buttons.animate('start');
                                node.remove();

                                game.uncheck();
                                game.check();
                            };
                            ui.create.cheat = function () {
                                _status.createControl = ui.cheat2 || event.asboss;
                                ui.cheat = ui.create.control('更换', event.changeDialog);
                                delete _status.createControl;
                            };
                            var createCharacterDialog = function () {
                                event.dialogxx = ui.create.characterDialog();
                                event.dialogxx.classList.add('bosscharacter');
                                event.dialogxx.classList.add('withbg');
                                event.dialogxx.classList.add('fixed');
                                if (ui.cheat2) {
                                    ui.cheat2.animate('controlpressdownx', 500);
                                    ui.cheat2.classList.remove('disabled');
                                }
                            };
                            if (lib.onfree) {
                                lib.onfree.push(createCharacterDialog);
                            }
                            else {
                                createCharacterDialog();
                            }
                            ui.create.cheat2 = function () {
                                _status.createControl = event.asboss;
                                ui.cheat2 = ui.create.control('自由选将', function () {
                                    if (this.dialog == _status.event.dialog) {
                                        if (game.changeCoin) {
                                            game.changeCoin(50);
                                        }
                                        this.dialog.close();
                                        _status.event.dialog = this.backup;
                                        ui.window.appendChild(this.backup);
                                        delete this.backup;
                                        game.uncheck();
                                        game.check();
                                        if (ui.cheat) {
                                            ui.cheat.animate('controlpressdownx', 500);
                                            ui.cheat.classList.remove('disabled');
                                        }
                                        if (_status.bosschoice) {
                                            _status.bosschoice.animate('controlpressdownx', 500);
                                            _status.bosschoice.classList.remove('disabled');
                                        }
                                    }
                                    else {
                                        if (game.changeCoin) {
                                            game.changeCoin(-10);
                                        }
                                        this.backup = _status.event.dialog;
                                        _status.event.dialog.close();
                                        _status.event.dialog = _status.event.parent.dialogxx;
                                        this.dialog = _status.event.dialog;
                                        ui.window.appendChild(this.dialog);
                                        game.uncheck();
                                        game.check();
                                        if (ui.cheat) {
                                            ui.cheat.classList.add('disabled');
                                        }
                                        if (_status.bosschoice) {
                                            _status.bosschoice.classList.add('disabled');
                                        }
                                    }
                                });
                                if (lib.onfree) {
                                    ui.cheat2.classList.add('disabled');
                                }
                                delete _status.createControl;
                            }
                            if (!ui.cheat && get.config('change_choice'))
                                ui.create.cheat();
                            if (!ui.cheat2 && get.config('free_choose'))
                                ui.create.cheat2();

                            event.asboss = ui.create.control('应战', function () {
                                event.boss = true;
                                event.enemy = [];
                                for (var i = 0; i < ui.selected.buttons.length; i++) {
                                    event.enemy.push(ui.selected.buttons[i].link);
                                    event.list.remove(ui.selected.buttons[i].link);
                                }
                                while (event.enemy.length < 3) {
                                    var name = event.list.randomRemove();
                                    if (lib.boss[lib.storage.current] && lib.boss[lib.storage.current].randchoice) {
                                        name = lib.boss[lib.storage.current].randchoice(name, event.enemy);
                                    }
                                    event.enemy.push(name);
                                }
                                game.uncheck();
                                if (ui.confirm) {
                                    ui.confirm.close();
                                }
                                game.resume();
                            });
                            "step 1"
                            if (ui.cheat) {
                                ui.cheat.close();
                                delete ui.cheat;
                            }
                            if (ui.cheat2) {
                                ui.cheat2.close();
                                delete ui.cheat2;
                            }
                            event.asboss.close();
                            if (_status.bosschoice) {
                                _status.bosschoice.close();
                                delete _status.bosschoice;
                            }
                            if (event.boss) {
                                event.result = {
                                    boss: true,
                                    links: event.enemy
                                };
                            }
                            else {
                                event.result = {
                                    boss: false,
                                    links: result.links
                                };
                                _status.coinCoeff = get.coinCoeff(result.links);
                            }
                        });
                        return next;
                    },
                },
                boss: {
                    global: {
                        loopType: 1,
                        chongzheng: 6
                    },
                },
                skill: {
                    bhshuanggub: {
                        trigger: {
                            player: 'damageBegin4',
                        },
                        forced: true,
                        filter: function (event, player) {
                            return event.nature && ['ice', 'fire'].contains(event.nature);
                        },
                        content: function () {
                            if (trigger.nature == 'ice') {
                                trigger.cancel();
                            } else {
                                trigger.num++;
                            }
                        },
                        group: 'bhshuanggub_jieshu',
                        subSkill: {
                            jieshu: {
                                trigger: {
                                    player: 'phaseJieshu',
                                },
                                forced: true,
                                content: function () {
                                    player.addSkill('bhbingjiab');
                                    player.removeSkill('bhshuanggub');
                                },
                            },
                        },
                        ai: {
                            fireAttack: true,
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.tag(card, 'fireDamage')) return 3;
                                    else if (get.tag(card, 'thunderDamage')) return 1;
                                    else if (get.tag(card, 'iceDamage')) return 'zerotarget';
                                    else return 1;
                                }
                            },
                        },
                    },
                    bhbingjiab: {
                        forced: true,
                        trigger: {
                            player: 'damageBegin4',
                        },
                        derivation: 'bhshuanggub',
                        mark: true,
                        intro: {
                            content: function (storage, player) {
                                var str = '冰川护甲 ';
                                str += player.storage.bhbingjiab;
                                str += '/4';
                                return str;
                            },
                        },
                        init: function (player) {
                            player.storage.bhbingjiab = 4;
                        },
                        filter: function (event, player) {
                            if (!event.nature || event.nature == 'thunder') return event.num > 1;
                            return !event.nature || ['ice', 'thunder', 'fire'].contains(event.nature);
                        },
                        content: function () {
                            event.num = trigger.num;
                            if (!trigger.nature || trigger.nature == 'thunder') {
                                var num = parseInt(event.num / 2);
                                trigger.num -= num;
                            } else if (trigger.nature == 'ice') {
                                trigger.cancel();
                            } else {
                                player.storage.bhbingjiab -= trigger.num;
                                if (player.storage.bhbingjiab <= 0) {
                                    player.removeSkill('bhbingjiab');
                                    player.addSkill('bhshuanggub');
                                }
                            }
                        },
                        group: "bhbingjiab_draw",
                        subSkill: {
                            draw: {
                                trigger: {
                                    player: 'phaseDrawBegin2',
                                },
                                forced: true,
                                preHidden: true,
                                filter: function (event, player) {
                                    return !event.numFixed;
                                },
                                content: function () {
                                    trigger.num += 2;
                                },
                                ai: {
                                    threaten: 1.7,
                                },
                            },
                        },
                        ai: {
                            fireAttack: true,
                            effect: {
                                target: function (card, player, target, current) {
                                    if (get.tag(card, 'fireDamage')) return 2;
                                    else if (get.tag(card, 'thunderDamage')) return 0.5;
                                    else if (get.tag(card, 'iceDamage')) return 'zerotarget';
                                    else return 0.5;
                                }
                            },
                        },
                    },
                    bhbinglaob: {
                        enable: 'phaseUse',
                        usable: 2,
                        filter: function (event, player) {
                            return game.hasPlayer(function (target) {
                                return target.storage.bhshuanghenb && target.storage.bhshuanghenb > 0 && target != player;
                            }) && player.countCards('he', { color: 'black' });
                        },
                        filterCard: function (card) {
                            return get.color(card) == 'black';
                        },
                        selectCard: 1,
                        position: 'he',
                        filterTarget: function (card, player, target) {
                            return target.storage.bhshuanghenb && target.storage.bhshuanghenb > 0 && target != player;
                        },
                        content: function () {
                            'step 0'
                            event.target = targets[0];
                            var num = targets[0].storage.bhshuanghenb;
                            if (num == 1) {
                                event.target.damage('ice', player);
                            } else if (num == 2) {
                                event.target.addSkill('bhbinglaob_skip');
                                event.target.addSkill('bhbinglaob_skipp');
                                event.target.markSkill('bhbinglaob_skipp');
                            } else {
                                event.target.damage('ice', player);
                                event.target.turnOver();
                            }
                            event.target.storage.bhshuanghenb = 0;
                            event.target.syncStorage('bhshuanghenb');
                            event.target.unmarkSkill('bhshuanghenb');
                        },
                        subSkill: {
                            skip: {
                                sub: true,
                                trigger: {
                                    player: 'phaseUseBegin',
                                },
                                forced: true,
                                silent: true,
                                content: function () {
                                    trigger.cancel();
                                    game.log(player, '跳过了出牌阶段');
                                    player.removeSkill('bhbinglaob_skip');
                                },
                            },
                            skipp: {
                                sub: true,
                                marktext: '冰牢',
                                intro: {
                                    content: "跳过下个出牌和弃牌阶段",
                                    markcount: function () {
                                        return 0;
                                    },
                                },
                                trigger: {
                                    player: 'phaseDiscardBegin',
                                },
                                forced: true,
                                silent: true,
                                content: function () {
                                    trigger.cancel();
                                    game.log(player, '跳过了弃牌阶段');
                                    player.removeSkill('bhbinglaob_skipp');
                                },
                            },
                        },
                        ai: {
                            order: 3,
                            result: {
                                target: function (player, target) {
                                    if (!target.storage.bhshuanghenb || target.storage.bhshuanghenb == 0) return 0;
                                    else {
                                        var num = target.storage.bhshuanghenb;
                                        var att = get.attitude(player, target);
                                        if (att > 0) return -10;
                                        else return att - (num * 3) + target.hp - 20;
                                    }
                                }
                            },
                        },
                    },
                    bhshuanghenb: {
                        forced: true,
                        trigger: {
                            player: 'useCard',
                        },
                        init: function (player) {
                            player.addSkill('bhshenjib_a');
                            player.storage.bhshenjib_a = false;
                        },
                        filter: function (event, player) {
                            if (event.card.name != 'sha') return false;
                            if (!event.targets || !event.targets.length) return false;
                            if (event.targets.length == 1 && event.targets[0] == player) return false;
                            for (i of event.targets) {
                                if (!i.storage.bhshuanghenb || i.storage.bhshuanghenb < 3) return i != player;
                            }
                            return false;
                        },
                        marktext: '霜',
                        intro: {
                            name: '霜',
                            content: 'mark',
                        },
                        content: function () {
                            event.targets = trigger.targets;
                            if (event.targets.contains(player)) event.targets.remove(player);
                            for (i of event.targets) {
                                if (!i.storage.bhshuanghenb || i.storage.bhshuanghenb < 3) {
                                    if (!i.storage.bhshuanghenb) i.storage.bhshuanghenb = 0;
                                    i.storage.bhshuanghenb++;
                                    i.syncStorage('bhshuanghenb');
                                    i.markSkill('bhshuanghenb');
                                    player.draw();
                                }
                            }
                        },
                        group: 'bhshuanghenb_zhunbei',
                        subSkill: {
                            zhunbei: {
                                trigger: {
                                    global: "phaseZhunbei",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return event.player.storage.bhshuanghenb && event.player.storage.bhshuanghenb > 0;
                                },
                                content: function () {
                                    'step 0'
                                    player.line(trigger.player);
                                    event.target = trigger.player;
                                    event.target.judge();
                                    'step 1'
                                    if (result.color == 'red') event.num = 1;
                                    else event.num = 2;
                                    'step 2'
                                    event.target.chooseToDiscard('he', event.num, true);
                                    event.target.storage.bhshuanghenb -= event.num;
                                    if (event.target.storage.bhshuanghenb < 0) event.target.storage.bhshuanghenb = 0;
                                    event.target.syncStorage('bhshuanghenb');
                                    if (event.target.storage.bhshuanghenb == 0) event.target.unmarkSkill('bhshuanghenb');
                                },
                            },
                        },
                    },
                    bhhuanlong: {
                        forced: true,
                        derivation: ["bhhaoyan", "bhganglei", "bhjiebing"],
                        trigger: {
                            player: "damageEnd",
                        },
                        init: function (player) {
                            player.storage.bhhuanlong = [0];
                        },
                        filter: function (event, player) {
                            return event.nature && player.storage.bhhuanlong[0] == 0;
                        },
                        content: function () {
                            'step 0'
                            if (trigger.nature == 'fire') {
                                event.index = 1;
                            } else if (trigger.nature == 'thunder') {
                                event.index = 2;
                            } else if (trigger.nature == 'ice') {
                                event.index = 3;
                            } else {
                                event.finish();
                            }
                            'step 1'
                            player.node.avatar.setBackgroundImage('extension/崩崩崩/boss/boss_bhbeinalesi' + event.index + '.jpg');
                            player.storage.bhhuanlong[0] = event.index;
                            if (event.index == 1) {
                                player.addSkill('bhhaoyan');
                                game.log(player, '调整自己角色卡为火龙');
                            } else if (event.index == 2) {
                                player.addSkill('bhganglei');
                                game.log(player, '调整自己角色卡为雷龙');
                            } else if (event.index == 3) {
                                player.addSkill('bhjiebing');
                                game.log(player, '调整自己角色卡为冰龙');
                            }
                        },
                        group: ["bhhuanlong_zhunbei", "bhhuanlong_damage"],
                        subSkill: {
                            zhunbei: {
                                trigger: {
                                    player: "phaseZhunbei",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (player.storage.bhhuanlong[0] == 0) return player.hp <= 12;
                                    else return player.hp <= 4;
                                },
                                content: function () {
                                    'step 0'
                                    if (player.storage.bhhuanlong[0] == 0) {
                                        var list = [1, 2, 3];
                                        event.index = list.randomGet();
                                    } else {
                                        event.index = 4;
                                    }
                                    'step 1'
                                    player.node.avatar.setBackgroundImage('extension/崩崩崩/boss/boss_bhbeinalesi' + event.index + '.jpg');
                                    player.storage.bhhuanlong[0] = event.index;
                                    if (event.index == 1) {
                                        player.addSkill('bhhaoyan');
                                        game.log(player, '调整自己角色卡为火龙');
                                    } else if (event.index == 2) {
                                        player.addSkill('bhganglei');
                                        game.log(player, '调整自己角色卡为雷龙');
                                    } else if (event.index == 3) {
                                        player.addSkill('bhjiebing');
                                        game.log(player, '调整自己角色卡为冰龙');
                                    } else if (event.index == 4) {
                                        if (!player.hasSkill('bhhaoyan')) player.addSkill('bhhaoyan');
                                        if (!player.hasSkill('bhganglei')) player.addSkill('bhganglei');
                                        if (!player.hasSkill('bhjiebing')) player.addSkill('bhjiebing');
                                        game.log(player, '调整自己角色卡为魔龙');
                                    }
                                },
                                sub: true,
                            },
                            damage: {
                                trigger: {
                                    player: "damageBegin",
                                },
                                filter: function (event, player) {
                                    if (player.storage.bhhuanlong[0] == 0 || !event.nature) return false;
                                    if (player.storage.bhhuanlong[0] == 1 && event.nature == 'fire') return true;
                                    if (player.storage.bhhuanlong[0] == 2 && event.nature == 'thunder') return true;
                                    if (player.storage.bhhuanlong[0] == 3 && event.nature == 'ice') return true;
                                    if (player.storage.bhhuanlong[0] == 4) return true;
                                },
                                forced: true,
                                content: function () {
                                    trigger.num--;
                                },
                                sub: true,
                                ai: {
                                    effect: {
                                        target: function (card, player, target, current) {
                                            if (get.tag(card, 'fireDamage') && (target.storage.bhhuanlong[0] == 1 || target.storage.bhhuanlong[0] == 4)) return 'zerotarget';
                                            if (get.tag(card, 'thunderDamage') && (target.storage.bhhuanlong[0] == 2 || target.storage.bhhuanlong[0] == 4)) return 'zerotarget';
                                            if (get.tag(card, 'iceDamage') && (target.storage.bhhuanlong[0] == 3 || target.storage.bhhuanlong[0] == 4)) return 'zerotarget';
                                        }
                                    },
                                },
                            },
                        },
                    },
                    bhaokong: {
                        init: function (player) {
                            player.disableEquip(3);
                            player.disableEquip(4);
                        },
                        trigger: {
                            player: "phaseZhunbei",
                        },
                        forced: true,
                        content: function () {
                            event.num = 3;
                            if (player.storage.bhhuanlong[0] == 0) event.num--;
                            if (player.storage.bhhuanlong[0] == 4) event.num++;
                            player.draw(event.num);
                        },
                        mod: {
                            globalFrom: function (from, to, distance) {
                                if (from.storage.bhhuanlong && from.storage.bhhuanlong[0] == 0) return distance - 2;
                                else if (from.storage.bhhuanlong && from.storage.bhhuanlong[0] == 4) return distance;
                                else return distance - 1;
                            },
                            globalTo: function (from, to, distance) {
                                if (to.storage.bhhuanlong && to.storage.bhhuanlong[0] == 0) return distance;
                                else if (to.storage.bhhuanlong && to.storage.bhhuanlong[0] == 4) return distance + 2;
                                else return distance + 1;
                            },
                        },
                    },
                    bhhaoyan: {
                        enable: ["chooseToUse", "chooseToRespond"],
                        filter: function (event, player) {
                            return player.countCards('h') >= 2;
                        },
                        filterCard: true,
                        prompt: "将两张红色牌当火杀使用或打出",
                        viewAs: {
                            name: "sha",
                            nature: "fire",
                        },
                        position: "hs",
                        selectCard: 2,
                        check: function (card) {
                            var player = _status.event.player;
                            var bool = false;
                            if (player.hasSkill('bhjiebing') || player.hasSkill('bhganglei')) bool = true;
                            if (get.color(card) == 'red') return 10 - get.value(card);
                            else if (bool) return 4 - get.value(card);
                            else return 6 - get.value(card);
                        },
                        onuse: function (result, player) {
                            if (get.color(result.cards[0]) == 'red' && get.color(result.cards[1]) == 'red') {
                                player.draw();
                                player.addTempSkill('bhhaoyan_sha', 'shaAfter');
                            }
                        },
                        subSkill: {
                            sha: {
                                trigger: {
                                    player: "useCard",
                                },
                                filter: function (event, player) {
                                    if (event.card.name != 'sha') return false;
                                    if (event.targets.length > 1) return false;
                                    return game.hasPlayer(function (target) {
                                        return get.distance(event.targets[0], target) <= 2 && event.targets[0] != target && target != player;
                                    });
                                },
                                prompt: "是否令到此火【杀】指定的唯一目标距离不大于2的其他角色也成为此火【杀】的目标？",
                                content: function () {
                                    'step 0'
                                    event.targets = game.filterPlayer(function (target) {
                                        return get.distance(trigger.targets[0], target) <= 2 && trigger.targets[0] != target && target != player;
                                    });
                                    'step 1'
                                    player.line(event.targets);
                                    trigger.targets.addArray(event.targets);
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            yingbian: function (card, player, targets, viewer) {
                                if (get.attitude(viewer, player) <= 0) return 0;
                                var base = 0, hit = false;
                                if (get.cardtag(card, 'yingbian_hit')) {
                                    hit = true;
                                    if (targets.filter(function (target) {
                                        return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                    })) base += 5;
                                }
                                if (get.cardtag(card, 'yingbian_all')) {
                                    if (game.hasPlayer(function (current) {
                                        return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                    })) base += 5;
                                }
                                if (get.cardtag(card, 'yingbian_damage')) {
                                    if (targets.filter(function (target) {
                                        return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) && !target.hasSkillTag('filterDamage', null, {
                                            player: player,
                                            card: card,
                                            jiu: true,
                                        })
                                    })) base += 5;
                                }
                                return base;
                            },
                            canLink: function (player, target, card) {
                                if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                    target: target,
                                    card: card,
                                }, true)) return false;
                                if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                return true;
                            },
                            basic: {
                                useful: [5, 3, 1],
                                value: [5, 3, 1],
                            },
                            order: function (item, player) {
                                if (player.hasSkillTag('presha', true, null, true)) return 10;
                                if (lib.linked.contains(get.nature(item))) {
                                    if (game.hasPlayer(function (current) {
                                        return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                    }) && game.countPlayer(function (current) {
                                        return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                    }) > 1) return 5;
                                    return 3;
                                }
                                return 4;
                            },
                            result: {
                                target: function (player, target, card, isLink) {
                                    var eff = function () {
                                        if (!isLink && player.hasSkill('jiu')) {
                                            if (!target.hasSkillTag('filterDamage', null, {
                                                player: player,
                                                card: card,
                                                jiu: true,
                                            })) {
                                                if (get.attitude(player, target) > 0) {
                                                    return -7;
                                                }
                                                else {
                                                    return -4;
                                                }
                                            }
                                            return -0.5;
                                        }
                                        return -1.5;
                                    }();
                                    if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                        target: target,
                                        card: card,
                                    }, true)) return eff / 1.2;
                                    return eff;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                    },
                    bhganglei: {
                        enable: ["chooseToUse", "chooseToRespond"],
                        filter: function (event, player) {
                            return player.countCards('h') >= 2;
                        },
                        filterCard: true,
                        prompt: "将两张牌当雷杀使用或打出",
                        viewAs: {
                            name: "sha",
                            nature: "thunder",
                        },
                        position: "hs",
                        selectCard: 2,
                        check: function (card) {
                            var player = _status.event.player;
                            var bool = false;
                            var num = 0;
                            var color = '';
                            var cards = player.getCards('hs');
                            for (i in cards) {
                                if (get.color(i) == 'red') num++;
                                if (get.color(i) == 'black') num--;
                            }
                            if (num > 0) color = 'black';
                            else color = 'red';
                            if (player.hasSkill('bhhaoyan') || player.hasSkill('bhjiebing')) bool = true;
                            if (!ui.selected.cards.length) {
                                if (get.color(card) == color) return 10 - get.value(card);
                                else if (bool) return 4 - get.value(card);
                                else return 6 - get.value(card);
                            } else {
                                if (get.color(card) != get.color(ui.selected.cards[0])) return 10 - get.value(card);
                                else if (bool) return 4 - get.value(card);
                                else return 6 - get.value(card);
                            }
                        },
                        onuse: function (result, player) {
                            if ((get.color(result.cards[0]) == 'black' && get.color(result.cards[1]) == 'red') || (get.color(result.cards[0]) == 'red' && get.color(result.cards[1]) == 'black')) {
                                player.draw();
                                player.addTempSkill('bhganglei_sha', 'shaAfter');
                            }
                        },
                        subSkill: {
                            sha: {
                                trigger: {
                                    player: "useCard",
                                },
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                frequent: true,
                                content: function (event, player) {
                                    trigger.addCount = false;
                                    trigger.player.getStat().card.sha--;
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            yingbian: function (card, player, targets, viewer) {
                                if (get.attitude(viewer, player) <= 0) return 0;
                                var base = 0, hit = false;
                                if (get.cardtag(card, 'yingbian_hit')) {
                                    hit = true;
                                    if (targets.filter(function (target) {
                                        return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                    })) base += 5;
                                }
                                if (get.cardtag(card, 'yingbian_all')) {
                                    if (game.hasPlayer(function (current) {
                                        return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                    })) base += 5;
                                }
                                if (get.cardtag(card, 'yingbian_damage')) {
                                    if (targets.filter(function (target) {
                                        return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) && !target.hasSkillTag('filterDamage', null, {
                                            player: player,
                                            card: card,
                                            jiu: true,
                                        })
                                    })) base += 5;
                                }
                                return base;
                            },
                            canLink: function (player, target, card) {
                                if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                    target: target,
                                    card: card,
                                }, true)) return false;
                                if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                return true;
                            },
                            basic: {
                                useful: [5, 3, 1],
                                value: [5, 3, 1],
                            },
                            order: function (item, player) {
                                if (player.hasSkillTag('presha', true, null, true)) return 10;
                                if (lib.linked.contains(get.nature(item))) {
                                    if (game.hasPlayer(function (current) {
                                        return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                    }) && game.countPlayer(function (current) {
                                        return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                    }) > 1) return 5;
                                    return 3;
                                }
                                return 4;
                            },
                            result: {
                                target: function (player, target, card, isLink) {
                                    var eff = function () {
                                        if (!isLink && player.hasSkill('jiu')) {
                                            if (!target.hasSkillTag('filterDamage', null, {
                                                player: player,
                                                card: card,
                                                jiu: true,
                                            })) {
                                                if (get.attitude(player, target) > 0) {
                                                    return -7;
                                                }
                                                else {
                                                    return -4;
                                                }
                                            }
                                            return -0.5;
                                        }
                                        return -1.5;
                                    }();
                                    if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                        target: target,
                                        card: card,
                                    }, true)) return eff / 1.2;
                                    return eff;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                    },
                    bhjiebing: {
                        enable: ["chooseToUse", "chooseToRespond"],
                        filter: function (event, player) {
                            return player.countCards('h') >= 2;
                        },
                        filterCard: true,
                        prompt: "将两张牌当冰杀使用或打出",
                        viewAs: {
                            name: "sha",
                            nature: "ice",
                        },
                        position: "hs",
                        selectCard: 2,
                        check: function (card) {
                            var player = _status.event.player;
                            var bool = false;
                            if (player.hasSkill('bhjiebing') || player.hasSkill('bhganglei')) bool = true;
                            if (get.color(card) == 'black') return 10 - get.value(card);
                            else if (bool) return 4 - get.value(card);
                            else return 6 - get.value(card);
                        },
                        onuse: function (result, player) {
                            if (get.color(result.cards[0]) == 'black' && get.color(result.cards[1]) == 'black') {
                                player.draw();
                                player.addTempSkill('bhjiebing_sha', 'shaAfter');
                            }
                        },
                        subSkill: {
                            sha: {
                                trigger: {
                                    player: "useCardToPlayered",
                                },
                                filter: function (event, player) {
                                    return event.card.name == 'sha';
                                },
                                frequent: true,
                                content: function () {
                                    'step 0'
                                    event.target = trigger.target;
                                    event.target.chooseToDiscard('弃置一张牌，或取消令' + get.translation(player) + '摸一张牌', 'hes').set('ai', function (card) {
                                        if (get.attitude(event.target, player) > 0) return -4;
                                        else return 6 - get.value(card);
                                    });
                                    'step 1'
                                    if (!result.bool) {
                                        player.draw();
                                    }
                                },
                                sub: true,
                            },
                        },
                        ai: {
                            yingbian: function (card, player, targets, viewer) {
                                if (get.attitude(viewer, player) <= 0) return 0;
                                var base = 0, hit = false;
                                if (get.cardtag(card, 'yingbian_hit')) {
                                    hit = true;
                                    if (targets.filter(function (target) {
                                        return target.hasShan() && get.attitude(viewer, target) < 0 && get.damageEffect(target, player, viewer, get.nature(card)) > 0;
                                    })) base += 5;
                                }
                                if (get.cardtag(card, 'yingbian_all')) {
                                    if (game.hasPlayer(function (current) {
                                        return !targets.contains(current) && lib.filter.targetEnabled2(card, player, current) && get.effect(current, card, player, player) > 0;
                                    })) base += 5;
                                }
                                if (get.cardtag(card, 'yingbian_damage')) {
                                    if (targets.filter(function (target) {
                                        return get.attitude(player, target) < 0 && (hit || !target.mayHaveShan() || player.hasSkillTag('directHit_ai', true, {
                                            target: target,
                                            card: card,
                                        }, true)) && !target.hasSkillTag('filterDamage', null, {
                                            player: player,
                                            card: card,
                                            jiu: true,
                                        })
                                    })) base += 5;
                                }
                                return base;
                            },
                            canLink: function (player, target, card) {
                                if (!target.isLinked() && !player.hasSkill('wutiesuolian_skill')) return false;
                                if (target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                    target: target,
                                    card: card,
                                }, true)) return false;
                                if (player.hasSkill('jueqing') || player.hasSkill('gangzhi') || target.hasSkill('gangzhi')) return false;
                                return true;
                            },
                            basic: {
                                useful: [5, 3, 1],
                                value: [5, 3, 1],
                            },
                            order: function (item, player) {
                                if (player.hasSkillTag('presha', true, null, true)) return 10;
                                if (lib.linked.contains(get.nature(item))) {
                                    if (game.hasPlayer(function (current) {
                                        return current != player && current.isLinked() && player.canUse(item, current, null, true) && get.effect(current, item, player, player) > 0 && lib.card.sha.ai.canLink(player, current, item);
                                    }) && game.countPlayer(function (current) {
                                        return current.isLinked() && get.damageEffect(current, player, player, get.nature(item)) > 0;
                                    }) > 1) return 5;
                                    return 3;
                                }
                                return 4;
                            },
                            result: {
                                target: function (player, target, card, isLink) {
                                    var eff = function () {
                                        if (!isLink && player.hasSkill('jiu')) {
                                            if (!target.hasSkillTag('filterDamage', null, {
                                                player: player,
                                                card: card,
                                                jiu: true,
                                            })) {
                                                if (get.attitude(player, target) > 0) {
                                                    return -7;
                                                }
                                                else {
                                                    return -4;
                                                }
                                            }
                                            return -0.5;
                                        }
                                        return -1.5;
                                    }();
                                    if (!isLink && target.mayHaveShan() && !player.hasSkillTag('directHit_ai', true, {
                                        target: target,
                                        card: card,
                                    }, true)) return eff / 1.2;
                                    return eff;
                                },
                            },
                            tag: {
                                respond: 1,
                                respondShan: 1,
                                damage: function (card) {
                                    if (card.nature == 'poison') return;
                                    return 1;
                                },
                                natureDamage: function (card) {
                                    if (card.nature) return 1;
                                },
                                fireDamage: function (card, nature) {
                                    if (card.nature == 'fire') return 1;
                                },
                                thunderDamage: function (card, nature) {
                                    if (card.nature == 'thunder') return 1;
                                },
                                poisonDamage: function (card, nature) {
                                    if (card.nature == 'poison') return 1;
                                },
                            },
                        },
                    },
                    bhzaiyaob: {
                        derivation: ['bhzaiyaob_zhengfu', 'bhzaiyao_yiji', 'bhzaiyaob_jingmi', 'bhzaiyao_kewang'],
                        forced: true,
                        trigger: {
                            player: "damageEnd",
                        },
                        filter: function (event, player) {
                            if (!event.num > 0) return false;
                            if (!player.hasSkill('bhzaiyaob_zhengfu')) return true;
                            if (!player.hasSkill('bhzaiyao_yiji')) return true;
                            if (!player.hasSkill('bhzaiyaob_jingmi')) return true;
                            if (!player.hasSkill('bhzaiyao_kewang')) return true;
                            return false;
                        },
                        content: function () {
                            'step 0'
                            event.num = trigger.num;
                            'step 1'
                            player.loseMaxHp();
                            var list = [];
                            if (!player.hasSkill('bhzaiyaob_zhengfu')) {
                                list.push('bhzaiyaob_zhengfu');
                            }
                            if (!player.hasSkill('bhzaiyao_yiji')) {
                                list.push('bhzaiyao_yiji');
                            }
                            if (!player.hasSkill('bhzaiyaob_jingmi')) {
                                list.push('bhzaiyaob_jingmi');
                            }
                            if (!player.hasSkill('bhzaiyao_kewang')) {
                                list.push('bhzaiyao_kewang');
                            }
                            event.list = list;
                            'step 2'
                            if (event.list.length == 1) event._result = { control: event.list[0] };
                            else player.chooseControl(event.list).set('prompt', '灾耀：选择获得下列技能中的一个').set('ai', function () {
                                if (event.list.contains('bhzaiyaob_zhengfu')) return 'bhzaiyaob_zhengfu';
                                else if (event.list.contains('bhzaiyaob_jingmi')) return 'bhzaiyaob_jingmi';
                                else if (event.list.contains('bhzaiyao_yiji') && player.hasSkill('bhzaiyao_kewang')) return 'bhzaiyao_yiji';
                                return 'bhzaiyao_kewang';
                            });
                            'step 3'
                            player.addSkill(result.control);
                            player.popup(result.control);
                            game.log(player, '获得了技能', '#g【' + get.translation(result.control) + '】');
                            event.num--;
                            if (event.num > 0) {
                                event.goto(1);
                            }
                        },
                    },
                    "bhzaiyaob_zhengfu": {
                        trigger: {
                            player: 'phaseUseBegin',
                        },
                        check: function (event, player) {
                            var num = 0;
                            var targets = game.filterPlayer(function (target) {
                                return target != player;
                            });
                            for (var i = 0; i < targets.length; i++) {
                                if (get.attitude(player, targets[i]) > 0) num--;
                                else num++;
                            }
                            return num >= 0;
                        },
                        content: function () {
                            'step 0'
                            player.addTempSkill('bhzaiyaob_zhengfu_damage', 'useCardAfter');
                            'step 1'
                            event.targets = game.filterPlayer(function (target) {
                                return target != player;
                            });
                            player.useCard({ name: 'wanjian', isCard: true }, event.targets);
                        },
                        subSkill: {
                            damage: {
                                sub: true,
                                trigger: {
                                    source: 'damageBegin',
                                },
                                filter: function (event, player) {
                                    return event.card && event.card.name == 'wanjian' && (!event.nature || event.nature != 'thunder');
                                },
                                direct: true,
                                content: function () {
                                    trigger.nature = 'thunder';
                                },
                            },
                        },
                    },
                    "bhzaiyaob_jingmi": {
                        trigger: {
                            player: 'damageEnd',
                        },
                        init: function (player) {
                            player.storage.bhzaiyaob_jingmi = 0;
                        },
                        intro: {
                            name: '静谧',
                            content: 'mark',
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.hp <= 6 && !player.countMark('bhzaiyaob_jingmi') && !player.hasSkill('bhzaiyaob_jingmi_im');
                        },
                        content: function () {
                            player.addMark('bhzaiyaob_jingmi', 3);
                            player.markSkill('bhzaiyaob_jingmi');
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target, current) {
                                    if ((get.tag(card, 'fireDamage') || get.tag(card, 'thunderDamage') || get.tag(card, 'iceDamage')) && target.storage.bhzaiyaob_jingmi > 0) return get.value(card) + 4;
                                }
                            },
                        },
                        group: ['bhzaiyaob_jingmi_damage', 'bhzaiyaob_jingmi_zhunbei'],
                        subSkill: {
                            zhunbei: {
                                sub: true,
                                trigger: {
                                    player: 'phaseZhunbei',
                                },
                                forced: true,
                                filter: function (event, player) {
                                    return player.countMark('bhzaiyaob_jingmi') > 0 && player.hp <= 4;
                                },
                                content: function () {
                                    player.recover();
                                },
                            },
                            im: {
                                trigger: {
                                    player: 'phaseZhunbei',
                                },
                                content: function () {
                                    player.removeSkill('bhzaiyaob_jingmi_im');
                                },
                                direct: true,
                            },
                            damage: {
                                sub: true,
                                forced: true,
                                trigger: {
                                    player: 'damageBegin',
                                },
                                filter: function (event, player) {
                                    return player.countMark('bhzaiyaob_jingmi') > 0;
                                },
                                content: function () {
                                    'step 0'
                                    if (!trigger.nature) {
                                        trigger.num--;
                                    } else {
                                        player.removeMark('bhzaiyaob_jingmi', trigger.num);
                                        trigger.cancel();
                                    }
                                    'step 1'
                                    if (!player.countMark('bhzaiyaob_jingmi')) {
                                        if (!player.isTurnedOver()) player.turnOver();
                                        player.loseHp(3);
                                        player.addSkill('bhzaiyaob_jingmi_im');
                                        player.unmarkSkill('bhzaiyaob_jingmi');
                                    }
                                },
                            }
                        }
                    },
                    bhxukong: {
                        trigger: {
                            player: 'damageBegin',
                        },
                        check: function (event, player) {
                            if (!player.hasSkill('bhzaiyaob_zhengfu') || !player.hasSkill('bhzaiyaob_jingmi')) return false;
                            else return true;
                        },
                        filter: function (event, player) {
                            return player.hp > 6 && event.source && event.source != player && !player.hasSkill('bhxukong_im');
                        },
                        content: function () {
                            'step 0'
                            player.addTempSkill('bhxukong_im', 'roundStart');
                            trigger.num--;
                            event.source = trigger.source;
                            'step 1'
                            player.line(event.source);
                            player.chooseToDiscard('he', true);
                            event.source.chooseToDiscard('he', true);
                            'step 2'
                            event.trigger('bhxukong');
                        },
                        subSkill: {
                            im: {

                            },
                        },
                    },
                    bhjianglin: {
                        trigger: {
                            player: 'phaseZhunbei',
                        },
                        init: function (player) {
                            player.storage.bhjianglin = false;
                        },
                        intro: {
                            content: "limited",
                        },
                        unique: true,
                        limited: true,
                        skillAnimation: true,
                        animationStr: "降临",
                        animationColor: "metal",
                        filter: function (event, player) {
                            return player.maxHp - player.hp >= 4;
                        },
                        content: function () {
                            'step 0'
                            player.awakenSkill('bhjianglin');
                            player.storage.bhjianglin = true;
                            event.targets = game.filterPlayer(function (target) {
                                return target != player;
                            });
                            event.targets.sortBySeat();
                            player.line(event.targets);
                            event.num = 0;
                            'step 1'
                            event.target = event.targets[event.num];
                            if (event.target.countCards('h') > 0) {
                                event.target.chooseToDiscard('h', 2, true);
                            } else {
                                event.target.damage();
                                if (!player.hasSkill('bhjianglin_jieshu')) player.addSkill('bhjianglin_jieshu');
                            }
                            'step 2'
                            event.num++;
                            if (event.num < event.targets.length) event.goto(1);
                        },
                        subSkill: {
                            jieshu: {
                                trigger: {
                                    player: 'phaseJieshu',
                                },
                                sub: true,
                                forced: true,
                                content: function () {
                                    'step 0'
                                    player.awakenSkill('bhjianglin');
                                    player.storage.bhjianglin = true;
                                    event.targets = game.filterPlayer(function (target) {
                                        return target != player;
                                    });
                                    event.targets.sortBySeat();
                                    player.line(event.targets);
                                    event.num = 0;
                                    'step 1'
                                    event.target = event.targets[event.num];
                                    if (event.target.countCards('h') > 0) {
                                        event.target.chooseToDiscard('h', 2, true);
                                    } else {
                                        event.target.damage();
                                    }
                                    'step 2'
                                    event.num++;
                                    if (event.num < event.targets.length) event.goto(1);
                                    else player.removeSkill('bhjianglin_jieshu');
                                },
                            }
                        },
                    },
                    bhzhendang: {
                        trigger: {
                            player: 'bhxukong',
                        },
                        filter: function (event, player) {
                            return player.hp <= 8 && game.hasPlayer(function (target) {
                                return !target.isTurnedOver();
                            });
                        },
                        content: function () {
                            'step 0'
                            player.chooseTarget('你可以令一名角色翻至背面', function (card, player, target) {
                                return target != player && !target.isTurnedOver();
                            }).set('ai', function (target) {
                                return -get.attitude(player, target);
                            });
                            'step 1'
                            if (result.bool) {
                                result.targets[0].turnOver();
                            }
                        },
                    },
                    bhhudunb: {
                        forced: true,
                        intro: {
                            name: '能量护盾',
                            content: function (storage, player) {
                                if (player.hasSkill('bhhudunb_dangji')) return '已宕机';
                                var str = '护盾值：';
                                str += player.storage.bhhudunb;
                                str += "<br>";
                                if (player.hasSkill('bhhudunb_zhankai')) str += '护盾已展开';
                                else str += '护盾未展开';
                                return str;
                            },
                        },
                        marktext: '盾',
                        mark: true,
                        init: function (player) {
                            player.storage.bhhudunb = 4;
                            player.syncStorage('bhhudunb');
                        },
                        trigger: {
                            player: 'bhzhankaib',
                        },
                        filter: function (event, player) {
                            return player.storage.bhhudunb > 0 && !player.isBurst() && !player.hasSkill('bhhudunb_dangji');
                        },
                        content: function () {
                            player.addTempSkill('bhhudunb_zhankai');
                            player.node.avatar.setBackgroundImage('extension/崩崩崩/boss/boss_bhhaimudaer2.jpg');
                            game.log(player, '进入护盾展开状态');
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target, current) {
                                    if (target.hasSkill('bhhudunb_zhankai') && card.name == 'sha') return -4;
                                    if (target.hasSkill('bhhudunb_zhankai') && card.name != 'sha' && get.tag(card, 'damage')) return 4;
                                },
                            },
                        },
                        group: ['bhhudunb_skip', 'bhhudunb_damage'],
                        subSkill: {
                            damage: {
                                trigger: {
                                    player: 'damage',
                                },
                                direct: true,
                                filter: function (event, player) {
                                    return event.num >= 2;
                                },
                                content: function () {
                                    'step 0'
                                    if (player.storage.bhhudunb >= trigger.num - 1) player.storage.bhhudunb -= (trigger.num - 1);
                                    else player.storage.bhhundunb = 0;
                                    player.syncStorage('bhhudunb');
                                    //game.log(player.storage.bhhudunb);
                                    'step 1'
                                    if (player.storage.bhhudunb == 0) {
                                        player.addSkill('bhhudunb_dangji');
                                        game.log(player, '进入宕机状态');
                                    }
                                },
                            },
                            skip: {
                                popup: false,
                                trigger: {
                                    player: ["phaseDrawBefore", "phaseUseBefore"],
                                },
                                filter: function (event, player) {
                                    return player.hasSkill('bhhudunb_dangji');
                                },
                                forced: true,
                                sub: true,
                                content: function () {
                                    trigger.cancel();
                                },
                            },
                            dangji: {
                                trigger: {
                                    player: "phaseEnd",
                                },
                                init: function (player) {
                                    player.draw();
                                    player.unBurst();
                                    player.node.avatar.setBackgroundImage('extension/崩崩崩/boss/boss_bhhaimudaer.jpg');
                                },
                                sub: true,
                                frequent: true,
                                content: function () {
                                    player.storage.bhhudunb = 4;
                                    player.syncStorage('bhhudunb');
                                    player.removeSkill('bhhudunb_dangji');
                                },
                            },
                            zhankai: {
                                trigger: {
                                    player: 'damageBegin',
                                },
                                onremove: function (player) {
                                    player.node.avatar.setBackgroundImage('extension/崩崩崩/boss/boss_bhhaimudaer.jpg');
                                },
                                forced: true,
                                content: function () {
                                    'step 0'
                                    if (trigger.card && trigger.card.name == 'sha') {
                                        trigger.cancel();
                                        if (trigger.source) player.useCard({ name: 'sha', isCard: true }, trigger.source);
                                    } else {
                                        player.storage.bhhudunb--;
                                        player.syncStorage('bhhudunb');
                                    }
                                    player.removeSkill('bhhudunb_zhankai');
                                    player.node.avatar.setBackgroundImage('extension/崩崩崩/boss/boss_bhhaimudaer.jpg');
                                    //game.log(player.storage.bhhudunb);
                                    'step 1'
                                    if (player.storage.bhhudunb == 0) {
                                        player.addSkill('bhhudunb_dangji');
                                        game.log(player, '进入宕机状态');
                                    }
                                },
                            },
                        },
                    },
                    bhtujinb: {
                        trigger: {
                            global: 'phaseZhunbei',
                        },
                        filter: function (event, player) {
                            return event.player != player && !player.hasSkill('bhhudunb_dangji');;
                        },
                        silent: true,
                        check: function (event, player) {
                            return get.attitude(player, event.player) < 0;
                        },
                        content: function () {
                            'step 0'
                            if (!player.isBurst()) {
                                player.chooseToUse({ name: 'sha' }, '突进：是否对' + get.translation(trigger.player) + '使用一张杀？', trigger.player, -1);
                            } else {
                                player.useCard({ name: 'sha', isCard: true }, trigger.player);
                                result.bool = false;
                            }
                            'step 1'
                            if (!player.isBurst() && result.bool) {
                                player.logSkill('bhtujinb');
                                player.draw();
                            } else if (player.isBurst()) {
                                player.logSkill('bhtujinb');
                                player.draw();
                            } else event.finish();
                            'step 2'
                            event.trigger('bhzhankaib');
                        },
                        ai: {
                            effect: {
                                player: function (card, player, target, current) {
                                    if (!player.isBurst() && card.name == 'sha') return get.value(card) + 2;
                                },
                            },
                        },
                    },
                    bhhuixuanb: {
                        trigger: {
                            player: 'useCardAfter',
                        },
                        init: function (player) {
                            player.storage.bhhuixuanb = 0;
                        },
                        filter: function (event, player) {
                            return event.card.name == 'sha' && !player.hasSkill('bhhudunb_dangji');
                        },
                        direct: true,
                        content: function () {
                            'step 0'
                            player.storage.bhhuixuanb++;
                            'step 1'
                            event.num = player.isBurst() ? 2 : 3;
                            if (player.storage.bhhuixuanb >= event.num) {
                                player.storage.bhhuixuanb -= event.num;
                                player.chooseTarget('你可以对一名其他角色造成一点雷电伤害', function (card, player, target) {
                                    return target != player;
                                }).set('ai', function (target) {
                                    return -get.attitude(player, target);
                                });
                            } else event.finish();
                            'step 2'
                            if (result.bool) {
                                player.logSkill('bhhuixuanb', result.targets[0]);
                                player.line(result.targets[0]);
                                result.targets[0].damage('thunder');
                            } else event.finish();
                            'step 3'
                            event.trigger('bhzhankaib');
                        },
                    },
                    bhchaozaib: {
                        direct: true,
                        trigger: {
                            global: 'roundStart',
                            player: 'burst',
                        },
                        init: function (player) {
                            player.storage.bhchaozaib = 0
                        },
                        filter: function (event, player) {
                            return player.storage.bhchaozaib > 0;
                        },
                        content: function () {
                            player.storage.bhchaozaib = 0;
                        },
                        ai: {
                            effect: {
                                target: function (card, player, target, current) {
                                    if (target.storage.bhchaozaib == 5 && get.tag(card, 'damage')) return -6;
                                },
                            },
                        },
                        group: ['bhchaozaib_burst', 'bhchaozaib_hp', 'bhchaozaib_damage'],
                        subSkill: {
                            damage: {
                                trigger: {
                                    player: 'damageEnd',
                                },
                                filter: function (event, player) {
                                    return !player.hasSkill('bhhudunb_dangji') && !player.isBurst();
                                },
                                content: function () {
                                    'step 0'
                                    player.storage.bhchaozaib += trigger.num;
                                    'step 1'
                                    if (player.storage.bhchaozaib >= 6) {
                                        event.trigger('bhchaozaib');
                                    }
                                },
                                sub: true,
                                forced: true,
                            },
                            hp: {
                                direct: true,
                                init: function (player) {
                                    player.storage.bhchaozaib_hp = false;
                                },
                                trigger: {
                                    player: ['damageAfter', 'loseHpAfter'],
                                },
                                filter: function (event, player) {
                                    return player.hp <= 8 && !player.hasSkill('bhhudunb_dangji') && !player.storage.bhchaozaib_hp;
                                },
                                sub: true,
                                content: function () {
                                    player.storage.bhchaozaib_hp = true;
                                    event.trigger('bhchaozaib');
                                },
                            },
                            burst: {
                                trigger: {
                                    player: 'bhchaozaib',
                                },
                                filter: function (event, player) {
                                    return !player.hasSkill('bhhudunb_dangji');
                                },
                                forced: true,
                                content: function () {
                                    player.node.avatar.setBackgroundImage('extension/崩崩崩/boss/boss_bhhaimudaer3.jpg');
                                    player.Burst('Infinity');
                                },
                            }
                        }
                    },
                    bhtianqib: {
                        trigger: {
                            player: 'phaseJieshuBegin',
                        },
                        forced: true,
                        filter: function (event, player) {
                            return player.isBurst();
                        },
                        content: function () {
                            'step 0'
                            event.targets = game.filterPlayer(function (target) {
                                return target != player;
                            });
                            player.useCard({ name: 'wanjian', isCard: true }, event.targets);
                            event.num = 3;
                            'step 1'
                            player.chooseUseTarget({ name: 'sha' }, '天启：你可以视为使用一张【杀】', false, 'nodistance');
                            'step 2'
                            if (result.bool) {
                                event.num--;
                                if (event.num > 0) event.goto(1);
                            }
                            'step 3'
                            player.addSkill('bhtianqib_remove');
                        },
                        subSkill: {
                            remove: {
                                trigger: {
                                    player: 'phaseZhunbei',
                                },
                                direct: true,
                                content: function () {
                                    player.unBurst();
                                    player.node.avatar.setBackgroundImage('extension/崩崩崩/boss/boss_bhhaimudaer.jpg');
                                    player.removeSkill('bhtianqib_remove')
                                },
                            },
                        }
                    },
                    niuzhuanb: {
                        group: ["niuzhuanb_niuzhuan1", "niuzhuanb_niuzhuan2", "niuzhuanb_niuzhuan3"],
                        subSkill: {
                            "niuzhuan1": {
                                trigger: {
                                    player: ["gainMaxHpEnd", "loseMaxHpEnd"],
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (player.maxHp > 99) return true;
                                    return false;
                                },
                                content: function () {
                                    player.loseMaxHp(9);
                                    player.recover();
                                },
                                sub: true,
                            },
                            "niuzhuan2": {
                                trigger: {
                                    player: ["gainMaxHpEnd", "loseMaxHpEnd"],
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (player.maxHp < 9) return true;
                                    return false;
                                },
                                content: function () {
                                    player.gainMaxHp(9);
                                    player.recover();
                                },
                                sub: true,
                            },
                            "niuzhuan3": {
                                trigger: {
                                    player: "loseMaxHpBegin",
                                },
                                forced: true,
                                filter: function (event, player) {
                                    if (player.maxHp <= event.number) return true;
                                    return false;
                                },
                                content: function () {
                                    trigger.cancel();
                                    player.gainMaxHp(9);
                                },
                                sub: true,
                            },
                        },
                    },
                },
                translate: {
                    zhu: 'Boss',
                    zhong: '盟',
                    cai: '盟',
                    ////
                    bhbeinalesi: "贝纳勒斯",
                    bhkongzhilvzheb: "空之律者",
                    bhhaimudaer: "海姆达尔",
                    bhshizhilvzheb: '识之律者',
                    bhyuehunb: "苍骑士·月魂",
                    ////
                    bhbinglaob: "冰牢",
                    "bhbinglaob_info": "出牌阶段限两次，你可以弃置一张黑色牌并指定一名有“霜”的其他角色，若其“霜”的数量：为1，你对其造成一点冰冻伤害；为2，你令其跳过下个出牌和弃牌阶段；大于2，你对其造成一点冰冻伤害，然后令其翻面。若如此做，你移去该角色全部的“霜”。",
                    bhshuanghenb: "霜痕",
                    "bhshuanghenb_info": "锁定技，你使用“神机”时可以将一张牌当做【杀】使用。当你对一名其他角色使用了一张【杀】时，你令其获得1个“霜”（至多3个），然后你摸一张牌。一名有“霜”的角色的准备阶段，其进行一次判定，若结果为：红色，其弃置一张牌并移去1个“霜”；黑色，其弃置两张牌并移去2个“霜”。",
                    bhbingjiab: "冰甲",
                    "bhbingjiab_info": "锁定技，摸牌阶段你多摸两张牌。防止你受到的冰冻伤害。当你受到物理或雷电伤害时，你令其-x（x为伤害值的一半，向下取整）。当你累计受到4点火焰伤害后，你失去“冰甲”并获得“霜骨”直到你的回合结束。",
                    bhshuanggub: "霜骨",
                    "bhshuanggub_info": "锁定技，防止你受到的冰冻伤害，你受到的火焰伤害+1。",
                    bhhuanlong: "幻龙",
                    "bhhuanlong_info": "锁定技，当你第一次受到下列属性伤害后，若你的角色卡为“幻龙”，则你根据伤害的类型调整自己的角色卡：1.火焰伤害：火龙；2.雷电伤害：雷龙；3.冰冻伤害：冰龙（每种形态下受到的对应属性的伤害-1）。准备阶段，若你的体力值不大于12，你随机调整自己的角色卡为火/雷/冰龙的一种；若你的体力值不大于4，你调整自己的角色卡为魔龙（受到的属性伤害-1）。",
                    bhaokong: "傲空",
                    "bhaokong_info": "锁定技，废除你的坐骑栏；你到其他角色的距离-1，其他角色到你的距离+1。准备阶段，你摸3张牌。若你的角色卡为“幻龙”/“魔龙”，上述效果额外-1/+1。",
                    bhhaoyan: "豪炎",
                    "bhhaoyan_info": "你可以将两张手牌当作火【杀】使用或打出。若这两张牌均为红色，你可以摸一张牌并令到此火【杀】指定的唯一目标距离不大于2的其他角色也成为此火【杀】的目标。\t",
                    bhganglei: "刚雷",
                    "bhganglei_info": "你可以将两张手牌当作雷【杀】使用或打出。若这两张牌颜色不同，你可以摸一张牌并令此雷【杀】不计入出牌阶段使用限制。",
                    bhjiebing: "劫冰",
                    "bhjiebing_info": "你可以将两张手牌当作冰【杀】使用或打出。若这两张牌均为黑色，你可以摸一张牌并令此冰【杀】指定的目标选择一项：弃一张牌；或令你摸一张牌。",
                    bhzaiyaob: "灾耀",
                    "bhzaiyaob_info": "锁定技，当你受到1点伤害后，若你未拥有以此法可获得的全部技能，则你减1点体力上限，然后从“征服”，“疫疾”，“静谧”和“渴望”中选择一个技能获得之。",
                    "bhzaiyaob_zhengfu": "征服",
                    "bhzaiyaob_zhengfu_info": "出牌阶段开始时，你可以视为使用了一张【万箭齐发】，且将该牌造成的伤害改为雷电伤害。",
                    "bhzaiyaob_jingmi": "静谧",
                    "bhzaiyaob_jingmi_info": "锁定技，当你受到伤害后，若你的体力值不大于6，你获得3个“静谧”。当你受到伤害前，若你有“静谧”，则根据该伤害的类型：属性伤害，你移去等量于伤害值的“静谧”并防止之；非属性伤害，该伤害-1。当你失去最后一个“静谧”后，你翻至背面朝上并失去3点体力，然后“静谧”失效直到你的下个准备阶段。准备阶段，若你有“静谧”且体力值不大于4，你回复1点体力。",
                    bhxukong: "虚空",
                    "bhxukong_info": "每轮限一次，当你即将受到一次有来源且来源不为你的伤害时，若你的体力值大于6，你可以令该伤害-1，然后令你和伤害来源各弃置一张牌。",
                    bhjianglin: "降临",
                    "bhjianglin_info": "限定技，准备阶段，若你的已损体力值不小于4，你可以令所有其他角色各弃置两张手牌（不足则全弃），若一名角色没有手牌，则改为受到一点物理伤害。然后结束阶段，若有角色因此而受到过伤害，你再次令所有其他角色执行该效果。",
                    bhzhendang: "震荡",
                    "bhzhendang_info": "当你发动“虚空”后，若你的体力值不大于8，你可以令一名其他角色翻至背面。",
                    bhhudunb: "护盾",
                    "bhhudunb_info": "锁定技，游戏开始时，你获得四个“护盾”标记，当你受到一次不小于2的伤害后，你失去x个“护盾”（x为该伤害值-1）。当你使用一次“突进”或“回旋”后，若你不处于爆发状态且有“护盾”，你进入护盾展开状态直到当前回合结束（当你于护盾展开状态受到来自【杀】的伤害时，你防止该伤害并视为对【杀】的使用者使用了一张无距离限制的【杀】；否则你失去一个“护盾”并退出护盾展开状态）。当你失去最后一个“护盾”后，你进入“宕机”状态直到你的回合结束（宕机状态下，跳过你的摸牌和出牌阶段，且停止你的其他行为，退出宕机状态时，你回复4个“护盾”）。",
                    bhtujinb: "突进",
                    "bhtujinb_info": "一名其他角色的准备阶段，你可以对该角色使用一张【杀】，然后你摸一张牌。若你处于爆发状态，你将此技能改为：你可以视为对该角色使用了一张【杀】，然后你摸一张牌。",
                    bhhuixuanb: "回旋",
                    "bhhuixuanb_info": "你每使用三张【杀】后，你可以对一名其他角色造成1点雷电伤害。若你处于爆发状态，你将此技能改为：你每使用两张【杀】后，你可以对一名其他角色造成1点雷电伤害。",
                    bhchaozaib: "超载",
                    "bhchaozaib_info": "锁定技，一轮游戏开始时或当你进入爆发状态时，你将超载计数清零，当你受到一点伤害后，若你不处于超载状态，你获得一点超载计数。当超载计数达到6及以上，或你的体力值首次达到8及以下时，若你不处于“宕机”状态，你进入爆发状态。",
                    bhtianqib: "天启",
                    "bhtianqib_info": "锁定技，结束阶段开始时，若你处于爆发状态，你视为使用了一张【万箭齐发】，并依次视为使用了三张【杀】，然后你的下个准备阶段，你退出爆发状态。",
                    niuzhuanb: "扭转",
                    "niuzhuanb_info": "锁定技，你的体力上限变化后，若你的体力上限小于9/大于99，你增加/减少9点体力上限，然后你回复1点体力。当一个效果即将使你的体力上限小于1时，你增加9点体力上限。",
                    ////
                    mode_boss_card_config: '战场卡牌',
                    mode_boss_character_config: '战场武将',
                },
                get: {
                    rawAttitude: function (from, to) {
                        var num = (to.identity == 'zhong') ? 5 : 6;
                        return (from.side === to.side ? num : -num);
                    }
                }
            }, {
                translate: "战场",
                config: {
                    galgame: {
                        name: "记忆战场",
                        init: true,
                    }
                },
                onremove: function () {
                    game.clearModeConfig('bhzhanchang');
                },
            });
            lib.config.all.characters.push('bbb');
            if (!lib.config.characters.contains('bbb')) lib.config.characters.remove('bbb');
            lib.translate['bbb_character_config'] = '<span style=\"color: blue\">崩</span><span style=\"color: yellow\">崩</span><span style=\"color: pink\">崩</span>';

        }, help: {}, config: {
            //扩展介绍
            KZJS: {
				name: '<div><font size="4px" color="#FFE4E1">扩展介绍</font>⇨</div>',
                intro:"点击查看扩展介绍",
				clear: true,
				onclick: function () {
					if (this.KZJS == undefined) {
						var more = ui.create.div('.KZJS', '<div style="border: 1px solid gray;text-align:left;">' +
							'<font size=2px>' +
							'本扩展为崩坏3同人自制扩展，范围为<span style=\"color: blue\">角色</span>，<span style=\"color: yellow\">圣痕</span>以及</span><span style=\"color: pink\">部分剧情角色</span>等，意在自娱自乐以及供同好一起娱乐，因此设计与强度较为随意，从标风至阴风不等。'+
                            '<br>本扩展中大部分角色ai比较简单，在部分情况下会出现睿智操作，有少数角色ai未实装，如遇智障人机可以酌情设置<span style=\"color: blue\">仅自由选将可用</span>。'+
                            '<br>如在使用过程中遇到bug或其他问题的，请与作者联系解决。'+
                            '</font></div>');
						this.parentNode.insertBefore(more, this.nextSibling);
						this.KZJS = more;
						this.innerHTML = '<div><font size="4px" color="#CFCFCF">扩展介绍</font>⇩</div>';
					} else {
						this.parentNode.removeChild(this.KZJS);
						delete this.KZJS;
						this.innerHTML = '<div><font size="4px" color="#FFE4E1">扩展介绍</font>⇨</div>';
					};
				}
			},
            //制作人名单
            membersList:{
                name: '<div><font size="4px" color="#99ff99">制作成员</font>⇨</div>',
                intro:"点击查看制作成员",
				clear: true,
				onclick: function () {
					if (this.membersList == undefined) {
						var more = ui.create.div('.membersList', '<div style="text-align:center;">' +
							'<font size="3px"; color=#D1EEEE>武将设计</font><br>'+
                            '<font size=2px>Ezie、Argon</font><br><hr>'+
                            '<font size="3px"; color="#BA55D3">代码实现</font><br>'+
                            '<font size=2px>Argon<br><hr>'+
                            '<font size="3px"; color=#D1EEEE>技术支援</font><br>'+
                            '<font size=2px>德克萨斯</font><br>'+
                            '</div>');
						this.parentNode.insertBefore(more, this.nextSibling);
						this.membersList = more;
						this.innerHTML = '<div><font size="4px" color="gold">制作成员</font>⇩</div>';
					} else {
						this.parentNode.removeChild(this.membersList);
						delete this.membersList;
						this.innerHTML = '<div><font size="4px" color="#99ff99">制作成员</font>⇨</div>';
					};
				}
            },
            //战场模式介绍
            zhanchangContent: {
                clear: true,
                name: '点击显示<span style=" color:#ff66cc;">战场模式说明</span>',
                intro: '点击显示记忆战场模式说明',
                onclick: function () {
                    if (typeof fetch != 'function') throw '不支持fetch函数，无法使用此功能';
                    lib.init.css(lib.assetURL + "extension/崩崩崩", "extension");
                    
                    let layer = ui.create.div(ui.window, '.updateContent');
                    let close = ui.create.div(layer, '.updateContentClose', () => {
                        layer.remove();
                    });
                    fetch(lib.assetURL + 'extension/崩崩崩/zhanchangContent')
                        .then(response => response.text()).then(txt => {
                            let content = ui.create.div(layer, {
                                innerHTML: txt,
                            });
                        }).catch(err => {
                            var txt='<h1 class=updateContent1>模式说明</h1>'+
                            '<p class=updateContent1>战场模式为特殊的挑战模式，在不使用自由选将的情况下仅可使用【崩崩崩】扩展包角色进行挑战'+
                            '记忆战场模式常驻有3个Boss，在挑战Boss胜利后，会根据所用轮数，对应为崩三游戏内的秒数进行战场分数结算'+
                            '挑战时，如需要更换操纵权，请使用选项-右上角-换人'+
                            '每次更新时，记忆战场的三个Boss阵容会有所替换</p>';
                            let content = ui.create.div(layer, {
                                innerHTML: txt,
                            });
                        });
                },
            },
            //更新日志
            lodeUpdateContent: {
                clear: true,
                name: '点击显示<span style="color:#66ffff;">更新日志</span>',
                intro: '点击显示本扩展历史更新内容',
                onclick: function () {
                    if (typeof fetch != 'function') throw '不支持fetch函数，无法使用此功能';
                    lib.init.css(lib.assetURL + "extension/崩崩崩", "extension");
                    fetch(lib.assetURL + 'extension/崩崩崩/updateContent')
                        .then(response => response.text()).then(txt => {
                            let layer = ui.create.div(ui.window, '.updateContent');
                            let close = ui.create.div(layer, '.updateContentClose', () => {
                                layer.remove();
                            });
                            let content = ui.create.div(layer, {
                                innerHTML: txt,
                            });
                        }).catch(err => {
                            console.error("获取文本内容失败，请在扩展文件夹打开对应html文件查看", err);
                            alert("获取文本内容失败，请在扩展文件夹打开对应html文件查看");
                        });
                },
            },
            // libraryHtml:{
            //     name: '<div><font size="4px" color="#FFE4E1">资料库</font>⇨</div>',
            //     intro:"点击查看资料库",
			// 	clear: true,
			// 	onclick: function () {
            //         const  shell= require('electron').shell;
            //         shell.openExternal('https://www.baidu.com');
            //         //shell.openExternal(lib.assetURL +'extension/崩崩崩/strat.html');
			// 	}
            // },

            splitLine:{
                clear:true,
                name:"<hr>",
            },

            //补给系统
            supplySystem:{
                name:'<span style="color:#ffff33">补给系统</span>',
                init:false,
                intro:"该版本为纯净版，暂无<font color=#00ffcc>补给系统</font>的相关功能，若需要请使用完整版进行替换",
            },

            splitLine2:{
                clear:true,
                name:"<hr>",
            },
        }, package: {
            character: {
                character: {

                },
                translate: {

                },
            },
            card: {
                card: {

                },
                translate: {

                },
                list: [],
            },
            skill: {
                skill: {

                },
                translate: {

                },
            },
            intro: "<span style=\"color: blue\">崩</span><span style=\"color: yellow\">崩</span><span style=\"color: pink\">崩</span> "+
                "版本<span style='color:orange;'>1.3.2</span><br>扩展交流群：657499832<br>"+
                "首次导入后，请<span style=\"color: red\">在武将/卡牌中选择开启</span>并<span style=\"color: red\">重启游戏</span><br>" +
                "若不想使用本扩展的内容，<span style=\"color: red\">请直接删除扩展，不要关闭扩展</span>，关闭扩展可能导致未知问题引起程序报错<hr> ",
            author: "Argon",
            diskURL: "",
            forumURL: "",
            version: "1.3.2",
        }, files: { "character": [], "card": [], "skill": [] }
    }
})